/**
 *  Boomerang for Gmail Bookmarklet
 * 
 *  Structure of this page:
 *  1. Globals
 *  2. Extension Setup
 *      a. Browser detection
 *      b. Navigation
 *      c. CSS Injection
 *      d. Javascript Injection
 *      e. Google Analytics
 *      f. Troubleshooting
 *  3. Gmail UI Grabbers
 *  4. Gmail UI Manipulation
 *  5. B4G Main Loop
 *  6. B4G Button/Menu Insertion
 *    a. Shared Menu Functions
 *    b. Menu Customization
 *  7. Boomerang 
 *    a. Read View Boomerang
 *    b. Boomerang On Send
 *    c. Notes
 *    d. Bulk Boomerang
 *  8. Send Later
 *      a. Edit flow
 *  9. Recurring
 *  10. Read Receipt
 *  11. Settings
 *      a. Keyboard shortcuts
 *  12. Inline-Manage
 *  13. CRM
 *  14. Respondable
 *  15. Inbox Pause
 *      a. Selector/Helper Functions
 *      b. Date Helper Functions
 *      c. Settings Auth
 *      d. Pause Sync Logic
 *  16. BCal Features
 *  17. Boomerang Plan Logic
 *      a. Credit card
 *      b. Coupon
 *      c. Plan Types
 *      d. Nag Screens
 *  18. Authentication
 *  19. Helper Functions:
 *      a. Date code
 *      b. Email code
 *      c. Requests code
 *      d. Local Storage
 *  20. Tutorials
 *      a. FTUEs (first time user experience)
 *      b. Viral hooks
 *  21. External Libraries
 *  22. Outside the Closure
 *      a. Respondable Web Worker
 *      b. Social Network API
 */

/* Begin B4G closure */
(function(){


/**
 * 1. Globals
 */

var IS_MANIFEST_V3 = true;

var B4G_STATIC_FILES_DIRECTORY = "https://s3.amazonaws.com/BoomerangForGmail/bookmarklet/";
if (!IS_MANIFEST_V3) {
    B4G_STATIC_FILES_DIRECTORY = "https://s3.amazonaws.com/BoomerangForGmail/bookmarklet/";
}



var frameDoc = get_frame(); // the gmail frame
var the_date = null; // used for date previews
var GMAIL_USER = null; // the currently signed-in gmail user. Once set with an address, it won't change.
var SEND_LATER_MORNING_OFFSET = 9.5;
var BOOMERANG_MORNING_OFFSET = 6;
var from_priority_inbox = false;
var last_date_selected = null;
var BOOMERANG_URL = "https://b4g.baydin.com/";
var POSSIBLE_RESPONSES = [
  "success",
  "success",
  "Boomerang encountered a problem during authentication. Ask Boomerang to send this message again, and we will log you back in.",
  "Boomerang was not able to access the Sent Mail folder. Please enable IMAP and allow Sent Mail to be shown in IMAP.",
  "403 Not Authenticated",
  "Boomerang was not able to access the Drafts folder. Please enable IMAP and allow Drafts to be shown in IMAP.",
  "Boomerang was not able to access the Boomerang-Outbox folder. Please enable IMAP and allow the Boomerang-Outbox label to be shown in IMAP.",
  "Boomerang was not able to access the Inbox. Please enable IMAP. In addition, please allow All Mail to be shown in IMAP.",
  "Boomerang was not able to access the All Mail folder. Please enable IMAP. In addition, please allow All Mail to be shown in IMAP.",
  "Boomerang cannot uniquely identify this email, because there is another draft with the same subject and recipient. Please change the subject and try again.",
  "Boomerang cannot uniquely identify this email, because there is another email in the Boomerang-Outbox with the same subject and recipient. Please change the subject and try again.",
  "Boomerang was unable to find this Draft. Please allow the draft to save again after a couple seconds, then try again. If you are still unsuccessful and you don't mind sharing this message to help improve our product, please forward to support@baydin.com",
  "Boomerang was not able to locate this email. Please try again. If you are still unsuccessful and you don't mind sharing this email to help us improve our product, please forward it to support@baydin.com.",
  "You've reached the maximum number of messages that can be delivered at the time that you specified. Please adjust your delivery time to be at least two minutes apart from your other messages and try again.",
  "Invalid date.",
  "Boomerang was not able to identify the sender of this email. One possible conflict is the Gmail Labs: Authentication icon for verified senders. If you do not have this Labs enabled, please let us know at support@baydin.com.",
  "Boomerang encountered a problem while processing this email. Please try again. If you are still unsuccessful and you don't mind sharing this email to help us improve our product, please forward it to support@baydin.com",
  "nag_screen_1",
  "nag_screen_2",
  "nag_screen_3",
  "paywall",
  "pro",
  "personal",
  "basic",
  "none",
  "account error",
  "Boomerang was not able to access the Boomerang folder. Please enable IMAP and allow the Boomerang label to be shown in IMAP.",
  "Boomerang was not able to access the Boomerang Outbox folder. Please enable IMAP and allow the Boomerang-Outbox label to be shown in IMAP.",
  "Third party cookies must be enabled for Boomerang to work, but they are not currently enabled in your browser.<br/><br/> Please enable them, or create exceptions for <strong>b4g.baydin.com</strong> and <strong>mail.google.com</strong>. For information on how to do this, please visit the help page for your browser: <br /><a target='_blank' href='http://support.google.com/chrome/bin/answer.py?hl=en&answer=95647'>Chrome</a> | <a target='_blank' href='http://support.mozilla.org/en-US/kb/Enabling%20and%20disabling%20cookies'>Firefox</a> | <a target='_blank' href='https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac'>Safari</a>",
  "You have scheduled too many messages to be sent during that 24-hour period. This message was NOT scheduled. Please schedule your message to be sent at least 24 hours earlier or later. If you want to remove this limit, please upgrade to a paid plan.",
  "premium",
  "Boomerang doesn't support attaching Google+ Photos at this time. Please download this photo to your computer and drag-and-drop the saved copy into the email instead. Alternatively, add it as a regular attachment to the email.",
  "<p style='font-size:15px; font-weight: bold;'>Attempt failed: Boomerang was unable to connect to your Gmail account.</p><p>Why is this happening?</p><p>Gmail places a limit on the number of app connections to your account at the same time. Some apps may open multiple connections to your account or even use connections when you aren't using them. Boomerang never opens multiple connections to your account.</p><p>In order for Boomerang to access your account, <strong>you will need to reduce the number of other apps accessing your account.</strong> Here is how to do this:</p><p>1. Check your recent Gmail app activity:</p><ol><li>On your computer, open Gmail.</li><li>In the bottom right, click Details.</li></ol><p>2. Stop apps from connecting to your Gmail account:</p><ol><li>Open the <a href='https://myaccount.google.com/permissions'>\"Apps with access to your account\"</a> section of your Google Account. You might need to sign in.</li><li>Choose the site or app you want to remove and click Remove Access.</li></ol><p>Please try Boomerang again after completing these steps.</p>"
  ];

var PLACEHOLDER = 0;
var SUCCESS = 1;
var CANNOT_FIND = 12;
var ERROR = 16;


var NAG_SCREEN_ONE = 17;
var NAG_SCREEN_TWO = 18;
var NAG_SCREEN_THREE = 19;

var B4G_MAIN_LOOP_LOAD_JQUERY_UI_ATTEMPTS = 0;

function is_nag_status(b4gStatus)
{
    return b4gStatus === NAG_SCREEN_ONE || b4gStatus === NAG_SCREEN_TWO || b4gStatus === NAG_SCREEN_THREE || b4gStatus >= NAG_SCREEN_REFERRAL;
}

var PAYWALL = 20;
var NAG_SCREEN_REFERRAL = 100;

var ACCOUNT_PRO = 21;
var ACCOUNT_PERSONAL = 22;
var ACCOUNT_BASIC = 23;
var ACCOUNT_NONE = 24;
var ACCOUNT_ERROR = 25;
var ACCOUNT_PREMIUM = 30;

var THIRD_PARTY_COOKIES = 28;

var HAS_NOT_SCHEDULED = 1;
var HAS_SCHEDULED = 2;

var HAS_SEEN_TUTORIAL = 1;
var HAS_NOT_SEEN_TUTORIAL = 2;

var CHROME_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.95; filter:alpha(opacity=95);'><img id='blue-arrow' style='position:absolute;top:100px;right:100px;visibility:hidden;' width='200px' height='266px' src='" + B4G_STATIC_FILES_DIRECTORY + "bluegiantarrow2.png' /><div id='dialog' style='height:auto; position:absolute; left:0; right:0;'><div id='title-bar'>Authenticating...</div><div class='dialog-content' style='text-align:center;'><img src='" + B4G_STATIC_FILES_DIRECTORY + "auth-loader.gif'/></div></div></div>";
var EDGE_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.95; filter:alpha(opacity=95);'><img id='blue-arrow' style='position:absolute;bottom:150px;right:calc(50% - 400px);visibility:hidden;' width='200px' height='266px' src='" + B4G_STATIC_FILES_DIRECTORY + "bluegiantarrowedge.png' /><div id='dialog' style='height:auto; position:absolute; left:0; right:0;'><div id='title-bar'>Authenticating...</div><div class='dialog-content' style='text-align:center;'><img src='" + B4G_STATIC_FILES_DIRECTORY + "auth-loader.gif'/></div></div></div>";
var OTHER_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.9; filter:alpha(opacity=9);'></div>";
var CHROME_AUTH_INSTRUCTIONS = "If you did not see an authentication window, please allow pop-ups for mail.google.com. <ol><li>Click this icon in the upper right corner of your browser window: <img src='" + B4G_STATIC_FILES_DIRECTORY + "popupblockericon.jpg' style='padding-top:5px;padding-bottom:5px;'/> </li><li>Select <strong>\"Always allow popups from mail.google.com\"</strong>.</li><li><a class='auth-reload'>Refresh</a> the page, and try again.</li></ol>";
var OPERA_AUTH_INSTRUCTIONS = "If you did not see an authentication window, please allow pop-ups for mail.google.com. <ol><li>Click this icon in the upper right corner of your browser window: <img src='" + B4G_STATIC_FILES_DIRECTORY + "operapopupblockericon.png' style='padding-top:5px;padding-bottom:5px;'/> </li><li>Select <strong>\"Always allow popups from mail.google.com\"</strong>.</li><li><a class='auth-reload'>Refresh</a> the page, and try again.</li></ol>";
var EDGE_AUTH_INSTRUCTIONS = "If you did not see an authentication window, please allow pop-ups for mail.google.com. <ol><li>Select <strong>\"Always allow\"</strong> at the bottom of your browser window. <img src='" + B4G_STATIC_FILES_DIRECTORY + "edgepopupblockericon.png' style='padding-top:5px;padding-bottom:5px;'/> </li><li><a class='auth-reload'>Refresh</a> the page, and try again.</li></ol>";
var FIREFOX_POP_UP_DIALOG = "<div id='error_dialog' style=''><ol><li>Do you have a pop-up blocker enabled?<br/><b>Click 'Options' or 'Preferences'</b> in the notification bar above, click on <b>'Allow pop-ups on mail.google.com'</b>, and <a class='auth-reload'>refresh</a>.</li> <li>Added the exception to your pop-up blocker but still getting this? <br/> <a href='https://help.boomeranggmail.com/category/221-troubleshooting'>Click here</a> to troubleshoot.</a></li></div>";
var SAFARI_AUTH_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.9;filter:alpha(opacity=90);'><div id='dialog' style='height:100px'><div id='title-bar'>Logging in...</div><div class='dialog-content'> Please <a id='safari-boomerang' class='auth-reload'>click here</a> so we can log you in with Boomerang.</div></div></div>";
var SAFARI_ITP_WARNING_AUTH_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.9;filter:alpha(opacity=90);'><div id='dialog' style='height:180px'><div id='title-bar'>Logging in...</div><div class='dialog-content'> Please <a id='safari-boomerang' class='auth-reload'>click here</a> so we can log you in with Boomerang.<p style='color:#0F3436;'>Issues with cookies in Safari may be causing issues with our login process. <strong>Until this is fixed, please try <a href='https://help.boomeranggmail.com/article/269-safari-login-loop'>the steps here</a> or use one of our other supported browsers: Chrome, Firefox, Opera, or Edge.</strong></p></div></div></div>";
var SAFARI_EDIT_OVERLAY = "<div class='overlay' style='background:#bcbcbc; opacity:0.9;filter:alpha(opacity=90);'><div id='dialog' style='height:100px'><div id='title-bar'><span id='safari-dialog-close' class='auth-reload' style='position: relative; left: -60px;'>X</span> Leaving to edit...</div><div class='dialog-content'> Please <a id='safari-boomerang' class='auth-reload'>click here</a> to begin editing your message.</div></div></div>";
var BULK_OVERLAY = "<div class='overlay' style='background: #FFF; opacity: 0.1; filter:alpha(opacity=1);'></div>"
var INBOX_PAUSE_OVERLAY = "<div class='ibp-overlay' style='background: #666666; opacity: 0.50; filter:alpha(opacity=50);position:absolute; left:0px; top:0px; width:100%; height:100%; z-index:1000;'></div>";
var SHARE_FREE_BUSY_CUSTOM_RANGE_OVERLAY = "<div class='b4c-share-free-busy-custom-range-overlay' style='background: #666666; opacity: 0.50; filter:alpha(opacity=50);position:absolute; left:0px; top:0px; width:100%; height:100%; z-index:1000;'></div>";
var SHARE_FREE_BUSY_VIDEO_OVERLAY = "<div class='b4c-share-free-busy-video-overlay' style='background: #666666; opacity: 0.50; filter:alpha(opacity=50);position:absolute; left:0px; top:0px; width:100%; height:100%; z-index:1000;'></div>";

var INBOX_PAUSE_GENERAL_TOOLTIP_TEXT = "While you have your Inbox paused, all\nyour new messages will be rerouted to\na special label. You won't see them\nuntil you unpause. We will move all of\nthose messages back into your Inbox\nwhen you unpause.";

var REFERRAL_SUBJ = "You should try Boomerang for Gmail";
var REFERRAL_BODY = "Hey,\r\nI thought you might like this awesome Gmail plugin I have been using.\r\n\r\nHere are some of the things you can do with Boomerang:\r\n1. Write messages now and schedule them to deliver at any time\r\n2. Schedule messages to return to your inbox at a later time\r\n3. Remind yourself to follow up on messages that don't get a response within a certain time\r\n\r\n";
    

var CANT_ACCESS_SENT_MAIL = 3;
var UNAUTHENTICATED_RESPONSE = 4;

var EMAIL_REGEX = /[a-zA-Z0-9\._+\-]+@[a-zA-Z0-9\.\-]+\.[a-z\.A-Z]+/g;

function validate_email(email) {
    var reg = /^[a-zA-Z0-9\._+\-]+@[a-zA-Z0-9\.\-]+\.[a-z\.A-Z]+$/;
    return (reg.test($.trim(email)));
}

var SEND_LATER_CLOSE_NEW_COMPOSE_WINDOW_DELAY = 0;
var SEND_LATER_REDIRECT_DELAY = 0;

var WEEK=new Array(7);
WEEK[0]="Monday";
WEEK[1]="Tuesday";
WEEK[2]="Wednesday";
WEEK[3]="Thursday";
WEEK[4]="Friday";
WEEK[5]="Saturday";
WEEK[6]="Sunday";

var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

// Billing Info
var NO_BILLING_ACCOUNT = 1;
var ACCOUNT_IN_GOOD_STANDING = 2;
var ACCOUNT_NEEDS_CREDIT_CARD_UPDATE = 3;
var LOCAL_STORAGE_DATE_STRING_FORMAT = "ddd, dd MMM yyyy HH:mm:ss";

// Coupon Status
var ELIGIBLE_FOR_COUPON = 1;
var NOT_ELIGIBLE_FOR_COUPON = 2;

// Gmail Migration
var OLD_GMAIL = 1;
var NEW_DATA_LAYER = 2;
var NEW_GMAIL = 3;

// Safari Login Loop Detection
var SAFARI_LOGIN_ALREADY_ATTEMPTED = false;

var _storage = {
    // Why are these functions needlessly asynchronous?  Because once upon a time we used a helper
    // iframe to store data locally.  We did this to avoid data conflicts with gmail and other
    // plugins.  Unfortunately gmail introduced a new Content Security Policy that prevented 3rd
    // party iframes from loading.  So now we're back to storing things on the mail.google.com
    // damain.  This happened on Oct 2nd, 2014.  -Xavi
    read: function(key, callback) {
        setTimeout(function() {
            var val = read_from_html5_storage(key);
            callback(null, val);
        }, 0);
    },
    write: function(key, val, callback) {
        write_to_html5_storage(key, val);
        setTimeout(function() { callback(null); }, 0);
    }
};

/**
 * 2. Extension Setup
 */

window.boomerang4gmail = window.boomerang4gmail || {};

var $, jQuery; // Reference to our own copy of jQuery

/**
 * 2a. Browser Detection
 *      Browser detection code originally from quirksmode.org/js/detect.html (since removed from that page) 
 *      We edited to include the new version of Opera
 */

var BrowserDetect={init:function(){this.browser=this.searchString(this.dataBrowser)||"An unknown browser";this.version=this.searchVersion(navigator.userAgent)||this.searchVersion(navigator.appVersion)||"an unknown version";this.OS=this.searchString(this.dataOS)||"an unknown OS";},searchString:function(data){for(var i=0;i<data.length;i++){var dataString=data[i].string;var dataProp=data[i].prop;this.versionSearchString=data[i].versionSearch||data[i].identity;if(dataString){if(dataString.indexOf(data[i].subString)!==-1)
  {return data[i].identity;}}
else if(dataProp)
  {return data[i].identity;}}},searchVersion:function(dataString){var index=dataString.indexOf(this.versionSearchString);if(index===-1){return;}return parseFloat(dataString.substring(index+this.versionSearchString.length+1));},dataBrowser:[{string:navigator.userAgent,subString:"Edge",identity:"Edge"},{string:navigator.userAgent,subString:"OPR",identity:"Opera"},{string:navigator.userAgent,subString:"Chrome",identity:"Chrome"},{string:navigator.userAgent,subString:"OmniWeb",versionSearch:"OmniWeb/",identity:"OmniWeb"},{string:navigator.vendor,subString:"Apple",identity:"Safari",versionSearch:"Version"},{string:navigator.vendor,subString:"iCab",identity:"iCab"},{string:navigator.vendor,subString:"KDE",identity:"Konqueror"},{string:navigator.userAgent,subString:"Firefox",identity:"Firefox"},{string:navigator.vendor,subString:"Camino",identity:"Camino"},{string:navigator.userAgent,subString:"Netscape",identity:"Netscape"},{string:navigator.userAgent,subString:"MSIE",identity:"Explorer",versionSearch:"MSIE"},{string:navigator.userAgent,subString:"Gecko",identity:"Mozilla",versionSearch:"rv"},{string:navigator.userAgent,subString:"Mozilla",identity:"Netscape",versionSearch:"Mozilla"}],dataOS:
    [{string:navigator.platform,subString:"Win",identity:"Windows"},{string:navigator.platform,subString:"Mac",identity:"Mac"},{string:navigator.userAgent,subString:"iPhone",identity:"iPhone/iPod"},{string:navigator.platform,subString:"Linux",identity:"Linux"}]};

BrowserDetect.init();
var browser_name = "none";

switch(BrowserDetect.browser){
case "Chrome":
  browser_name = "Chrome";
  break;
case "Firefox":
  browser_name = "Firefox";
  break;
case "Safari":
  if (BrowserDetect.version < 5.1)
  {
    browser_name = "Old Safari";
  }
  else
  {
    browser_name = "Safari";
  }
  break;
case "Opera":
  browser_name = "Opera";
  break;
case "Edge":
  browser_name = "Edge";
  break;
default:
  browser_name = "Other";
break;
}

// Workaround: From reading Opera source code, it looks like Opera modifies its useragent on google web sites.
// To get around this, we having the B4G Opera extension leave a global variable on the page
if (window.B4G_THIS_IS_OPERA) {
  browser_name = "Opera";
}
if (window.B4G_THIS_IS_EDGE) {
  browser_name = "Edge";
}

/**
 * 2b. Navigation
 */

var ConfirmNavigateAway = false;
window.onbeforeunload = function(){
  if (ConfirmNavigateAway)
  {
    if (browser_name === "Firefox"){
      alert("You are editing a message that you previously scheduled with Boomerang. DO NOT LEAVE THIS PAGE WITHOUT RESCHEDULING. \n\nIf you do, you will CANCEL SENDING THIS MESSAGE ALTOGETHER and the message will remain in your Drafts folder.");
    }
    return ("You are editing a message that you previously scheduled with Boomerang. DO NOT LEAVE THIS PAGE WITHOUT RESCHEDULING. \n\nIf you do, you will CANCEL SENDING THIS MESSAGE ALTOGETHER and the message will remain in your Drafts folder.");
  }
};

/**
 * 2c. CSS Injection
 */

if (!IS_MANIFEST_V3) {
  // This is not run in Manifest v3, which prevents remote code
  // In Manifest v3, the injection takes place at the manifest level instead
  var headID = document.getElementsByTagName("head")[0];
  function inject_css(tries) {
      tries = tries || 0;

      var cssNode;

      if(!document.getElementById("b4g-style-css")) {
          cssNode = document.createElement('link');
          cssNode.id = "b4g-style-css";
          cssNode.type = 'text/css';
          cssNode.rel = 'stylesheet';
          cssNode.href = B4G_STATIC_FILES_DIRECTORY + 'css/extensionsafestyle.css?v=3';
          cssNode.media = 'screen';
          cssNode.onerror = function() {
              var link = document.getElementById("b4g-style-css");
              link.parentElement.removeChild(link);
              if(tries < 10) { inject_css(tries + 1); }
          };
          headID.appendChild(cssNode);
      }

      if(!document.getElementById("b4g-jqueryui-css")) {
          cssNode = document.createElement('link');
          cssNode.id = "b4g-jqueryui-css";
          cssNode.type = 'text/css';
          cssNode.rel = 'stylesheet';
          cssNode.href = B4G_STATIC_FILES_DIRECTORY + 'css/extensionsafejqueryui.css';
          cssNode.media = 'screen';
          cssNode.onerror = function() {
              var link = document.getElementById("b4g-jqueryui-css");
              link.parentElement.removeChild(link);
              if(tries < 10) { inject_css(tries + 1); }
          };
          headID.appendChild(cssNode);
      }
  }
}

/**
 * 2d. Javascript Injection
 */



var _params;
function parse_url_params() {
    _params = {};

    var loc = window.location.toString();
    var idxQ = loc.indexOf("?");
    var idxH = loc.lastIndexOf("#");

    if(idxQ < 0) { return; }
    if(idxH < 0) { idxH = loc.length; }

    var pairs = loc.substring(idxQ + 1, idxH).split("&");
    pairs.forEach(function(pair) {
        var idxE = pair.indexOf("=");
        _params[pair.substr(0, idxE)] = pair.substr(idxE + 1);
    });
}

var jqLoadTimer;
var loc = String(document.location);
function inject_all_js_and_css_and_run_boomerang() {
    if (
        loc === top.location.toString() && // only load b4g on top level frame
        loc.indexOf('ContactManager') < 0 && // workaround for Firefox 4 Google Apps Contacts
        loc.indexOf("mu/mp") < 0 && // don't run in offline gmail
        loc.indexOf("mail.google.com/chat/u") < 0 && // don't run in Google Chat
        loc.indexOf("mail-static") === -1 && // don't run in gmail's hidden iframes
        window.innerWidth > 1 && // don't run in gmail's hidden iframes
        window.innerHeight > 1 && // ditto
        document.body.contentEditable !== "true" && // don't run in edit areas
        document.body.className.indexOf("editable") === -1 // ditto
    ) {
        parse_url_params();

      /*!
       * jQuery JavaScript Library v1.5.2
       * http://jquery.com/
       *
       * Copyright 2011, John Resig
       * Dual licensed under the MIT or GPL Version 2 licenses.
       * http://jquery.org/license
       *
       * Includes Sizzle.js
       * http://sizzlejs.com/
       * Copyright 2011, The Dojo Foundation
       * Released under the MIT, BSD, and GPL Licenses.
       *
       * Date: Thu Mar 31 15:28:23 2011 -0400
       */ !function(e,o){var c=e.document,a=function(){var f,b,n,d,a=function(b,c){return new a.fn.init(b,c,f)},p=e.jQuery,q=e.$,r=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,g=/\S/,h=/^\s+/,i=/\s+$/,s=/\d/,t=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,u=/^[\],:{}\s]*$/,v=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,w=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,x=/(?:^|:|,)(?:\s*\[)+/g,y=/(webkit)[ \/]([\w.]+)/,z=/(opera)(?:.*version)?[ \/]([\w.]+)/,A=/(msie) ([\w.]+)/,B=/(mozilla)(?:.*? rv:([\w.]+))?/,j=navigator.userAgent,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,k=Array.prototype.push,E=Array.prototype.slice,l=String.prototype.trim,m=Array.prototype.indexOf,F={};function G(){if(!a.isReady){try{c.documentElement.doScroll("left")}catch(b){setTimeout(G,1);return}a.ready()}}return a.fn=a.prototype={constructor:a,init:function(b,d,h){var e,g,f,i;if(!b)return this;if(b.nodeType)return this.context=this[0]=b,this.length=1,this;if("body"===b&&!d&&c.body)return this.context=c,this[0]=c.body,this.selector="body",this.length=1,this;if("string"==typeof b){if((e=r.exec(b))&&(e[1]||!d)){if(e[1])return i=(d=d instanceof a?d[0]:d)?d.ownerDocument||d:c,(f=t.exec(b))?a.isPlainObject(d)?(b=[c.createElement(f[1])],a.fn.attr.call(b,d,!0)):b=[i.createElement(f[1])]:b=((f=a.buildFragment([e[1]],[i])).cacheable?a.clone(f.fragment):f.fragment).childNodes,a.merge(this,b);if((g=c.getElementById(e[2]))&&g.parentNode){if(g.id!==e[2])return h.find(b);this.length=1,this[0]=g}return this.context=c,this.selector=b,this}return!d||d.jquery?(d||h).find(b):this.constructor(d).find(b)}return a.isFunction(b)?h.ready(b):(o!==b.selector&&(this.selector=b.selector,this.context=b.context),a.makeArray(b,this))},selector:"",jquery:"1.5.2",length:0,size:function(){return this.length},toArray:function(){return E.call(this,0)},get:function(a){return null==a?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(c,d,e){var b=this.constructor();return a.isArray(c)?k.apply(b,c):a.merge(b,c),b.prevObject=this,b.context=this.context,"find"===d?b.selector=this.selector+(this.selector?" ":"")+e:d&&(b.selector=this.selector+"."+d+"("+e+")"),b},each:function(b,c){return a.each(this,b,c)},ready:function(b){return a.bindReady(),n.done(b),this},eq:function(a){return -1===a?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(E.apply(this,arguments),"slice",E.call(arguments).join(","))},map:function(b){return this.pushStack(a.map(this,function(a,c){return b.call(a,c,a)}))},end:function(){return this.prevObject||this.constructor(null)},push:k,sort:[].sort,splice:[].splice},a.fn.init.prototype=a.fn,a.extend=a.fn.extend=function(){var g,f,d,c,h,i,b=arguments[0]||{},e=1,k=arguments.length,j=!1;for("boolean"==typeof b&&(j=b,b=arguments[1]||{},e=2),"object"==typeof b||a.isFunction(b)||(b={}),k===e&&(b=this,--e);e<k;e++)if(null!=(g=arguments[e]))for(f in g)d=b[f],c=g[f],b!==c&&(j&&c&&(a.isPlainObject(c)||(h=a.isArray(c)))?(h?(h=!1,i=d&&a.isArray(d)?d:[]):i=d&&a.isPlainObject(d)?d:{},b[f]=a.extend(j,i,c)):c!==o&&(b[f]=c));return b},a.extend({noConflict:function(b){return e.$=q,b&&(e.jQuery=p),a},isReady:!1,readyWait:1,ready:function(b){if(!0===b&&a.readyWait--,!a.readyWait|| !0!==b&&!a.isReady){if(!c.body)return setTimeout(a.ready,1);a.isReady=!0,!(!0!==b&& --a.readyWait>0)&&(n.resolveWith(c,[a]),a.fn.trigger&&a(c).trigger("ready").unbind("ready"))}},bindReady:function(){if(!n){if(n=a._Deferred(),"complete"===c.readyState)return setTimeout(a.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",d,!1),e.addEventListener("load",a.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",d),e.attachEvent("onload",a.ready);var b=!1;try{b=null==e.frameElement}catch(f){}c.documentElement.doScroll&&b&&G()}}},isFunction:function(b){return"function"===a.type(b)},isArray:Array.isArray||function(b){return"array"===a.type(b)},isWindow:function(a){return a&&"object"==typeof a&&"setInterval"in a},isNaN:function(a){return null==a||!s.test(a)||isNaN(a)},type:function(a){return null==a?String(a):F[C.call(a)]||"object"},isPlainObject:function(b){var c;if(!b||"object"!==a.type(b)||b.nodeType||a.isWindow(b)||b.constructor&&!D.call(b,"constructor")&&!D.call(b.constructor.prototype,"isPrototypeOf"))return!1;for(c in b);return c===o||D.call(b,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){return"string"==typeof b&&b?(b=a.trim(b),u.test(b.replace(v,"@").replace(w,"]").replace(x,"")))?e.JSON&&e.JSON.parse?e.JSON.parse(b):new Function("return "+b)():void a.error("Invalid JSON: "+b):null},parseXML:function(d,b,c){return e.DOMParser?b=(c=new DOMParser).parseFromString(d,"text/xml"):((b=new ActiveXObject("Microsoft.XMLDOM")).async="false",b.loadXML(d)),(c=b.documentElement)&&c.nodeName&&"parsererror"!==c.nodeName||a.error("Invalid XML: "+d),b},noop:function(){},globalEval:function(b){if(b&&g.test(b)){var e=c.head||c.getElementsByTagName("head")[0]||c.documentElement,d=c.createElement("script");a.support.scriptEval()?d.appendChild(c.createTextNode(b)):d.text=b,e.insertBefore(d,e.firstChild),e.removeChild(d)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(b,e,f){var c,d=0,g=b.length,i=g===o||a.isFunction(b);if(f){if(i){for(c in b)if(!1===e.apply(b[c],f))break}else for(;d<g&& !1!==e.apply(b[d++],f););}else if(i){for(c in b)if(!1===e.call(b[c],c,b[c]))break}else for(var h=b[0];d<g&& !1!==e.call(h,d,h);h=b[++d]);return b},trim:l?function(a){return null==a?"":l.call(a)}:function(a){return null==a?"":a.toString().replace(h,"").replace(i,"")},makeArray:function(b,e){var c=e||[];if(null!=b){var d=a.type(b);null==b.length||"string"===d||"function"===d||"regexp"===d||a.isWindow(b)?k.call(c,b):a.merge(c,b)}return c},inArray:function(c,a){if(a.indexOf)return a.indexOf(c);for(var b=0,d=a.length;b<d;b++)if(a[b]===c)return b;return -1},merge:function(a,b){var d=a.length,c=0;if("number"==typeof b.length)for(var e=b.length;c<e;c++)a[d++]=b[c];else for(;o!==b[c];)a[d++]=b[c++];return a.length=d,a},grep:function(b,e,c){var d=[];c=!!c;for(var a=0,f=b.length;a<f;a++)!!e(b[a],a)!==c&&d.push(b[a]);return d},map:function(c,e,f){for(var d,a=[],b=0,g=c.length;b<g;b++)null!=(d=e(c[b],b,f))&&(a[a.length]=d);return a.concat.apply([],a)},guid:1,proxy:function(c,b,d){return 2===arguments.length&&("string"==typeof b?(c=(d=c)[b],b=o):b&&!a.isFunction(b)&&(d=b,b=o)),!b&&c&&(b=function(){return c.apply(d||this,arguments)}),c&&(b.guid=c.guid=c.guid||b.guid||a.guid++),b},access:function(b,c,e,f,g,h){var i=b.length;if("object"==typeof c){for(var j in c)a.access(b,j,c[j],f,g,e);return b}if(e!==o){f=!h&&f&&a.isFunction(e);for(var d=0;d<i;d++)g(b[d],c,f?e.call(b[d],d,g(b[d],c)):e,h);return b}return i?g(b[0],c):o},now:function(){return new Date().getTime()},uaMatch:function(a){a=a.toLowerCase();var b=y.exec(a)||z.exec(a)||A.exec(a)||0>a.indexOf("compatible")&&B.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function b(a,c){return new b.fn.init(a,c)}a.extend(!0,b,this),b.superclass=this,b.fn=b.prototype=this(),b.fn.constructor=b,b.subclass=this.subclass,b.fn.init=function(e,c){return c&&c instanceof a&&!(c instanceof b)&&(c=b(c)),a.fn.init.call(this,e,c,d)},b.fn.init.prototype=b.fn;var d=b(c);return b},browser:{}}),a.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(b,a){F["[object "+a+"]"]=a.toLowerCase()}),(b=a.uaMatch(j)).browser&&(a.browser[b.browser]=!0,a.browser.version=b.version),a.browser.webkit&&(a.browser.safari=!0),m&&(a.inArray=function(a,b){return m.call(b,a)}),g.test("\xa0")&&(h=/^[\s\xA0]+/,i=/[\s\xA0]+$/),f=a(c),c.addEventListener?d=function(){c.removeEventListener("DOMContentLoaded",d,!1),a.ready()}:c.attachEvent&&(d=function(){"complete"===c.readyState&&(c.detachEvent("onreadystatechange",d),a.ready())}),a}(),u="then done fail isResolved isRejected promise".split(" "),v=[].slice;a.extend({_Deferred:function(){var c,d,e,f=[],b={done:function(){if(!e){var d,i,g,j,h,k=arguments;for(c&&(h=c,c=0),d=0,i=k.length;d<i;d++)g=k[d],"array"===(j=a.type(g))?b.done.apply(b,g):"function"===j&&f.push(g);h&&b.resolveWith(h[0],h[1])}return this},resolveWith:function(b,a){if(!e&&!c&&!d){a=a||[],d=1;try{for(;f[0];)f.shift().apply(b,a)}finally{c=[b,a],d=0}}return this},resolve:function(){return b.resolveWith(this,arguments),this},isResolved:function(){return!!(d||c)},cancel:function(){return e=1,f=[],this}};return b},Deferred:function(d){var e,b=a._Deferred(),c=a._Deferred();return a.extend(b,{then:function(a,c){return b.done(a).fail(c),this},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,promise:function(a){if(null==a){if(e)return e;e=a={}}for(var c=u.length;c--;)a[u[c]]=b[u[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,d&&d.call(b,b),b},when:function(d){var e=arguments,c=0,f=e.length,g=f,b=f<=1&&d&&a.isFunction(d.promise)?d:a.Deferred();function h(a){return function(c){e[a]=arguments.length>1?v.call(arguments,0):c,--g||b.resolveWith(b,v.call(e,0))}}if(f>1){for(;c<f;c++)e[c]&&a.isFunction(e[c].promise)?e[c].promise().then(h(c),b.reject):--g;g||b.resolveWith(b,e)}else b!==d&&b.resolveWith(b,f?[d]:[]);return b.promise()}}),function(){a.support={};var b=c.createElement("div");b.style.display="none",b.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var f=b.getElementsByTagName("*"),d=b.getElementsByTagName("a")[0],h=c.createElement("select"),i=h.appendChild(c.createElement("option")),g=b.getElementsByTagName("input")[0];if(f&&f.length&&d){a.support={leadingWhitespace:3===b.firstChild.nodeType,tbody:!b.getElementsByTagName("tbody").length,htmlSerialize:!!b.getElementsByTagName("link").length,style:/red/.test(d.getAttribute("style")),hrefNormalized:"/a"===d.getAttribute("href"),opacity:/^0.55$/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:"on"===g.value,optSelected:i.selected,deleteExpando:!0,optDisabled:!1,checkClone:!1,noCloneEvent:!0,noCloneChecked:!0,boxModel:null,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableHiddenOffsets:!0,reliableMarginRight:!0},g.checked=!0,a.support.noCloneChecked=g.cloneNode(!0).checked,h.disabled=!0,a.support.optDisabled=!i.disabled;var l=null;a.support.scriptEval=function(){if(null===l){var b=c.documentElement,d=c.createElement("script"),f="script"+a.now();try{d.appendChild(c.createTextNode("window."+f+"=1;"))}catch(g){}b.insertBefore(d,b.firstChild),e[f]?(l=!0,delete e[f]):l=!1,b.removeChild(d)}return l};try{delete b.test}catch(m){a.support.deleteExpando=!1}!b.addEventListener&&b.attachEvent&&b.fireEvent&&(b.attachEvent("onclick",function c(){a.support.noCloneEvent=!1,b.detachEvent("onclick",c)}),b.cloneNode(!0).fireEvent("onclick")),(b=c.createElement("div")).innerHTML="<input type='radio' name='radiotest' checked='checked'/>";var j=c.createDocumentFragment();j.appendChild(b.firstChild),a.support.checkClone=j.cloneNode(!0).cloneNode(!0).lastChild.checked,a(function(){var b=c.createElement("div"),e=c.getElementsByTagName("body")[0];if(e){b.style.width=b.style.paddingLeft="1px",e.appendChild(b),a.boxModel=a.support.boxModel=2===b.offsetWidth,"zoom"in b.style&&(b.style.display="inline",b.style.zoom=1,a.support.inlineBlockNeedsLayout=2===b.offsetWidth,b.style.display="",b.innerHTML="<div style='width:4px;'></div>",a.support.shrinkWrapBlocks=2!==b.offsetWidth),b.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";var d=b.getElementsByTagName("td");a.support.reliableHiddenOffsets=0===d[0].offsetHeight,d[0].style.display="",d[1].style.display="none",a.support.reliableHiddenOffsets=a.support.reliableHiddenOffsets&&0===d[0].offsetHeight,b.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(b.style.width="1px",b.style.marginRight="0",a.support.reliableMarginRight=0===(parseInt(c.defaultView.getComputedStyle(b,null).marginRight,10)||0)),e.removeChild(b).style.display="none",b=d=null}});var k=function(a){var b=c.createElement("div");if(a="on"+a,!b.attachEvent)return!0;var d=a in b;return d||(b.setAttribute(a,"return;"),d="function"==typeof b[a]),d};a.support.submitBubbles=k("submit"),a.support.changeBubbles=k("change"),b=f=d=null}}();var w=/^(?:\{.*\}|\[.*\])$/;function x(c,d,b){if(b===o&&1===c.nodeType){if("string"==typeof(b=c.getAttribute("data-"+d))){try{b="true"===b||"false"!==b&&("null"===b?null:a.isNaN(b)?w.test(b)?a.parseJSON(b):b:parseFloat(b))}catch(e){}a.data(c,d,b)}else b=o}return b}function y(a){for(var b in a)if("toJSON"!==b)return!1;return!0}a.extend({cache:{},uuid:0,expando:"jQuery"+(a.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(b){return!!(b=b.nodeType?a.cache[b[a.expando]]:b[a.expando])&&!y(b)},data:function(g,d,i,j){if(a.acceptData(g)){var c,f=a.expando,k="string"==typeof d,h=g.nodeType,e=h?a.cache:g,b=h?g[a.expando]:g[a.expando]&&a.expando;return(!b||j&&b&&!e[b][f])&&k&&i===o?void 0:(b||(h?g[a.expando]=b=++a.uuid:b=a.expando),e[b]||(e[b]={},h||(e[b].toJSON=a.noop)),("object"==typeof d||"function"==typeof d)&&(j?e[b][f]=a.extend(e[b][f],d):e[b]=a.extend(e[b],d)),c=e[b],j&&(c[f]||(c[f]={}),c=c[f]),i!==o&&(c[d]=i),"events"!==d||c[d])?k?c[d]:c:c[f]&&c[f].events}},removeData:function(d,i,j){if(a.acceptData(d)){var f=a.expando,g=d.nodeType,b=g?a.cache:d,c=g?d[a.expando]:a.expando;if(b[c]){if(i){var h=j?b[c][f]:b[c];if(h&&(delete h[i],!y(h)))return}if(!j||(delete b[c][f],y(b[c]))){var k=b[c][f];a.support.deleteExpando||b!=e?delete b[c]:b[c]=null,k?(b[c]={},g||(b[c].toJSON=a.noop),b[c][f]=k):g&&(a.support.deleteExpando?delete d[a.expando]:d.removeAttribute?d.removeAttribute(a.expando):d[a.expando]=null)}}}},_data:function(b,c,d){return a.data(b,c,d,!0)},acceptData:function(b){if(b.nodeName){var c=a.noData[b.nodeName.toLowerCase()];if(c)return!(!0===c||b.getAttribute("classid")!==c)}return!0}}),a.fn.extend({data:function(d,h){var b=null;if(void 0===d){if(this.length&&(b=a.data(this[0]),1===this[0].nodeType))for(var e,g=this[0].attributes,f=0,i=g.length;f<i;f++)0===(e=g[f].name).indexOf("data-")&&(e=e.substr(5),x(this[0],e,b[e]));return b}if("object"==typeof d)return this.each(function(){a.data(this,d)});var c=d.split(".");return(c[1]=c[1]?"."+c[1]:"",h===o)?(o===(b=this.triggerHandler("getData"+c[1]+"!",[c[0]]))&&this.length&&(b=a.data(this[0],d),b=x(this[0],d,b)),b===o&&c[1]?this.data(c[0]):b):this.each(function(){var b=a(this),e=[c[0],h];b.triggerHandler("setData"+c[1]+"!",e),a.data(this,d,h),b.triggerHandler("changeData"+c[1]+"!",e)})},removeData:function(b){return this.each(function(){a.removeData(this,b)})}}),a.extend({queue:function(e,c,d){if(e){c=(c||"fx")+"queue";var b=a._data(e,c);return d?(!b||a.isArray(d)?b=a._data(e,c,a.makeArray(d)):b.push(d),b):b||[]}},dequeue:function(e,b){b=b||"fx";var c=a.queue(e,b),d=c.shift();"inprogress"===d&&(d=c.shift()),d&&("fx"===b&&c.unshift("inprogress"),d.call(e,function(){a.dequeue(e,b)})),c.length||a.removeData(e,b+"queue",!0)}}),a.fn.extend({queue:function(b,c){return("string"!=typeof b&&(c=b,b="fx"),c===o)?a.queue(this[0],b):this.each(function(e){var d=a.queue(this,b,c);"fx"===b&&"inprogress"!==d[0]&&a.dequeue(this,b)})},dequeue:function(b){return this.each(function(){a.dequeue(this,b)})},delay:function(b,c){return b=a.fx&&a.fx.speeds[b]||b,c=c||"fx",this.queue(c,function(){var d=this;setTimeout(function(){a.dequeue(d,c)},b)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var z=/[\n\t\r]/g,A=/\s+/,B=/\r/g,C=/^(?:href|src|style)$/,D=/^(?:button|input)$/i,E=/^(?:button|input|object|select|textarea)$/i,F=/^a(?:rea)?$/i,G=/^(?:radio|checkbox)$/i;a.props={for:"htmlFor",class:"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"},a.fn.extend({attr:function(b,c){return a.access(this,b,c,!0,a.attr)},removeAttr:function(b,c){return this.each(function(){a.attr(this,b,""),1===this.nodeType&&this.removeAttribute(b)})},addClass:function(c){if(a.isFunction(c))return this.each(function(d){var b=a(this);b.addClass(c.call(this,d,b.attr("class")))});if(c&&"string"==typeof c)for(var e=(c||"").split(A),f=0,h=this.length;f<h;f++){var b=this[f];if(1===b.nodeType){if(b.className){for(var i=" "+b.className+" ",g=b.className,d=0,j=e.length;d<j;d++)0>i.indexOf(" "+e[d]+" ")&&(g+=" "+e[d]);b.className=a.trim(g)}else b.className=c}}return this},removeClass:function(b){if(a.isFunction(b))return this.each(function(d){var c=a(this);c.removeClass(b.call(this,d,c.attr("class")))});if(b&&"string"==typeof b||b===o)for(var g=(b||"").split(A),d=0,h=this.length;d<h;d++){var c=this[d];if(1===c.nodeType&&c.className){if(b){for(var e=(" "+c.className+" ").replace(z," "),f=0,i=g.length;f<i;f++)e=e.replace(" "+g[f]+" "," ");c.className=a.trim(e)}else c.className=""}}return this},toggleClass:function(b,c){var d=typeof b,e="boolean"==typeof c;return a.isFunction(b)?this.each(function(e){var d=a(this);d.toggleClass(b.call(this,e,d.attr("class"),c),c)}):this.each(function(){if("string"===d)for(var f,i=0,h=a(this),g=c,j=b.split(A);f=j[i++];)g=e?g:!h.hasClass(f),h[g?"addClass":"removeClass"](f);else("undefined"===d||"boolean"===d)&&(this.className&&a._data(this,"__className__",this.className),this.className=this.className|| !1===b?"":a._data(this,"__className__")||"")})},hasClass:function(b){for(var c=" "+b+" ",a=0,d=this.length;a<d;a++)if((" "+this[a].className+" ").replace(z," ").indexOf(c)> -1)return!0;return!1},val:function(d){if(!arguments.length){var b=this[0];if(b){if(a.nodeName(b,"option")){var j=b.attributes.value;return!j||j.specified?b.value:b.text}if(a.nodeName(b,"select")){var e=b.selectedIndex,h=[],f=b.options,g="select-one"===b.type;if(e<0)return null;for(var i=g?e:0,k=g?e+1:f.length;i<k;i++){var c=f[i];if(c.selected&&(a.support.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!a.nodeName(c.parentNode,"optgroup"))){if(d=a(c).val(),g)return d;h.push(d)}}return g&&!h.length&&f.length?a(f[e]).val():h}return G.test(b.type)&&!a.support.checkOn?null===b.getAttribute("value")?"on":b.value:(b.value||"").replace(B,"")}return}var l=a.isFunction(d);return this.each(function(e){var c=a(this),b=d;if(1===this.nodeType){if(l&&(b=d.call(this,e,c.val())),null==b?b="":"number"==typeof b?b+="":a.isArray(b)&&(b=a.map(b,function(a){return null==a?"":a+""})),a.isArray(b)&&G.test(this.type))this.checked=a.inArray(c.val(),b)>=0;else if(a.nodeName(this,"select")){var f=a.makeArray(b);a("option",this).each(function(){this.selected=a.inArray(a(this).val(),f)>=0}),f.length||(this.selectedIndex=-1)}else this.value=b}})}}),a.extend({attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(b,c,d,k){if(b&&3!==b.nodeType&&8!==b.nodeType&&2!==b.nodeType){if(k&&c in a.attrFn)return a(b)[c](d);var e=1!==b.nodeType||!a.isXMLDoc(b),f=d!==o;if(c=e&&a.props[c]||c,1===b.nodeType){var i=C.test(c);if("selected"===c&&!a.support.optSelected){var g=b.parentNode;g&&(g.selectedIndex,g.parentNode&&g.parentNode.selectedIndex)}if((c in b||o!==b[c])&&e&&!i){if(f&&("type"===c&&D.test(b.nodeName)&&b.parentNode&&a.error("type property can't be changed"),null===d?1===b.nodeType&&b.removeAttribute(c):b[c]=d),a.nodeName(b,"form")&&b.getAttributeNode(c))return b.getAttributeNode(c).nodeValue;if("tabIndex"===c){var h=b.getAttributeNode("tabIndex");return h&&h.specified?h.value:E.test(b.nodeName)||F.test(b.nodeName)&&b.href?0:o}return b[c]}if(!a.support.style&&e&&"style"===c)return f&&(b.style.cssText=""+d),b.style.cssText;if(f&&b.setAttribute(c,""+d),!b.attributes[c]&&b.hasAttribute&&!b.hasAttribute(c))return;var j=!a.support.hrefNormalized&&e&&i?b.getAttribute(c,2):b.getAttribute(c);return null===j?o:j}return f&&(b[c]=d),b[c]}}});var H=/\.(.*)$/,I=/^(?:textarea|input|select)$/i,J=/\./g,K=/ /g,L=/[^\w\s.|`]/g,M=function(a){return a.replace(L,"\\$&")};function g(){return!1}function N(){return!0}a.event={add:function(b,m,c,p){if(3!==b.nodeType&&8!==b.nodeType){try{a.isWindow(b)&&b!==e&&!b.frameElement&&(b=e)}catch(s){}if(!1===c)c=g;else if(!c)return;c.handler&&(c=(q=c).handler),c.guid||(c.guid=a.guid++);var i=a._data(b);if(i){var j=i.events,h=i.handle;j||(i.events=j={}),h||(i.handle=h=function(b){return void 0!==a&&a.event.triggered!==b.type?a.event.handle.apply(h.elem,arguments):o}),h.elem=b,m=m.split(" ");for(var q,f,d,k,r=0;d=m[r++];){f=q?a.extend({},q):{handler:c,data:p},d.indexOf(".")> -1?(d=(k=d.split(".")).shift(),f.namespace=k.slice(0).sort().join(".")):(k=[],f.namespace=""),f.type=d,f.guid||(f.guid=c.guid);var n=j[d],l=a.event.special[d]||{};n||(n=j[d]=[],(!l.setup|| !1===l.setup.call(b,p,k,h))&&(b.addEventListener?b.addEventListener(d,h,!1):b.attachEvent&&b.attachEvent("on"+d,h))),l.add&&(l.add.call(b,f),f.handler.guid||(f.handler.guid=c.guid)),n.push(f),a.event.global[d]=!0}b=null}}},global:{},remove:function(e,b,j,m){if(3!==e.nodeType&&8!==e.nodeType){!1===j&&(j=g);var c,d,n,p,q,k,f,h,r,t=0,i=a.hasData(e)&&a._data(e),l=i&&i.events;if(i&&l){if(b&&b.type&&(j=b.handler,b=b.type),!b||"string"==typeof b&&"."===b.charAt(0)){for(c in b=b||"",l)a.event.remove(e,c+b);return}for(b=b.split(" ");c=b[t++];)if(r=c,h=null,n=0>c.indexOf("."),p=[],n||(c=(p=c.split(".")).shift(),q=new RegExp("(^|\\.)"+a.map(p.slice(0).sort(),M).join("\\.(?:.*\\.)?")+"(\\.|$)")),f=l[c]){if(!j){for(d=0;d<f.length;d++)h=f[d],(n||q.test(h.namespace))&&(a.event.remove(e,r,h.handler,d),f.splice(d--,1));continue}for(k=a.event.special[c]||{},d=m||0;d<f.length&&(h=f[d],j.guid!==h.guid||((n||q.test(h.namespace))&&(null==m&&f.splice(d--,1),k.remove&&k.remove.call(e,h)),null==m));d++);(0===f.length||null!=m&&1===f.length)&&(k.teardown&& !1!==k.teardown.call(e,p)||a.removeEvent(e,c,i.handle),delete l[c])}if(a.isEmptyObject(l)){var s=i.handle;s&&(s.elem=null),delete i.events,delete i.handle,a.isEmptyObject(i)&&a.removeData(e,o,!0)}}}},trigger:function(b,g,c){var d=b.type||b,l=arguments[3];if(!l){if(b="object"==typeof b?b[a.expando]?b:a.extend(a.Event(d),b):a.Event(d),d.indexOf("!")>=0&&(b.type=d=d.slice(0,-1),b.exclusive=!0),!c&&(b.stopPropagation(),a.event.global[d]&&a.each(a.cache,function(){var c=this[a.expando];c&&c.events&&c.events[d]&&a.event.trigger(b,g,c.handle.elem)})),!c||3===c.nodeType||8===c.nodeType)return;b.result=o,b.target=c,(g=a.makeArray(g)).unshift(b)}b.currentTarget=c;var i=a._data(c,"handle");i&&i.apply(c,g);var j=c.parentNode||c.ownerDocument;try{!(c&&c.nodeName&&a.noData[c.nodeName.toLowerCase()])&&c["on"+d]&& !1===c["on"+d].apply(c,g)&&(b.result=!1,b.preventDefault())}catch(n){}if(!b.isPropagationStopped()&&j)a.event.trigger(b,g,j,!0);else if(!b.isDefaultPrevented()){var h,e=b.target,f=d.replace(H,""),m=a.nodeName(e,"a")&&"click"===f,k=a.event.special[f]||{};if((!k._default|| !1===k._default.call(c,b))&&!m&&!(e&&e.nodeName&&a.noData[e.nodeName.toLowerCase()])){try{e[f]&&((h=e["on"+f])&&(e["on"+f]=null),a.event.triggered=b.type,e[f]())}catch(p){}h&&(e["on"+f]=h),a.event.triggered=o}}},handle:function(b){var j,c,f,k,l,g=[],m=a.makeArray(arguments);if((b=m[0]=a.event.fix(b||e.event)).currentTarget=this,(j=0>b.type.indexOf(".")&&!b.exclusive)||(f=b.type.split("."),b.type=f.shift(),g=f.slice(0).sort(),k=new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.)?")+"(\\.|$)")),b.namespace=b.namespace||g.join("."),c=((l=a._data(this,"events"))||{})[b.type],l&&c){c=c.slice(0);for(var h=0,n=c.length;h<n;h++){var d=c[h];if(j||k.test(d.namespace)){b.handler=d.handler,b.data=d.data,b.handleObj=d;var i=d.handler.apply(this,m);if(i!==o&&(b.result=i,!1===i&&(b.preventDefault(),b.stopPropagation())),b.isImmediatePropagationStopped())break}}}return b.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(b){if(b[a.expando])return b;var f=b;b=a.Event(f);for(var g,h=this.props.length;h;)b[g=this.props[--h]]=f[g];if(b.target||(b.target=b.srcElement||c),3===b.target.nodeType&&(b.target=b.target.parentNode),!b.relatedTarget&&b.fromElement&&(b.relatedTarget=b.fromElement===b.target?b.toElement:b.fromElement),null==b.pageX&&null!=b.clientX){var d=c.documentElement,e=c.body;b.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),b.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)}return null==b.which&&(null!=b.charCode||null!=b.keyCode)&&(b.which=null!=b.charCode?b.charCode:b.keyCode),!b.metaKey&&b.ctrlKey&&(b.metaKey=b.ctrlKey),b.which||o===b.button||(b.which=1&b.button?1:2&b.button?3:4&b.button?2:0),b},guid:1e8,proxy:a.proxy,special:{ready:{setup:a.bindReady,teardown:a.noop},live:{add:function(b){a.event.add(this,U(b.origType,b.selector),a.extend({},b,{handler:T,guid:b.handler.guid}))},remove:function(b){a.event.remove(this,U(b.origType,b.selector),b)}},beforeunload:{setup:function(c,d,b){a.isWindow(this)&&(this.onbeforeunload=b)},teardown:function(b,a){this.onbeforeunload===a&&(this.onbeforeunload=null)}}}},a.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},a.Event=function(b){if(!this.preventDefault)return new a.Event(b);b&&b.type?(this.originalEvent=b,this.type=b.type,this.isDefaultPrevented=b.defaultPrevented|| !1===b.returnValue||b.getPreventDefault&&b.getPreventDefault()?N:g):this.type=b,this.timeStamp=a.now(),this[a.expando]=!0},a.Event.prototype={preventDefault:function(){this.isDefaultPrevented=N;var a=this.originalEvent;a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=N;var a=this.originalEvent;a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=N,this.stopPropagation()},isDefaultPrevented:g,isPropagationStopped:g,isImmediatePropagationStopped:g};var O=function(d){var b=d.relatedTarget;try{if(b&&b!==c&&!b.parentNode)return;for(;b&&b!==this;)b=b.parentNode;b!==this&&(d.type=d.data,a.event.handle.apply(this,arguments))}catch(e){}},P=function(b){b.type=b.data,a.event.handle.apply(this,arguments)};if(a.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(b,c){a.event.special[b]={setup:function(d){a.event.add(this,c,d&&d.selector?P:O,b)},teardown:function(b){a.event.remove(this,c,b&&b.selector?P:O)}}}),a.support.submitBubbles||(a.event.special.submit={setup:function(b,c){if(!this.nodeName||"form"===this.nodeName.toLowerCase())return!1;a.event.add(this,"click.specialSubmit",function(d){var b=d.target,c=b.type;("submit"===c||"image"===c)&&a(b).closest("form").length&&R("submit",this,arguments)}),a.event.add(this,"keypress.specialSubmit",function(b){var c=b.target,d=c.type;("text"===d||"password"===d)&&a(c).closest("form").length&&13===b.keyCode&&R("submit",this,arguments)})},teardown:function(b){a.event.remove(this,".specialSubmit")}}),!a.support.changeBubbles){var i,Q=function(b){var d=b.type,c=b.value;return"radio"===d||"checkbox"===d?c=b.checked:"select-multiple"===d?c=b.selectedIndex> -1?a.map(b.options,function(a){return a.selected}).join("-"):"":"select"===b.nodeName.toLowerCase()&&(c=b.selectedIndex),c},j=function(c){var d,e,b=c.target;I.test(b.nodeName)&&!b.readOnly&&(d=a._data(b,"_change_data"),e=Q(b),("focusout"!==c.type||"radio"!==b.type)&&a._data(b,"_change_data",e),d!==o&&e!==d&&(null!=d||e)&&(c.type="change",c.liveFired=o,a.event.trigger(c,arguments[1],b)))};a.event.special.change={filters:{focusout:j,beforedeactivate:j,click:function(a){var b=a.target,c=b.type;("radio"===c||"checkbox"===c||"select"===b.nodeName.toLowerCase())&&j.call(this,a)},keydown:function(a){var c=a.target,b=c.type;(13===a.keyCode&&"textarea"!==c.nodeName.toLowerCase()||32===a.keyCode&&("checkbox"===b||"radio"===b)||"select-multiple"===b)&&j.call(this,a)},beforeactivate:function(c){var b=c.target;a._data(b,"_change_data",Q(b))}},setup:function(c,d){if("file"===this.type)return!1;for(var b in i)a.event.add(this,b+".specialChange",i[b]);return I.test(this.nodeName)},teardown:function(b){return a.event.remove(this,".specialChange"),I.test(this.nodeName)}},(i=a.event.special.change.filters).focus=i.beforeactivate}function R(d,e,c){var b=a.extend({},c[0]);b.type=d,b.originalEvent={},b.liveFired=o,a.event.handle.call(e,b),b.isDefaultPrevented()&&c[0].preventDefault()}c.addEventListener&&a.each({focus:"focusin",blur:"focusout"},function(d,b){var e=0;function f(d){var c=a.event.fix(d);c.type=b,c.originalEvent={},a.event.trigger(c,null,c.target),c.isDefaultPrevented()&&d.preventDefault()}a.event.special[b]={setup:function(){0==e++&&c.addEventListener(d,f,!0)},teardown:function(){0== --e&&c.removeEventListener(d,f,!0)}}}),a.each(["bind","one"],function(c,b){a.fn[b]=function(d,c,e){if("object"==typeof d){for(var g in d)this[b](g,c,d[g],e);return this}(a.isFunction(c)|| !1===c)&&(e=c,c=o);var h="one"===b?a.proxy(e,function(b){return a(this).unbind(b,h),e.apply(this,arguments)}):e;if("unload"===d&&"one"!==b)this.one(d,c,e);else for(var f=0,i=this.length;f<i;f++)a.event.add(this[f],d,h,c);return this}}),a.fn.extend({unbind:function(b,e){if("object"!=typeof b||b.preventDefault)for(var c=0,f=this.length;c<f;c++)a.event.remove(this[c],b,e);else for(var d in b)this.unbind(d,b[d]);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return 0===arguments.length?this.unbind("live"):this.die(b,null,c,a)},trigger:function(b,c){return this.each(function(){a.event.trigger(b,c,this)})},triggerHandler:function(c,d){if(this[0]){var b=a.Event(c);return b.preventDefault(),b.stopPropagation(),a.event.trigger(b,d,this[0]),b.result}},toggle:function(b){for(var c=arguments,d=1;d<c.length;)a.proxy(b,c[d++]);return this.click(a.proxy(b,function(f){var e=(a._data(this,"lastToggle"+b.guid)||0)%d;return a._data(this,"lastToggle"+b.guid,e+1),f.preventDefault(),c[e].apply(this,arguments)||!1}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var S={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};function T(b){var q,k,i,c,d,l,e,f,j,g,m,n,o=[],r=[],p=a._data(this,"events");if(b.liveFired!==this&&p&&p.live&&!b.target.disabled&&(!b.button||"click"!==b.type)){b.namespace&&(m=new RegExp("(^|\\.)"+b.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),b.liveFired=this;var h=p.live.slice(0);for(e=0;e<h.length;e++)(d=h[e]).origType.replace(H,"")===b.type?r.push(d.selector):h.splice(e--,1);for(f=0,j=(c=a(b.target).closest(r,b.currentTarget)).length;f<j;f++)for(e=0,g=c[f];e<h.length;e++)d=h[e],g.selector===d.selector&&(!m||m.test(d.namespace))&&!g.elem.disabled&&(l=g.elem,i=null,("mouseenter"===d.preType||"mouseleave"===d.preType)&&(b.type=d.preType,i=a(b.relatedTarget).closest(d.selector)[0]),i&&i===l||o.push({elem:l,handleObj:d,level:g.level}));for(f=0,j=o.length;f<j&&(c=o[f],!k||!(c.level>k))&&(b.currentTarget=c.elem,b.data=c.handleObj.data,b.handleObj=c.handleObj,n=c.handleObj.origHandler.apply(c.elem,arguments),!((!1===n||b.isPropagationStopped())&&(k=c.level,!1===n&&(q=!1),b.isImmediatePropagationStopped())));f++);return q}}function U(a,b){return(a&&"*"!==a?a+".":"")+b.replace(J,"`").replace(K,"&")}a.each(["live","die"],function(c,b){a.fn[b]=function(d,f,g,l){var c,j,e,m,p=0,h=l||this.selector,i=l?this:a(this.context);if("object"==typeof d&&!d.preventDefault){for(var n in d)i[b](n,f,d[n],h);return this}for(a.isFunction(f)&&(g=f,f=o),d=(d||"").split(" ");null!=(c=d[p++]);){if(j=H.exec(c),e="",j&&(e=j[0],c=c.replace(H,"")),"hover"===c){d.push("mouseenter"+e,"mouseleave"+e);continue}if(m=c,"focus"===c||"blur"===c?(d.push(S[c]+e),c+=e):c=(S[c]||c)+e,"live"===b)for(var k=0,q=i.length;k<q;k++)a.event.add(i[k],"live."+U(c,h),{data:f,selector:h,handler:g,origType:c,origHandler:g,preType:m});else i.unbind("live."+U(c,h),g)}return this}}),a.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(c,b){a.fn[b]=function(a,c){return null==c&&(c=a,a=null),arguments.length>0?this.bind(b,a,c):this.trigger(b)},a.attrFn&&(a.attrFn[b]=!0)}),/*!
       * Sizzle CSS Selector Engine
       *  Copyright 2011, The Dojo Foundation
       *  Released under the MIT, BSD, and GPL Licenses.
       *  More information: http://sizzlejs.com/
       */ function(){var f,g,j,h,e,k,l,n=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,p=0,q=Object.prototype.toString,r=!1,s=!0,t=/\\/g,u=/\W/;[0,0].sort(function(){return s=!1,0});var b=function(i,e,h,r){h=h||[];var x=e=e||c;if(1!==e.nodeType&&9!==e.nodeType)return[];if(!i||"string"!=typeof i)return h;var l,j,f,t,k,o,p,g,u=!0,s=b.isXML(e),a=[],w=i;do if(n.exec(""),(l=n.exec(w))&&(w=l[3],a.push(l[1]),l[2])){t=l[3];break}while(l)if(a.length>1&&v.exec(i)){if(2===a.length&&d.relative[a[0]])j=z(a[0]+a[1],e);else for(j=d.relative[a[0]]?[e]:b(a.shift(),e);a.length;)i=a.shift(),d.relative[i]&&(i+=a.shift()),j=z(i,j)}else if(!r&&a.length>1&&9===e.nodeType&&!s&&d.match.ID.test(a[0])&&!d.match.ID.test(a[a.length-1])&&(e=(k=b.find(a.shift(),e,s)).expr?b.filter(k.expr,k.set)[0]:k.set[0]),e)for(j=(k=r?{expr:a.pop(),set:m(r)}:b.find(a.pop(),1===a.length&&("~"===a[0]||"+"===a[0])&&e.parentNode?e.parentNode:e,s)).expr?b.filter(k.expr,k.set):k.set,a.length>0?f=m(j):u=!1;a.length;)p=o=a.pop(),d.relative[o]?p=a.pop():o="",null==p&&(p=e),d.relative[o](f,p,s);else f=a=[];if(f||(f=j),f||b.error(o||i),"[object Array]"===q.call(f)){if(u){if(e&&1===e.nodeType)for(g=0;null!=f[g];g++)f[g]&&(!0===f[g]||1===f[g].nodeType&&b.contains(e,f[g]))&&h.push(j[g]);else for(g=0;null!=f[g];g++)f[g]&&1===f[g].nodeType&&h.push(j[g])}else h.push.apply(h,f)}else m(f,h);return t&&(b(t,x,h,r),b.uniqueSort(h)),h};b.uniqueSort=function(a){if(k&&(r=s,a.sort(k),r))for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1);return a},b.matches=function(a,c){return b(a,null,null,c)},b.matchesSelector=function(a,c){return b(c,null,null,[a]).length>0},b.find=function(b,e,i){var c;if(!b)return[];for(var f=0,j=d.order.length;f<j;f++){var a,g=d.order[f];if(a=d.leftMatch[g].exec(b)){var h=a[1];if(a.splice(1,1),"\\"!==h.substr(h.length-1)&&(a[1]=(a[1]||"").replace(t,""),null!=(c=d.find[g](a,e,i)))){b=b.replace(d.match[g],"");break}}}return c||(c=void 0!==e.getElementsByTagName?e.getElementsByTagName("*"):[]),{set:c,expr:b}},b.filter=function(c,g,m,n){for(var a,f,p=c,h=[],e=g,s=g&&g[0]&&b.isXML(g[0]);c&&g.length;){for(var i in d.filter)if(null!=(a=d.leftMatch[i].exec(c))&&a[2]){var j,k,t=d.filter[i],q=a[1];if(f=!1,a.splice(1,1),"\\"===q.substr(q.length-1))continue;if(e===h&&(h=[]),d.preFilter[i]){if(a=d.preFilter[i](a,e,m,h,n,s)){if(!0===a)continue}else f=j=!0}if(a){for(var l=0;null!=(k=e[l]);l++)if(k){var r=!!(j=t(k,a,l,e))^n;m&&null!=j?r?f=!0:e[l]=!1:r&&(h.push(k),f=!0)}}if(j!==o){if(m||(e=h),c=c.replace(d.match[i],""),!f)return[];break}}if(c===p){if(null==f)b.error(c);else break}p=c}return e},b.error=function(a){throw"Syntax error, unrecognized expression: "+a};var d=b.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{class:"className",for:"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(d,c){var f="string"==typeof c,g=f&&!u.test(c),h=f&&!g;g&&(c=c.toLowerCase());for(var a,e=0,i=d.length;e<i;e++)if(a=d[e]){for(;(a=a.previousSibling)&&1!==a.nodeType;);d[e]=h||a&&a.nodeName.toLowerCase()===c?a||!1:a===c}h&&b.filter(c,d,!0)},">":function(d,c){var e,f="string"==typeof c,a=0,g=d.length;if(f&&!u.test(c)){for(c=c.toLowerCase();a<g;a++)if(e=d[a]){var h=e.parentNode;d[a]=h.nodeName.toLowerCase()===c&&h}}else{for(;a<g;a++)(e=d[a])&&(d[a]=f?e.parentNode:e.parentNode===c);f&&b.filter(c,d,!0)}},"":function(d,a,e){var b,f=p++,c=y;"string"!=typeof a||u.test(a)||(b=a=a.toLowerCase(),c=x),c("parentNode",a,f,d,b,e)},"~":function(d,a,e){var b,f=p++,c=y;"string"!=typeof a||u.test(a)||(b=a=a.toLowerCase(),c=x),c("previousSibling",a,f,d,b,e)}},find:{ID:function(c,b,d){if(void 0!==b.getElementById&&!d){var a=b.getElementById(c[1]);return a&&a.parentNode?[a]:[]}},NAME:function(d,e){if(void 0!==e.getElementsByName){for(var b=[],c=e.getElementsByName(d[1]),a=0,f=c.length;a<f;a++)c[a].getAttribute("name")===d[1]&&b.push(c[a]);return 0===b.length?null:b}},TAG:function(b,a){if(void 0!==a.getElementsByTagName)return a.getElementsByTagName(b[1])}},preFilter:{CLASS:function(b,d,e,f,g,h){if(b=" "+b[1].replace(t,"")+" ",h)return b;for(var a,c=0;null!=(a=d[c]);c++)a&&(g^(a.className&&(" "+a.className+" ").replace(/[\t\n\r]/g," ").indexOf(b)>=0)?e||f.push(a):e&&(d[c]=!1));return!1},ID:function(a){return a[1].replace(t,"")},TAG:function(a,b){return a[1].replace(t,"").toLowerCase()},CHILD:function(a){if("nth"===a[1]){a[2]||b.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var c=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec("even"===a[2]&&"2n"||"odd"===a[2]&&"2n+1"|| !/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=c[1]+(c[2]||1)-0,a[3]=c[3]-0}else a[2]&&b.error(a[0]);return a[0]=p++,a},ATTR:function(a,e,f,g,h,c){var b=a[1]=a[1].replace(t,"");return!c&&d.attrMap[b]&&(a[1]=d.attrMap[b]),a[4]=(a[4]||a[5]||"").replace(t,""),"~="===a[2]&&(a[4]=" "+a[4]+" "),a},PSEUDO:function(a,c,e,f,g){if("not"===a[1]){if((n.exec(a[3])||"").length>1||/^\w/.test(a[3]))a[3]=b(a[3],null,null,c);else{var h=b.filter(a[3],c,e,!0^g);return e||f.push.apply(f,h),!1}}else if(d.match.POS.test(a[0])||d.match.CHILD.test(a[0]))return!0;return a},POS:function(a){return a.unshift(!0),a}},filters:{enabled:function(a){return!1===a.disabled&&"hidden"!==a.type},disabled:function(a){return!0===a.disabled},checked:function(a){return!0===a.checked},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,!0===a.selected},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,d,c){return!!b(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return"text"===c&&(b===c||null===b)},radio:function(a){return"radio"===a.type},checkbox:function(a){return"checkbox"===a.type},file:function(a){return"file"===a.type},password:function(a){return"password"===a.type},submit:function(a){return"submit"===a.type},image:function(a){return"image"===a.type},reset:function(a){return"reset"===a.type},button:function(a){return"button"===a.type||"button"===a.nodeName.toLowerCase()},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)}},setFilters:{first:function(b,a){return 0===a},last:function(c,a,d,b){return a===b.length-1},even:function(b,a){return a%2==0},odd:function(b,a){return a%2==1},lt:function(c,a,b){return a<b[3]-0},gt:function(c,a,b){return a>b[3]-0},nth:function(c,a,b){return b[3]-0===a},eq:function(c,a,b){return b[3]-0===a}},filter:{PSEUDO:function(a,c,i,j){var e=c[1],g=d.filters[e];if(g)return g(a,i,c,j);if("contains"===e)return(a.textContent||a.innerText||b.getText([a])||"").indexOf(c[3])>=0;if("not"===e){for(var h=c[3],f=0,k=h.length;f<k;f++)if(h[f]===a)return!1;return!0}b.error(e)},CHILD:function(b,c){var g=c[1],a=b;switch(g){case"only":case"first":for(;a=a.previousSibling;)if(1===a.nodeType)return!1;if("first"===g)return!0;a=b;case"last":for(;a=a.nextSibling;)if(1===a.nodeType)return!1;return!0;case"nth":var d=c[2],h=c[3];if(1===d&&0===h)return!0;var i=c[0],e=b.parentNode;if(e&&(e.sizcache!==i||!b.nodeIndex)){var j=0;for(a=e.firstChild;a;a=a.nextSibling)1===a.nodeType&&(a.nodeIndex=++j);e.sizcache=i}var f=b.nodeIndex-h;if(0===d)return 0===f;return f%d==0&&f/d>=0}},ID:function(a,b){return 1===a.nodeType&&a.getAttribute("id")===b},TAG:function(a,b){return"*"===b&&1===a.nodeType||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)> -1},ATTR:function(f,g){var e=g[1],h=d.attrHandle[e]?d.attrHandle[e](f):null!=f[e]?f[e]:f.getAttribute(e),b=h+"",c=g[2],a=g[4];return null==h?"!="===c:"="===c?b===a:"*="===c?b.indexOf(a)>=0:"~="===c?(" "+b+" ").indexOf(a)>=0:a?"!="===c?b!==a:"^="===c?0===b.indexOf(a):"$="===c?b.substr(b.length-a.length)===a:"|="===c&&(b===a||b.substr(0,a.length+1)===a+"-"):b&& !1!==h},POS:function(c,a,e,f){var g=a[2],b=d.setFilters[g];if(b)return b(c,e,a,f)}}},v=d.match.POS;for(var i in d.match)d.match[i]=new RegExp(d.match[i].source+/(?![^\[]*\])(?![^\(]*\))/.source),d.leftMatch[i]=new RegExp(/(^(?:.|\r|\n)*?)/.source+d.match[i].source.replace(/\\(\d+)/g,function(b,a){return"\\"+(a-0+1)}));var m=function(a,b){return(a=Array.prototype.slice.call(a,0),b)?(b.push.apply(b,a),b):a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(w){m=function(a,d){var b=0,c=d||[];if("[object Array]"===q.call(a))Array.prototype.push.apply(c,a);else if("number"==typeof a.length)for(var e=a.length;b<e;b++)c.push(a[b]);else for(;a[b];b++)c.push(a[b]);return c}}function x(e,g,f,c,j,h){for(var b=0,i=c.length;b<i;b++){var a=c[b];if(a){var d=!1;for(a=a[e];a;){if(a.sizcache===f){d=c[a.sizset];break}if(1!==a.nodeType||h||(a.sizcache=f,a.sizset=b),a.nodeName.toLowerCase()===g){d=a;break}a=a[e]}c[b]=d}}}function y(g,f,h,d,k,i){for(var c=0,j=d.length;c<j;c++){var a=d[c];if(a){var e=!1;for(a=a[g];a;){if(a.sizcache===h){e=d[a.sizset];break}if(1===a.nodeType){if(i||(a.sizcache=h,a.sizset=c),"string"!=typeof f){if(a===f){e=!0;break}}else if(b.filter(f,[a]).length>0){e=a;break}}a=a[g]}d[c]=e}}}c.documentElement.compareDocumentPosition?k=function(a,b){return a===b?(r=!0,0):a.compareDocumentPosition&&b.compareDocumentPosition?4&a.compareDocumentPosition(b)?-1:1:a.compareDocumentPosition?-1:1}:(k=function(e,f){var g,j,c=[],d=[],h=e.parentNode,i=f.parentNode,b=h;if(e===f)return r=!0,0;if(h===i)return l(e,f);if(!h)return -1;if(!i)return 1;for(;b;)c.unshift(b),b=b.parentNode;for(b=i;b;)d.unshift(b),b=b.parentNode;g=c.length,j=d.length;for(var a=0;a<g&&a<j;a++)if(c[a]!==d[a])return l(c[a],d[a]);return a===g?l(e,d[a],-1):l(c[a],f,1)},l=function(b,c,d){if(b===c)return d;for(var a=b.nextSibling;a;){if(a===c)return -1;a=a.nextSibling}return 1}),b.getText=function(e){for(var a,c="",d=0;e[d];d++)3===(a=e[d]).nodeType||4===a.nodeType?c+=a.nodeValue:8!==a.nodeType&&(c+=b.getText(a.childNodes));return c},g=c.createElement("div"),j="script"+new Date().getTime(),h=c.documentElement,g.innerHTML="<a name='"+j+"'/>",h.insertBefore(g,h.firstChild),c.getElementById(j)&&(d.find.ID=function(b,c,d){if(void 0!==c.getElementById&&!d){var a=c.getElementById(b[1]);return a?a.id===b[1]|| void 0!==a.getAttributeNode&&a.getAttributeNode("id").nodeValue===b[1]?[a]:o:[]}},d.filter.ID=function(a,c){var b=void 0!==a.getAttributeNode&&a.getAttributeNode("id");return 1===a.nodeType&&b&&b.nodeValue===c}),h.removeChild(g),h=g=null,(e=c.createElement("div")).appendChild(c.createComment("")),e.getElementsByTagName("*").length>0&&(d.find.TAG=function(c,e){var a=e.getElementsByTagName(c[1]);if("*"===c[1]){for(var d=[],b=0;a[b];b++)1===a[b].nodeType&&d.push(a[b]);a=d}return a}),e.innerHTML="<a href='#'></a>",e.firstChild&& void 0!==e.firstChild.getAttribute&&"#"!==e.firstChild.getAttribute("href")&&(d.attrHandle.href=function(a){return a.getAttribute("href",2)}),e=null,c.querySelectorAll&&function(){var e=b,a=c.createElement("div"),g="__sizzle__";if(a.innerHTML="<p class='TEST'></p>",!a.querySelectorAll||0!==a.querySelectorAll(".TEST").length){for(var f in b=function(i,a,f,n){if(a=a||c,!n&&!b.isXML(a)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(i);if(h&&(1===a.nodeType||9===a.nodeType)){if(h[1])return m(a.getElementsByTagName(i),f);if(h[2]&&d.find.CLASS&&a.getElementsByClassName)return m(a.getElementsByClassName(h[2]),f)}if(9===a.nodeType){if("body"===i&&a.body)return m([a.body],f);if(h&&h[3]){var j=a.getElementById(h[3]);if(!j||!j.parentNode)return m([],f);if(j.id===h[3])return m([j],f)}try{return m(a.querySelectorAll(i),f)}catch(r){}}else if(1===a.nodeType&&"object"!==a.nodeName.toLowerCase()){var q=a,l=a.getAttribute("id"),k=l||g,o=a.parentNode,p=/^\s*[+~]/.test(i);l?k=k.replace(/'/g,"\\$&"):a.setAttribute("id",k),p&&o&&(a=a.parentNode);try{if(!p||o)return m(a.querySelectorAll("[id='"+k+"'] "+i),f)}catch(s){}finally{l||q.removeAttribute("id")}}}return e(i,a,f,n)},e)b[f]=e[f];a=null}}(),function(){var a=c.documentElement,e=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(e){var g=!e.call(c.createElement("div"),"div"),f=!1;try{e.call(c.documentElement,"[test!='']:sizzle")}catch(h){f=!0}b.matchesSelector=function(c,a){if(a=a.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']"),!b.isXML(c))try{if(f|| !d.match.PSEUDO.test(a)&&!/!=/.test(a)){var h=e.call(c,a);if(h||!g||c.document&&11!==c.document.nodeType)return h}}catch(i){}return b(a,null,null,[c]).length>0}}}(),(f=c.createElement("div")).innerHTML="<div class='test e'></div><div class='test'></div>",f.getElementsByClassName&&0!==f.getElementsByClassName("e").length&&(f.lastChild.className="e",1!==f.getElementsByClassName("e").length&&(d.order.splice(1,0,"CLASS"),d.find.CLASS=function(b,a,c){if(void 0!==a.getElementsByClassName&&!c)return a.getElementsByClassName(b[1])},f=null)),c.documentElement.contains?b.contains=function(a,b){return a!==b&&(!a.contains||a.contains(b))}:c.documentElement.compareDocumentPosition?b.contains=function(a,b){return!!(16&a.compareDocumentPosition(b))}:b.contains=function(){return!1},b.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return!!b&&"HTML"!==b.nodeName};var z=function(a,c){for(var f,g=[],h="",i=c.nodeType?[c]:c;f=d.match.PSEUDO.exec(a);)h+=f[0],a=a.replace(d.match.PSEUDO,"");a=d.relative[a]?a+"*":a;for(var e=0,j=i.length;e<j;e++)b(a,i[e],g);return b.filter(h,g)};a.find=b,a.expr=b.selectors,a.expr[":"]=a.expr.filters,a.unique=b.uniqueSort,a.text=b.getText,a.isXMLDoc=b.isXML,a.contains=b.contains}();var V=/Until$/,W=/^(?:parents|prevUntil|prevAll)/,X=/,/,Y=/^.[^:#\[\.,]*$/,Z=Array.prototype.slice,$=a.expr.match.POS,aa={children:!0,contents:!0,next:!0,prev:!0};function ab(a){return!a||!a.parentNode||11===a.parentNode.nodeType}function ac(c,b,e){if(a.isFunction(b))return a.grep(c,function(a,c){return!!b.call(a,c,a)===e});if(b.nodeType)return a.grep(c,function(a,c){return a===b===e});if("string"==typeof b){var d=a.grep(c,function(a){return 1===a.nodeType});if(Y.test(b))return a.filter(b,d,!e);b=a.filter(b,d)}return a.grep(c,function(c,d){return a.inArray(c,b)>=0===e})}a.fn.extend({find:function(g){for(var b=this.pushStack("","find",g),e=0,c=0,h=this.length;c<h;c++)if(e=b.length,a.find(g,this[c],b),c>0){for(var d=e;d<b.length;d++)for(var f=0;f<e;f++)if(b[f]===b[d]){b.splice(d--,1);break}}return b},has:function(b){var c=a(b);return this.filter(function(){for(var b=0,d=c.length;b<d;b++)if(a.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(ac(this,a,!1),"not",a)},filter:function(a){return this.pushStack(ac(this,a,!0),"filter",a)},is:function(b){return!!b&&a.filter(b,this).length>0},closest:function(c,g){var d,h,e=[],b=this[0];if(a.isArray(c)){var j,f,i={},k=1;if(b&&c.length){for(d=0,h=c.length;d<h;d++)i[f=c[d]]||(i[f]=a.expr.match.POS.test(f)?a(f,g||this.context):f);for(;b&&b.ownerDocument&&b!==g;){for(f in i)((j=i[f]).jquery?j.index(b)> -1:a(b).is(j))&&e.push({selector:f,elem:b,level:k});b=b.parentNode,k++}}return e}var l=$.test(c)?a(c,g||this.context):null;for(d=0,h=this.length;d<h;d++)for(b=this[d];b;){if(l?l.index(b)> -1:a.find.matchesSelector(b,c)){e.push(b);break}if(!(b=b.parentNode)||!b.ownerDocument||b===g)break}return e=e.length>1?a.unique(e):e,this.pushStack(e,"closest",c)},index:function(b){return b&&"string"!=typeof b?a.inArray(b.jquery?b[0]:b,this):a.inArray(this[0],b?a(b):this.parent().children())},add:function(b,e){var d="string"==typeof b?a(b,e):a.makeArray(b),c=a.merge(this.get(),d);return this.pushStack(ab(d[0])||ab(c[0])?c:a.unique(c))},andSelf:function(){return this.add(this.prevObject)}}),a.each({parent:function(b){var a=b.parentNode;return a&&11!==a.nodeType?a:null},parents:function(b){return a.dir(b,"parentNode")},parentsUntil:function(b,d,c){return a.dir(b,"parentNode",c)},next:function(b){return a.nth(b,2,"nextSibling")},prev:function(b){return a.nth(b,2,"previousSibling")},nextAll:function(b){return a.dir(b,"nextSibling")},prevAll:function(b){return a.dir(b,"previousSibling")},nextUntil:function(b,d,c){return a.dir(b,"nextSibling",c)},prevUntil:function(b,d,c){return a.dir(b,"previousSibling",c)},siblings:function(b){return a.sibling(b.parentNode.firstChild,b)},children:function(b){return a.sibling(b.firstChild)},contents:function(b){return a.nodeName(b,"iframe")?b.contentDocument||b.contentWindow.document:a.makeArray(b.childNodes)}},function(b,c){a.fn[b]=function(f,e){var d=a.map(this,c,f),g=Z.call(arguments);return V.test(b)||(e=f),e&&"string"==typeof e&&(d=a.filter(e,d)),d=this.length>1&&!aa[b]?a.unique(d):d,(this.length>1||X.test(e))&&W.test(b)&&(d=d.reverse()),this.pushStack(d,b,g.join(","))}}),a.extend({filter:function(b,c,d){return d&&(b=":not("+b+")"),1===c.length?a.find.matchesSelector(c[0],b)?[c[0]]:[]:a.find.matches(b,c)},dir:function(f,c,d){for(var e=[],b=f[c];b&&9!==b.nodeType&&(d===o||1!==b.nodeType||!a(b).is(d));)1===b.nodeType&&e.push(b),b=b[c];return e},nth:function(a,b,c,e){b=b||1;for(var d=0;a&&(1!==a.nodeType|| ++d!==b);a=a[c]);return a},sibling:function(a,c){for(var b=[];a;a=a.nextSibling)1===a.nodeType&&a!==c&&b.push(a);return b}});var ad=/ jQuery\d+="(?:\d+|null)"/g,ae=/^\s+/,af=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,ag=/<([\w:]+)/,ah=/<tbody/i,ai=/<|&#?\w+;/,aj=/<(?:script|object|embed|option|style)/i,ak=/checked\s*(?:[^=]|=\s*.checked.)/i,b={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};function al(b,c){return a.nodeName(b,"table")?b.getElementsByTagName("tbody")[0]||b.appendChild(b.ownerDocument.createElement("tbody")):b}function am(h,g){if(1===g.nodeType&&a.hasData(h)){var i=a.expando,e=a.data(h),f=a.data(g,e);if(e=e[i]){var b=e.events;if(f=f[i]=a.extend({},e),b)for(var c in delete f.handle,f.events={},b)for(var d=0,j=b[c].length;d<j;d++)a.event.add(g,c+(b[c][d].namespace?".":"")+b[c][d].namespace,b[c][d],b[c][d].data)}}}function an(c,b){if(1===b.nodeType){var d=b.nodeName.toLowerCase();b.clearAttributes(),b.mergeAttributes(c),"object"===d?b.outerHTML=c.outerHTML:"input"===d&&("checkbox"===c.type||"radio"===c.type)?(c.checked&&(b.defaultChecked=b.checked=c.checked),b.value!==c.value&&(b.value=c.value)):"option"===d?b.selected=c.defaultSelected:("input"===d||"textarea"===d)&&(b.defaultValue=c.defaultValue),b.removeAttribute(a.expando)}}function ao(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function ap(c,b){b.src?a.ajax({url:b.src,async:!1,dataType:"script"}):a.globalEval(b.text||b.textContent||b.innerHTML||""),b.parentNode&&b.parentNode.removeChild(b)}b.optgroup=b.option,b.tbody=b.tfoot=b.colgroup=b.caption=b.thead,b.th=b.td,a.support.htmlSerialize||(b._default=[1,"div<div>","</div>"]),a.fn.extend({text:function(b){return a.isFunction(b)?this.each(function(d){var c=a(this);c.text(b.call(this,d,c.text()))}):"object"!=typeof b&&b!==o?this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(b)):a.text(this)},wrapAll:function(b){if(a.isFunction(b))return this.each(function(c){a(this).wrapAll(b.call(this,c))});if(this[0]){var c=a(b,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&c.insertBefore(this[0]),c.map(function(){for(var a=this;a.firstChild&&1===a.firstChild.nodeType;)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(b){return a.isFunction(b)?this.each(function(c){a(this).wrapInner(b.call(this,c))}):this.each(function(){var c=a(this),d=c.contents();d.length?d.wrapAll(b):c.append(b)})},wrap:function(b){return this.each(function(){a(this).wrapAll(b)})},unwrap:function(){return this.parent().each(function(){a.nodeName(this,"body")||a(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){1===this.nodeType&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){1===this.nodeType&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var b=a(arguments[0]);return b.push.apply(b,this.toArray()),this.pushStack(b,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var b=this.pushStack(this,"after",arguments);return b.push.apply(b,a(arguments[0]).toArray()),b}},remove:function(c,e){for(var b,d=0;null!=(b=this[d]);d++)(!c||a.filter(c,[b]).length)&&(e||1!==b.nodeType||(a.cleanData(b.getElementsByTagName("*")),a.cleanData([b])),b.parentNode&&b.parentNode.removeChild(b));return this},empty:function(){for(var b,c=0;null!=(b=this[c]);c++)for(1===b.nodeType&&a.cleanData(b.getElementsByTagName("*"));b.firstChild;)b.removeChild(b.firstChild);return this},clone:function(b,c){return b=null!=b&&b,c=null==c?b:c,this.map(function(){return a.clone(this,b,c)})},html:function(c){if(c===o)return this[0]&&1===this[0].nodeType?this[0].innerHTML.replace(ad,""):null;if("string"!=typeof c||aj.test(c)|| !a.support.leadingWhitespace&&ae.test(c)||b[(ag.exec(c)||["",""])[1].toLowerCase()])a.isFunction(c)?this.each(function(d){var b=a(this);b.html(c.call(this,d,b.html()))}):this.empty().append(c);else{c=c.replace(af,"<$1></$2>");try{for(var d=0,e=this.length;d<e;d++)1===this[d].nodeType&&(a.cleanData(this[d].getElementsByTagName("*")),this[d].innerHTML=c)}catch(f){this.empty().append(c)}}return this},replaceWith:function(b){return this[0]&&this[0].parentNode?a.isFunction(b)?this.each(function(d){var c=a(this),e=c.html();c.replaceWith(b.call(this,d,e))}):("string"!=typeof b&&(b=a(b).detach()),this.each(function(){var c=this.nextSibling,d=this.parentNode;a(this).remove(),c?a(c).before(b):a(d).append(b)})):this.length?this.pushStack(a(a.isFunction(b)?b():b),"replaceWith",b):this},detach:function(a){return this.remove(a,!0)},domManip:function(j,f,l){var k,g,b,c,d=j[0],h=[];if(!a.support.checkClone&&3===arguments.length&&"string"==typeof d&&ak.test(d))return this.each(function(){a(this).domManip(j,f,l,!0)});if(a.isFunction(d))return this.each(function(c){var b=a(this);j[0]=d.call(this,c,f?b.html():o),b.domManip(j,f,l)});if(this[0]){if(c=d&&d.parentNode,g=1===(b=(k=a.support.parentNode&&c&&11===c.nodeType&&c.childNodes.length===this.length?{fragment:c}:a.buildFragment(j,this,h)).fragment).childNodes.length?b=b.firstChild:b.firstChild){f=f&&a.nodeName(g,"tr");for(var e=0,i=this.length,m=i-1;e<i;e++)l.call(f?al(this[e],g):this[e],k.cacheable||i>1&&e<m?a.clone(b,!0,!0):b)}h.length&&a.each(h,ap)}return this}}),a.buildFragment=function(b,e,i){var d,g,f,h=e&&e[0]?e[0].ownerDocument||e[0]:c;return 1===b.length&&"string"==typeof b[0]&&b[0].length<512&&h===c&&"<"===b[0].charAt(0)&&!aj.test(b[0])&&(a.support.checkClone||!ak.test(b[0]))&&(g=!0,(f=a.fragments[b[0]])&&1!==f&&(d=f)),d||(d=h.createDocumentFragment(),a.clean(b,h,d,i)),g&&(a.fragments[b[0]]=f?d:1),{fragment:d,cacheable:g}},a.fragments={},a.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(b,c){a.fn[b]=function(i){var f=[],d=a(i),g=1===this.length&&this[0].parentNode;if(g&&11===g.nodeType&&1===g.childNodes.length&&1===d.length)return d[c](this[0]),this;for(var e=0,j=d.length;e<j;e++){var h=(e>0?this.clone(!0):this).get();a(d[e])[c](h),f=f.concat(h)}return this.pushStack(f,b,d.selector)}}),a.extend({clone:function(c,g,h){var d,f,b,e=c.cloneNode(!0);if((!a.support.noCloneEvent||!a.support.noCloneChecked)&&(1===c.nodeType||11===c.nodeType)&&!a.isXMLDoc(c))for(an(c,e),d=ao(c),f=ao(e),b=0;d[b];++b)an(d[b],f[b]);if(g&&(am(c,e),h))for(b=0,d=ao(c),f=ao(e);d[b];++b)am(d[b],f[b]);return e},clean:function(p,g,l,m){void 0===(g=g||c).createElement&&(g=g.ownerDocument||g[0]&&g[0].ownerDocument||c);for(var d,e=[],f=0;null!=(d=p[f]);f++)if("number"==typeof d&&(d+=""),d){if("string"!=typeof d||ai.test(d)){if("string"==typeof d){d=d.replace(af,"<$1></$2>");var n=(ag.exec(d)||["",""])[1].toLowerCase(),k=b[n]||b._default,q=k[0],h=g.createElement("div");for(h.innerHTML=k[1]+d+k[2];q--;)h=h.lastChild;if(!a.support.tbody)for(var o=ah.test(d),j="table"!==n||o?"<table>"!==k[1]||o?[]:h.childNodes:h.firstChild&&h.firstChild.childNodes,i=j.length-1;i>=0;--i)a.nodeName(j[i],"tbody")&&!j[i].childNodes.length&&j[i].parentNode.removeChild(j[i]);!a.support.leadingWhitespace&&ae.test(d)&&h.insertBefore(g.createTextNode(ae.exec(d)[0]),h.firstChild),d=h.childNodes}}else d=g.createTextNode(d);d.nodeType?e.push(d):e=a.merge(e,d)}if(l)for(f=0;e[f];f++)m&&a.nodeName(e[f],"script")&&(!e[f].type||"text/javascript"===e[f].type.toLowerCase())?m.push(e[f].parentNode?e[f].parentNode.removeChild(e[f]):e[f]):(1===e[f].nodeType&&e.splice.apply(e,[f+1,0].concat(a.makeArray(e[f].getElementsByTagName("script")))),l.appendChild(e[f]));return e},cleanData:function(h){for(var c,d,b,e=a.cache,i=a.expando,j=a.event.special,k=a.support.deleteExpando,g=0;null!=(b=h[g]);g++)if((!b.nodeName||!a.noData[b.nodeName.toLowerCase()])&&(d=b[a.expando])){if((c=e[d]&&e[d][i])&&c.events){for(var f in c.events)j[f]?a.event.remove(b,f):a.removeEvent(b,f,c.handle);c.handle&&(c.handle.elem=null)}k?delete b[a.expando]:b.removeAttribute&&b.removeAttribute(a.expando),delete e[d]}}});var p,k,l,aq=/alpha\([^)]*\)/i,ar=/opacity=([^)]*)/,as=/-([a-z])/ig,at=/([A-Z]|^ms)/g,au=/^-?\d+(?:px)?$/i,av=/^-?\d/,aw={position:"absolute",visibility:"hidden",display:"block"},ax=["Left","Right"],ay=["Top","Bottom"],az=function(b,a){return a.toUpperCase()};function aA(b,c,d){var e="width"===c?b.offsetWidth:b.offsetHeight;return"border"===d||a.each("width"===c?ax:ay,function(){d||(e-=parseFloat(a.css(b,"padding"+this))||0),"margin"===d?e+=parseFloat(a.css(b,"margin"+this))||0:e-=parseFloat(a.css(b,"border"+this+"Width"))||0}),e}a.fn.css=function(c,b){return 2===arguments.length&&b===o?this:a.access(this,c,b,!0,function(b,c,d){return d!==o?a.style(b,c,d):a.css(b,c)})},a.extend({cssHooks:{opacity:{get:function(a,c){if(!c)return a.style.opacity;var b=p(a,"opacity","opacity");return""===b?"1":b}}},cssNumber:{zIndex:!0,fontWeight:!0,opacity:!0,zoom:!0,lineHeight:!0},cssProps:{float:a.support.cssFloat?"cssFloat":"styleFloat"},style:function(c,e,b,i){if(c&&3!==c.nodeType&&8!==c.nodeType&&c.style){var g,f=a.camelCase(e),h=c.style,d=a.cssHooks[f];if(e=a.cssProps[f]||f,b===o)return d&&"get"in d&&o!==(g=d.get(c,!1,i))?g:h[e];if(!("number"==typeof b&&isNaN(b))&&null!=b&&("number"!=typeof b||a.cssNumber[f]||(b+="px"),!d||!("set"in d)||o!==(b=d.set(c,b))))try{h[e]=b}catch(j){}}},css:function(e,c,g){var f,b=a.camelCase(c),d=a.cssHooks[b];return(c=a.cssProps[b]||b,d&&"get"in d&&o!==(f=d.get(e,!0,g)))?f:p?p(e,c,b):void 0},swap:function(b,c,e){var d={};for(var a in c)d[a]=b.style[a],b.style[a]=c[a];for(a in e.call(b),c)b.style[a]=d[a]},camelCase:function(a){return a.replace(as,az)}}),a.curCSS=a.css,a.each(["height","width"],function(c,b){a.cssHooks[b]={get:function(d,e,f){var c;if(e)return(0!==d.offsetWidth?c=aA(d,b,f):a.swap(d,aw,function(){c=aA(d,b,f)}),c<=0&&("0px"===(c=p(d,b,b))&&l&&(c=l(d,b,b)),null!=c))?""===c||"auto"===c?"0px":c:c<0||null==c?""===(c=d.style[b])||"auto"===c?"0px":c:"string"==typeof c?c:c+"px"},set:function(b,a){return au.test(a)?(a=parseFloat(a))>=0?a+"px":void 0:a}}}),a.support.opacity||(a.cssHooks.opacity={get:function(a,b){return ar.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(f,c){var b=f.style;b.zoom=1;var d=a.isNaN(c)?"":"alpha(opacity="+100*c+")",e=b.filter||"";b.filter=aq.test(e)?e.replace(aq,d):b.filter+" "+d}}),a(function(){a.support.reliableMarginRight||(a.cssHooks.marginRight={get:function(b,d){var c;return a.swap(b,{display:"inline-block"},function(){c=d?p(b,"margin-right","marginRight"):b.style.marginRight}),c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(k=function(b,g,c){var d,e,f;if(c=c.replace(at,"-$1").toLowerCase(),e=b.ownerDocument.defaultView)return(f=e.getComputedStyle(b,null))&&(""!==(d=f.getPropertyValue(c))||a.contains(b.ownerDocument.documentElement,b)||(d=a.style(b,c))),d}),c.documentElement.currentStyle&&(l=function(a,d){var f,b=a.currentStyle&&a.currentStyle[d],e=a.runtimeStyle&&a.runtimeStyle[d],c=a.style;return!au.test(b)&&av.test(b)&&(f=c.left,e&&(a.runtimeStyle.left=a.currentStyle.left),c.left="fontSize"===d?"1em":b||0,b=c.pixelLeft+"px",c.left=f,e&&(a.runtimeStyle.left=e)),""===b?"auto":b}),p=k||l,a.expr&&a.expr.filters&&(a.expr.filters.hidden=function(b){var c=b.offsetWidth,d=b.offsetHeight;return 0===c&&0===d|| !a.support.reliableHiddenOffsets&&"none"===(b.style.display||a.css(b,"display"))},a.expr.filters.visible=function(b){return!a.expr.filters.hidden(b)});var d,m,aB=/%20/g,aC=/\[\]$/,aD=/\r?\n/g,aE=/#.*$/,aF=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,aG=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,aH=/^(?:GET|HEAD)$/,aI=/^\/\//,aJ=/\?/,aK=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,aL=/^(?:select|textarea)/i,aM=/\s+/,aN=/([?&])_=[^&]*/,aO=/(^|\-)([a-z])/g,aP=function(_,a,b){return a+b.toUpperCase()},q=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,aQ=a.fn.load,r={},s={};try{d=c.location.href}catch(aR){(d=c.createElement("a")).href="",d=d.href}function n(b){return function(d,e){if("string"!=typeof d&&(e=d,d="*"),a.isFunction(e))for(var c,g,h=d.toLowerCase().split(aM),f=0,i=h.length;f<i;f++)c=h[f],(g=/^\+/.test(c))&&(c=c.substr(1)||"*"),(b[c]=b[c]||[])[g?"unshift":"push"](e)}}function aS(d,c,f,g,e,b){e=e||c.dataTypes[0],(b=b||{})[e]=!0;for(var a,h=d[e],i=0,k=h?h.length:0,j=d===r;i<k&&(j||!a);i++)"string"==typeof(a=h[i](c,f,g))&&(!j||b[a]?a=o:(c.dataTypes.unshift(a),a=aS(d,c,f,g,a,b)));return!j&&a||b["*"]||(a=aS(d,c,f,g,"*",b)),a}function aT(c,b,e,d){if(a.isArray(b)&&b.length)a.each(b,function(f,b){e||aC.test(c)?d(c,b):aT(c+"["+("object"==typeof b||a.isArray(b)?f:"")+"]",b,e,d)});else if(e||null==b||"object"!=typeof b)d(c,b);else if(a.isArray(b)||a.isEmptyObject(b))d(c,"");else for(var f in b)aT(c+"["+f+"]",b[f],e,d)}m=q.exec(d.toLowerCase())||[],a.fn.extend({load:function(c,b,f){if("string"!=typeof c&&aQ)return aQ.apply(this,arguments);if(!this.length)return this;var d=c.indexOf(" ");if(d>=0){var g=c.slice(d,c.length);c=c.slice(0,d)}var e="GET";b&&(a.isFunction(b)?(f=b,b=o):"object"==typeof b&&(b=a.param(b,a.ajaxSettings.traditional),e="POST"));var h=this;return a.ajax({url:c,type:e,dataType:"html",data:b,complete:function(b,d,c){c=b.responseText,b.isResolved()&&(b.done(function(a){c=a}),h.html(g?a("<div>").append(c.replace(aK,"")).find(g):c)),f&&h.each(f,[c,d,b])}}),this},serialize:function(){return a.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?a.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||aL.test(this.nodeName)||aG.test(this.type))}).map(function(d,c){var b=a(this).val();return null==b?null:a.isArray(b)?a.map(b,function(a,b){return{name:c.name,value:a.replace(aD,"\r\n")}}):{name:c.name,value:b.replace(aD,"\r\n")}}).get()}}),a.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(c,b){a.fn[b]=function(a){return this.bind(b,a)}}),a.each(["get","post"],function(c,b){a[b]=function(f,c,d,e){return a.isFunction(c)&&(e=e||d,d=c,c=o),a.ajax({type:b,url:f,data:c,success:d,dataType:e})}}),a.extend({getScript:function(b,c){return a.get(b,o,c,"script")},getJSON:function(b,c,d){return a.get(b,c,d,"json")},ajaxSetup:function(b,c){for(var d in c?a.extend(!0,b,a.ajaxSettings,c):(c=b,b=a.extend(!0,a.ajaxSettings,c)),{context:1,url:1})d in c?b[d]=c[d]:d in a.ajaxSettings&&(b[d]=a.ajaxSettings[d]);return b},ajaxSettings:{url:d,isLocal:/^(?:about|app|app\-storage|.+\-extension|file|widget):$/.test(m[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":a.parseJSON,"text xml":a.parseXML}},ajaxPrefilter:n(r),ajaxTransport:n(s),ajax:function(j,d){"object"==typeof j&&(d=j,j=o),d=d||{};var e,A,B,p,w,f,k,g,b=a.ajaxSetup({},d),h=b.context||b,x=h!==b&&(h.nodeType||h instanceof a)?a(h):a.event,y=a.Deferred(),z=a._Deferred(),C=b.statusCode||{},i={},l=0,c={readyState:0,setRequestHeader:function(a,b){return l||(i[a.toLowerCase().replace(aO,aP)]=b),this},getAllResponseHeaders:function(){return 2===l?A:null},getResponseHeader:function(b){var a;if(2===l){if(!B)for(B={};a=aF.exec(A);)B[a[1].toLowerCase()]=a[2];a=B[b.toLowerCase()]}return a===o?null:a},overrideMimeType:function(a){return l||(b.mimeType=a),this},abort:function(a){return a=a||"abort",p&&p.abort(a),n(0,a),this}};function n(f,d,m,r){if(2!==l){l=2,w&&clearTimeout(w),p=o,A=r||"",c.readyState=f?4:0;var g,j,i,n,q,s=m?function(d,i,e){var f,a,c,g,h=d.contents,b=d.dataTypes,j=d.responseFields;for(a in j)a in e&&(i[j[a]]=e[a]);for(;"*"===b[0];)b.shift(),f===o&&(f=d.mimeType||i.getResponseHeader("content-type"));if(f){for(a in h)if(h[a]&&h[a].test(f)){b.unshift(a);break}}if(b[0]in e)c=b[0];else{for(a in e){if(!b[0]||d.converters[a+" "+b[0]]){c=a;break}g||(g=a)}c=c||g}if(c)return c!==b[0]&&b.unshift(c),e[c]}(b,c,m):o;if(f>=200&&f<300||304===f){if(b.ifModified&&((n=c.getResponseHeader("Last-Modified"))&&(a.lastModified[e]=n),(q=c.getResponseHeader("Etag"))&&(a.etag[e]=q)),304===f)d="notmodified",g=!0;else try{j=function(d,e){d.dataFilter&&(e=d.dataFilter(e,d.dataType));var j,k,l,f,n,b,g,h,m=d.dataTypes,i={},p=m.length,c=m[0];for(j=1;j<p;j++){if(1===j)for(k in d.converters)"string"==typeof k&&(i[k.toLowerCase()]=d.converters[k]);if(f=c,"*"===(c=m[j]))c=f;else if("*"!==f&&f!==c){if(!(b=i[n=f+" "+c]||i["* "+c])){for(g in h=o,i)if(((l=g.split(" "))[0]===f||"*"===l[0])&&(h=i[l[1]+" "+c])){!0===(g=i[g])?b=h:!0===h&&(b=g);break}}b||h||a.error("No conversion from "+n.replace(" "," to ")),!0!==b&&(e=b?b(e):h(g(e)))}}return e}(b,s),d="success",g=!0}catch(t){d="parsererror",i=t}}else i=d,(!d||f)&&(d="error",f<0&&(f=0));c.status=f,c.statusText=d,g?y.resolveWith(h,[j,d,c]):y.rejectWith(h,[c,d,i]),c.statusCode(C),C=o,k&&x.trigger("ajax"+(g?"Success":"Error"),[c,b,g?j:i]),z.resolveWith(h,[c,d]),!k||(x.trigger("ajaxComplete",[c,b]),--a.active||a.event.trigger("ajaxStop"))}}if(y.promise(c),c.success=c.done,c.error=c.fail,c.complete=z.done,c.statusCode=function(b){if(b){var a;if(l<2)for(a in b)C[a]=[C[a],b[a]];else a=b[c.status],c.then(a,a)}return this},b.url=((j||b.url)+"").replace(aE,"").replace(aI,m[1]+"//"),b.dataTypes=a.trim(b.dataType||"*").toLowerCase().split(aM),null==b.crossDomain&&(f=q.exec(b.url.toLowerCase()),b.crossDomain=!!(f&&(f[1]!=m[1]||f[2]!=m[2]||(f[3]||("http:"===f[1]?80:443))!=(m[3]||("http:"===m[1]?80:443))))),b.data&&b.processData&&"string"!=typeof b.data&&(b.data=a.param(b.data,b.traditional)),aS(r,b,d,c),2===l)return!1;if(k=b.global,b.type=b.type.toUpperCase(),b.hasContent=!aH.test(b.type),k&&0==a.active++&&a.event.trigger("ajaxStart"),!b.hasContent&&(b.data&&(b.url+=(aJ.test(b.url)?"&":"?")+b.data),e=b.url,!1===b.cache)){var t=a.now(),u=b.url.replace(aN,"$1_="+t);b.url=u+(u===b.url?(aJ.test(b.url)?"&":"?")+"_="+t:"")}for(g in(b.data&&b.hasContent&& !1!==b.contentType||d.contentType)&&(i["Content-Type"]=b.contentType),b.ifModified&&(e=e||b.url,a.lastModified[e]&&(i["If-Modified-Since"]=a.lastModified[e]),a.etag[e]&&(i["If-None-Match"]=a.etag[e])),i.Accept=b.dataTypes[0]&&b.accepts[b.dataTypes[0]]?b.accepts[b.dataTypes[0]]+("*"!==b.dataTypes[0]?", */*; q=0.01":""):b.accepts["*"],b.headers)c.setRequestHeader(g,b.headers[g]);if(b.beforeSend&&(!1===b.beforeSend.call(h,c,b)||2===l))return c.abort(),!1;for(g in{success:1,error:1,complete:1})c[g](b[g]);if(p=aS(s,b,d,c)){c.readyState=1,k&&x.trigger("ajaxSend",[c,b]),b.async&&b.timeout>0&&(w=setTimeout(function(){c.abort("timeout")},b.timeout));try{l=1,p.send(i,n)}catch(v){status<2?n(-1,v):a.error(v)}}else n(-1,"No Transport");return c},param:function(b,c){var e=[],f=function(c,b){b=a.isFunction(b)?b():b,e[e.length]=encodeURIComponent(c)+"="+encodeURIComponent(b)};if(c===o&&(c=a.ajaxSettings.traditional),a.isArray(b)||b.jquery&&!a.isPlainObject(b))a.each(b,function(){f(this.name,this.value)});else for(var d in b)aT(d,b[d],c,f);return e.join("&").replace(aB,"+")}}),a.extend({active:0,lastModified:{},etag:{}});var aU=a.now(),aV=/(\=)\?(&|$)|\?\?/i;a.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return a.expando+"_"+aU++}}),a.ajaxPrefilter("json jsonp",function(b,g,k){var h="string"==typeof b.data;if("jsonp"===b.dataTypes[0]||g.jsonpCallback||null!=g.jsonp|| !1!==b.jsonp&&(aV.test(b.url)||h&&aV.test(b.data))){var l,d=b.jsonpCallback=a.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,m=e[d],c=b.url,f=b.data,i="$1"+d+"$2",j=function(){e[d]=m,l&&a.isFunction(m)&&e[d](l[0])};return!1!==b.jsonp&&(c=c.replace(aV,i),b.url===c&&(h&&(f=f.replace(aV,i)),b.data===f&&(c+=(/\?/.test(c)?"&":"?")+b.jsonp+"="+d))),b.url=c,b.data=f,e[d]=function(a){l=[a]},k.then(j,j),b.converters["script json"]=function(){return l||a.error(d+" was not called"),l[0]},b.dataTypes[0]="json","script"}}),a.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(b){return a.globalEval(b),b}}}),a.ajaxPrefilter("script",function(a){o===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),a.ajaxTransport("script",function(a){if(a.crossDomain){var b,d=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(_,e){(b=c.createElement("script")).async="async",a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(_,a){(!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,d&&b.parentNode&&d.removeChild(b),b=o,a||e(200,"success"))},d.insertBefore(b,d.firstChild)},abort:function(){b&&b.onload(0,1)}}}});var aW,f,aX=a.now();function t(){try{return new e.XMLHttpRequest}catch(a){}}a.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&t()||function(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(a){}}()}:t,f=a.ajaxSettings.xhr(),a.support.ajax=!!f,a.support.cors=f&&"withCredentials"in f,f=o,a.support.ajax&&a.ajaxTransport(function(b){if(!b.crossDomain||a.support.cors){var c;return{send:function(g,i){var h,f,d=b.xhr();if(b.username?d.open(b.type,b.url,b.async,b.username,b.password):d.open(b.type,b.url,b.async),b.xhrFields)for(f in b.xhrFields)d[f]=b.xhrFields[f];b.mimeType&&d.overrideMimeType&&d.overrideMimeType(b.mimeType),b.crossDomain||g["X-Requested-With"]||(g["X-Requested-With"]="XMLHttpRequest");try{for(f in g)d.setRequestHeader(f,g[f])}catch(j){}d.send(b.hasContent&&b.data||null),c=function(_,j){var e,k,l,f,g;try{if(c&&(j||4===d.readyState)){if(c=o,h&&(d.onreadystatechange=a.noop,delete aW[h]),j)4!==d.readyState&&d.abort();else{e=d.status,l=d.getAllResponseHeaders(),f={},g=d.responseXML,g&&g.documentElement&&(f.xml=g),f.text=d.responseText;try{k=d.statusText}catch(n){k=""}e||!b.isLocal||b.crossDomain?1223===e&&(e=204):e=f.text?200:404}}}catch(m){j||i(-1,m)}f&&i(e,k,f,l)},b.async&&4!==d.readyState?(aW||(aW={},a(e).unload(function(){for(var a in aW)aW[a](0,1)})),h=aX++,d.onreadystatechange=aW[h]=c):c()},abort:function(){c&&c(0,1)}}}});var aY,aZ={},a$=/^(?:toggle|show|hide)$/,a_=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,a0=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];function h(d,b){var c={};return a.each(a0.concat.apply([],a0.slice(0,b)),function(){c[this]=d}),c}function a1(b){if(!aZ[b]){var d=a("<"+b+">").appendTo("body"),c=d.css("display");d.remove(),("none"===c||""===c)&&(c="block"),aZ[b]=c}return aZ[b]}a.fn.extend({show:function(e,g,i){var b,d;if(e||0===e)return this.animate(h("show",3),e,g,i);for(var c=0,f=this.length;c<f;c++)d=(b=this[c]).style.display,a._data(b,"olddisplay")||"none"!==d||(d=b.style.display=""),""===d&&"none"===a.css(b,"display")&&a._data(b,"olddisplay",a1(b.nodeName));for(c=0;c<f;c++)(""===(d=(b=this[c]).style.display)||"none"===d)&&(b.style.display=a._data(b,"olddisplay")||"");return this},hide:function(c,f,g){if(c||0===c)return this.animate(h("hide",3),c,f,g);for(var b=0,d=this.length;b<d;b++){var e=a.css(this[b],"display");"none"===e||a._data(this[b],"olddisplay")||a._data(this[b],"olddisplay",e)}for(b=0;b<d;b++)this[b].style.display="none";return this},_toggle:a.fn.toggle,toggle:function(b,c,d){var e="boolean"==typeof b;return a.isFunction(b)&&a.isFunction(c)?this._toggle.apply(this,arguments):null==b||e?this.each(function(){var c=e?b:a(this).is(":hidden");a(this)[c?"show":"hide"]()}):this.animate(h("toggle",3),b,c,d),this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(c,d,e,f){var b=a.speed(d,e,f);return a.isEmptyObject(c)?this.each(b.complete):this[!1===b.queue?"each":"queue"](function(){var d,e=a.extend({},b),g=1===this.nodeType,h=g&&a(this).is(":hidden"),i=this;for(d in c){var f=a.camelCase(d);if(d!==f&&(c[f]=c[d],delete c[d],d=f),"hide"===c[d]&&h||"show"===c[d]&&!h)return e.complete.call(this);g&&("height"===d||"width"===d)&&(e.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],"inline"===a.css(this,"display")&&"none"===a.css(this,"float"))&&(a.support.inlineBlockNeedsLayout?"inline"===a1(this.nodeName)?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1):this.style.display="inline-block"),a.isArray(c[d])&&((e.specialEasing=e.specialEasing||{})[d]=c[d][1],c[d]=c[d][0])}return null!=e.overflow&&(this.style.overflow="hidden"),e.curAnim=a.extend({},c),a.each(c,function(k,d){var f=new a.fx(i,e,k);if(a$.test(d))f["toggle"===d?h?"show":"hide":d](c);else{var g=a_.exec(d),b=f.cur();if(g){var j=parseFloat(g[2]),l=g[3]||(a.cssNumber[k]?"":"px");"px"!==l&&(a.style(i,k,(j||1)+l),b=(j||1)/f.cur()*b,a.style(i,k,b+l)),g[1]&&(j=("-="===g[1]?-1:1)*j+b),f.custom(b,j,l)}else f.custom(b,d,"")}}),!0})},stop:function(b,c){var d=a.timers;return b&&this.queue([]),this.each(function(){for(var a=d.length-1;a>=0;a--)d[a].elem===this&&(c&&d[a](!0),d.splice(a,1))}),c||this.dequeue(),this}}),a.each({slideDown:h("show",1),slideUp:h("hide",1),slideToggle:h("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(b,c){a.fn[b]=function(a,b,d){return this.animate(c,a,b,d)}}),a.extend({speed:function(c,d,e){var b=c&&"object"==typeof c?a.extend({},c):{complete:e|| !e&&d||a.isFunction(c)&&c,duration:c,easing:e&&d||d&&!a.isFunction(d)&&d};return b.duration=a.fx.off?0:"number"==typeof b.duration?b.duration:b.duration in a.fx.speeds?a.fx.speeds[b.duration]:a.fx.speeds._default,b.old=b.complete,b.complete=function(){!1!==b.queue&&a(this).dequeue(),a.isFunction(b.old)&&b.old.call(this)},b},easing:{linear:function(a,d,b,c){return b+c*a},swing:function(a,d,b,c){return(-Math.cos(a*Math.PI)/2+.5)*c+b}},timers:[],fx:function(b,a,c){this.options=a,this.elem=b,this.prop=c,a.orig||(a.orig={})}}),a.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(a.fx.step[this.prop]||a.fx.step._default)(this)},cur:function(){if(null!=this.elem[this.prop]&&(!this.elem.style||null==this.elem.style[this.prop]))return this.elem[this.prop];var c,b=a.css(this.elem,this.prop);return isNaN(c=parseFloat(b))?b&&"auto"!==b?b:0:c},custom:function(d,e,f){var g=this,c=a.fx;function b(a){return g.step(a)}this.startTime=a.now(),this.start=d,this.end=e,this.unit=f||this.unit||(a.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,b.elem=this.elem,b()&&a.timers.push(b)&&!aY&&(aY=setInterval(c.tick,c.interval))},show:function(){this.options.orig[this.prop]=a.style(this.elem,this.prop),this.options.show=!0,this.custom("width"===this.prop||"height"===this.prop?1:0,this.cur()),a(this.elem).show()},hide:function(){this.options.orig[this.prop]=a.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(f){var b=a.now(),c=!0;if(f||b>=this.options.duration+this.startTime){for(var g in this.now=this.end,this.pos=this.state=1,this.update(),this.options.curAnim[this.prop]=!0,this.options.curAnim)!0!==this.options.curAnim[g]&&(c=!1);if(c){if(null!=this.options.overflow&&!a.support.shrinkWrapBlocks){var j=this.elem,k=this.options;a.each(["","X","Y"],function(a,b){j.style["overflow"+b]=k.overflow[a]})}if(this.options.hide&&a(this.elem).hide(),this.options.hide||this.options.show)for(var d in this.options.curAnim)a.style(this.elem,d,this.options.orig[d]);this.options.complete.call(this.elem)}return!1}var e=b-this.startTime;this.state=e/this.options.duration;var h=this.options.specialEasing&&this.options.specialEasing[this.prop],i=this.options.easing||(a.easing.swing?"swing":"linear");return this.pos=a.easing[h||i](this.state,e,0,1,this.options.duration),this.now=this.start+(this.end-this.start)*this.pos,this.update(),!0}},a.extend(a.fx,{tick:function(){for(var b=a.timers,c=0;c<b.length;c++)b[c]()||b.splice(c--,1);b.length||a.fx.stop()},interval:13,stop:function(){clearInterval(aY),aY=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(b){a.style(b.elem,"opacity",b.now)},_default:function(a){a.elem.style&&null!=a.elem.style[a.prop]?a.elem.style[a.prop]=("width"===a.prop||"height"===a.prop?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),a.expr&&a.expr.filters&&(a.expr.filters.animated=function(b){return a.grep(a.timers,function(a){return b===a.elem}).length});var a2=/^t(?:able|d|h)$/i,a3=/^(?:body|html)$/i;function a4(b){return a.isWindow(b)?b:9===b.nodeType&&(b.defaultView||b.parentWindow)}"getBoundingClientRect"in c.documentElement?a.fn.offset=function(h){var c,b=this[0];if(h)return this.each(function(b){a.offset.setOffset(this,h,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return a.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(o){}var f=b.ownerDocument,d=f.documentElement;if(!c||!a.contains(d,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var e=f.body,g=a4(f),i=d.clientTop||e.clientTop||0,j=d.clientLeft||e.clientLeft||0,k=g.pageYOffset||a.support.boxModel&&d.scrollTop||e.scrollTop,l=g.pageXOffset||a.support.boxModel&&d.scrollLeft||e.scrollLeft,m=c.top+k-i,n=c.left+l-j;return{top:m,left:n}}:a.fn.offset=function(l){var b=this[0];if(l)return this.each(function(b){a.offset.setOffset(this,l,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return a.offset.bodyOffset(b);a.offset.initialize();for(var c,k=b.offsetParent,m=b,i=b.ownerDocument,j=i.documentElement,f=i.body,h=i.defaultView,g=h?h.getComputedStyle(b,null):b.currentStyle,d=b.offsetTop,e=b.offsetLeft;(b=b.parentNode)&&b!==f&&b!==j&&(!a.offset.supportsFixedPosition||"fixed"!==g.position);)c=h?h.getComputedStyle(b,null):b.currentStyle,d-=b.scrollTop,e-=b.scrollLeft,b===k&&(d+=b.offsetTop,e+=b.offsetLeft,a.offset.doesNotAddBorder&&!(a.offset.doesAddBorderForTableAndCells&&a2.test(b.nodeName))&&(d+=parseFloat(c.borderTopWidth)||0,e+=parseFloat(c.borderLeftWidth)||0),k=b.offsetParent),a.offset.subtractsBorderForOverflowNotVisible&&"visible"!==c.overflow&&(d+=parseFloat(c.borderTopWidth)||0,e+=parseFloat(c.borderLeftWidth)||0),g=c;return("relative"===g.position||"static"===g.position)&&(d+=f.offsetTop,e+=f.offsetLeft),a.offset.supportsFixedPosition&&"fixed"===g.position&&(d+=Math.max(j.scrollTop,f.scrollTop),e+=Math.max(j.scrollLeft,f.scrollLeft)),{top:d,left:e}},a.offset={initialize:function(){var f,b,g,d=c.body,e=c.createElement("div"),h=parseFloat(a.css(d,"marginTop"))||0;a.extend(e.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),e.innerHTML="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>",d.insertBefore(e,d.firstChild),b=(f=e.firstChild).firstChild,g=f.nextSibling.firstChild.firstChild,this.doesNotAddBorder=5!==b.offsetTop,this.doesAddBorderForTableAndCells=5===g.offsetTop,b.style.position="fixed",b.style.top="20px",this.supportsFixedPosition=20===b.offsetTop||15===b.offsetTop,b.style.position=b.style.top="",f.style.overflow="hidden",f.style.position="relative",this.subtractsBorderForOverflowNotVisible=-5===b.offsetTop,this.doesNotIncludeMarginInBodyOffset=d.offsetTop!==h,d.removeChild(e),a.offset.initialize=a.noop},bodyOffset:function(b){var c=b.offsetTop,d=b.offsetLeft;return a.offset.initialize(),a.offset.doesNotIncludeMarginInBodyOffset&&(c+=parseFloat(a.css(b,"marginTop"))||0,d+=parseFloat(a.css(b,"marginLeft"))||0),{top:c,left:d}},setOffset:function(c,b,n){var e=a.css(c,"position");"static"===e&&(c.style.position="relative");var j,k,f=a(c),g=f.offset(),l=a.css(c,"top"),m=a.css(c,"left"),h=("absolute"===e||"fixed"===e)&&a.inArray("auto",[l,m])> -1,d={},i={};h&&(i=f.position()),j=h?i.top:parseInt(l,10)||0,k=h?i.left:parseInt(m,10)||0,a.isFunction(b)&&(b=b.call(c,n,g)),null!=b.top&&(d.top=b.top-g.top+j),null!=b.left&&(d.left=b.left-g.left+k),"using"in b?b.using.call(c,d):f.css(d)}},a.fn.extend({position:function(){if(!this[0])return null;var e=this[0],b=this.offsetParent(),c=this.offset(),d=a3.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(a.css(e,"marginTop"))||0,c.left-=parseFloat(a.css(e,"marginLeft"))||0,d.top+=parseFloat(a.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(a.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){for(var b=this.offsetParent||c.body;b&& !a3.test(b.nodeName)&&"static"===a.css(b,"position");)b=b.offsetParent;return b})}}),a.each(["Left","Top"],function(d,b){var c="scroll"+b;a.fn[c]=function(f){var b,e=this[0];return e?f!==o?this.each(function(){(b=a4(this))?b.scrollTo(d?a(b).scrollLeft():f,d?f:a(b).scrollTop()):this[c]=f}):(b=a4(e))?"pageXOffset"in b?b[d?"pageYOffset":"pageXOffset"]:a.support.boxModel&&b.document.documentElement[c]||b.document.body[c]:e[c]:null}}),a.each(["Height","Width"],function(d,b){var c=b.toLowerCase();a.fn["inner"+b]=function(){return this[0]?parseFloat(a.css(this[0],c,"padding")):null},a.fn["outer"+b]=function(b){return this[0]?parseFloat(a.css(this[0],c,b?"margin":"border")):null},a.fn[c]=function(e){var d=this[0];if(!d)return null==e?null:this;if(a.isFunction(e))return this.each(function(d){var b=a(this);b[c](e.call(this,d,b[c]()))});if(a.isWindow(d)){var f=d.document.documentElement["client"+b];return"CSS1Compat"===d.document.compatMode&&f||d.document.body["client"+b]||f}if(9===d.nodeType)return Math.max(d.documentElement["client"+b],d.body["scroll"+b],d.documentElement["scroll"+b],d.body["offset"+b],d.documentElement["offset"+b]);if(e!==o)return this.css(c,"string"==typeof e?e:e+"px");var g=a.css(d,c),h=parseFloat(g);return a.isNaN(h)?g:h}}),e.jQuery=e.$=a}(window)

        wait_for_jquery();

        if (!IS_MANIFEST_V3) {
          inject_css();
        }
    } else {
      if (browser_name == "Safari") {
        loc = String(document.location);
        setTimeout(inject_all_js_and_css_and_run_boomerang, 2000);
      }
    }
}

function wait_for_jquery()
{
    loc = String(document.location);

    if (typeof window.jQuery === "undefined" && loc.indexOf('ContactManager') < 0)
    {
        jqLoadTimer = setTimeout(wait_for_jquery, 500);
    }
    else
    {
        $ = jQuery = window.jQuery.noConflict(true);
        window.boomerang4gmail.$ = $ ;
        setTimeout(on_jquery_loaded, 0);
    }
}

function wait_until_guser_is_fetched(callback) {
    var timer = setInterval(function() {
        var guser = get_gmail_user();
        var guserIsValid = guser != null && guser !== "";
        if(guserIsValid) {
            callback();
            clearInterval(timer);
        }
    }, 500);
}

function wait_until_gmail_loaded(callback) {
    function poll() {
        if(!$("#loading").is(":visible")) {
            callback();
            clearInterval(timer);
        }
    }

    var timer = setInterval(poll, 1000);
    poll();
}

function on_jquery_loaded() {
  /*!
 * jQuery UI 1.8.13
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */ function get_frame_doc(){var oIframe=document.getElementById("canvas_frame");if(!oIframe)return document;var frameDoc=oIframe.contentWindow||oIframe.contentDocument;return frameDoc.document&&(frameDoc=frameDoc.document),frameDoc}!function($,a){function b(a,g){var b=a.nodeName.toLowerCase();if("area"===b){var d,e=a.parentNode,f=e.name;return!!a.href&&!!f&&"map"===e.nodeName.toLowerCase()&& !!(d=$("img[usemap=#"+f+"]")[0])&&c(d)}return(/input|select|textarea|button|object/.test(b)?!a.disabled:"a"==b&&a.href||g)&&c(a)}function c(a){return!$(a).parents().andSelf().filter(function(){return"hidden"===$.curCSS(this,"visibility")||$.expr.filters.hidden(this)}).length}$.ui=$.ui||{},$.ui.version||($.extend($.ui,{version:"1.8.13",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91}}),$.fn.extend({_focus:$.fn.focus,focus:function(a,b){return"number"==typeof a?this.each(function(){var c=this;setTimeout(function(){$(c).focus(),b&&b.call(c)},a)}):this._focus.apply(this,arguments)},scrollParent:function(){var a;return a=$.browser.msie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test($.curCSS(this,"position",1))&&/(auto|scroll)/.test($.curCSS(this,"overflow",1)+$.curCSS(this,"overflow-y",1)+$.curCSS(this,"overflow-x",1))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test($.curCSS(this,"overflow",1)+$.curCSS(this,"overflow-y",1)+$.curCSS(this,"overflow-x",1))}).eq(0),/fixed/.test(this.css("position"))||!a.length?$(document):a},zIndex:function(e){if(e!==a)return this.css("zIndex",e);if(this.length)for(var d,c,b=$(this[0]);b.length&&b[0]!==document;){if(("absolute"===(d=b.css("position"))||"relative"===d||"fixed"===d)&&(c=parseInt(b.css("zIndex"),10),!isNaN(c)&&0!==c))return c;b=b.parent()}return 0},disableSelection:function(){return this.bind(($.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(a){a.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),$.each(["Width","Height"],function(c,b){var d="Width"===b?["Left","Right"]:["Top","Bottom"],e=b.toLowerCase(),f={innerWidth:$.fn.innerWidth,innerHeight:$.fn.innerHeight,outerWidth:$.fn.outerWidth,outerHeight:$.fn.outerHeight};function g(b,a,c,e){return $.each(d,function(){a-=parseFloat($.curCSS(b,"padding"+this,!0))||0,c&&(a-=parseFloat($.curCSS(b,"border"+this+"Width",!0))||0),e&&(a-=parseFloat($.curCSS(b,"margin"+this,!0))||0)}),a}$.fn["inner"+b]=function(c){return c===a?f["inner"+b].call(this):this.each(function(){$(this).css(e,g(this,c)+"px")})},$.fn["outer"+b]=function(a,c){return"number"!=typeof a?f["outer"+b].call(this,a):this.each(function(){$(this).css(e,g(this,a,!0,c)+"px")})}}),$.extend($.expr[":"],{data:function(a,c,b){return!!$.data(a,b[3])},focusable:function(a){return b(a,!isNaN($.attr(a,"tabindex")))},tabbable:function(a){var c=$.attr(a,"tabindex"),d=isNaN(c);return(d||c>=0)&&b(a,!d)}}),$(function(){var b=document.body,a=b.appendChild(a=document.createElement("div"));$.extend(a.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),$.support.minHeight=100===a.offsetHeight,$.support.selectstart="onselectstart"in a,b.removeChild(a).style.display="none"}),$.extend($.ui,{plugin:{add:function(d,e,c){var b=$.ui[d].prototype;for(var a in c)b.plugins[a]=b.plugins[a]||[],b.plugins[a].push([e,c[a]])},call:function(a,d,e){var b=a.plugins[d];if(b&&a.element[0].parentNode)for(var c=0;c<b.length;c++)a.options[b[c][0]]&&b[c][1].apply(a.element,e)}},contains:function(a,b){return document.compareDocumentPosition?16&a.compareDocumentPosition(b):a!==b&&a.contains(b)},hasScroll:function(a,c){if("hidden"===$(a).css("overflow"))return!1;var b=c&&"left"===c?"scrollLeft":"scrollTop",d=!1;return a[b]>0||(a[b]=1,d=a[b]>0,a[b]=0,d)},isOverAxis:function(a,b,c){return a>b&&a<b+c},isOver:function(a,b,c,d,e,f){return $.ui.isOverAxis(a,c,e)&&$.ui.isOverAxis(b,d,f)}}))}(jQuery),/*!
 * jQuery UI Widget 1.8.13
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */ function($,a){if($.cleanData){var b=$.cleanData;$.cleanData=function(a){for(var c,d=0;null!=(c=a[d]);d++)$(c).triggerHandler("remove");b(a)}}else{var c=$.fn.remove;$.fn.remove=function(a,b){return this.each(function(){return b||(!a||$.filter(a,[this]).length)&&$("*",this).add([this]).each(function(){$(this).triggerHandler("remove")}),c.call($(this),a,b)})}}$.widget=function(a,c,d){var e,b=a.split(".")[0];e=b+"-"+(a=a.split(".")[1]),d||(d=c,c=$.Widget),$.expr[":"][e]=function(b){return!!$.data(b,a)},$[b]=$[b]||{},$[b][a]=function(a,b){arguments.length&&this._createWidget(a,b)};var f=new c;f.options=$.extend(!0,{},f.options),$[b][a].prototype=$.extend(!0,f,{namespace:b,widgetName:a,widgetEventPrefix:$[b][a].prototype.widgetEventPrefix||a,widgetBaseClass:e},d),$.widget.bridge(a,$[b][a])},$.widget.bridge=function(b,c){$.fn[b]=function(d){var e="string"==typeof d,f=Array.prototype.slice.call(arguments,1),g=this;return d=!e&&f.length?$.extend.apply(null,[!0,d].concat(f)):d,e&&"_"===d.charAt(0)||(e?this.each(function(){var c=$.data(this,b),e=c&&$.isFunction(c[d])?c[d].apply(c,f):c;if(e!==c&&e!==a)return g=e,!1}):this.each(function(){var a=$.data(this,b);a?a.option(d||{})._init():$.data(this,b,new c(d,this))})),g}},$.Widget=function(a,b){arguments.length&&this._createWidget(a,b)},$.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",options:{disabled:!1},_createWidget:function(b,a){$.data(a,this.widgetName,this),this.element=$(a),this.options=$.extend(!0,{},this.options,this._getCreateOptions(),b);var c=this;this.element.bind("remove."+this.widgetName,function(){c.destroy()}),this._create(),this._trigger("create"),this._init()},_getCreateOptions:function(){return $.metadata&&$.metadata.get(this.element[0])[this.widgetName]},_create:function(){},_init:function(){},destroy:function(){this.element.unbind("."+this.widgetName).removeData(this.widgetName),this.widget().unbind("."+this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass+"-disabled ui-state-disabled")},widget:function(){return this.element},option:function(b,c){var d=b;if(0===arguments.length)return $.extend({},this.options);if("string"==typeof b){if(c===a)return this.options[b];(d={})[b]=c}return this._setOptions(d),this},_setOptions:function(a){var b=this;return $.each(a,function(a,c){b._setOption(a,c)}),this},_setOption:function(b,a){return this.options[b]=a,"disabled"===b&&this.widget()[a?"addClass":"removeClass"](this.widgetBaseClass+"-disabled ui-state-disabled").attr("aria-disabled",a),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_trigger:function(b,a,c){var d=this.options[b];if((a=$.Event(a)).type=(b===this.widgetEventPrefix?b:this.widgetEventPrefix+b).toLowerCase(),c=c||{},a.originalEvent)for(var e,f=$.event.props.length;f;)a[e=$.event.props[--f]]=a.originalEvent[e];return this.element.trigger(a,c),!($.isFunction(d)&& !1===d.call(this.element[0],a,c)||a.isDefaultPrevented())}}}(jQuery),function($,a){$.ui=$.ui||{};var b=/left|center|right/,c=/top|center|bottom/,d="center",e=$.fn.position,f=$.fn.offset;$.fn.position=function(a){if(!a||!a.of)return e.apply(this,arguments);a=$.extend({},a);var i,j,f,g=$(a.of),k=g[0],l=(a.collision||"flip").split(" "),h=a.offset?a.offset.split(" "):[0,0];return 9===k.nodeType?(i=g.width(),j=g.height(),f={top:0,left:0}):k.setTimeout?(i=g.width(),j=g.height(),f={top:g.scrollTop(),left:g.scrollLeft()}):k.preventDefault?(a.at="left top",i=j=0,f={top:a.of.pageY,left:a.of.pageX}):(i=g.outerWidth(),j=g.outerHeight(),f=g.offset()),$.each(["my","at"],function(){var e=(a[this]||"").split(" ");1===e.length&&(e=b.test(e[0])?e.concat([d]):c.test(e[0])?[d].concat(e):[d,d]),e[0]=b.test(e[0])?e[0]:d,e[1]=c.test(e[1])?e[1]:d,a[this]=e}),1===l.length&&(l[1]=l[0]),h[0]=parseInt(h[0],10)||0,1===h.length&&(h[1]=h[0]),h[1]=parseInt(h[1],10)||0,"right"===a.at[0]?f.left+=i:a.at[0]===d&&(f.left+=i/2),"bottom"===a.at[1]?f.top+=j:a.at[1]===d&&(f.top+=j/2),f.left+=h[0],f.top+=h[1],this.each(function(){var n,c=$(this),e=c.outerWidth(),g=c.outerHeight(),k=parseInt($.curCSS(this,"marginLeft",!0))||0,m=parseInt($.curCSS(this,"marginTop",!0))||0,o=e+k+(parseInt($.curCSS(this,"marginRight",!0))||0),p=g+m+(parseInt($.curCSS(this,"marginBottom",!0))||0),b=$.extend({},f);"right"===a.my[0]?b.left-=e:a.my[0]===d&&(b.left-=e/2),"bottom"===a.my[1]?b.top-=g:a.my[1]===d&&(b.top-=g/2),b.left=Math.round(b.left),b.top=Math.round(b.top),n={left:b.left-k,top:b.top-m},$.each(["left","top"],function(c,d){$.ui.position[l[c]]&&$.ui.position[l[c]][d](b,{targetWidth:i,targetHeight:j,elemWidth:e,elemHeight:g,collisionPosition:n,collisionWidth:o,collisionHeight:p,offset:h,my:a.my,at:a.at})}),$.fn.bgiframe&&c.bgiframe(),c.offset($.extend(b,{using:a.using}))})},$.ui.position={fit:{left:function(a,b){var c=$(window),d=b.collisionPosition.left+b.collisionWidth-c.width()-c.scrollLeft();a.left=d>0?a.left-d:Math.max(a.left-b.collisionPosition.left,a.left)},top:function(a,b){var c=$(window),d=b.collisionPosition.top+b.collisionHeight-c.height()-c.scrollTop();a.top=d>0?a.top-d:Math.max(a.top-b.collisionPosition.top,a.top)}},flip:{left:function(g,a){if(a.at[0]!==d){var b=$(window),h=a.collisionPosition.left+a.collisionWidth-b.width()-b.scrollLeft(),c="left"===a.my[0]?-a.elemWidth:"right"===a.my[0]?a.elemWidth:0,e="left"===a.at[0]?a.targetWidth:-a.targetWidth,f=-2*a.offset[0];g.left+=a.collisionPosition.left<0?c+e+f:h>0?c+e+f:0}},top:function(g,a){if(a.at[1]!==d){var b=$(window),h=a.collisionPosition.top+a.collisionHeight-b.height()-b.scrollTop(),c="top"===a.my[1]?-a.elemHeight:"bottom"===a.my[1]?a.elemHeight:0,e="top"===a.at[1]?a.targetHeight:-a.targetHeight,f=-2*a.offset[1];g.top+=a.collisionPosition.top<0?c+e+f:h>0?c+e+f:0}}}},$.offset.setOffset||($.offset.setOffset=function(a,b){/static/.test($.curCSS(a,"position"))&&(a.style.position="relative");var c=$(a),d=c.offset(),f=parseInt($.curCSS(a,"top",!0),10)||0,g=parseInt($.curCSS(a,"left",!0),10)||0,e={top:b.top-d.top+f,left:b.left-d.left+g};"using"in b?b.using.call(a,e):c.css(e)},$.fn.offset=function(b){var a=this[0];return a&&a.ownerDocument?b?this.each(function(){$.offset.setOffset(this,b)}):f.call(this):null})}(jQuery),function($,a){var b="b4g-ui-dialog b4g-ui-widget b4g-ui-widget-content b4g-ui-corner-all ",c={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},d={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},e=$.attrFn||{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0,click:!0};$.widget("ui.dialog",{options:{autoOpen:!0,buttons:{},closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:!1,maxWidth:!1,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",collision:"fit",using:function(a){var b=$(this).css(a).offset().top;b<0&&$(this).css("top",a.top-b)}},resizable:!0,show:null,stack:!0,title:"",width:300,zIndex:1e3},_create:function(){this.originalTitle=this.element.attr("title"),"string"!=typeof this.originalTitle&&(this.originalTitle=""),this.options.title=this.options.title||this.originalTitle;var c=this,a=c.options,g=a.title||"&#160;",f=$.ui.dialog.getTitleId(c.element),e=(c.uiDialog=$("<div></div>")).appendTo(document.body).hide().addClass(b+a.dialogClass).css({zIndex:a.zIndex}).attr("tabIndex",-1).css("outline",0).keydown(function(b){a.closeOnEscape&&b.keyCode&&b.keyCode===$.ui.keyCode.ESCAPE&&(c.close(b),b.preventDefault())}).attr({role:"dialog","aria-labelledby":f}).mousedown(function(a){c.moveToTop(!1,a)}),d=(c.element.show().removeAttr("title").addClass("b4g-ui-dialog-content b4g-ui-widget-content").appendTo(e),(c.uiDialogTitlebar=$("<div></div>")).addClass("b4g-ui-dialog-titlebar b4g-ui-widget-header b4g-ui-corner-all b4g-ui-helper-clearfix").prependTo(e)),h=$("<a></a>").addClass("b4g-ui-dialog-titlebar-close b4g-ui-corner-all").attr("role","button").focus(function(){h.addClass("ui-state-focus")}).blur(function(){h.removeClass("ui-state-focus")}).click(function(a){return c.close(a),!1}).appendTo(d);(c.uiDialogTitlebarCloseText=$("<span></span>")).addClass("ui-icon ui-icon-closethick").text(a.closeText).appendTo(h),$("<span></span>").addClass("b4g-ui-dialog-title").attr("id",f).html(g).prependTo(d),$.isFunction(a.beforeclose)&&!$.isFunction(a.beforeClose)&&(a.beforeClose=a.beforeclose),d.find("*").add(d).disableSelection(),a.draggable&&$.fn.draggable&&c._makeDraggable(),a.resizable&&$.fn.resizable&&c._makeResizable(),c._createButtons(a.buttons),c._isOpen=!1,$.fn.bgiframe&&e.bgiframe()},_init:function(){this.options.autoOpen&&this.open()},destroy:function(){var a=this;return a.overlay&&a.overlay.destroy(),a.uiDialog.hide(),a.element.unbind(".dialog").removeData("dialog").removeClass("b4g-ui-dialog-content b4g-ui-widget-content").hide().appendTo("body"),a.uiDialog.remove(),a.originalTitle&&a.element.attr("title",a.originalTitle),a},widget:function(){return this.uiDialog},close:function(b){var c,d,a=this;if(!1!==a._trigger("beforeClose",b))return a.overlay&&a.overlay.destroy(),a.uiDialog.unbind("keypress.b4g-ui-dialog"),a._isOpen=!1,a.options.hide?a.uiDialog.hide(a.options.hide,function(){a._trigger("close",b)}):(a.uiDialog.hide(),a._trigger("close",b)),$.ui.dialog.overlay.resize(),a.options.modal&&(c=0,$(".b4g-ui-dialog").each(function(){this===a.uiDialog[0]||(d=$(this).css("z-index"),isNaN(d)||(c=Math.max(c,d)))}),$.ui.dialog.maxZ=c),a},isOpen:function(){return this._isOpen},moveToTop:function(e,c){var d,a=this,b=a.options;return(!b.modal||e)&&(b.stack||b.modal)?(b.zIndex>$.ui.dialog.maxZ&&($.ui.dialog.maxZ=b.zIndex),a.overlay&&($.ui.dialog.maxZ+=1,a.overlay.$el.css("z-index",$.ui.dialog.overlay.maxZ=$.ui.dialog.maxZ)),d={scrollTop:a.element.attr("scrollTop"),scrollLeft:a.element.attr("scrollLeft")},$.ui.dialog.maxZ+=1,a.uiDialog.css("z-index",$.ui.dialog.maxZ),a.element.attr(d),a._trigger("focus",c),a):a._trigger("focus",c)},open:function(){if(!this._isOpen){var a=this,b=a.options,c=a.uiDialog;return a.overlay=b.modal?new $.ui.dialog.overlay(a):null,a._size(),a._position(b.position),c.show(b.show),a.moveToTop(!0),b.modal&&c.bind("keypress.b4g-ui-dialog",function(a){if(a.keyCode===$.ui.keyCode.TAB){var b=$(":tabbable",this),c=b.filter(":first"),d=b.filter(":last");return a.target!==d[0]||a.shiftKey?a.target===c[0]&&a.shiftKey?(d.focus(1),!1):void 0:(c.focus(1),!1)}}),$(a.element.find(":tabbable").get().concat(c.find(".b4g-ui-dialog-buttonpane :tabbable").get().concat(c.get()))).eq(0).focus(),a._isOpen=!0,a._trigger("open"),a}},_createButtons:function(a){var b=this,d=!1,c=$("<div></div>").addClass("b4g-ui-dialog-buttonpane b4g-ui-widget-content b4g-ui-helper-clearfix"),f=$("<div></div>").addClass("b4g-ui-dialog-buttonset").appendTo(c);b.uiDialog.find(".b4g-ui-dialog-buttonpane").remove(),"object"==typeof a&&null!==a&&$.each(a,function(){return d=!0,!1}),d&&($.each(a,function(c,a){a=$.isFunction(a)?{click:a,text:c}:a;var d=$('<button type="button"></button>').click(function(){a.click.apply(b.element[0],arguments)}).appendTo(f);$.each(a,function(a,b){"click"!==a&&(a in e?d[a](b):d.attr(a,b))}),$.fn.button&&d.button()}),c.appendTo(b.uiDialog))},_makeDraggable:function(){var b,a=this,c=a.options,d=$(document);function e(a){return{position:a.position,offset:a.offset}}a.uiDialog.draggable({cancel:".b4g-ui-dialog-content, .b4g-ui-dialog-titlebar-close",handle:".b4g-ui-dialog-titlebar",containment:"document",start:function(d,f){b="auto"===c.height?"auto":$(this).height(),$(this).height($(this).height()).addClass("b4g-ui-dialog-dragging"),a._trigger("dragStart",d,e(f))},drag:function(b,c){a._trigger("drag",b,e(c))},stop:function(g,f){c.position=[f.position.left-d.scrollLeft(),f.position.top-d.scrollTop()],$(this).removeClass("b4g-ui-dialog-dragging").height(b),a._trigger("dragStop",g,e(f)),$.ui.dialog.overlay.resize()}})},_makeResizable:function(a){a=void 0===a?this.options.resizable:a;var b=this,c=b.options,d=b.uiDialog.css("position"),e="string"==typeof a?a:"n,e,s,w,se,sw,ne,nw";function f(a){return{originalPosition:a.originalPosition,originalSize:a.originalSize,position:a.position,size:a.size}}b.uiDialog.resizable({cancel:".b4g-ui-dialog-content",containment:"document",alsoResize:b.element,maxWidth:c.maxWidth,maxHeight:c.maxHeight,minWidth:c.minWidth,minHeight:b._minHeight(),handles:e,start:function(a,c){$(this).addClass("b4g-ui-dialog-resizing"),b._trigger("resizeStart",a,f(c))},resize:function(a,c){b._trigger("resize",a,f(c))},stop:function(a,d){$(this).removeClass("b4g-ui-dialog-resizing"),c.height=$(this).height(),c.width=$(this).width(),b._trigger("resizeStop",a,f(d)),$.ui.dialog.overlay.resize()}}).css("position",d).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")},_minHeight:function(){var a=this.options;return"auto"===a.height?a.minHeight:Math.min(a.minHeight,a.height)},_position:function(a){var c,b=[],d=[0,0];a?(("string"==typeof a||"object"==typeof a&&"0"in a)&&(1===(b=a.split?a.split(" "):[a[0],a[1]]).length&&(b[1]=b[0]),$.each(["left","top"],function(a,c){+b[a]===b[a]&&(d[a]=b[a],b[a]=c)}),a={my:b.join(" "),at:b.join(" "),offset:d.join(" ")}),a=$.extend({},$.ui.dialog.prototype.options.position,a)):a=$.ui.dialog.prototype.options.position,(c=this.uiDialog.is(":visible"))||this.uiDialog.show(),this.uiDialog.css({top:0,left:0}).position($.extend({of:window},a)),c||this.uiDialog.hide()},_setOptions:function(a){var f=this,b={},e=!1;$.each(a,function(a,g){f._setOption(a,g),a in c&&(e=!0),a in d&&(b[a]=g)}),e&&this._size(),this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option",b)},_setOption:function(f,a){var c=this,d=c.uiDialog;switch(f){case"beforeclose":f="beforeClose";break;case"buttons":c._createButtons(a);break;case"closeText":c.uiDialogTitlebarCloseText.text(""+a);break;case"dialogClass":d.removeClass(c.options.dialogClass).addClass(b+a);break;case"disabled":a?d.addClass("b4g-ui-dialog-disabled"):d.removeClass("b4g-ui-dialog-disabled");break;case"draggable":var g=d.is(":data(draggable)");g&&!a&&d.draggable("destroy"),!g&&a&&c._makeDraggable();break;case"position":c._position(a);break;case"resizable":var e=d.is(":data(resizable)");e&&!a&&d.resizable("destroy"),e&&"string"==typeof a&&d.resizable("option","handles",a),e|| !1===a||c._makeResizable(a);break;case"title":$(".b4g-ui-dialog-title",c.uiDialogTitlebar).html(""+(a||"&#160;"))}$.Widget.prototype._setOption.apply(c,arguments)},_size:function(){var b,c,a=this.options,d=this.uiDialog.is(":visible");if(this.element.show().css({width:"auto",minHeight:0,height:0}),a.minWidth>a.width&&(a.width=a.minWidth),b=this.uiDialog.css({height:"auto",width:a.width}).height(),c=Math.max(0,a.minHeight-b),"auto"===a.height){if($.support.minHeight)this.element.css({minHeight:c,height:"auto"});else{this.uiDialog.show();var e=this.element.css("height","auto").height();d||this.uiDialog.hide(),this.element.height(Math.max(e,c))}}else this.element.height(Math.max(a.height-b,0));this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())}}),$.extend($.ui.dialog,{version:"1.8.13",uuid:0,maxZ:0,getTitleId:function(b){var a=b.attr("id");return a||(this.uuid+=1,a=this.uuid),"b4g-ui-dialog-title-"+a},overlay:function(a){this.$el=$.ui.dialog.overlay.create(a)}}),$.extend($.ui.dialog.overlay,{instances:[],oldInstances:[],maxZ:0,events:$.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(a){return a+".dialog-overlay"}).join(" "),create:function(b){0===this.instances.length&&(setTimeout(function(){$.ui.dialog.overlay.instances.length&&$(document).bind($.ui.dialog.overlay.events,function(a){if($(a.target).zIndex()<$.ui.dialog.overlay.maxZ)return!1})},1),$(document).bind("keydown.dialog-overlay",function(a){b.options.closeOnEscape&&a.keyCode&&a.keyCode===$.ui.keyCode.ESCAPE&&(b.close(a),a.preventDefault())}),$(window).bind("resize.dialog-overlay",$.ui.dialog.overlay.resize));var a=(this.oldInstances.pop()||$("<div></div>").addClass("b4g-ui-widget-overlay")).appendTo(document.body).css({width:this.width(),height:this.height()});return $.fn.bgiframe&&a.bgiframe(),this.instances.push(a),a},destroy:function(a){var b=$.inArray(a,this.instances);-1!=b&&this.oldInstances.push(this.instances.splice(b,1)[0]),0===this.instances.length&&$([document,window]).unbind(".dialog-overlay"),a.remove();var c=0;$.each(this.instances,function(){c=Math.max(c,this.css("z-index"))}),this.maxZ=c},height:function(){var a,b;return $.browser.msie&&$.browser.version<7?(a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),b=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight),a<b)?$(window).height()+"px":a+"px":$(document).height()+"px"},width:function(){var a,b;return $.browser.msie&&$.browser.version<7?(a=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth),b=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth),a<b)?$(window).width()+"px":a+"px":$(document).width()+"px"},resize:function(){var a=$([]);$.each($.ui.dialog.overlay.instances,function(){a=a.add(this)}),a.css({width:0,height:0}).css({width:$.ui.dialog.overlay.width(),height:$.ui.dialog.overlay.height()})}}),$.extend($.ui.dialog.overlay.prototype,{destroy:function(){$.ui.dialog.overlay.destroy(this.$el)}})}(jQuery),function($,undefined){$.extend($.ui,{datepicker:{version:"1.8.13"}});var instActive,PROP_NAME="datepicker",dpuuid=new Date().getTime();function Datepicker(){this.debug=!1,this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="b4g-ui-datepicker-div",this._inlineClass="b4g-ui-datepicker-inline",this._appendClass="b4g-ui-datepicker-append",this._triggerClass="b4g-ui-datepicker-trigger",this._dialogClass="b4g-ui-datepicker-dialog",this._disableClass="b4g-ui-datepicker-disabled",this._unselectableClass="b4g-ui-datepicker-unselectable",this._currentClass="b4g-ui-datepicker-current-day",this._dayOverClass="b4g-ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1},$.extend(this._defaults,this.regional[""]),this.dpDiv=bindHover($('<div id="'+this._mainDivId+'" class="b4g-ui-datepicker b4g-ui-widget b4g-ui-widget-content b4g-ui-helper-clearfix b4g-ui-corner-all"></div>'))}function bindHover(dpDiv){var selector="button, .b4g-ui-datepicker-prev, .b4g-ui-datepicker-next, .b4g-ui-datepicker-calendar td a";return dpDiv.delegate(selector,"mouseout",function(){$(this).removeClass("ui-state-hover"),-1!=this.className.indexOf("b4g-ui-datepicker-prev")&&$(this).removeClass("b4g-ui-datepicker-prev-hover"),-1!=this.className.indexOf("b4g-ui-datepicker-next")&&$(this).removeClass("b4g-ui-datepicker-next-hover")}).delegate(selector,"mouseover",function(){$.datepicker._isDisabledDatepicker(instActive.inline?dpDiv.parent()[0]:instActive.input[0])||($(this).parents(".b4g-ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),$(this).addClass("ui-state-hover"),-1!=this.className.indexOf("b4g-ui-datepicker-prev")&&$(this).addClass("b4g-ui-datepicker-prev-hover"),-1!=this.className.indexOf("b4g-ui-datepicker-next")&&$(this).addClass("b4g-ui-datepicker-next-hover"))})}function extendRemove(target,props){for(var name in $.extend(target,props),props)(null==props[name]||undefined==props[name])&&(target[name]=props[name]);return target}function isArray(a){return a&&($.browser.safari&&"object"==typeof a&&a.length||a.constructor&&a.constructor.toString().match(/\Array\(\)/))}$.extend(Datepicker.prototype,{markerClassName:"hasDatepicker",log:function(){this.debug&&console.log.apply("",arguments)},_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(a){return extendRemove(this._defaults,a||{}),this},_attachDatepicker:function(target,settings){var inlineSettings=null;for(var attrName in this._defaults){var attrValue=target.getAttribute("date:"+attrName);if(attrValue){inlineSettings=inlineSettings||{};try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}}var nodeName=target.nodeName.toLowerCase(),inline="div"==nodeName||"span"==nodeName;target.id||(this.uuid+=1,target.id="dp"+this.uuid);var inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{},inlineSettings||{}),"input"==nodeName?this._connectDatepicker(target,inst):inline&&this._inlineDatepicker(target,inst)},_newInst:function(a,b){return{id:a[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1"),input:a,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:b,dpDiv:b?bindHover($('<div class="'+this._inlineClass+' b4g-ui-datepicker b4g-ui-widget b4g-ui-widget-content b4g-ui-helper-clearfix b4g-ui-corner-all"></div>')):this.dpDiv}},_connectDatepicker:function(c,a){var b=$(c);a.append=$([]),a.trigger=$([]),b.hasClass(this.markerClassName)||(this._attachments(b,a),b.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(d,b,c){a.settings[b]=c}).bind("getData.datepicker",function(c,b){return this._get(a,b)}),this._autoSize(a),$.data(c,PROP_NAME,a))},_attachments:function(c,a){var f=this._get(a,"appendText"),g=this._get(a,"isRTL");a.append&&a.append.remove(),f&&(a.append=$('<span class="'+this._appendClass+'">'+f+"</span>"),c[g?"before":"after"](a.append)),c.unbind("focus",this._showDatepicker),a.trigger&&a.trigger.remove();var d=this._get(a,"showOn");if(("focus"==d||"both"==d)&&c.focus(this._showDatepicker),"button"==d||"both"==d){var b=this._get(a,"buttonText"),e=this._get(a,"buttonImage");a.trigger=$(this._get(a,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass).attr({src:e,alt:b,title:b}):$('<button type="button"></button>').addClass(this._triggerClass).html(""==e?b:$("<img/>").attr({src:e,alt:b,title:b}))),c[g?"before":"after"](a.trigger),a.trigger.click(function(){return $.datepicker._datepickerShowing&&$.datepicker._lastInput==c[0]?$.datepicker._hideDatepicker():$.datepicker._showDatepicker(c[0]),!1})}},_autoSize:function(a){if(this._get(a,"autoSize")&&!a.inline){var b=new Date(2009,11,20),c=this._get(a,"dateFormat");if(c.match(/[DM]/)){var d=function(b){for(var c=0,d=0,a=0;a<b.length;a++)b[a].length>c&&(c=b[a].length,d=a);return d};b.setMonth(d(this._get(a,c.match(/MM/)?"monthNames":"monthNamesShort"))),b.setDate(d(this._get(a,c.match(/DD/)?"dayNames":"dayNamesShort"))+20-b.getDay())}a.input.attr("size",this._formatDate(a,b).length)}},_inlineDatepicker:function(b,a){var c=$(b);c.hasClass(this.markerClassName)||(c.addClass(this.markerClassName).append(a.dpDiv).bind("setData.datepicker",function(d,b,c){a.settings[b]=c}).bind("getData.datepicker",function(c,b){return this._get(a,b)}),$.data(b,PROP_NAME,a),this._setDate(a,this._getDefaultDate(a),!0),this._updateDatepicker(a),this._updateAlternate(a),a.dpDiv.show())},_dialogDatepicker:function(k,b,d,e,c){var a=this._dialogInst;if(!a){this.uuid+=1;var f="dp"+this.uuid;this._dialogInput=$('<input type="text" id="'+f+'" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>'),this._dialogInput.keydown(this._doKeyDown),$("body").append(this._dialogInput),(a=this._dialogInst=this._newInst(this._dialogInput,!1)).settings={},$.data(this._dialogInput[0],PROP_NAME,a)}if(extendRemove(a.settings,e||{}),b=b&&b.constructor==Date?this._formatDate(a,b):b,this._dialogInput.val(b),this._pos=c?c.length?c:[c.pageX,c.pageY]:null,!this._pos){var g=document.documentElement.clientWidth,h=document.documentElement.clientHeight,i=document.documentElement.scrollLeft||document.body.scrollLeft,j=document.documentElement.scrollTop||document.body.scrollTop;this._pos=[g/2-100+i,h/2-150+j]}return this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),a.settings.onSelect=d,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),$.blockUI&&$.blockUI(this.dpDiv),$.data(this._dialogInput[0],PROP_NAME,a),this},_destroyDatepicker:function(a){var b=$(a),d=$.data(a,PROP_NAME);if(b.hasClass(this.markerClassName)){var c=a.nodeName.toLowerCase();$.removeData(a,PROP_NAME),"input"==c?(d.append.remove(),d.trigger.remove(),b.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"==c||"span"==c)&&b.removeClass(this.markerClassName).empty()}},_enableDatepicker:function(a){var c=$(a),e=$.data(a,PROP_NAME);if(c.hasClass(this.markerClassName)){var b=a.nodeName.toLowerCase();if("input"==b)a.disabled=!1,e.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""});else if("div"==b||"span"==b){var d=c.children("."+this._inlineClass);d.children().removeClass("ui-state-disabled"),d.find("select.b4g-ui-datepicker-month, select.b4g-ui-datepicker-year").removeAttr("disabled")}this._disabledInputs=$.map(this._disabledInputs,function(b){return b==a?null:b})}},_disableDatepicker:function(a){var c=$(a),e=$.data(a,PROP_NAME);if(c.hasClass(this.markerClassName)){var b=a.nodeName.toLowerCase();if("input"==b)a.disabled=!0,e.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"});else if("div"==b||"span"==b){var d=c.children("."+this._inlineClass);d.children().addClass("ui-state-disabled"),d.find("select.b4g-ui-datepicker-month, select.b4g-ui-datepicker-year").attr("disabled","disabled")}this._disabledInputs=$.map(this._disabledInputs,function(b){return b==a?null:b}),this._disabledInputs[this._disabledInputs.length]=a}},_isDisabledDatepicker:function(b){if(!b)return!1;for(var a=0;a<this._disabledInputs.length;a++)if(this._disabledInputs[a]==b)return!0;return!1},_getInst:function(a){try{return $.data(a,PROP_NAME)}catch(b){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(d,b,g){var a=this._getInst(d);if(2==arguments.length&&"string"==typeof b)return"defaults"==b?$.extend({},$.datepicker._defaults):a?"all"==b?$.extend({},a.settings):this._get(a,b):null;var c=b||{};if("string"==typeof b&&((c={})[b]=g),a){this._curInst==a&&this._hideDatepicker();var h=this._getDateDatepicker(d,!0),e=this._getMinMaxDate(a,"min"),f=this._getMinMaxDate(a,"max");extendRemove(a.settings,c),null!==e&&undefined!==c.dateFormat&&undefined===c.minDate&&(a.settings.minDate=this._formatDate(a,e)),null!==f&&undefined!==c.dateFormat&&undefined===c.maxDate&&(a.settings.maxDate=this._formatDate(a,f)),this._attachments($(d),a),this._autoSize(a),this._setDate(a,h),this._updateAlternate(a),this._updateDatepicker(a)}},_changeDatepicker:function(a,b,c){this._optionDatepicker(a,b,c)},_refreshDatepicker:function(b){var a=this._getInst(b);a&&this._updateDatepicker(a)},_setDateDatepicker:function(b,c){var a=this._getInst(b);a&&(this._setDate(a,c),this._updateDatepicker(a),this._updateAlternate(a))},_getDateDatepicker:function(b,c){var a=this._getInst(b);return a&&!a.inline&&this._setDateFromField(a,c),a?this._getDate(a):null},_doKeyDown:function(a){var b=$.datepicker._getInst(a.target),c=!0,d=b.dpDiv.is(".b4g-ui-datepicker-rtl");if(b._keyEvent=!0,$.datepicker._datepickerShowing)switch(a.keyCode){case 9:$.datepicker._hideDatepicker(),c=!1;break;case 13:var e=$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClass+")",b.dpDiv);return e[0]?$.datepicker._selectDay(a.target,b.selectedMonth,b.selectedYear,e[0]):$.datepicker._hideDatepicker(),!1;case 27:$.datepicker._hideDatepicker();break;case 33:$.datepicker._adjustDate(a.target,a.ctrlKey?-$.datepicker._get(b,"stepBigMonths"):-$.datepicker._get(b,"stepMonths"),"M");break;case 34:$.datepicker._adjustDate(a.target,a.ctrlKey?+$.datepicker._get(b,"stepBigMonths"):+$.datepicker._get(b,"stepMonths"),"M");break;case 35:(a.ctrlKey||a.metaKey)&&$.datepicker._clearDate(a.target),c=a.ctrlKey||a.metaKey;break;case 36:(a.ctrlKey||a.metaKey)&&$.datepicker._gotoToday(a.target),c=a.ctrlKey||a.metaKey;break;case 37:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,d?1:-1,"D"),c=a.ctrlKey||a.metaKey,a.originalEvent.altKey&&$.datepicker._adjustDate(a.target,a.ctrlKey?-$.datepicker._get(b,"stepBigMonths"):-$.datepicker._get(b,"stepMonths"),"M");break;case 38:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,-7,"D"),c=a.ctrlKey||a.metaKey;break;case 39:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,d?-1:1,"D"),c=a.ctrlKey||a.metaKey,a.originalEvent.altKey&&$.datepicker._adjustDate(a.target,a.ctrlKey?+$.datepicker._get(b,"stepBigMonths"):+$.datepicker._get(b,"stepMonths"),"M");break;case 40:(a.ctrlKey||a.metaKey)&&$.datepicker._adjustDate(a.target,7,"D"),c=a.ctrlKey||a.metaKey;break;default:c=!1}else 36==a.keyCode&&a.ctrlKey?$.datepicker._showDatepicker(this):c=!1;c&&(a.preventDefault(),a.stopPropagation())},_doKeyPress:function(a){var b=$.datepicker._getInst(a.target);if($.datepicker._get(b,"constrainInput")){var c=$.datepicker._possibleChars($.datepicker._get(b,"dateFormat")),d=String.fromCharCode(undefined==a.charCode?a.keyCode:a.charCode);return a.ctrlKey||a.metaKey||d<" "||!c||c.indexOf(d)> -1}},_doKeyUp:function(b){var a=$.datepicker._getInst(b.target);if(a.input.val()!=a.lastVal)try{$.datepicker.parseDate($.datepicker._get(a,"dateFormat"),a.input?a.input.val():null,$.datepicker._getFormatConfig(a))&&($.datepicker._setDateFromField(a),$.datepicker._updateAlternate(a),$.datepicker._updateDatepicker(a))}catch(c){$.datepicker.log(c)}return!0},_showDatepicker:function(b){if("input"!=(b=b.target||b).nodeName.toLowerCase()&&(b=$("input",b.parentNode)[0]),!$.datepicker._isDisabledDatepicker(b)&&$.datepicker._lastInput!=b){var a=$.datepicker._getInst(b);$.datepicker._curInst&&$.datepicker._curInst!=a&&$.datepicker._curInst.dpDiv.stop(!0,!0);var h=$.datepicker._get(a,"beforeShow");extendRemove(a.settings,h?h.apply(b,[b,a]):{}),a.lastVal=null,$.datepicker._lastInput=b,$.datepicker._setDateFromField(a),$.datepicker._inDialog&&(b.value=""),$.datepicker._pos||($.datepicker._pos=$.datepicker._findPos(b),$.datepicker._pos[1]+=b.offsetHeight);var e=!1;$(b).parents().each(function(){return!(e|="fixed"==$(this).css("position"))}),e&&$.browser.opera&&($.datepicker._pos[0]-=document.documentElement.scrollLeft,$.datepicker._pos[1]-=document.documentElement.scrollTop);var d={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};if($.datepicker._pos=null,a.dpDiv.empty(),a.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),$.datepicker._updateDatepicker(a),d=$.datepicker._checkOffset(a,d,e),a.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?"static":e?"fixed":"absolute",display:"none",left:d.left+"px",top:d.top+"px"}),!a.inline){var c=$.datepicker._get(a,"showAnim"),f=$.datepicker._get(a,"duration"),g=function(){var b=a.dpDiv.find("iframe.b4g-ui-datepicker-cover");if(b.length){var c=$.datepicker._getBorders(a.dpDiv);b.css({left:-c[0],top:-c[1],width:a.dpDiv.outerWidth(),height:a.dpDiv.outerHeight()})}};a.dpDiv.zIndex($(b).zIndex()+1),$.datepicker._datepickerShowing=!0,$.effects&&$.effects[c]?a.dpDiv.show(c,$.datepicker._get(a,"showOptions"),f,g):a.dpDiv[c||"show"](c?f:null,g),c&&f||g(),a.input.is(":visible")&&!a.input.is(":disabled")&&a.input.focus(),$.datepicker._curInst=a}}},_updateDatepicker:function(inst){var elementsWithOnClickHandlers,elementsWithOnChangeHandlers,myIcons,self=this,borders=$.datepicker._getBorders(inst.dpDiv);instActive=inst,inst.dpDiv.empty().append(this._generateHTML(inst));var cover=inst.dpDiv.find("iframe.b4g-ui-datepicker-cover");cover.length&&cover.css({left:-borders[0],top:-borders[1],width:inst.dpDiv.outerWidth(),height:inst.dpDiv.outerHeight()}),inst.dpDiv.find("."+this._dayOverClass+" a").mouseover();var numMonths=this._getNumberOfMonths(inst),cols=numMonths[1],width=17;if(inst.dpDiv.removeClass("b4g-ui-datepicker-multi-2 b4g-ui-datepicker-multi-3 b4g-ui-datepicker-multi-4").width(""),cols>1&&inst.dpDiv.addClass("b4g-ui-datepicker-multi-"+cols).css("width",width*cols+"em"),inst.dpDiv[(1!=numMonths[0]||1!=numMonths[1]?"add":"remove")+"Class"]("b4g-ui-datepicker-multi"),inst.dpDiv[(this._get(inst,"isRTL")?"add":"remove")+"Class"]("b4g-ui-datepicker-rtl"),inst==$.datepicker._curInst&&$.datepicker._datepickerShowing&&inst.input&&inst.input.is(":visible")&&!inst.input.is(":disabled")&&inst.input[0]!=document.activeElement&&inst.input.focus(),inst.yearshtml){var origyearshtml=inst.yearshtml;setTimeout(function(){origyearshtml===inst.yearshtml&&inst.yearshtml&&inst.dpDiv.find("select.b4g-ui-datepicker-year:first").replaceWith(inst.yearshtml),origyearshtml=inst.yearshtml=null},0)}inst.dpDiv.find("[b4gonclick]").each(function(){var $self;$(this).click(function(){var myClickHandler=$(this).attr("b4gonclick");eval(myClickHandler)})}),inst.dpDiv.find("[b4gonchange]").each(function(){var $self;$(this).click(function(){var myClickHandler=$(this).attr("b4gOnChange");eval(myClickHandler)})}),$(".ui-icon").css("background-image","url(https://b4g.baydin.com/site_media/bookmarklet/ui-icons.png)")},_getBorders:function(a){var b=function(a){return({thin:1,medium:2,thick:3})[a]||a};return[parseFloat(b(a.css("border-left-width"))),parseFloat(b(a.css("border-top-width")))]},_checkOffset:function(b,a,f){var c=b.dpDiv.outerWidth(),d=b.dpDiv.outerHeight(),i=b.input?b.input.outerWidth():0,g=b.input?b.input.outerHeight():0,e=document.documentElement.clientWidth+$(document).scrollLeft(),h=document.documentElement.clientHeight+$(document).scrollTop();return a.left-=this._get(b,"isRTL")?c-i:0,a.left-=f&&a.left==b.input.offset().left?$(document).scrollLeft():0,a.top-=f&&a.top==b.input.offset().top+g?$(document).scrollTop():0,a.left-=Math.min(a.left,a.left+c>e&&e>c?Math.abs(a.left+c-e):0),a.top-=Math.min(a.top,a.top+d>h&&h>d?Math.abs(d+g):0),a},_findPos:function(a){for(var c=this._getInst(a),d=this._get(c,"isRTL");a&&("hidden"==a.type||1!=a.nodeType||$.expr.filters.hidden(a));)a=a[d?"previousSibling":"nextSibling"];var b=$(a).offset();return[b.left,b.top]},_hideDatepicker:function(d){var a=this._curInst;if(a&&(!d||a==$.data(d,PROP_NAME))&&this._datepickerShowing){var b=this._get(a,"showAnim"),e=this._get(a,"duration"),c=function(){$.datepicker._tidyDialog(a),this._curInst=null};$.effects&&$.effects[b]?a.dpDiv.hide(b,$.datepicker._get(a,"showOptions"),e,c):a.dpDiv["slideDown"==b?"slideUp":"fadeIn"==b?"fadeOut":"hide"](b?e:null,c),b||c();var f=this._get(a,"onClose");f&&f.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._datepickerShowing=!1,this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),$.blockUI&&($.unblockUI(),$("body").append(this.dpDiv))),this._inDialog=!1}},_tidyDialog:function(a){a.dpDiv.removeClass(this._dialogClass).unbind(".b4g-ui-datepicker-calendar")},_checkExternalClick:function(b){if($.datepicker._curInst){var a=$(b.target);a[0].id==$.datepicker._mainDivId||0!=a.parents("#"+$.datepicker._mainDivId).length||a.hasClass($.datepicker.markerClassName)||a.hasClass($.datepicker._triggerClass)||!$.datepicker._datepickerShowing||$.datepicker._inDialog&&$.blockUI||$.datepicker._hideDatepicker()}},_adjustDate:function(c,e,d){var a,f=get_frame_doc(),b=$(c,f);try{a=this._getInst(b[0])}catch(g){b=$(c),a=this._getInst(b[0])}this._isDisabledDatepicker(b[0])||(this._adjustInstDate(a,e+("M"==d?this._get(a,"showCurrentAtPos"):0),d),this._updateDatepicker(a))},_gotoToday:function(d){var a,e=get_frame_doc(),b=$(d,e);try{a=this._getInst(b[0])}catch(f){b=$(d),a=this._getInst(b[0])}if(this._get(a,"gotoCurrent")&&a.currentDay)a.selectedDay=a.currentDay,a.drawMonth=a.selectedMonth=a.currentMonth,a.drawYear=a.selectedYear=a.currentYear;else{var c=new Date;a.selectedDay=c.getDate(),a.drawMonth=a.selectedMonth=c.getMonth(),a.drawYear=a.selectedYear=c.getFullYear()}this._notifyChange(a),this._adjustDate(b)},_selectMonthYear:function(c,d,e){var a,f=get_frame_doc(),b=$(c,f);try{a=this._getInst(b[0])}catch(g){b=$(c),a=this._getInst(b[0])}a._selectingMonthYear=!1,a["selected"+("M"==e?"Month":"Year")]=a["draw"+("M"==e?"Month":"Year")]=parseInt(d.options[d.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(b)},_clickMonthYear:function(c){var a,d=get_frame_doc(),b=$(c,d);try{a=this._getInst(b[0])}catch(e){b=$(c),a=this._getInst(b[0])}a.input&&a._selectingMonthYear&&setTimeout(function(){a.input.focus()},0),a._selectingMonthYear=!a._selectingMonthYear},_selectDay:function(c,e,f,d){var a,g=get_frame_doc(),b=$(c,g);if(!($(d).hasClass(this._unselectableClass)||this._isDisabledDatepicker(b[0]))){try{a=this._getInst(b[0])}catch(h){b=$(c),a=this._getInst(b[0])}a.selectedDay=a.currentDay=$("a",d).html(),a.selectedMonth=a.currentMonth=e,a.selectedYear=a.currentYear=f,this._selectDate(c,this._formatDate(a,a.currentDay,a.currentMonth,a.currentYear))}},_clearDate:function(b){var c,d=get_frame_doc(),a=$(b,d);try{c=this._getInst(a[0])}catch(e){a=$(b),c=this._getInst(a[0])}this._selectDate(a,"")},_selectDate:function(d,b){var a,f=get_frame_doc(),c=$(d,f);try{a=this._getInst(c[0])}catch(g){c=$(d),a=this._getInst(c[0])}b=null!=b?b:this._formatDate(a),a.input&&a.input.val(b),this._updateAlternate(a);var e=this._get(a,"onSelect");e?e.apply(a.input?a.input[0]:null,[b,a]):a.input&&a.input.trigger("change"),a.inline?this._updateDatepicker(a):(this._hideDatepicker(),this._lastInput=a.input[0],"object"!=typeof a.input[0]&&a.input.focus(),this._lastInput=null)},_updateAlternate:function(a){var b=this._get(a,"altField");if(b){var c=this._get(a,"altFormat")||this._get(a,"dateFormat"),d=this._getDate(a),e=this.formatDate(c,d,this._getFormatConfig(a));$(b).each(function(){$(this).val(e)})}},noWeekends:function(b){var a=b.getDay();return[a>0&&a<6,""]},iso8601Week:function(b){var a=new Date(b.getTime());a.setDate(a.getDate()+4-(a.getDay()||7));var c=a.getTime();return a.setMonth(0),a.setDate(1),Math.floor(Math.round((c-a)/864e5)/7)+1},parseDate:function(i,g,c){if(null==i||null==g)throw"Invalid arguments";if(""==(g="object"==typeof g?g.toString():g+""))return null;var h=(c?c.shortYearCutoff:null)||this._defaults.shortYearCutoff;h="string"!=typeof h?h:new Date().getFullYear()%100+parseInt(h,10);for(var q=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,r=(c?c.dayNames:null)||this._defaults.dayNames,s=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort,t=(c?c.monthNames:null)||this._defaults.monthNames,b=-1,d=-1,e=-1,k=-1,l=!1,n=function(b){var a=j+1<i.length&&i.charAt(j+1)==b;return a&&j++,a},f=function(a){var c=n(a),d="@"==a?14:"!"==a?20:"y"==a&&c?4:"o"==a?3:2,e=new RegExp("^\\d{1,"+d+"}"),b=g.substring(u).match(e);if(!b)throw"Missing number at position "+u;return u+=b[0].length,parseInt(b[0],10)},o=function(b,c,d){var e=$.map(n(b)?d:c,function(a,b){return[[b,a]]}).sort(function(a,b){return-(a[1].length-b[1].length)}),a=-1;if($.each(e,function(d,c){var b=c[1];if(g.substr(u,b.length).toLowerCase()==b.toLowerCase())return a=c[0],u+=b.length,!1}),-1!=a)return a+1;throw"Unknown name at position "+u},m=function(){if(g.charAt(u)!=i.charAt(j))throw"Unexpected literal at position "+u;u++},u=0,j=0;j<i.length;j++)if(l)"'"!=i.charAt(j)||n("'")?m():l=!1;else switch(i.charAt(j)){case"d":e=f("d");break;case"D":o("D",q,r);break;case"o":k=f("o");break;case"m":d=f("m");break;case"M":d=o("M",s,t);break;case"y":b=f("y");break;case"@":var a=new Date(f("@"));b=a.getFullYear(),d=a.getMonth()+1,e=a.getDate();break;case"!":var a=new Date((f("!")-this._ticksTo1970)/1e4);b=a.getFullYear(),d=a.getMonth()+1,e=a.getDate();break;case"'":n("'")?m():l=!0;break;default:m()}if(-1==b?b=new Date().getFullYear():b<100&&(b+=new Date().getFullYear()-new Date().getFullYear()%100+(b<=h?0:-100)),k> -1)for(d=1,e=k;;){var p=this._getDaysInMonth(b,d-1);if(e<=p)break;d++,e-=p}var a=this._daylightSavingAdjust(new Date(b,d-1,e));if(a.getFullYear()!=b||a.getMonth()+1!=d||a.getDate()!=e)throw"Invalid date";return a},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*864e9,formatDate:function(e,a,c){if(!a)return"";var j=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,k=(c?c.dayNames:null)||this._defaults.dayNames,l=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort,m=(c?c.monthNames:null)||this._defaults.monthNames,f=function(b){var a=d+1<e.length&&e.charAt(d+1)==b;return a&&d++,a},g=function(b,c,d){var a=""+c;if(f(b))for(;a.length<d;)a="0"+a;return a},i=function(b,a,c,d){return f(b)?d[a]:c[a]},b="",h=!1;if(a)for(var d=0;d<e.length;d++)if(h)"'"!=e.charAt(d)||f("'")?b+=e.charAt(d):h=!1;else switch(e.charAt(d)){case"d":b+=g("d",a.getDate(),2);break;case"D":b+=i("D",a.getDay(),j,k);break;case"o":b+=g("o",(a.getTime()-new Date(a.getFullYear(),0,0).getTime())/864e5,3);break;case"m":b+=g("m",a.getMonth()+1,2);break;case"M":b+=i("M",a.getMonth(),l,m);break;case"y":b+=f("y")?a.getFullYear():(a.getYear()%100<10?"0":"")+a.getYear()%100;break;case"@":b+=a.getTime();break;case"!":b+=1e4*a.getTime()+this._ticksTo1970;break;case"'":f("'")?b+="'":h=!0;break;default:b+=e.charAt(d)}return b},_possibleChars:function(b){for(var c="",d=!1,e=function(d){var c=a+1<b.length&&b.charAt(a+1)==d;return c&&a++,c},a=0;a<b.length;a++)if(d)"'"!=b.charAt(a)||e("'")?c+=b.charAt(a):d=!1;else switch(b.charAt(a)){case"d":case"m":case"y":case"@":c+="0123456789";break;case"D":case"M":return null;case"'":e("'")?c+="'":d=!0;break;default:c+=b.charAt(a)}return c},_get:function(b,a){return undefined!==b.settings[a]?b.settings[a]:this._defaults[a]},_setDateFromField:function(a,e){if(a.input.val()!=a.lastVal){var b,d,f=this._get(a,"dateFormat"),c=a.lastVal=a.input?a.input.val():null;b=d=this._getDefaultDate(a);var g=this._getFormatConfig(a);try{b=this.parseDate(f,c,g)||d}catch(h){this.log(h),c=e?"":c}a.selectedDay=b.getDate(),a.drawMonth=a.selectedMonth=b.getMonth(),a.drawYear=a.selectedYear=b.getFullYear(),a.currentDay=c?b.getDate():0,a.currentMonth=c?b.getMonth():0,a.currentYear=c?b.getFullYear():0,this._adjustInstDate(a)}},_getDefaultDate:function(a){return this._restrictMinMax(a,this._determineDate(a,this._get(a,"defaultDate"),new Date))},_determineDate:function(f,b,c){var d=function(b){var a=new Date;return a.setDate(a.getDate()+b),a},e=function(c){try{return $.datepicker.parseDate($.datepicker._get(f,"dateFormat"),c,$.datepicker._getFormatConfig(f))}catch(i){}for(var g=(c.toLowerCase().match(/^c/)?$.datepicker._getDate(f):null)||new Date,d=g.getFullYear(),e=g.getMonth(),a=g.getDate(),h=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,b=h.exec(c);b;){switch(b[2]||"d"){case"d":case"D":a+=parseInt(b[1],10);break;case"w":case"W":a+=7*parseInt(b[1],10);break;case"m":case"M":e+=parseInt(b[1],10),a=Math.min(a,$.datepicker._getDaysInMonth(d,e));break;case"y":case"Y":d+=parseInt(b[1],10),a=Math.min(a,$.datepicker._getDaysInMonth(d,e))}b=h.exec(c)}return new Date(d,e,a)},a=null==b||""===b?c:"string"==typeof b?e(b):"number"==typeof b?isNaN(b)?c:d(b):new Date(b.getTime());return(a=a&&"Invalid Date"==a.toString()?c:a)&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a.setMilliseconds(0)),this._daylightSavingAdjust(a)},_daylightSavingAdjust:function(a){return a?(a.setHours(a.getHours()>12?a.getHours()+2:0),a):null},_setDate:function(a,c,d){var e=!c,f=a.selectedMonth,g=a.selectedYear,b=this._restrictMinMax(a,this._determineDate(a,c,new Date));a.selectedDay=a.currentDay=b.getDate(),a.drawMonth=a.selectedMonth=a.currentMonth=b.getMonth(),a.drawYear=a.selectedYear=a.currentYear=b.getFullYear(),f==a.selectedMonth&&g==a.selectedYear||d||this._notifyChange(a),this._adjustInstDate(a),a.input&&a.input.val(e?"":this._formatDate(a))},_getDate:function(a){return!a.currentYear||a.input&&""==a.input.val()?null:this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay))},_generateHTML:function(a){var i=new Date;i=this._daylightSavingAdjust(new Date(i.getFullYear(),i.getMonth(),i.getDate()));var f=this._get(a,"isRTL"),S=this._get(a,"showButtonPanel"),C=this._get(a,"hideIfNoPrevNext"),w=this._get(a,"navigationAsDateFormat"),g=this._getNumberOfMonths(a),T=this._get(a,"showCurrentAtPos"),s=this._get(a,"stepMonths"),x=1!=g[0]||1!=g[1],y=this._daylightSavingAdjust(a.currentDay?new Date(a.currentYear,a.currentMonth,a.currentDay):new Date(9999,9,9)),n=this._getMinMaxDate(a,"min"),j=this._getMinMaxDate(a,"max"),b=a.drawMonth-T,d=a.drawYear;if(b<0&&(b+=12,d--),j){var t=this._daylightSavingAdjust(new Date(j.getFullYear(),j.getMonth()-g[0]*g[1]+1,j.getDate()));for(t=n&&t<n?n:t;this._daylightSavingAdjust(new Date(d,b,1))>t;)--b<0&&(b=11,d--)}a.drawMonth=b,a.drawYear=d;var k=this._get(a,"prevText");k=w?this.formatDate(k,this._daylightSavingAdjust(new Date(d,b-s,1)),this._getFormatConfig(a)):k;var D=this._canAdjustMonth(a,-1,d,b)?'<a class="b4g-ui-datepicker-prev b4g-ui-corner-all" b4gonclick="DP_jQuery_'+dpuuid+".datepicker._adjustDate('#"+a.id+"', -"+s+", 'M');\" title=\""+k+'"><span class="ui-icon ui-icon-circle-triangle-'+(f?"e":"w")+'">'+k+"</span></a>":C?"":'<a class="b4g-ui-datepicker-prev b4g-ui-corner-all ui-state-disabled" title="'+k+'"><span class="ui-icon ui-icon-circle-triangle-'+(f?"e":"w")+'">'+k+"</span></a>",l=this._get(a,"nextText");l=w?this.formatDate(l,this._daylightSavingAdjust(new Date(d,b+s,1)),this._getFormatConfig(a)):l;var E=this._canAdjustMonth(a,1,d,b)?'<a class="b4g-ui-datepicker-next b4g-ui-corner-all" b4gonclick="DP_jQuery_'+dpuuid+".datepicker._adjustDate('#"+a.id+"', +"+s+", 'M');\" title=\""+l+'"><span class="ui-icon ui-icon-circle-triangle-'+(f?"w":"e")+'">'+l+"</span></a>":C?"":'<a class="b4g-ui-datepicker-next b4g-ui-corner-all ui-state-disabled" title="'+l+'"><span class="ui-icon ui-icon-circle-triangle-'+(f?"w":"e")+'">'+l+"</span></a>",u=this._get(a,"currentText"),F=this._get(a,"gotoCurrent")&&a.currentDay?y:i;u=w?this.formatDate(u,F,this._getFormatConfig(a)):u;var G=a.inline?"":'<button type="button" class="b4g-ui-datepicker-close ui-state-default ui-priority-primary b4g-ui-corner-all" b4gonclick="DP_jQuery_'+dpuuid+'.datepicker._hideDatepicker();">'+this._get(a,"closeText")+"</button>",U=S?'<div class="b4g-ui-datepicker-buttonpane b4g-ui-widget-content">'+(f?G:"")+(this._isInRange(a,F)?'<button type="button" class="b4g-ui-datepicker-current ui-state-default ui-priority-secondary b4g-ui-corner-all" b4gonclick="DP_jQuery_'+dpuuid+".datepicker._gotoToday('#"+a.id+"');\">"+u+"</button>":"")+(f?"":G)+"</div>":"",m=parseInt(this._get(a,"firstDay"),10);m=isNaN(m)?0:m;var H=this._get(a,"showWeek"),V=this._get(a,"dayNames");this._get(a,"dayNamesShort");var W=this._get(a,"dayNamesMin"),X=this._get(a,"monthNames"),Y=this._get(a,"monthNamesShort"),I=this._get(a,"beforeShowDay"),z=this._get(a,"showOtherMonths"),Z=this._get(a,"selectOtherMonths");this._get(a,"calculateWeek")||this.iso8601Week;for(var J=this._getDefaultDate(a),A="",q=0;q<g[0];q++){for(var K="",r=0;r<g[1];r++){var L=this._daylightSavingAdjust(new Date(d,b,a.selectedDay)),o=" b4g-ui-corner-all",e="";if(x){if(e+='<div class="b4g-ui-datepicker-group',g[1]>1)switch(r){case 0:e+=" b4g-ui-datepicker-group-first",o=" b4g-ui-corner-"+(f?"right":"left");break;case g[1]-1:e+=" b4g-ui-datepicker-group-last",o=" b4g-ui-corner-"+(f?"left":"right");break;default:e+=" b4g-ui-datepicker-group-middle",o=""}e+='">'}e+='<div class="b4g-ui-datepicker-header b4g-ui-widget-header b4g-ui-helper-clearfix'+o+'">'+(/all|left/.test(o)&&0==q?f?E:D:"")+(/all|right/.test(o)&&0==q?f?D:E:"")+this._generateMonthYearHeader(a,b,d,n,j,q>0||r>0,X,Y)+'</div><table class="b4g-ui-datepicker-calendar"><thead><tr>';for(var M=H?'<th class="b4g-ui-datepicker-week-col">'+this._get(a,"weekHeader")+"</th>":"",h=0;h<7;h++){var N=(h+m)%7;M+="<th"+((h+m+6)%7>=5?' class="b4g-ui-datepicker-week-end"':"")+'><span title="'+V[N]+'">'+W[N]+"</span></th>"}e+=M+"</tr></thead><tbody>";var O=this._getDaysInMonth(d,b);d==a.selectedYear&&b==a.selectedMonth&&(a.selectedDay=Math.min(a.selectedDay,O));for(var P=(this._getFirstDayOfMonth(d,b)-m+7)%7,_=x?6:Math.ceil((P+O)/7),c=this._daylightSavingAdjust(new Date(d,b,1-P)),Q=0;Q<_;Q++){e+="<tr>";for(var R=H?'<td class="b4g-ui-datepicker-week-col">'+this._get(a,"calculateWeek")(c)+"</td>":"",h=0;h<7;h++){var v=I?I.apply(a.input?a.input[0]:null,[c]):[!0,""],p=c.getMonth()!=b,B=p&&!Z||!v[0]||n&&c<n||j&&c>j;R+='<td class="'+((h+m+6)%7>=5?" b4g-ui-datepicker-week-end":"")+(p?" b4g-ui-datepicker-other-month":"")+(c.getTime()==L.getTime()&&b==a.selectedMonth&&a._keyEvent||J.getTime()==c.getTime()&&J.getTime()==L.getTime()?" "+this._dayOverClass:"")+(B?" "+this._unselectableClass+" ui-state-disabled":"")+(p&&!z?"":" "+v[1]+(c.getTime()==y.getTime()?" "+this._currentClass:"")+(c.getTime()==i.getTime()?" b4g-ui-datepicker-today":""))+'"'+((!p||z)&&v[2]?' title="'+v[2]+'"':"")+(B?"":' b4gonclick="DP_jQuery_'+dpuuid+".datepicker._selectDay('#"+a.id+"',"+c.getMonth()+","+c.getFullYear()+', this);"')+">"+(p&&!z?"&#xa0;":B?'<span class="ui-state-default">'+c.getDate()+"</span>":'<a class="ui-state-default'+(c.getTime()==i.getTime()?" ui-state-highlight":"")+(c.getTime()==y.getTime()?" ui-state-active":"")+(p?" ui-priority-secondary":"")+'">'+c.getDate()+"</a>")+"</td>",c.setDate(c.getDate()+1),c=this._daylightSavingAdjust(c)}e+=R+"</tr>"}++b>11&&(b=0,d++),e+="</tbody></table>"+(x?"</div>"+(g[0]>0&&r==g[1]-1?'<div class="b4g-ui-datepicker-row-break"></div>':""):""),K+=e}A+=K}return A+=U+($.browser.msie&&7>parseInt($.browser.version,10)&&!a.inline?'<iframe src="javascript:false;" class="b4g-ui-datepicker-cover" frameborder="0"></iframe>':""),a._keyEvent=!1,A},_generateMonthYearHeader:function(a,m,h,f,g,i,q,r){var k=this._get(a,"changeMonth"),l=this._get(a,"changeYear"),n=this._get(a,"showMonthAfterYear"),d='<div class="b4g-ui-datepicker-title">',e="";if(i||!k)e+='<span class="b4g-ui-datepicker-month">'+q[m]+"</span>";else{var s=f&&f.getFullYear()==h,t=g&&g.getFullYear()==h;e+='<select class="b4g-ui-datepicker-month" b4gonchange="DP_jQuery_'+dpuuid+".datepicker._selectMonthYear('#"+a.id+"', this, 'M');\" b4gonclick=\"DP_jQuery_"+dpuuid+".datepicker._clickMonthYear('#"+a.id+"');\">";for(var c=0;c<12;c++)(!s||c>=f.getMonth())&&(!t||c<=g.getMonth())&&(e+='<option value="'+c+'"'+(c==m?' selected="selected"':"")+">"+r[c]+"</option>");e+="</select>"}if(n||(d+=e+(i||!(k&&l)?"&#xa0;":"")),!a.yearshtml){if(a.yearshtml="",i||!l)d+='<span class="b4g-ui-datepicker-year">'+h+"</span>";else{var o=this._get(a,"yearRange").split(":"),u=new Date().getFullYear(),p=function(a){var b=a.match(/c[+-].*/)?h+parseInt(a.substring(1),10):a.match(/[+-].*/)?u+parseInt(a,10):parseInt(a,10);return isNaN(b)?u:b},b=p(o[0]),j=Math.max(b,p(o[1]||""));for(b=f?Math.max(b,f.getFullYear()):b,j=g?Math.min(j,g.getFullYear()):j,a.yearshtml+='<select class="b4g-ui-datepicker-year" b4gonchange="DP_jQuery_'+dpuuid+".datepicker._selectMonthYear('#"+a.id+"', this, 'Y');\" b4gonclick=\"DP_jQuery_"+dpuuid+".datepicker._clickMonthYear('#"+a.id+"');\">";b<=j;b++)a.yearshtml+='<option value="'+b+'"'+(b==h?' selected="selected"':"")+">"+b+"</option>";a.yearshtml+="</select>",d+=a.yearshtml,a.yearshtml=null}}return d+=this._get(a,"yearSuffix"),n&&(d+=(i||!(k&&l)?"&#xa0;":"")+e),d+="</div>"},_adjustInstDate:function(a,c,b){var e=a.drawYear+("Y"==b?c:0),f=a.drawMonth+("M"==b?c:0),g=Math.min(a.selectedDay,this._getDaysInMonth(e,f))+("D"==b?c:0),d=this._restrictMinMax(a,this._daylightSavingAdjust(new Date(e,f,g)));a.selectedDay=d.getDate(),a.drawMonth=a.selectedMonth=d.getMonth(),a.drawYear=a.selectedYear=d.getFullYear(),("M"==b||"Y"==b)&&this._notifyChange(a)},_restrictMinMax:function(c,d){var a=this._getMinMaxDate(c,"min"),b=this._getMinMaxDate(c,"max"),e=a&&d<a?a:d;return b&&e>b?b:e},_notifyChange:function(a){var b=this._get(a,"onChangeMonthYear");b&&b.apply(a.input?a.input[0]:null,[a.selectedYear,a.selectedMonth+1,a])},_getNumberOfMonths:function(b){var a=this._get(b,"numberOfMonths");return null==a?[1,1]:"number"==typeof a?[1,a]:a},_getMinMaxDate:function(a,b){return this._determineDate(a,this._get(a,b+"Date"),null)},_getDaysInMonth:function(a,b){return 32-this._daylightSavingAdjust(new Date(a,b,32)).getDate()},_getFirstDayOfMonth:function(a,b){return new Date(a,b,1).getDay()},_canAdjustMonth:function(c,b,e,f){var d=this._getNumberOfMonths(c),a=this._daylightSavingAdjust(new Date(e,f+(b<0?b:d[0]*d[1]),1));return b<0&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(c,a)},_isInRange:function(a,b){var c=this._getMinMaxDate(a,"min"),d=this._getMinMaxDate(a,"max");return(!c||b.getTime()>=c.getTime())&&(!d||b.getTime()<=d.getTime())},_getFormatConfig:function(a){var b=this._get(a,"shortYearCutoff");return{shortYearCutoff:b="string"!=typeof b?b:new Date().getFullYear()%100+parseInt(b,10),dayNamesShort:this._get(a,"dayNamesShort"),dayNames:this._get(a,"dayNames"),monthNamesShort:this._get(a,"monthNamesShort"),monthNames:this._get(a,"monthNames")}},_formatDate:function(a,b,c,d){b||(a.currentDay=a.selectedDay,a.currentMonth=a.selectedMonth,a.currentYear=a.selectedYear);var e=b?"object"==typeof b?b:this._daylightSavingAdjust(new Date(d,c,b)):this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay));return this.formatDate(this._get(a,"dateFormat"),e,this._getFormatConfig(a))}}),$.fn.datepicker=function(a){if(!this.length)return this;$.datepicker.initialized||($(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv),$.datepicker.initialized=!0);var b=Array.prototype.slice.call(arguments,1);return"string"==typeof a&&("isDisabled"==a||"getDate"==a||"widget"==a)||"option"==a&&2==arguments.length&&"string"==typeof arguments[1]?$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this[0]].concat(b)):this.each(function(){"string"==typeof a?$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this].concat(b)):$.datepicker._attachDatepicker(this,a)})},$.datepicker=new Datepicker,$.datepicker.initialized=!1,$.datepicker.uuid=new Date().getTime(),$.datepicker.version="1.8.13",window["DP_jQuery_"+dpuuid]=$}(jQuery),/*! Copyright (c) 2010 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version 1.1
 */ function($){function a(f){for(var e=c(f),g=[],b=0,a=0,h=e.length;b<h;b++)for(a=0;a<h;a++)b!==a&&d(e[b],e[a])&&g.push(f[a]);return $.unique(g)}function b(e,f){for(var g=c(e),h=c(f),b=0,a=0,i=g.length,j=h.length;b<i;b++)for(a=0;a<j;a++)if(e[b]!==f[a]&&d(g[b],h[a]))return!0;return!1}function c(d){for(var b,a,c=[],e=0;a=d[e++];)b=$(a).offset(),c.push([b.top,b.left,a.offsetWidth,a.offsetHeight]);return c}function d(a,b){var c=a[1],d=a[0],g=a[2],h=a[3],e=b[1],f=b[0],i=b[2],j=b[3];return!(f+j<d||d+h<f||e+i<c||c+g<e)}$.fn.overlaps=function(c){return 0===arguments.length?this.pushStack(a(this)):b(this,$(c))},$.expr[":"].overlaps=function(a,d,e,c){return b([a],c)},$.expr[":"].overlapping=$.expr[":"].overlaps}(jQuery),/*!
 * jQuery replaceText - v1.1 - 11/21/2009
 * http://benalman.com/projects/jquery-replacetext-plugin/
 *
 * Copyright (c) 2009 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */ function($){$.fn.replaceText=function(a,b,c){return this.each(function(){var g,e,d=this.firstChild,f=[];if(d)do 3===d.nodeType&&(e=(g=d.nodeValue).replace(a,b))!==g&&(!c&&/</.test(e)?($(d).before(e),f.push(d)):d.nodeValue=e);while(d=d.nextSibling)f.length&&$(f).remove()})}}(jQuery),function($,a){var b=0,c=$(document);$.widget("ech.multiselect",{options:{header:!0,height:175,minWidth:225,classes:"",checkAllText:"Check all",uncheckAllText:"Uncheck all",noneSelectedText:"Select options",selectedText:"# selected",selectedList:0,show:null,hide:null,autoOpen:!1,multiple:!0,position:{},appendTo:"body",menuWidth:null},_create:function(){var c=this.element,a=this.options;this.speed=$.fx.speeds._default,this._isOpen=!1,this._namespaceID=this.eventNamespace||"multiselect"+b;var e=(this.button=$('<button type="button"><span class="b4g-ui-icon b4g-ui-icon-triangle-1-s"></span></button>')).addClass("b4g-ui-multiselect b4g-ui-widget b4g-ui-state-default b4g-ui-corner-all").addClass(a.classes).attr({title:c.attr("title"),"aria-haspopup":!0,tabIndex:c.attr("tabIndex")}).insertAfter(c),d=((this.buttonlabel=$("<span />")).html(a.noneSelectedText).appendTo(e),(this.menu=$("<div />")).addClass("b4g-ui-multiselect-menu b4g-ui-widget b4g-ui-widget-content b4g-ui-corner-all").addClass(a.classes).appendTo($(a.appendTo))),f=(this.header=$("<div />")).addClass("b4g-ui-widget-header b4g-ui-corner-all b4g-ui-multiselect-header b4g-ui-helper-clearfix").appendTo(d);(this.headerLinkContainer=$("<ul />")).addClass("b4g-ui-helper-reset").html(function(){return!0===a.header?'<li><a class="b4g-ui-multiselect-all" href="#"><span class="b4g-ui-icon b4g-ui-icon-check"></span><span>'+a.checkAllText+'</span></a></li><li><a class="b4g-ui-multiselect-none" href="#"><span class="b4g-ui-icon b4g-ui-icon-closethick"></span><span>'+a.uncheckAllText+"</span></a></li>":"string"==typeof a.header?"<li>"+a.header+"</li>":""}).append('<li class="b4g-ui-multiselect-close"><a href="#" class="b4g-ui-multiselect-close"><span class="b4g-ui-icon b4g-ui-icon-circle-close"></span></a></li>').appendTo(f),(this.checkboxContainer=$("<ul />")).addClass("b4g-ui-multiselect-checkboxes b4g-ui-helper-reset").appendTo(d),this._bindEvents(),this.refresh(!0),a.multiple||d.addClass("b4g-ui-multiselect-single"),b++,c.hide()},_init:function(){!1===this.options.header&&this.header.hide(),this.options.multiple||this.headerLinkContainer.find(".b4g-ui-multiselect-all, .b4g-ui-multiselect-none").hide(),this.options.autoOpen&&this.open(),this.element.is(":disabled")&&this.disable()},refresh:function(c){var a=this.element,g=this.options,d=this.menu,e=this.checkboxContainer,h=[],f="",i=a.attr("id")||b++;a.find("option").each(function(m){$(this);var a,d=this.parentNode,n=this.innerHTML,c=""===this.title?this.textContent:this.title;c=c.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");var o=this.value,k="b4g-ui-multiselect-"+b+"-"+(this.id||i+"-option-"+m),e=this.disabled,l=this.selected,j=["b4g-ui-corner-all"],p=(e?"b4g-ui-multiselect-disabled ":" ")+this.className;if("OPTGROUP"===d.tagName&&(a=d.getAttribute("label"),-1===$.inArray(a,h))){var q=a.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/'/g,"&#39;").replace(/\//g,"&#x2F;").replace(/"/g,"&quot;");f+='<li class="b4g-ui-multiselect-optgroup-label '+d.className+'"><a href="#">'+q+"</a></li>",h.push(a)}e&&j.push("b4g-ui-state-disabled"),l&&!g.multiple&&j.push("b4g-ui-state-active"),f+='<li class="'+p+'">',f+='<label for="'+k+'" title="'+c+'" class="'+j.join(" ")+'">',f+='<input id="'+k+'" name="multiselect_'+i+'" type="'+(g.multiple?"checkbox":"radio")+'" value="'+o+'" title="'+c+'"',l&&(f+=' checked="checked"',f+=' aria-selected="true"'),e&&(f+=' disabled="disabled"',f+=' aria-disabled="true"'),f+=" /><span>"+n+"</span></label></li>"}),e.html(f),this.labels=d.find("label"),this.inputs=this.labels.children("input"),this._setButtonWidth(),this._setMenuWidth(),this.button[0].defaultValue=this.update(),c||this._trigger("refresh")},update:function(){var c,a=this.options,d=this.inputs,e=d.filter(":checked"),b=e.length;return c=0===b?a.noneSelectedText:$.isFunction(a.selectedText)?a.selectedText.call(this,b,d.length,e.get()):/\d/.test(a.selectedList)&&a.selectedList>0&&b<=a.selectedList?e.map(function(){return $(this).next().text()}).get().join(", "):a.selectedText.replace("#",b).replace("#",d.length),this._setButtonValue(c),c},_setButtonValue:function(a){this.buttonlabel.text(a)},_bindEvents:function(){var d=this,a=this.button;function b(){return d[d._isOpen?"close":"open"](),!1}a.find("span").bind("click.multiselect",b),a.bind({click:b,keypress:function(a){switch(a.which){case 27:case 38:case 37:d.close();break;case 39:case 40:d.open()}},mouseenter:function(){a.hasClass("b4g-ui-state-disabled")||$(this).addClass("b4g-ui-state-hover")},mouseleave:function(){$(this).removeClass("b4g-ui-state-hover")},focus:function(){a.hasClass("b4g-ui-state-disabled")||$(this).addClass("b4g-ui-state-focus")},blur:function(){$(this).removeClass("b4g-ui-state-focus")}}),this.header.delegate("a","click.multiselect",function(a){$(this).hasClass("b4g-ui-multiselect-close")?d.close():d[$(this).hasClass("b4g-ui-multiselect-all")?"checkAll":"uncheckAll"](),a.preventDefault()}),this.menu.delegate("li.b4g-ui-multiselect-optgroup-label a","click.multiselect",function(b){b.preventDefault();var e=$(this),a=e.parent().nextUntil("li.b4g-ui-multiselect-optgroup-label").find("input:visible:not(:disabled)"),c=a.get(),f=e.parent().text();!1!==d._trigger("beforeoptgrouptoggle",b,{inputs:c,label:f})&&(d._toggleChecked(a.filter(":checked").length!==a.length,a),d._trigger("optgrouptoggle",b,{inputs:c,label:f,checked:c[0].checked}))}).delegate("label","mouseenter.multiselect",function(){$(this).hasClass("b4g-ui-state-disabled")||(d.labels.removeClass("b4g-ui-state-hover"),$(this).addClass("b4g-ui-state-hover").find("input").focus())}).delegate("label","keydown.multiselect",function(a){switch(a.preventDefault(),a.which){case 9:case 27:d.close();break;case 38:case 40:case 37:case 39:d._traverse(a.which,this);break;case 13:$(this).find("input")[0].click()}}).delegate('input[type="checkbox"], input[type="radio"]',"click.multiselect",function(c){var a=$(this),e=this.value,b=this.checked,f=d.element.find("option");if(this.disabled|| !1===d._trigger("click",c,{value:e,text:this.title,checked:b})){c.preventDefault();return}a.focus(),a.attr("aria-selected",b),f.each(function(){this.value===e?this.selected=b:d.options.multiple||(this.selected=!1)}),d.options.multiple||(d.labels.removeClass("b4g-ui-state-active"),a.closest("label").toggleClass("b4g-ui-state-active",b),d.close()),d.element.trigger("change"),setTimeout($.proxy(d.update,d),10)}),c.bind("mousedown."+d._namespaceID,function(b){var a=b.target;!d._isOpen||a===d.button[0]||a===d.menu[0]||$.contains(d.menu[0],a)||$.contains(d.button[0],a)||d.close()}),$(this.element[0].form).bind("reset.multiselect",function(){setTimeout($.proxy(d.refresh,d),10)})},_setButtonWidth:function(){var a=this.element.outerWidth(),b=this.options;/\d/.test(b.minWidth)&&a<b.minWidth&&(a=b.minWidth),this.button.outerWidth(a)},_setMenuWidth:function(){var a=this.menu,b=0>=this.button.outerWidth()?this.options.minWidth:this.button.outerWidth();a.outerWidth(this.options.menuWidth||b)},_traverse:function(b,e){var f=$(e),a=38===b||37===b,c=f.parent()[a?"prevAll":"nextAll"]("li:not(.b4g-ui-multiselect-disabled, .b4g-ui-multiselect-optgroup-label)").first();if(c.length)c.find("label").trigger("mouseover");else{var d=this.menu.find("ul").last();this.menu.find("label")[a?"last":"first"]().trigger("mouseover"),d.scrollTop(a?d.height():0)}},_toggleState:function(a,b){return function(){this.disabled||(this[a]=b),b?this.setAttribute("aria-selected",!0):this.removeAttribute("aria-selected")}},_toggleChecked:function(c,b){var a=b&&b.length?b:this.inputs,d=this;a.each(this._toggleState("checked",c)),a.eq(0).focus(),this.update();var e=a.map(function(){return this.value}).get();this.element.find("option").each(function(){!this.disabled&&$.inArray(this.value,e)> -1&&d._toggleState("selected",c).call(this)}),a.length&&this.element.trigger("change")},_toggleDisabled:function(a){this.button.attr({disabled:a,"aria-disabled":a})[a?"addClass":"removeClass"]("b4g-ui-state-disabled");var b=this.menu.find("input"),c="ech-multiselect-disabled";(b=a?b.filter(":enabled").data(c,!0):b.filter(function(){return!0===$.data(this,c)}).removeData(c)).attr({disabled:a,"arial-disabled":a}).parent()[a?"addClass":"removeClass"]("b4g-ui-state-disabled"),this.element.attr({disabled:a,"aria-disabled":a})},open:function(i){var g=this,c=this.button,d=this.menu,e=this.speed,a=this.options,f=[];if(!(!1===this._trigger("beforeopen")||c.hasClass("b4g-ui-state-disabled"))&&!this._isOpen){var h=d.find("ul").last(),b=a.show;$.isArray(a.show)&&(b=a.show[0],e=a.show[1]||g.speed),b&&(f=[b,e]),h.scrollTop(0).height(a.height),this.position(),$.fn.show.apply(d,f),this.labels.filter(":not(.b4g-ui-state-disabled)").eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus"),c.addClass("b4g-ui-state-active"),this._isOpen=!0,this._trigger("open")}},close:function(){if(!1!==this._trigger("beforeclose")){var a=this.options,b=a.hide,c=this.speed,d=[];$.isArray(a.hide)&&(b=a.hide[0],c=a.hide[1]||this.speed),b&&(d=[b,c]),$.fn.hide.apply(this.menu,d),this.button.removeClass("b4g-ui-state-active").trigger("blur").trigger("mouseleave"),this._isOpen=!1,this._trigger("close")}},enable:function(){this._toggleDisabled(!1)},disable:function(){this._toggleDisabled(!0)},checkAll:function(a){this._toggleChecked(!0),this._trigger("checkAll")},uncheckAll:function(){this._toggleChecked(!1),this._trigger("uncheckAll")},getChecked:function(){return this.menu.find("input").filter(":checked")},getUnchecked:function(){return this.menu.find("input").not(":checked")},destroy:function(){return $.Widget.prototype.destroy.call(this),c.unbind(this._namespaceID),this.button.remove(),this.menu.remove(),this.element.show(),this},isOpen:function(){return this._isOpen},widget:function(){return this.menu},getButton:function(){return this.button},position:function(){var a=this.options;if($.ui.position&&!$.isEmptyObject(a.position))a.position.of=a.position.of||this.button,this.menu.show().position(a.position).hide();else{var b=this.button.offset();this.menu.css({top:b.top+this.button.outerHeight(),left:b.left})}},_setOption:function(c,a){var b=this.menu;switch(c){case"header":b.find("div.b4g-ui-multiselect-header")[a?"show":"hide"]();break;case"checkAllText":b.find("a.b4g-ui-multiselect-all span").eq(-1).text(a);break;case"uncheckAllText":b.find("a.b4g-ui-multiselect-none span").eq(-1).text(a);break;case"height":b.find("ul").last().height(parseInt(a,10));break;case"minWidth":this.options[c]=parseInt(a,10),this._setButtonWidth(),this._setMenuWidth();break;case"selectedText":case"selectedList":case"noneSelectedText":this.options[c]=a,this.update();break;case"classes":b.add(this.button).removeClass(this.options.classes).addClass(a);break;case"multiple":b.toggleClass("b4g-ui-multiselect-single",!a),this.options.multiple=a,this.element[0].multiple=a,this.refresh();break;case"position":this.position()}$.Widget.prototype._setOption.apply(this,arguments)}})}(jQuery),



    EmailMeter.watch_for_new_compose_containers();
    inline_manage.init();
    keyboard_shortcuts.init();

    wait_until_guser_is_fetched(on_guser_fetched);

    if (_params["b4g_troubleshoot"]){
        troubleshoot_things(_params["b4g_troubleshoot"]);
    }

}

function on_guser_fetched() {
    run_b4g();
    wait_until_gmail_loaded(on_gmail_loaded);
}

var FromOverlayFlow = false; // used to ask for all permission and suppress tutorial
function on_gmail_loaded() {
    var guser = get_gmail_user();
    var firstChar = guser.charAt(0).toLowerCase();
    var testAudience = firstChar === "m";
    var allUsers = true;

    // TODO remove the old FTUE
    // show new FTUE to all users
    if(allUsers) {
        show_welcome_dialog = show_welcome_dialog_new_ftue;
    } else {
        show_welcome_dialog = show_welcome_dialog_old_ftue;
    }

    // test Boomerang on Send dialog change
    // TODO remove responsive cutoffs for styles of the
    //      losing dialog in _make_responsive_adjustments()
    if(testAudience || can_use_bcal()) {
        boomerang_on_send_text = "Remind me";
    } else {
        boomerang_on_send_text = "Boomerang this";
    }
    if (can_use_bcal()) {
      SEND_LATER_TABLE_ROW_NEW = SEND_LATER_TABLE_ROW_NEW_WITH_BCAL;
    } else {
      SEND_LATER_TABLE_ROW_NEW = SEND_LATER_TABLE_ROW_OLD.replace(SEND_LATER_TABLE_CAL_FEATURES_ROW, '');
    }
    SEND_LATER_TABLE_ROW_NEW = SEND_LATER_TABLE_ROW_NEW.replace("{{boomerang_on_send}}", boomerang_on_send_text);
    SEND_LATER_TABLE_ROW = SEND_LATER_TABLE_ROW.replace("{{boomerang_on_send}}", boomerang_on_send_text);

    // For auto-sign-ins
    // In the case that the user has reloaded Gmail while viewing a Bcal Magic Image,
    // Don't show the normal tutorial flow. Instead, immediately log into Bcal.
    var bcal_image_detected = function(){
      var $images = $(MESSAGE_BODY_SELECTOR).filter(":visible").find("img");
      var found = false;
      $images.each(function(){
        var src = $(this).attr("src");
        if (src) {
          if (src.indexOf("https://b4g.baydin.com/calendar") >= 0 ||
            src.indexOf("https://b4g.baydin.com/bookablecalendar") >= 0) {
            found = true;
            return false; // break out of the .each
          }
        }
      })
      return found;
    }
    if (bcal_image_detected()){
      FromOverlayFlow = true;
    }
    if (_params["landing"]){ 
      if (_params["landing"] == "scheduling") { // from the /meeting-scheduling landing page
        var needtoShowRegularFtueAfterScheduling = read_from_html5_storage("needtoShowRegularFtueAfterScheduling");
        if (needtoShowRegularFtueAfterScheduling == "yes") {
          // show the regular ftue, set variables to "no"
          write_to_html5_storage("needToSeeTutorialLater", "no")
          write_to_html5_storage("needtoShowRegularFtueAfterScheduling", "no")
          if (read_from_html5_storage("hasSeenB4GTutorial") != "yes") {
            write_to_html5_storage("hasSeenB4GTutorial", "yes");
            show_welcome_dialog(1);
          }
        } else if (needtoShowRegularFtueAfterScheduling == "no") {
            // we've shown the ftue in this landing page path already, so do nothing
        } else {
            openingShowFtueImmediately = true; //trigger the scheduling ftue when loaded
            write_to_html5_storage("needToSeeTutorialLater", "yes")
            write_to_html5_storage("needtoShowRegularFtueAfterScheduling", "yes")
            write_to_html5_storage("b4g_bookable_calendar_enabled", "true");
        }


      } else {
        // unused. could be used for other landing pages
        show_tutorial_if_necessary();
      }

      // Tracking user's path to installing extension
      var userSegment, acquisitionChannel, referralSource, adSource;
      userSegment = _params["landing"];
      if (_params["landingmedium"]) {
        if (_params["landingmedium"] == "organic") {
          acquisitionChannel = 'organic';
        } else if (_params["landingmedium"] == "paid") {
          acquisitionChannel = 'paid';
        } else if (_params["landingmedium"] == "viral") {
          acquisitionChannel = 'viral';
        }
        if (_params["referralsource"]) {
          if (_params["referralsource"] == "recipient-page") {
            referralSource = "recipient-page";
          } else if (_params["referralsource"] == "mlc") {
            referralSource = "mlc";
          } else if (_params["referralsource"] == "confirmation-email-footer") {
            referralSource = "confirmation-email-footer";
          } else if (_params["referralsource"] == "overlay") {
            referralSource = "overlay";
          } else if (_params["referralsource"] == "zoom-integration") {
            referralSource = "zoom-integration";
          } else if (_params["referralsource"] == "response-tracking") {
            referralSource = "response-tracking";
          } else if (_params["referralsource"] == "snooze") {
            referralSource = "snooze";
          } else if (_params["referralsource"] == "send-later") {
            referralSource = "send-later";
          } else if (_params["referralsource"] == "read-receipt") {
            referralSource = "read-receipt";
          } else if (_params["referralsource"] == "recurring") {
            referralSource = "recurring";
          } else if (_params["referralsource"] == "respondable") {
            referralSource = "respondable";
          } else if (_params["referralsource"] == "notes") {
            referralSource = "notes";
          } else if (_params["referralsource"] == "inbox-pause") {
            referralSource = "inbox-pause";
          }
        }
        if (_params["adsource"]) {
          var adSourceParam = _params["adsource"].toLowerCase();
          var adSourceOptions = ['google', 'twitter', 'facebook', 'linkedin', 'youtube', 'reddit'];
          if (adSourceOptions.includes(adSourceParam)) {
            adSource = adSourceParam;
          }
        }
      }

      saveFunnelDataLocalStorageItems(userSegment, acquisitionChannel, referralSource, adSource);
    } else {
      // not from any landing page
      show_tutorial_if_necessary();

      if (FromOverlayFlow) {
        // User is coming from the overlay flow, in which case we still need to save funnel data
        // For overlay flow users: we must overwrite the funnel data params because they did not actually go through the post_install.html page
        var userSegment = "scheduling";
        var acquisitionChannel = "viral";
        var referralSource = "overlay";
        saveFunnelDataLocalStorageItems(userSegment, acquisitionChannel, referralSource);
      }
    }
}

var saveFunnelDataLocalStorageItems = function(userSegment, acquisitionChannel, referralSource, adSource) {
  guser = get_gmail_user();
  if (userSegment) {
    write_to_html5_storage("b4g-user-segment-" + guser, userSegment);
  }
  if (acquisitionChannel) {
    write_to_html5_storage("b4g-acquisition-channel-" + guser, acquisitionChannel);
  }
  if (referralSource) {
    write_to_html5_storage("b4g-referring-feature-" + guser, referralSource);
  }
  if (adSource) {
    write_to_html5_storage("b4g-ad-source-" + guser, adSource);
  }
}

// declare variables at global level
var show_welcome_dialog;
var boomerang_on_send_text;

/**
 * 2e. Google Analytics
 */

var track_event = function(trackedEventData) { 
    window.postMessage({ type: "B4G_TRACK_EVENT", trackedEventData: trackedEventData }, "*");
};

/**
 * 2f. Troubleshooting
 */

function troubleshoot_things(param){
    var extensionsString = read_from_html5_storage("b4g_extensions");
    var message = "The Boomerang extension has been loaded successfully. ";
    if (extensionsString){
        // See: https://baydin.atlassian.net/wiki/display/SUP/Other+Extensions
        var PROBLEMS = [
          "ocpljaamllnldhepankaeljmeeeghnid", //mixmax
          "gbohoafagnlmidmhhpfdnmfpodhohaad", //rebump
          "fcinnggknmdfkilogcndkgpojpfojeem", //hiver
          "gakklmehjhhdfjjgnmpkjoemjmeomnli", //smartr
          "gkjnkapjmjfpipfcccnjbjcbgdnahpjp", //yesware
          "ddaloccgjfibfpkalenodgehlhkgoahe", //dragon dictation
          "pkehgijcmpdhfbdbbnkijodmdjhbjlgp", //privacybadger
          "ldpochfccmkkmhdbclfhpagapcfdljkj", //dencentraleyes
          "cnkgdfnjmgamkcpjdljdncfjcegpgcdg", //salesforce
          "kohihleiencpadoaakajafdlmcimglea", //cirrus
          "cffgjgigjfgjkfdopbobbdadaelbhepo", //salesloft
          "mfldbojpjpgjlphijlbgefdjebkhdjom", //bombbomb
          "dcjichoefijpinlfnjghokpkojhlhkgl", //gmailnotifier
          "klbibkeccnjlkjkiokjodocebajanakg", //greatsuspender
          "hmkichigbnaamgiokhbjkigjlggpeenf", //bccme
          "jplnlifepflhkbkgonidnobkakhmpnmh", //privateinternetaccess
          "alehdleagcgnimdipdmllebddejplpbi", //smartsheet
        ];
        var POTENTIAL_PROBLEMS =[
          "annoaihhfdegphdkkkbahheignkgigpd", //followup.cc
          "jpbnpbfpgjkblmejlgkfkekajajhjcid", //bananatag
          "dlppikdhbkdinhpfbneekdbjhgphknad", //contactmonkey
          "ijhapcklhkanndjbdnhichfmolhiaekg", //mxhero
          "mflnemhkomgploogccdmcloekbloobgb", //rightinbox
          "nfddgbpdnaeliohhkbdbcmenpnkepkgn", //sndltr
          "pnnfemgpilpdaojpnkjdgfgbnnjojfik", //streak
          "gllmkcahdekdbapmdfnffclacbpnicaj", //toutapp
          "kemincbhdgppphceahdgebffjcfgbigp", //autoboomerang
          "biohbbbijnpljcdhobbjakhgpkelmjpg", //vocus
          "obpicmhmbfddhkcbiapfeginbafnjmmm", //drift
        ];
        var SETTING_PROBLEMS = [
          "mlomiejdfkolichcflejclcbmpeaniij", //ghostery
          "odjhifogjcknibkahlpidmdajjpkkcfn", //noscript
          "dheionainndbbpoacpnopgmnihkcmnkl", //gmelius
        ];
        var extensionsArray = JSON.parse(extensionsString);
        var problemExtensions = [];
        // an array of objects that look like {"id":"mdmjgnjabahfkpimmieeagojndchnpcb","name":"Boomerang for Gmail"}
        for (var i=0; i<extensionsArray.length; i++){
            var extension = extensionsArray[i];
            var extensionId = extension["id"];
            var extensionName = extension["name"];
            if (PROBLEMS.indexOf(extensionId) > -1 || POTENTIAL_PROBLEMS.indexOf(extensionId) > -1 || SETTING_PROBLEMS.indexOf(extensionId) > -1){
                problemExtensions.push(extension);
            }
        }

        if (problemExtensions.length > 0){
            message += "However, you should check the following extensions for possible conflicts:";
            message += "<h4>Extension Conflicts:</h4><ul>";
            for (var j=0; j<problemExtensions.length; j++){
                message += "<li>" + problemExtensions[j]["name"] + "</li>";
            }
            message += "</ul>";
        }
    }

    message += "<div id='b4g-inline-troubleshoot-holder'/>";

    var $dialog = show_dialog(message, "Boomerang For Gmail",
        {
            "Close": {
                text: "Close",
                "class": "b4g-button green",
                click: function() {
                    // Redirect so we lose the b4g_troubleshoot=1 parameter
                    window.location = "https://mail.google.com";
                }
            },
        }
    );

    if(param === "inline-manage") {
        // Awful hack to ensure file has loaded before running code
        setTimeout(function() { generate_inline_manage_troubleshoot($dialog); }, 0);
    }
    localStorage.removeItem("b4g_extensions");
}

/**
 * 3. Gmail UI Grabbers
 */

var MESSAGE_BODY_SELECTOR = ".ii";
var MENU_BAR_BUTTONS_SELECTOR = ".iH > div [role=button]";
var MENU_BAR_SELECTOR = ".iH > div";

var EDIT_WINDOW_SELECTOR = ".dK";
var SUBJECT_LINE_SELECTOR = ".hP";
var SENDER_SELECTOR = ".gD";
var TIMESTAMP_SELECTOR = ".g3";

var SUBJECT_LINE_BOTTOM_BORDER_SELECTOR = ".nH .if > .nH > .nH > .dJ"; // Magic location
var LAST_ROW_OF_SEND_FORM_SELECTOR = ".ee";

var DOWN_ARROW_GLYPTH_HTML = '<div class="b4g_menu G-asx T-I-J3 J-J5-Ji">&nbsp;</div>';

// 7/26/22: .nH.oy8Mbf.nn is standard panel, .nH.oy8Mbf.WR is panel in newest Gmail UI with meet/chat disabled
var SIDE_PANEL_SELECTOR = '.nH.oy8Mbf.nn, .nH.oy8Mbf.WR';

/**
 * Gets the document of the iFrame on which GMail renders almost all of its content.
 * @return The canvas frame's document
 */
function get_frame()
{
  var oIframe = document.getElementById('canvas_frame');
  if (!oIframe){
    return document;
  }
  var frameDoc = (oIframe.contentWindow || oIframe.contentDocument);
  if (frameDoc.document) { frameDoc = frameDoc.document; }
  return frameDoc;
}
function get_js_frame()
{
    var frameDoc = null;
    var oIframe = document.getElementById('js_frame');
    if (oIframe != null){
        frameDoc = (oIframe.contentWindow || oIframe.contentDocument);
        if (frameDoc.document) { frameDoc = frameDoc.document; }
    }
    return frameDoc;
}

function determine_if_background_send_is_enabled()
{
  return $(get_js_frame()).text().indexOf("Sending in the background") >= 0;
}

function get_new_ui_message_ids() {
  return $(".adn.ads:visible").map(function(){
    return $(this).attr("data-legacy-message-id");
  }).get();
}

function get_selected_new_ui_thread_ids() {
  var threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
    return $(this).parents(".zA").find("[data-thread-id]").attr("data-thread-id");
  }).get();
  // Sometimes in preview pane (but not all the time), the threadId is in the adjacent cell
  if (threadIds.length === 0) {
    threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
      return $(this).parents(".zA").next().find("[data-thread-id]").attr("data-thread-id");
    }).get();
  }
  // If it's Preview Pane and there's a visible subject open, return that
  // (you can Boomerang in Preview Pane without actually checking an item)
  if (threadIds.length === 0 && b4g_is_preview_pane()) {
    var visibleThreadId = $(".hP:visible").first().attr("data-thread-perm-id");
    if (visibleThreadId) {
      threadIds = [visibleThreadId];
    }
  }
  for (var i = 0; i < threadIds.length; i++) {
    threadIds[i] = threadIds[i].replace("#", "");
  }
  if (threadIds.length === 0) {
    threadIds = _get_selected_legacy_thread_ids();
  }
  return threadIds;
}

// fallback function
function _get_selected_legacy_thread_ids() {
  var threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
    return $(this).parents(".zA").find("[data-legacy-thread-id]").attr("data-legacy-thread-id");
  }).get();
  // Sometimes in preview pane (but not all the time), the threadId is in the adjacent cell
  if (threadIds.length === 0) {
    threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
      return $(this).parents(".zA").next().find("[data-legacy-thread-id]").attr("data-legacy-thread-id");
    }).get();
  }
  // If it's Preview Pane and there's a visible subject open, return that
  // (you can Boomerang in Preview Pane without actually checking an item)
  if (threadIds.length === 0 && b4g_is_preview_pane()) {
    var visibleThreadId = $(".hP:visible").first().attr("data-legacy-thread-id");
    if (visibleThreadId) {
      threadIds = [visibleThreadId];
    }
  }
  return threadIds;
}

// Improved Thread Id for boomerangs and replies ONLY
function get_boomerang_thread_id()
{
  if (which_gmail() === OLD_GMAIL) {
    var threadId, idx, hash = window.location.hash.toString();
    if(!hash) {
      var loc = window.location.toString();
      idx = loc.lastIndexOf("#");

      if(idx > -1) { hash = loc.substr(loc.lastIndexOf("#")); }
    }

    idx = hash.lastIndexOf("/");
    if(idx > -1) {
      var threadIdCandidate = hash.substr(idx + 1);
      var threadIdRegex = /[0-9a-f]+(?=$|\?)/;
      threadId = threadIdRegex.exec(threadIdCandidate);
    }

    if (threadId) { threadId = threadId[0]; }
    else { threadId = _params["th"] || ""; } // Sometimes the threadId is in a url param called "th"

    return threadId;
  }
  else {
    var threadId = $(".hP:visible").first().attr("data-thread-perm-id");
    if (threadId) {
      threadId = threadId.replace("#", "");
    }
    return threadId;
  }
}
// Improved Thread Id for new compose send laters ONLY
// Might return the string "undefined", might have to catch for that.
function get_send_later_thread_id(composeContainer){
  return get_element_by_name("rt", composeContainer).val().replace("#", "");
}

// An interesting, but unused function to parse the url for compose drafts thread ids.
// function get_compose_thread_ids(){
//     var loc = String(document.location);
//     var threadIdCandidate = loc.substr(loc.lastIndexOf("?compose=") + "?compose=".length);
//     var threadIdRegex = /[0-9a-f]+(?=%2C|$)/g;
//     var threadIds = threadIdCandidate.match(threadIdRegex)
//     if (threadIds == null){
//         threadIds = [];
//     }
//     return threadIds;
// }



/**
 * Returns the target of an event.
 * @param e The event
 * @return The target of the event
 */
function get_target(e) {
  //Get the target of the given event
  e = e || window.event;
  return e.target || e.srcElement;
}

/**
 * Returns a jQuery object representing the first match of a DOM element
 * given a name attribute.
 * @param name The name attribute to match
 * @return A jQuery object whose attribute is the given name
 */
function get_element_by_name(name, frameDoc)
{
  if (!frameDoc){
    frameDoc = get_frame();
  }
  return $("*[name='" + name + "']", frameDoc).filter(":first");
}


/**
 * Gets the current GMail or Google Apps account in the form of an e-mail address.
 * @return The GMail or Google Apps account's e-mail address
 */
function get_gmail_user()
{
  if (GMAIL_USER) {
    return GMAIL_USER;
  }
  else {
    var emailRegEx = EMAIL_REGEX;

    if (which_gmail() !== OLD_GMAIL) {
      // fetch the email address from the header icon text.
      // if the icon text has a match for our address, store it.
      // We assume that there will be only one email address in the icon text,
      // and that the first email found is the correct one
      var address = "";
      $("header a[aria-expanded]").each(function() {
        var label = $(this).attr("aria-label");
        var regex = emailRegEx.exec(label);
        if (regex) {
          address = regex;
          return false;
        }
      });
    }
    else {
      var loadingWords = $(".msg").html();
      var address = emailRegEx.exec(loadingWords);
    }

    if (!address)
    {
      address = "";
      var titleWords = document.title.split(" ");

      for(var i = 0; i<titleWords.length; i++)
      {
        var extractedAddress = emailRegEx.exec(titleWords[i]);
        if (extractedAddress)
        {
          address = extractedAddress[0];
        }
      }
    }
    else
    {
      address = address[0];
    }
    GMAIL_USER = address;
    return address;
  }
}

function gmail_user_is_in_testing_group() {
  var guser = get_gmail_user().toLowerCase();
  var firstLetter = guser[0];
  return "abcdefghijklmn".indexOf(firstLetter) != -1 ? "70_percent": "30_percent";
}

function gmail_user_is_new() {
  var data = read_from_html5_storage("b4g_plan-" + get_gmail_user());
  return data == null || data == "none" ? "new_user": "existing_user";
}

/**
 * Determines which Gmail version we are dealing with. We will need to handle each differently.
 * The possibilities are:
 *   1. New Gmail
 *   2. Old Gmail with new data layer in the DOM
 *   3. Old Gmail
 * @return Enum for which Gmail the User is in
 */
function which_gmail() {
  // It's been 4 years, it's safe to always return New Gmail
  return NEW_GMAIL;
}

/**
 * @return A jQuery object representing the left panel in the new UI,
 *         or null if the user is not in New Gmail
 */
function get_new_gmail_left_panel() {
  if (which_gmail() === NEW_GMAIL) {
    return $(".nM");
  }
  return null;
}

function extract_email_addresses_from_field(fieldName, frameDoc) // will be replaced soon
{
    if (!frameDoc){
        frameDoc = get_frame();
    }
    var addresses = "";
    var fields = $("[name='"+ fieldName +"']", frameDoc);
    fields.each(function(){
        addresses += $(this).val() + " ";
    });
    return (!addresses ? "" : strip_email_addresses(addresses));
}

function extract_email_addresses_from_pillboxes(frameDoc) { // will replace above soon
  if (!frameDoc){
      frameDoc = get_frame();
  }
  var tos = "";
  var ccs = "";
  var bccs = "";

  var to_field = $(".anm[name='to']", frameDoc);
  to_field.find(".afV").each(function(){
      tos += $(this).attr("data-hovercard-id") + " ";
  });
  tos += to_field.find(".aIa.aFw, .aIa.aFx").text();

  var cc_field = $(".anm[name='cc']", frameDoc);
  cc_field.find(".afV").each(function(){
      ccs += $(this).attr("data-hovercard-id") + " ";
  });
  ccs += cc_field.find(".aIa.aFw, .aIa.aFx").text();

  var bcc_field = $(".anm[name='bcc']", frameDoc);
  bcc_field.find(".afV").each(function(){
      bccs += $(this).attr("data-hovercard-id") + " ";
  });
  bccs += bcc_field.find(".aIa.aFw, .aIa.aFx").text();
  var pillboxes = {
    "to": !tos ? "" : strip_email_addresses(tos),
    "cc": !ccs ? "" : strip_email_addresses(ccs),
    "bcc": !bccs ? "" : strip_email_addresses(bccs),
  }
  return pillboxes;
}

function check_if_has_invalid_recipients(composeContainer) {
    // search for the Gmail class that indicates when a recipient isn't properly formed
    return $(".vQ .vT", composeContainer).length > 0;
}

function close_welcome_dialog_new() {
  $("#wc_screen").remove();
}

/**
 * Displays a welcome_screen dialog.
 * @param screenNo - screen to show, starting with 1
 */
var show_welcome_dialog_new_ftue = (function initialize_welcome_dialog() {
  /********************************************************
   * Static variables, shared functions and constants
   *******************************************************/
  var lastScreenSeen = 0;

  /* buttons => array of {
      text: String,
      onclick: Function,
      class: String
    }
  */
  var buildNavButtons = function(buttons) {
    var $buttonContainer = $("<div class='b4g-ftue-menu'></div>");
    buttons.forEach(function(button) {
      $buttonContainer.append($("<button/>").addClass("ftue-btn")
                               .addClass(button.class || "")
                               .html(button.text)
                               .click(button.onclick));
    });
    return $buttonContainer;
  }

  var actions = {
    next: function() {
      show_next_screen_new_with_expanded_sl_menu.call(this, lastScreenSeen + 1);
    },
    skip: close_welcome_dialog_new,
  }

  var defaultButtonSet = [{text: "Skip", class: "b4g-btn-secondary", onclick: actions.skip},
                          {text: "Next", class: "b4g-btn-primary", onclick: actions.next}];
  var finalButtonSet = [{text: "Got it!", class: "b4g-btn-primary", onclick: actions.skip}];

  var assets = {
      sendLater: which_gmail() === NEW_GMAIL ? "Send-Later.png" : "ftue-send-later.png",
      tracking: which_gmail() === NEW_GMAIL ? "boomerang-this.png" : "ftue-boomerang.png",
      boomerang: which_gmail() === NEW_GMAIL ? "boomerang-button-new.png" : "boomerang-button.png",
      pauseButton: which_gmail() === NEW_GMAIL ? "Inbox-Pause-Button.png" : "Pause_Button.png",
      pauseDialog: which_gmail() === NEW_GMAIL ? "Inbox-Pause-Menu.png" : "Pause-Dialog.png",
      settings: which_gmail() === NEW_GMAIL ? "Manage_Dropdown.png" : "settings-menu.png",
      meetMenu: "meetMenu.png"
  }

  var makeRetina = function(img) {
      var idx = img.indexOf(".");
      return img.slice(0, idx) + "@2x" + img.slice(idx) + " 2x";
  }

  var HTMLElements = {
    // New message compose screen
    COMPOSE_DIALOG: "<div class='b4g-ftue-compose-dialog'></div>",
    COMPOSE_DIALOG_BG: "<div class='b4g-ftue-component b4g-ftue-compose-dialog-bg'><div class='overlay wc_overlay_fg'></div></div>",
    SEND_BAR: ("<div class='b4g-ftue-send-bar'>" +
      "<img class='b4g-anim-init ftue-send-later' src='https://b4g.baydin.com/site_media/img/ftue/" + assets.sendLater + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.sendLater) + "' style='display:none;'>" +
      "<img class='b4g-anim-init ftue-boomerang' src='https://b4g.baydin.com/site_media/img/ftue/" + assets.tracking + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.tracking) + "' style='display:none;'>" +
      "<img class='b4g-anim-init ftue-rr' src='https://b4g.baydin.com/site_media/img/ftue/tracking-toggle.png' srcset='https://b4g.baydin.com/site_media/img/ftue/tracking-toggle@2x.png 2x' style='display:none;'>" +
      "<img class='b4g-anim-init ftue-scheduling' src='https://b4g.baydin.com/site_media/img/ftue/ftue-bcal.png' srcset='https://b4g.baydin.com/site_media/img/ftue/ftue-bcal@2x.png 2x' style='display:none;'>" +
      "<img class='b4g-anim-init ftue-respondable' src='https://b4g.baydin.com/site_media/img/ftue/respondable.png' srcset='https://b4g.baydin.com/site_media/img/ftue/respondable@2x.png 2x' style='display:none;'>" +
      "</div>"),
    CONTENT_CONTAINER: "<div class='wc_ftue_content'></div>",
    WELCOME_ROW: "<div class='b4g-ftue-title b4g-ftue-welcome'><h1>Welcome to Boomerang for Gmail!</h1><p>We've added new features to your Compose window:</p></div>",
    SEND_LATER_DESC: "<div class='ftue-detail ftue-detail-sl'><h1>Send Later</h1><p>Schedule a message to Send Later or set up recurring messages.</p><a href='https://vimeo.com/604305300' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",
    RESPONSE_TRACKING_DESC: "<div class='ftue-detail ftue-detail-boomerang'><h1>Response Tracking</h1><p>Track responses to your emails and return them to your Inbox if you don't hear back.</p><a href='https://vimeo.com/594789716' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",
    RR_DESC: "<div class='ftue-detail ftue-detail-rr'><h1>Read Receipts</h1><p>Request a read receipt or see whether your links have been clicked.</p><a href='https://vimeo.com/594786606' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",
    SCHEDULING_DESC: "<div class='ftue-detail ftue-detail-scheduling'><h1>Meeting Scheduling</h1><p>Schedule meetings effortlessly, without leaving your Inbox.</p><a href='https://vimeo.com/594788085' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",
    RESPONDABLE_DESC: "<div class='ftue-detail ftue-detail-respondable'><h1>Respondable</h1><p>Write better emails with artificial intelligence.</p><a href='https://vimeo.com/594780945' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",

    // Send later menu opened screen
    SEND_LATER_DETAIL_SCREEN_SEND_BAR_OVERLAY: "<div class='wc_overlay_fg ftue-send-later-bar-overlay'></div>",
    SEND_LATER_DROPDOWN: "<div class='b4g-ftue-send-later-dropdown-container'></div>",
    SEND_LATER_DROPDOWN_TEXT: "<h1 class='b4g-ftue-title b4g-ftue-send-later-title'>Use Send Later to schedule messages for later, automate follow-up emails, or create recurring messages.</h1>" +
      "<div class='b4g-ftue-send-later-detail b4g-ftue-send-later-no-reply'><h1>Send Later if no reply</h1><p>When replying to a message, you can schedule a response to send automatically if you don't hear back within a certain amount of time.</p></div>" +
      "<div class='b4g-ftue-send-later-detail b4g-ftue-send-later-specific-times'><h1>Specific Times</h1><p>Enter a specific time or date using natural language.</p></div>" +
      "<div class='b4g-ftue-send-later-detail b4g-ftue-recurring-msg'><h1>Recurring messages</h1><p>Send messages on a repeating schedule, such as daily, weekly, or monthly.</p><a href='https://vimeo.com/594788882' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",

    // Scheduling menu opened screen
    SCHEDULING_FTUE_MENU: "<div class='b4g-ftue-scheduling-menu'><img src='https://b4g.baydin.com/site_media/img/ftue/" + assets.meetMenu + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.meetMenu) + "'></div>",
    SCHEDULING_DETAIL_SCREEN_SEND_BAR_OVERLAY: "<div class='wc_overlay_fg ftue-scheduling-bar-overlay'></div>",
    SCHEDULING_DROPDOWN_TEXT: "<h1 class='b4g-ftue-title b4g-ftue-scheduling-title'>Schedule meetings effortlesslyand respectfully. 5 clicks, no typing, no back and forth. Powered by Boomerang's Magic Live Calendar.</h1>" +
      "<div class='b4g-ftue-scheduling-detail b4g-ftue-scheduling-suggest-times'><h1>Suggest Times</h1><p>Fully customizable one-off meetings, built right into email</p><a href='https://vimeo.com/604304254' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>" +
      "<div class='b4g-ftue-scheduling-detail b4g-ftue-scheduling-free-busy'><h1>Share Free/Busy</h1><p>Share an always-up-to-date view of when you're free and busy inside an email.</p><a href='https://vimeo.com/604303719' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>" +
      "<div class='b4g-ftue-scheduling-detail b4g-ftue-scheduling-bookable'><h1>Bookable Schedule</h1><p>Set it up once and use it to schedule meetings with everyone. The most powerful, most versatile meeting scheduling tool</p><a href='https://vimeo.com/693319863' target='_blank' class='ftue-watch-video-cta'>Watch Demo</a></div>",


    // Reply compose screen
    COMPOSE_REPLY: "<div class='b4g-ftue-compose-reply'></div>",
    COMPOSE_REPLY_BG: "<div class='b4g-ftue-compose-reply-bg'><div class='overlay wc_overlay_fg'></div>" +
      "<div class='b4g-ftue-boomerang-menu'><img src='https://b4g.baydin.com/site_media/img/ftue/" + assets.boomerang + "'>" +
        "<div class='b4g-ftue-dropdown-container'></div>" +
      "</div></div>",
    COMPOSE_REPLY_TEXT: "<h1 class='b4g-ftue-title'>Boomerang can help you keep track of emails you don't need right now.</h1>" +
      "<div class='b4g-ftue-response-tracking'><h1>Follow-up Reminders</h1><span>You can set the message to return to your Inbox if you don't hear back within a certain amount of time.<br>You can also add a note for yourself.</span></div>" +
      "<div class='b4g-ftue-inline-manage'><h1>Manage your Boomerangs</h1><span>You can edit or reschedule Boomeranged messages here.</span></div>" +
      "<div class='b4g-ftue-inline-manage-highlight'></div>",
    IBP_CONTAINER: "<div class='b4g-ftue-ibp'></div>",
    IBP_SLIDE:  "<div class='b4g-ftue-ibp-mask'></div><div style='z-index: 10;position: relative;'>" +
      "<img id='b4g-ftue-ibp-button' class='b4g-anim-init' src='https://b4g.baydin.com/site_media/img/ftue/" + assets.pauseButton + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.pauseButton) + "' style='display:none; padding-top: 12px; padding-left: 84px;position: absolute;'>" +
      "<h1>Inbox Pause stops new email from coming\ninto your Inbox until you're ready for it.</h1><p><a href='https://vimeo.com/594782031' target='_blank' class='ftue-watch-video-cta'>WATCH VIDEO</a></p>" +
      "<img id='b4g-ftue-ibp-dialog' class='b4g-anim-init ftue-send-later' src='https://b4g.baydin.com/site_media/img/ftue/" + assets.pauseDialog + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.pauseDialog) + "' style='display: none; display: block; margin: auto; padding-top: 10px;'></div>",
    SETTINGS: "<div class='b4g-ftue-settings'><h1 class='b4g-ftue-settings-title'>That's it! If you ever need more help, we'll be right here.</h1>" +
      "<img src='https://b4g.baydin.com/site_media/img/ftue/" + assets.settings + "' srcset='https://b4g.baydin.com/site_media/img/ftue/" + makeRetina(assets.settings) + "'></div>"
  }

  /********************************************************
   * FTUE logic
   *******************************************************/

  function show_next_screen_new_with_expanded_sl_menu(screenNo) {
    track_event([ "welcome dialog new ftue expanded SL menu", "show", String(screenNo) ]);
    track_event([ "automatic-oauth-dialog", "screen-" + String(screenNo)]);
 
    frameDoc = get_frame();
    var $parent = $("body", frameDoc);

    var $el = $parent.find(".wc_screen_content");
    if(!$el.length) {
      var $container = $("<div id='wc_screen'><div class='overlay wc_overlay_bg'></div><div class='wc_screen_container'><div class='wc_screen_content'></div></div>").appendTo($parent);
      $el = $container.find(".wc_screen_content");
    }

    // TODO if we decide to roll out the new FTUE to all users,
    // all of the styles in .wc_screen_new_ftue_styles can be added
    // to #wc_screen. then, .wc_screen_new_ftue_styles can be deleted.
    // this class was only made because both the new and old FTUE
    // use #wc_screen and there were conflicting styles.
    $("#wc_screen").addClass("wc_screen_new_ftue_styles");

    if(which_gmail() === NEW_GMAIL) {
      $("#wc_screen").addClass("gm-ftue");
    }

    $(".b4g-ftue-menu").remove();
    switch(screenNo) {
    case 1: {
      $el.empty();
      var $sendBar = $(HTMLElements.SEND_BAR);
      var $dialogWrapper = $(HTMLElements.COMPOSE_DIALOG)
        .append($(HTMLElements.COMPOSE_DIALOG_BG)
          .append($(HTMLElements.CONTENT_CONTAINER))
        )
        .append($sendBar);

        var $buttons = buildNavButtons(defaultButtonSet),
        $nextButton = $buttons.find(".b4g-btn-primary");

        $el.append($dialogWrapper).append($buttons);

        var $container = $(".b4g-ftue-compose-dialog-bg");
        $container.append(HTMLElements.WELCOME_ROW +
                          HTMLElements.SEND_LATER_DESC +
                          HTMLElements.RESPONSE_TRACKING_DESC +
                          HTMLElements.RR_DESC +
                          HTMLElements.SCHEDULING_DESC +
                          HTMLElements.RESPONDABLE_DESC);

        $nextButton.attr("disabled", true);

      $el.find(".b4g-ftue-title").show();

      // Display each feature and associated text in sequence
      var timer = setInterval(function() {
        var $hiddenFeatures = $sendBar.find(".b4g-anim-init");
        var $hiddenFeatureLabel = $(".ftue-detail:hidden").first();

        if($hiddenFeatures.length) {
          $hiddenFeatures.first().removeClass("b4g-anim-init").show();
          setTimeout(function() {
            $hiddenFeatureLabel.fadeIn(900);
          }, 400)
        } else {
          $nextButton.attr("disabled", false);
          clearInterval(timer);
        }
      }, 1400)
      }
      break;
    case 2: {
      $('.ftue-detail, .b4g-ftue-welcome').remove();

      var $buttons = buildNavButtons(defaultButtonSet),
          $nextButton = $buttons.find(".b4g-btn-primary"),
          $sendBar = $(".b4g-ftue-send-bar"),
          $ftueComposeDialogDiv = $('.b4g-ftue-compose-dialog-bg');

      $sendBar.find('.ftue-send-later').addClass('ftue-send-later-expanded-button');
      $sendBar.append(HTMLElements.SEND_LATER_DETAIL_SCREEN_SEND_BAR_OVERLAY);
      $sendBar.addClass('b4g-ftue-send-bar-under-overlay');

      $ftueComposeDialogDiv.append(HTMLElements.SEND_LATER_DROPDOWN).append(HTMLElements.SEND_LATER_DROPDOWN_TEXT);

      $el.append($buttons);
      $nextButton.attr("disabled", true);

      SEND_LATER_MENU_HEIGHT = 513;

      var sequence = [
        [function() {
          $el.find(".b4g-ftue-title").show();
          $el.find(".b4g-ftue-send-later-dropdown-container").css("height", SEND_LATER_MENU_HEIGHT).css("margin-top", 0);
          }, 1000],
        [function() {
          $el.find(".b4g-ftue-send-later-no-reply").fadeIn(500);
          $el.find(".b4g-ftue-send-later-specific-times").fadeIn(500);
          $el.find(".b4g-ftue-recurring-msg").fadeIn(500);
        }, 1500],
        [function() {
          $nextButton.attr("disabled", false);
        }, 1000]
      ];

      var readyNextInSequence = function(seq) {
        if(seq.length) {
          var setTimeoutArgs = seq.shift(),
              nextAction = setTimeoutArgs[0];
          setTimeoutArgs[0] = function() {
            nextAction();
            readyNextInSequence(seq);
          }
          setTimeout.apply(null, setTimeoutArgs);
        }
      }

      readyNextInSequence(sequence);
      }
      break;
    case 3: {
      $('.ftue-detail').remove();
      var $ftueComposeDialogDiv = $('.b4g-ftue-compose-dialog-bg');
      $ftueComposeDialogDiv.html($(HTMLElements.COMPOSE_DIALOG_BG).html());

      var $buttons = buildNavButtons(defaultButtonSet),
          $nextButton = $buttons.find(".b4g-btn-primary"),
          $sendBar = $(".b4g-ftue-send-bar"),
          $ftueComposeDialogDiv = $('.b4g-ftue-compose-dialog-bg');

      $('.ftue-send-later-expanded-button').removeClass('ftue-send-later-expanded-button');
      $sendBar.find('.ftue-scheduling').addClass('ftue-scheduling-expanded-button')
        .attr('src', 'https://b4g.baydin.com/site_media/img/ftue/ftue-bcal-on.png')
        .attr('srcset', 'https://b4g.baydin.com/site_media/img/ftue/ftue-bcal-on@2x.png 2x');
      $sendBar.addClass('b4g-ftue-send-bar-under-overlay');

      $ftueComposeDialogDiv.append(HTMLElements.SCHEDULING_FTUE_MENU).append(HTMLElements.SCHEDULING_DROPDOWN_TEXT);

      $el.append($buttons);
      $nextButton.attr("disabled", true);

      SCHEDULING_MENU_HEIGHT = 164;

      var sequence = [
        [function() {
          $el.find(".b4g-ftue-title").show();
          $el.find(".b4g-ftue-scheduling-menu").css("height", SCHEDULING_MENU_HEIGHT).css("margin-top", 0);
          }, 1000],
        [function() {
          $el.find(".b4g-ftue-scheduling-suggest-times").fadeIn(500);
          $el.find(".b4g-ftue-scheduling-free-busy").fadeIn(500);
          $el.find(".b4g-ftue-scheduling-bookable").fadeIn(500);
        }, 1500],
        [function() {
          $nextButton.attr("disabled", false);
        }, 1000]
      ];

      var readyNextInSequence = function(seq) {
        if(seq.length) {
          var setTimeoutArgs = seq.shift(),
              nextAction = setTimeoutArgs[0];
          setTimeoutArgs[0] = function() {
            nextAction();
            readyNextInSequence(seq);
          }
          setTimeout.apply(null, setTimeoutArgs);
        }
      }

      readyNextInSequence(sequence);
      }
      break;
    case 4: {
      $el.empty();
      var $wrapper = $(HTMLElements.COMPOSE_REPLY)
        .append($(HTMLElements.COMPOSE_REPLY_BG)
          .append($(HTMLElements.CONTENT_CONTAINER)
            .append(HTMLElements.COMPOSE_REPLY_TEXT))
        )

      var $buttons = buildNavButtons(defaultButtonSet),
          $nextButton = $buttons.find(".b4g-btn-primary");
      $el.append($wrapper).append($buttons);

      var $overlay = $el.find(".overlay");
      $overlay.hide();
      $nextButton.attr("disabled", true);

      $el.find(".b4g-ftue-title").show();

      var MENU_HEIGHT = which_gmail() === NEW_GMAIL ? 516 : 432;
      var sequence = [
        [function() {
          $overlay.fadeIn(1000);
          $el.find(".b4g-ftue-boomerang-menu").css("z-index", 10); // bring to foreground
        }, 1000],
        [function() {
          $el.find(".b4g-ftue-dropdown-container").css("height", MENU_HEIGHT);
          $el.find(".b4g-ftue-response-tracking").fadeIn(500);
        }, 1000],
        [function() {
          $el.find(".b4g-ftue-inline-manage-highlight").fadeIn(1000);
          $el.find(".b4g-ftue-inline-manage").fadeIn(500);
        }, 1500],
        [function() {
          $nextButton.attr("disabled", false);
        }, 1000]
      ];

      var readyNextInSequence = function(seq) {
        if(seq.length) {
          var setTimeoutArgs = seq.shift(),
              nextAction = setTimeoutArgs[0];
          setTimeoutArgs[0] = function() {
            nextAction();
            readyNextInSequence(seq);
          }
          setTimeout.apply(null, setTimeoutArgs);
        }
      }

      readyNextInSequence(sequence);
      }
      break;
    case 5: {
        $el.empty();
        var $wrapper = $(HTMLElements.IBP_CONTAINER)
               .append($(HTMLElements.IBP_SLIDE))

        var $buttons = buildNavButtons(defaultButtonSet),
            $nextButton = $buttons.find(".b4g-btn-primary");
        $el.append($wrapper).append($buttons);
        $("#b4g-ftue-ibp-button").show();
        $("#b4g-ftue-ibp-dialog").show();
      }
      break;
    case 6: {
      $el.empty();
      var $wrapper = $(HTMLElements.SETTINGS);
      $el.append($wrapper)
         .append(buildNavButtons(finalButtonSet))
         .addClass("b4g-ftue-final");

      var settingsIconPosition = $("#b4g_app_loader_icon").offset();
      var moveButtonLeft = which_gmail() === NEW_GMAIL ? 16 : 24;
      var moveButtonTop = which_gmail() === NEW_GMAIL ? 0 : 2;
      $el.css({
        left: settingsIconPosition.left - $el.width() + moveButtonLeft,
        top: settingsIconPosition.top + moveButtonTop
      });
      }
      break;
    default: {
      close_welcome_dialog_new();
      }
    }
    lastScreenSeen = screenNo;
  }

  return show_next_screen_new_with_expanded_sl_menu;
})();

function get_gmail_user_num_for_multiple_sign_in(){
  var url = String(document.location);
  var multipleLoginRegex = /mail\.google\.com\/mail\/u\/(\d+)/;
  var userNumMatch = multipleLoginRegex.exec(url);
  var userNum;
  if(userNumMatch == null){
    userNum = 0;
  }
  else{
    userNum = userNumMatch[1];
  }
  return userNum;
}

function is_user_in_edit_mode(){
  return _params["b4gEdit"] === "true";
}

function is_loading_attachments() {
  var attachCancelButtons = $(".dU", frameDoc);
  return (attachCancelButtons.length>0);
}


/**
 * Grabs text for Boomerang by Magic, organized by id
 * [{"text": "hello", "gmailId": "#msg-a:r5259650961081418750"}]
 */
function grab_inbox_conversation_text()
{
  var subject = $(".hP").filter(":visible").text();
  var $messages = $(MESSAGE_BODY_SELECTOR + ":visible");
  if ($messages.length < 1){
    return [];
  }

  var MAX_EMAILS_TO_SEARCH = 5;
  var texts = [];
  var count = 0;
  // Reverse order
  $($messages.get().reverse()).each(function() {
    if (count >= MAX_EMAILS_TO_SEARCH) {
      return;
    }
    var $this = $(this);
    var gmailId = $this.closest(".adn.ads[data-message-id]").attr("data-message-id").replace("#", "");
    var emailDate = null;
    // if (can_use_bcal()) { // we think this is freezing people's gmails, but nobody has offered to screenshare
    //   var timestampText = $this.closest(".adn.ads[data-message-id]").find(".g3").attr("alt");
    //   emailDate = Date.parse(timestampText);
    // }
    var text;
    if (can_use_bcal()) {
      text = $($this.html().replace(/(<(br|div|p|li)\s*\/?\s*>)/gi, '$1{new_line}')).text().replace(/\{new_line\}/g, '\n');
      // Remove email headers
      text = text.replace(/^[\s>]*(On.*wrote:|Sent:.*)$/gm, "");
      // TODO: are these regexes needed?
      text = text.replace(/^\s*Date:.*$\s*^\s*(Subject|To):/gm, "");
      //text = text.replace(/^\s*(To):.*$\s*^\s*(Sun|Mon|Tues|Wednes|Thurs|Fri|Satur)day.*(A|P)M$/gm, "");
    } else {
      text = $this.text();
    }
    texts.push({
      "text": text,
      "subject": subject,
      "gmailId": gmailId,
      "emailDate": emailDate || new Date(),
    });
    count += 1;
  });
  return texts;
}


function is_in_future(dateString){
  var currentDateTimeObj = new Date();
  return ( parse_date(dateString) - (currentDateTimeObj.getTime() - (5 * 60 *1000))> 0 );
}

function is_new_googlebar(){
  return $('button', frameDoc).filter(function() {
    return $(this).attr("aria-label") === $('#gbqfb', frameDoc).attr("aria-label");
  }).length > 0 ;
}

function is_pop_in_window(){
  return $("body").find(".aVN").length !== 0;
}

// determines if a compose container is popin
function is_pop_in_compose(composeContainer){
  return composeContainer.parent().parent().hasClass("aVN");
}

function is_pop_out_window(){
  return (loc.indexOf("fs=1") || loc.indexOf("ui=2") > 0 || loc.indexOf("view=cm") > 0) && get_gmail_logo().length === 0;
}
function is_dialog($composeContainer){
  return $composeContainer.closest(".nH.Hd[role='dialog']").length > 0;
}
var is_threaded_view = function($composeContainer) {
  return $composeContainer.closest(".nH[role=list]").length > 0;
}
function is_pop_out_thread_view($composeContainer) {
  return is_pop_out_window($composeContainer) && is_threaded_view($composeContainer);
}
function is_a_reply($composeContainer) {
  if (!is_pop_out_window() && $composeContainer) {
    // check whether the subject line is hidden
    var $subjectField = $composeContainer.find(".az6");
    return !$subjectField.length || $subjectField.css("display") === "none";
  }
  else {
    // look for existing subject in pop out window
    return $(".hP").length != 0;
  }
}

function get_gmail_logo(){
  var frameDoc = get_frame();
  return $("[role='banner']:visible", frameDoc);
}

function get_gmail_compose_button(){
  return $(".aic:has(div[role='button'])").first();
}

function get_mail_text_container() {
  return $('.Xa.wT.W8.XJ.Xr').first();
}

function get_buttons_by_text(buttonText, frameDoc){
  if (!frameDoc){
    frameDoc = get_frame();
  }
  return $("[role='button']", frameDoc).filter(function() { return $(this).text().trim() === buttonText; });
}

function get_the_send_button_text(frameDoc){
  if (!frameDoc){
    frameDoc = get_frame();
  }

  var sending = $('.T-I.J-J5-Ji.Bq.nS.T-I-ax7.L3', frameDoc).first().text();
  if(!sending) { sending = $('.T-I.J-J5-Ji.Bq.nS.T-I-KE.L3', frameDoc).first().text(); }
  if(!sending) { sending = $(".T-I.J-J5-Ji.Bq.nS.T-I-ax7.L3", frameDoc).first().text(); }
  if(!sending) { sending = $(".T-I.J-J5-Ji.aoO.L3.T-I-ax7", frameDoc).first().text(); }
  if(!sending) { sending = $(".T-I.J-J5-Ji.aoO.T-I-atl.L3", frameDoc).first().text(); }
  if(!sending) { sending = "Send"; }

  return sending;
}

function get_the_send_and_archive_button_text(frameDoc){
  var send_and_archive = $('.T-I.J-J5-Ji.Uo.T-I-atl.L3', frameDoc).first().text();
  if (!send_and_archive) {
    send_and_archive = $(".T-I.J-J5-Ji.Bq.undefined.T-I-ax7.L3", frameDoc).first().text();
  }

  if (!send_and_archive) {
    send_and_archive = "Send & Archive";
  } else {
    send_and_archive = send_and_archive.replace("&amp;", "&");
  }

  return send_and_archive;
}

function get_the_send_buttons(frameDoc){
  if (!frameDoc){
    frameDoc = get_frame();
  }
  var sending = get_the_send_button_text(frameDoc);
  var send_and_archive = get_the_send_and_archive_button_text(frameDoc);
  var sendButtons = get_buttons_by_text(sending, frameDoc).add(get_buttons_by_text(send_and_archive, frameDoc));
  return sendButtons;
}

function get_the_scheduled_send_button(frameDoc){
  if (!frameDoc){
    frameDoc = get_frame();
  }
  var schedule_send = $(".T-I.J-J5-Ji.hG.T-I-atl.L3", frameDoc);
  return schedule_send;
}


function get_subject_of_thread_emails()
{
  return $(SUBJECT_LINE_SELECTOR, frameDoc).filter(":visible").text();
}


function get_senders_of_thread_emails()
{
  return $(SENDER_SELECTOR, frameDoc).map(function(){ return $(this).attr("email"); }).toArray();
}

function get_sent_dates_of_thread_emails(){
  return $(TIMESTAMP_SELECTOR, frameDoc).map(function(){
    var timestampText = $(this).attr("alt").replace(" at", "");

    if(Date.parse(timestampText) == null) { return null; }
    else { return Date.parse(timestampText).valueOf(); }
  }).toArray();
}

function is_gmail_in_english(){
    var composeButton = $(".aic").find("[role='button']");
    if (composeButton.length == 0){
        return true; // default to English if our selector fails
    }
    var composeText = composeButton.text()
    if (composeText.toLowerCase().indexOf("compose") >= 0 ){
      return true;
    }
    else{
      return false;
    }
}

// Returns true if the user is in their inbox
function isAtInbox() {
  // `.TK` contains Inbox, Starred, Important, Sent Mail ad Drafts
  // `.ain` is highlight class
  // `.afM` is the drop down icon next to the Inbox link
  return document.location.href.indexOf('#inbox') > 0 || $(".TK > .ain .afM").length > 0;
}

function b4g_is_preview_pane(){
  return b4g_is_horizontal_preview_pane() || b4g_is_vertical_preview_pane();
}

function b4g_is_horizontal_preview_pane(){
  var frameDoc = get_frame();
  return $(".aph, .Nt.WY", frameDoc).filter(":visible").length > 0;
}

function b4g_is_vertical_preview_pane(){
  var frameDoc = get_frame();
  return $(".apj, .Nt", frameDoc).filter(":visible").length > 0;
}

function b4g_is_priority_inbox() {
  // Look for "Important", "Everything else" headers
  return $(".qh:visible").length > 0;
}

function b4g_is_multiple_inbox() {
  // Look for inbox content
  return $("[gh=tl]:visible").length > 1;
}

// work in progress. just a place for me to leave some constants - Mike
function get_compose_windows(){
  var composeWindows = $(".nH.Hd[role='dialog']");
  var composeWindow = composeWindows.first();
  var closeButton = $(".Ha", composeWindow);
  var savedIndicator = $(".oG", composeWindow);
  var savedIndicatorText = savedIndicator.text();
  var sendBar = $(".aDj", composeWindow);
}

function is_uploading_attachment_in_new_compose_window(composeContainer){
  return $(".dQ", composeContainer).length > 0;
}

function get_compose_container(elem, defVal) {
  var $container, $elem = $(elem);

  $container = $elem.closest(".nH.Hd[role='dialog']"); // Should catch normal pop-in compose
  if($container.length > 0)  { return $container; }

  $container = $elem.closest(".aoI"); // Catches replies in post pop-in compose
  if($container.length > 0) { return $container; }

  $container = $elem.closest(".ip.adB"); // Catches replies in pre pop-in compose
  if($container.length > 0) { return $container; }

  $container = $elem.find(".aoI"); // Popout compose and popout replies
  if($container.length > 0) { return $container; }

  if(defVal !== undefined) { return defVal; }

  track_event([ "dev", "get_compose_container failed" ]);
  return $(document); // Last ditch effort.  Something probably went wrong.
}
function get_compose_text_body($composeContainer) {
  // For pre-pop-in compose: ".Am.Al:not(:has(iframe))" for HTML compose, plain text is handled later
  // For new pop-in compose: ".LW-avf" for chrome and ".Am.Al > iframe" for firefox
  var $composeTextBody = $(".Am.Al:not(:has(iframe)), .LW-avf, .Am.Al > iframe", $composeContainer);

  // If neither selector worked, that means composeContainer isn't done "loading".
  // Instead of making this function async, gonna leave it up to callers to deal with it.
  if(!$composeTextBody[0]) { return null; }

  // In fireox and pre-pop-in text body is an iframe:
  if($composeTextBody[0].contentDocument) { $composeTextBody = $($composeTextBody[0].contentDocument.body); }

  return $composeTextBody;
}

function track_plain_text_changes($composeContainer) {
  var $composeTextBody = get_compose_text_body($composeContainer);
  var $statusLabel = $(".aWQ", $composeContainer);

  function observer_callback() {
    var statusText = $statusLabel.text().trim().toLowerCase();

    if(statusText !== "plain text" && statusText !== "rich text") { return; }

    var isPlainText = (statusText === "plain text");
    var switchedToRichText = (!isPlainText && isPlainText !== $composeTextBody.data("is-plain-text"));

    $composeTextBody.data("is-plain-text", isPlainText);

    var $enableTracking = $(".b4g-tracking-toggle", $composeContainer);
    if(switchedToRichText) {
      $enableTracking.trigger("b4g-toggle-state", !!$composeTextBody.data("had-tracking-enabled"));
    }

    if(isPlainText && $enableTracking.data("is-selected")) {
      show_dialog("Click tracking and read receipts do not work with plain text emails.");

      $composeTextBody.data("had-tracking-enabled", $enableTracking.data("is-selected"));

      $enableTracking.trigger("b4g-toggle-state", false);
    }
  }
  if ($statusLabel.length > 0) {
    new MutationObserver(observer_callback)
      .observe($statusLabel[0], { childList: true, characterData: true, subtree: true });
    observer_callback([]);
  }
}

function _get_send_bar($composeContainer) {
  var $sendBar = $(".aDj", $composeContainer);
  if(!$sendBar) {
    $sendBar = $(".aDh", $composeContainer);
  }
  return $sendBar;
}

function _get_thread_view_container($composeContainer) {
  return $composeContainer.closest(".nH[role=list]");
}


/**
 * 4. Gmail UI Manipulation
 */

function show_dialog(message, title, buttons, opts, dialogClass)
{
    // handle optional parameters
    var buttonDefault = {
        "Ok": {
            text: 'OK',
            'class': 'b4g-button dialog-gray',
            click: function() {$(this).dialog("destroy");}
        }
    };
    buttons = (typeof buttons === "undefined") ? buttonDefault : buttons;
    title = (typeof title === "undefined") ? "Boomerang for Gmail" : title;
    dialogClass = (typeof dialogClass === "undefined") ? "dialogdiv" : dialogClass;

    var $dialog;
    if (browser_name === "Old Safari"){
        alert(message);
    }
    else
    {
        var frameDoc = get_frame();
        $("." + dialogClass).remove();

        // special case RATE_LIMIT error
        if (message.indexOf("unable to connect to your Gmail account") >= 0) {
          message = message.replace("Attempt failed:", "");
        }

        $dialog = $("<div class='" + dialogClass + "' style='display:none;'>"+message+"</div>");
        $("body", frameDoc).append($dialog);

        $("." + dialogClass,frameDoc).dialog($.extend({
            title: title,
            modal: true,
            closeOnEscape: true,
            buttons: buttons
        }, opts || {}));
        fix_all_dialog_links();

        // special case RATE_LIMIT error
        if (message.indexOf("unable to connect to your Gmail account") >= 0) {
          $(".b4g-ui-dialog").css("width", "500px");
        }

    }

    return $dialog;
}

//TODO: Remove this function -- duplicates functionality with optional params-refactored function above
function show_dialog_with_custom_header(message, header) {

    if (browser_name === "Old Safari"){
        alert(message);
    }
    else
    {
        var frameDoc = get_frame();
        $(".dialogdiv").remove();

        var dialog = "<div class='dialogdiv' style='display:none;'>"+ message+"</div>";
        $("body", frameDoc).append($(dialog));

        $(".dialogdiv",frameDoc).dialog({
            title: " &nbsp &nbsp   " + header,
            modal: true,
            closeOnEscape: true,
            width: 450,
            buttons: {
                "Ok": {
                    text: 'Ok',
                    'class': 'b4g-button dialog-gray',
                    click: function() { $(this).dialog("destroy"); }
                }
            }
        });
        fix_all_dialog_links();
    }
}


var decrease_zindex_of_email_action_bar = function() {
    var $topButtonBars = $(".D.E.G-atb");
    $topButtonBars.each(function(){
        if ($(this).css("z-index") !== 3){
            $(this).css("z-index", 3);
        }
    });
};

function hide_b4g_contextual_gadget()
{
    var frameDoc = get_frame();
    $(".nH .hh", frameDoc).filter(function(){
        if($(".cZ", this).text() === "Boomerang for Gmail") { return true; }
    }).hide();
}


// I have no idea why links stopped working on Chrome (12/21/21: firefox too)
// so here's a hacky workaround
function fix_all_dialog_links(linkSelector){
  linkSelector = linkSelector || ".dialogdiv a";
    var frameDoc = get_frame();
    $(linkSelector, frameDoc).click(function(){
        var link = $(this).attr("href");
        if (link.indexOf("javascript") === -1){
            window.open(link, '_blank');
        }
    });
}


/**
 * Forces the GMail notification message to remain hidden.
 */
function hide_gmail_notification()
{
  $(".UD", frameDoc).first().css("visibility", "");
  $(".UB", frameDoc).first().css("visibility", "");
  $(".vh", frameDoc)
    .first().css("visibility", "")
    .closest(".b8.UC").css("top", -10000)
  ;

  // in the new Gmail UI, setting the visibility property to ""
  // doesn't actually get rid of the notification toast. we have to
  // wait until Gmail automatically removes the notification. as such,
  // we shouldn't clear the notification text.
  //
  // keep existing behavior for old UI - clear the notification text
  if(which_gmail() !== NEW_GMAIL) {
      $(".vh", frameDoc).first().html("")
  }
}

/**
 * Forces the GMail notification message to display.
 */
function show_gmail_notification()
{
  $(".UD", frameDoc).first().css("visibility", "visible");
  $(".UB", frameDoc).first().css("visibility", "visible");
  $(".vh", frameDoc)
    .first().css("visibility", "visible")
    .closest(".b8.UC").css("top", 0)
  ;
}


/**
 * Changes the contents of the GMail notification message and sets a timer for the message to disappear.
 * @param message The message to display in the notification
 * @param timeout The time, in milliseconds, for which the message should display
 */
function hijack_gmail_notification(message, timeout)
{
  $(".vh", frameDoc).first().html(message);
  show_gmail_notification();
  setTimeout(hide_gmail_notification, timeout);
}

// used for Chrome, Opera, and Edge
function display_popup_blocker_instructions()
{
  try
  {
    var dialogContent = $(".dialog-content");
    dialogContent.css("text-align", "left");
    if (browser_name === "Chrome") {
      dialogContent.html(CHROME_AUTH_INSTRUCTIONS);
    }
    else if (browser_name === "Opera") {
      dialogContent.html(OPERA_AUTH_INSTRUCTIONS);
    }
    else if (browser_name === "Edge") {
      dialogContent.html(EDGE_AUTH_INSTRUCTIONS);
    }
    dialogContent.find(".auth-reload").click(function(){
      window.location.reload();
    });
    $("#blue-arrow").css("visibility", "visible");
  }
  catch (err)
  {
  }
}


function click_gmail_refresh_button()
{
    var frameDoc = get_frame();
    var buttons = $("[role='button']", frameDoc);
    var refreshButtons = buttons.filter(function(){ return $(this).attr("act") === "20"; });
    refreshButtons.each(simulate_click);

    if (which_gmail() === NEW_GMAIL && refreshButtons.length > 1) {
      // support Multiple Inboxes in the New UI--
      // multiple inboxes in the New UI can have several refresh buttons on the page
      // we need to click the topmost one so the user is back at the top of the page
      topButton = refreshButtons.first();
      topButton.each(simulate_click);
    }
}


/**
 * Simulates a click by creating a mousedown event followed by a mouseup event.
 */
function simulate_click(index)
{
  var evt, thisButton = this;
  evt = frameDoc.createEvent("MouseEvents");
  evt.initMouseEvent("mousedown", true, true, window,
      0, 0, 0, 0, 0, false, false, false, false, 0, null);
  thisButton.dispatchEvent(evt);
  evt = frameDoc.createEvent("MouseEvents");
  evt.initMouseEvent("mouseup", true, true, window,
      0, 0, 0, 0, 0, false, false, false, false, 0, null);
  thisButton.dispatchEvent(evt);
  evt = frameDoc.createEvent("MouseEvents");
  evt.initMouseEvent("mouseout", true, true, window,
      0, 0, 0, 0, 0, false, false, false, false, 0, null);
  thisButton.dispatchEvent(evt);
}

/**
 * Archives the current message thread when in Inbox View
 */
function archive_thread()
{
  frameDoc = get_frame();

  // 11/1/2011 Gmail change
  var buttons = $(".iH .J-Zh-I-KE", frameDoc);
  if (buttons.length === 0){
    buttons = $("[role='button']:visible", frameDoc);
  }
  var archiveButtons = buttons.filter(function(){ return $(this).attr("act") === "7"; });
  archiveButtons.each(simulate_click);
}

function close_compose_window(composeContainer){
  var closeButton = $(".Ha", composeContainer);
  closeButton.each(simulate_click);
}

/**
 * Back to previous screen when in Message View
 */
function back_to_previous_screen()
{
  frameDoc = get_frame();

  // 11/1/2011 change
  var buttons = $("[role='button']", frameDoc);
  var previousButtons = buttons.filter(function(){ return $(this).attr("act") === "19"; }).first();
  var back_to =  $('div[act="19"]', frameDoc).attr("aria-label");

  if (previousButtons.length < 1){
    buttons = $(".iH .VP5otc-tOAp0c", frameDoc);
    previousButtons = buttons.filter(function(){ return $(this).text().indexOf(back_to) !== -1; }).first();
  }
  if (previousButtons.length < 1){
    buttons = $(".iH .QkhFhe", frameDoc); // back arrow instead of back link
    previousButtons = buttons.filter(function(){
      return $(this).parent().attr("title").indexOf(back_to) !== -1;
    }).first();
  }
  var ret = previousButtons.length>0;
  previousButtons.each(simulate_click);
  return ret;
}

/**
 * Returns to main window (inbox, all mail, or whatever) and displays a notification.
 * @param message The message to display upon successful redirection
 */
function redirect_and_show_gmail_notification(message, lastAction)
{
  var curhash = window.location.hash;

  if (is_user_in_edit_mode()){
    ConfirmNavigateAway = false;
    window.close();
  }
  if (lastAction === "return") {
    if(is_pop_out_window()) {
      archive_thread();
      ConfirmNavigateAway = false;
      window.onbeforeunload = false;
      alert(message);
      window.close();
      return;
    }
    else{
      archive_thread();
      back_to_previous_screen();
    }
  }
  else if (lastAction === "send" || lastAction === "send_new_compose")
  {
    loc = String(document.location);

    if (is_pop_out_window()) {
      alert(message);
      window.close();
      return;
    } else if(!back_to_previous_screen()) { // Try to click (back to inbox)
      if(from_priority_inbox) {
        window.location.hash = "#mbox";
      } else {
        window.location.hash = "#inbox";
      }

      if (b4g_is_preview_pane()){
        $(".gB.acO", frameDoc).hide().after("<div>" + message + "</div>");
                close_b4g_menu();
      }
            setTimeout(click_gmail_refresh_button, 5000);
    }
  }

  hide_gmail_notification();
  click_gmail_refresh_button();
    
  var id = setInterval( function() {
    if(window.location.hash !== curhash || curhash === "#inbox" || curhash === "#mbox") {
      hijack_gmail_notification(message, 5000);
      clearInterval(id);
    }
  }, 2000);
}

function delayed_redirect_and_show_gmail_notification(message, delayMilliseconds, lastAction){
  setTimeout(function(){
    redirect_and_show_gmail_notification(message, lastAction);
  }, delayMilliseconds);
}

function adjust_send_later_bar_ui_for_tiny_compose(composeWindow, isAReply) {
  var $sendBoomerangBtn = composeWindow.find('.sendboomerang-button');
  var $sendBoomerangLabelAndIcon = composeWindow.find('.boomerangSendWidget > label, .b4g-tiny-compose-icon-holder');

  $sendBoomerangLabelAndIcon.click(function(e) {
    if (can_use_bcal() && composeWindow.hasClass('b4g-narrow-sm')) {
      var b4gMenu = frameDoc.getElementById("b4g_menu");
      if (b4gMenu) {
        close_b4g_menu(e, composeWindow);
      } else {
        var $clickTarget = $(e.target);
        if ($clickTarget.hasClass('boomerangSendCheck') && !$clickTarget.is(':checked')) {
          // Don't open menu when unchecking checkbox
          return true;
        } else {
          compose_dialog_toggle_send_boomerang_menu(e, composeWindow, isAReply);
        }
      }

    } else {
      // Do nothing for non-bcal-enabled users
      return;
    }
  });
}

function _make_responsive_adjustments(composeWindow) {
  var breakpoints;
  if(which_gmail() === NEW_GMAIL) {
    var $captionContainer = composeWindow.find(".conditional-caption-text");
    var captionWidth =  $captionContainer.width();

    if (captionWidth == 0) { // it's zero width if display:none. get the actual width
      captionWidth = $captionContainer.data("actualWidth") || 0;
      var currentCaptionText = $captionContainer.text();
      var previousCaptionText = $captionContainer.data("lastCaptionText") || '';
      if (captionWidth == 0 || currentCaptionText !== previousCaptionText) {
        $captionContainer.addClass('b4g-temporary-width-check');
        captionWidth = $captionContainer.width();
        $captionContainer.removeClass('b4g-temporary-width-check');
        $captionContainer.data("actualWidth", captionWidth);
      }
    } else {
      $captionContainer.data("actualWidth", captionWidth);
      $captionContainer.data("lastCaptionText", $captionContainer.text());
    }

    if(boomerang_on_send_text === "Boomerang this") {
        breakpoints = [599 + captionWidth, 514 + captionWidth, 440];
    } else { // boomerang_on_send_text === "Remind me"
      breakpoints = [579 + captionWidth, 494 + captionWidth, 440];
    }
  } else {
      if(boomerang_on_send_text === "Boomerang this") {
          breakpoints = [580, 530, 440];
      } else { // boomerang_on_send_text === "Remind me"
          breakpoints = [565, 485, 440];
      }
  }
  var currentWidth = _get_send_bar(composeWindow).width();
  composeWindow.toggleClass("b4g-narrow", currentWidth < breakpoints[0]);
  composeWindow.toggleClass("b4g-narrow-sm", currentWidth < breakpoints[1]);
  // b4g-narrow-very-sm class is only for removing the text label in send later bar variants 2 & 3
  // when the composer is so small that we don't have room for the labels
  composeWindow.toggleClass("b4g-narrow-very-sm", currentWidth < breakpoints[2]);

  var $sendBoomerangBtn = composeWindow.find('.sendboomerang-button');
  if (can_use_bcal() && composeWindow.hasClass('b4g-narrow-sm')) {
    $sendBoomerangBtn.hide();
  } else {
    $sendBoomerangBtn.show();
  }

  var $composeContainer = composeWindow.parent().find(".email-meter");
  var $expandedView = $composeContainer.data("$expandedView");
  if(!$expandedView) return;

  var $container;
  if(is_threaded_view($composeContainer)) {
    $container = _get_thread_view_container($composeContainer);
  } else {
    $container = composeWindow;
  }
  var heightDifference = $container.height() - 50 - $expandedView.find(".email-meter-display-inner").get(0).scrollHeight;
  var isOverflow = heightDifference < 0 || is_user_in_edit_mode();
  $container.toggleClass("em-short", isOverflow);
  $expandedView.toggleClass("em-short", isOverflow);
}

function insert_bcc_in_compose_container(composeContainer, address){
  // TODO: fix in new To/Cc/Bcc header Chips B4G-2387
    setTimeout(function(){
      var isPillboxVariant  = $(".anm[name='to'] .agP.aFw, .anm[name='to'] .agP.aFx").length > 0;
      if (isPillboxVariant) {
        //click BCC 
        composeContainer.find(".aB.gQ.pB").click();
        composeContainer.find(".anm[name='to'] .agP.aFw, .anm[name='to'] .agP.aFx").focus();

        var old = $(".anm[name='bcc'] .agP.aFw, .anm[name='bcc'] .agP.aFx").val();
        if ($.trim(old).length > 0) {
          composeContainer.find(".anm[name='bcc'] .agP.aFw, .anm[name='bcc'] .agP.aFx").val(old + ", " + address);
        } else {
          composeContainer.find(".anm[name='bcc'] .agP.aFw, .anm[name='bcc'] .agP.aFx").val(address);
        }
      } else { //old compose
            var existingBccs = extract_email_addresses_from_field("bcc", composeContainer);
            if ($.trim(address).length > 0 && existingBccs.indexOf(address) < 0){
                var bccHeader = composeContainer.find("[name=bcc]").first();
                var old = bccHeader.val();
                if ($.trim(old).length > 0){
                    bccHeader.val(old + ", " + address);
                }
                else{
                    bccHeader.val(address);
                }
                if(which_gmail() !== OLD_GMAIL) {
                    composeContainer.find(".aB.gQ.pB").click();
                    composeContainer.find("[name=to]").focus();
                }
            }
      }
    }, 100)
}

function show_failed_to_detect_saved_draft() {
  show_dialog(
    "It looks like Gmail hasn't saved this draft yet. Please allow Gmail to autosave " +
    "(such as by adding an extra space after the email content and waiting until 'Saved' " +
    "appears), and then click Send Later again."
  );
}

function call_function_after_draft_has_been_saved(composeContainer, callback){
  // Following three lines of code force gmail to re-save the current email
  //
  // Running theory: Gmail (or the browser) "saves" the user's text selection even when the user
  // removes focus from the editable textarea.  Gmail seems to reapply the saved selection when
  // ever the user clicks bold, italics, underline etc...  Simulating a click on the compose text
  // area forces gmail to "re-save" the selection (which should be an empty selection because of
  // the call to `removeAllRanges`) so when we programmically click bold, hopefully gmail won't
  // reapply the selection and inadvertantly bold previously selected text.  We also append an
  // empty span to ensure gmail recognizes the message as being edited.

  // Replies have .oG .aOY as the Draft Saved class
  // New threads have .zu


  window.getSelection().removeAllRanges();
  $(get_compose_text_body(composeContainer)).append("<span/>").each(simulate_click);
  $("[role='toolbar'] > [command='+bold']", composeContainer).each(simulate_click);
  setTimeout(function() { // Slowly click bold twice seems to work better
    $("[role='toolbar'] > [command='+bold']", composeContainer).each(simulate_click);
    continue_if_saved();
  }, 300);

  $(".oG", composeContainer).text(""); // Clearing save indicator to help prevent false positives
  $(".aOy", composeContainer).removeClass("aOy"); // Removing class indicitive of a saved draft
  $(".zu", composeContainer).removeClass("zu"); // Removing class indicitive of a saved draft

  var attempts = 0, MAX_ATTEMPTS = 40;
  var continue_if_saved = function continue_if_saved(){
    attempts++;
    if(attempts > MAX_ATTEMPTS) { 
      // 3/14/2019: We're going to try anyway after the 10 seconds are up
      // To show an error, do this instead: callback(true); return; 
      callback(null);
      return;
    }

    var $saveIndicator = $(".oG", composeContainer);
    if( 
        // Replies
        (
          $saveIndicator.hasClass("aOy") ||
          // there is text in the Save Indicator
          (attempts > MAX_ATTEMPTS - 2 && $.trim($saveIndicator.text()).length > 0)
        )
      ||(
        // New Thread Drafts
        $(".zu", composeContainer).length > 0
        ) 
    ) {
      setTimeout(function() { callback(null); }, 2000);
    } else {
      setTimeout(function(){ continue_if_saved(composeContainer, callback); }, 250);
    }
  };
}


/**
 * 5. B4G Main Loop
 */

/**
 * Entry point of B4G.
 * @remarks Sets an interval to check for URL changes
 */
function run_b4g()
{
    prepare_inbox_pause();
    setInterval(b4g_main_loop, 500);

    // commenting out coupon check to reduce number of requests because there are no coupons available now anyway
    //setTimeout(show_coupon_notification_if_necessary, 3000);

    init_inbox_zero_detector(function() {
        show_viral_hook_if_appropriate({ type: "is-inbox-zero" });
    });

    init_ignore_tracked_email_detector();

    show_recruiting_ad_in_console();

    // Setup BCal whitelisting:
    if (can_use_bcal()) {
      $('body').addClass('b4g-bcal-allowed');
    }
}


function show_recruiting_ad_in_console() {
  var boomerangLogoArray = [
    "........................................",
    ".......................=II=.............",
    "...................~+++777777:..........",
    "...............,7+===+?777777ZZ:........",
    "............+ZZZI+====III777$ZZZI.......",
    ".........~ZZZZZZ?=++........7ZZZZZ......",
    ".......I$$$ZZZZZ,.............,ZZZ7.....",
    ".....$$$$$ZZ:...........................",
    "...,$$$7~...............................",
    "........................................",
    "                                        ",
    " Like Boomerang for Gmail?              ",
    " Join us at: https://boomerangapp.com/jobs.html",
    "                                        ",
  ]

  for (var i = 0; i < boomerangLogoArray.length; i++) {
    var boomerangLogoRow = boomerangLogoArray[i];
    console.log("%c" + boomerangLogoRow, "color: blue; font-family: monospace; font-size: small");
  }
}


/**
 * Checks for a change in the URL. If one has occurred, b4g_main_loop will add any applicable
 * buttons to GMail's menu bar.
 */
function b4g_main_loop()
{
    loc = String(document.location);
    if (loc.indexOf('mbox') > 0) {
        from_priority_inbox = true;
    }
    if (loc.indexOf('inbox') > 0) {
        from_priority_inbox = false;
    }

    if (!is_pop_out_window())
    {
        add_management_link();
    }

    frameDoc = get_frame();

    if (is_user_in_edit_mode()){
        switch_to_b4g_manage_editing_view();
        return;
    }

    var editWindowClasses = $(EDIT_WINDOW_SELECTOR, frameDoc);
    var subjectLineClasses = $(SUBJECT_LINE_SELECTOR, frameDoc);
    var hasNewComposeDialog = $(".aDh").length > 0;

    // Are we composing a message?
    if (hasNewComposeDialog){
        if (is_pop_out_window()){
            add_send_later_button_to_new_pop_out_compose();
            push_attachment_container($("body"));
        }
        else{
            add_send_later_button_to_new_compose_windows();
        }
    }

    // Are we replying to a message?
    if (subjectLineClasses.length > 0)
    {
        add_boomerang_button_to_menu();
        add_magic_link();

        add_send_later_button_to_new_compose_replies();
        hide_b4g_contextual_gadget();
        check_for_magic_images();
    }

    add_bulk_boomerang_button();

    decrease_zindex_of_email_action_bar();

    inject_pause_button();

    inject_inline_boomerang_buttons();

    remove_inline_toolbar_after_closing_boomerang_menu();

    adjust_popin_send_bars();
}

function prevent_inline_boomerang_menu_from_closing(e) {
    e.preventDefault();
    e.stopPropagation();
}

function inject_inline_boomerang_buttons() {
  var inlineMenus = $('.zA:not(.boomeranginlinebutton)');
  inlineMenus.each(inject_boomerang_button_to_message);

  function inject_boomerang_button_to_message(idx, msg) {
      $(msg).addClass("boomeranginlinebutton");
      var boomerang_button = '<li class="bqX boomerang-button" data-tooltip="Boomerang"><img src="' + B4G_STATIC_FILES_DIRECTORY + 'tinyboomlogo.png" style="vertical-align: middle;"></li>';
      var $toolbar = $(msg).find("*[role='toolbar']");
      if($toolbar.find("*[data-tooltip='Boomerang']").length === 0) {
        $boomerang = $(boomerang_button);
        $toolbar.prepend($boomerang);

        // when the mouse moves out of the message context, Gmail removes the entire toolbar.
        // to keep consistent behavior between snooze and boomerang, we want the toolbar to show
        // even when the user hovers over other messages. to stop Gmail from removing the toolbar,
        // we e.stopImmediatePropagation()
        $(msg).mouseout(function(e) {
            if($(this).hasClass("boomerang-menu-is-active")) {
                e.stopImmediatePropagation();
            }
        })

        $boomerang.click(function(e){

          // remove existing inline boomerang menu so we can add the new one
          var anotherInlineBoomerangMenuExists = $(".boomerang-menu-is-active").length > 0;
          var toggleInlineBoomerangOff = $(msg).find("#b4g_menu").length === 1;
          if(toggleInlineBoomerangOff) {
              $(".boomerang-menu-is-active").removeClass("boomerang-menu-is-active");
              $("#b4g_menu").remove();
              return;
          } else if(anotherInlineBoomerangMenuExists) {
              $(".boomerang-menu-is-active").removeClass("boomerang-menu-is-active");
              $("#b4g_menu").remove();
          }

          var threadId = $(msg).find("[data-thread-id]").attr("data-thread-id").replace("#", "");
          $(msg).addClass("boomerang-menu-is-active");
          toggle_boomerang_menu(e, this, function inline_boomerang_clicked(caption) { 
            var notes = $("#note_entry", frameDoc).val();
            if (notes == null){
              notes = "";
            }
            var chosenReturnTime = caption_to_return_time(caption, BOOMERANG_MORNING_OFFSET);
            last_date_selected = chosenReturnTime;
            var readableDate = make_readable_date(chosenReturnTime, false);
            var chosenReturnTimeValue = chosenReturnTime.valueOf();
            var conditional = $("#gm-boomerang-reply-checkbox").find(".gm-checkbox").attr("aria-checked") === "true";

            var overlay = $(BULK_OVERLAY); // prevent user navigation
            $("body").append(overlay);

            show_bulk_processing_notification();

            call_function_after_paywall_check(function() {
                var data = {"conditional": conditional, "notes": notes, "date": chosenReturnTimeValue, "threadIds": threadId}

                $.ajax({
                  type: "post",
                  url: "https://b4g.baydin.com/gmailmigration/boomerangfromthreadlist",
                  data: data,
                  xhr: xhr_with_credentials,
                  success: function(response) {
                    var status = response["status"];
                    if (status === "success") {
                      // Click archive button
                      $(msg).find(".brq").each(simulate_click).click()
                      click_gmail_refresh_button();
                      var message = "Messages will return " + readableDate + ". ";
                      setTimeout(function(){
                        hijack_gmail_notification(message, 5000);
                      }, 2000);
                    }
                    else if (status === "error") {
                      show_dialog(response["message"]);
                    }
                    else if (status === "upgrade") {
                      show_dialog(
                        response["message"],
                        "Boomerang for Gmail",
                        {
                          "Upgrade": {
                            text: "Upgrade to schedule",
                            "class": "b4g-button green",
                            click: function() {
                              window.open("https://b4g.baydin.com/subscriptions", "_blank");
                            }
                          },
                          "Never mind": {
                            text: "Never mind",
                            "class": "b4g-button dialog-gray",
                            click: function() { $(this).dialog("destroy"); }
                          }
                        },
                        {
                          width: 350,
                          dialogClass: "b4g-upgradenag-dialog"
                        }
                      );
                    }
                    else {
                      show_dialog("Something went wrong while using bulk boomerang. Please try again.");
                    }
                  },
                  error: function(response) {
                    show_dialog("Something went wrong while using bulk boomerang. Please try again.");
                  },
                  complete: function() {
                    close_b4g_menu();
                    click_gmail_refresh_button();
                    inline_manage.expire_cache();
                    overlay.remove();
                  },
                  dataType: "json"
                });
            }, function(){
              close_b4g_menu();
              click_gmail_refresh_button();
              inline_manage.expire_cache();
              overlay.remove();
            });
          });
          var leftDist = parseInt($("#b4g_menu").css("left"));
          $("#b4g_menu").css({
              "left": (leftDist - 100).toString() + "px"
          });
        });
      }
  }
}

function remove_inline_toolbar_after_closing_boomerang_menu() {
  var needsToRemoveActiveClass = $(".boomerang-menu-is-active").length > 0 && $(".boomerang-menu-is-active").find("#b4g_menu").length === 0;
  if(needsToRemoveActiveClass) {
    $(".boomerang-menu-is-active").removeClass("boomerang-menu-is-active aqw");
  }
}

// in popin and popout compose, the attachments container is hidden
// below the Gmail send bar. we push it up a little bit so the user
// can see the attachment toasts
var push_attachment_container = function(composeContainer) {
    var attachmentClass = which_gmail() === NEW_GMAIL ? "gm-push-attachment-container" : "legacy-push-attachment-container";
    var attachmentContainer = composeContainer.find(".GM");
    attachmentContainer.addClass(attachmentClass);
}

// in popin compose, Gmail repositions their send bar once clicking
// on the body of the compose window. that pushes our Send Later bar off
// the screen, so to combat it we just sticky both send bars in popin
var adjust_popin_send_bars = function() {
    var composeContainers = $(".nH.Hd[role='dialog']");
    composeContainers.each(function() {
        var $this = $(this);

        // If the text body can't be found, then the composeContainer isn't done loading
        if(!get_compose_text_body($this)) { return; }

        // Get classes used to style popin compose
        var stickyClass = which_gmail() === NEW_GMAIL ? "gm-sticky-popin-bars" : "legacy-sticky-popin-bars";
        var attachmentClass = which_gmail() === NEW_GMAIL ? "gm-push-attachment-container" : "legacy-push-attachment-container";
        var spaceClass = which_gmail() === NEW_GMAIL ? "gm-popin-space" : "legacy-popin-space";

        // Only style popin compose, and destroy styles
        // when the user switches out of popin compose
        if(!is_pop_in_compose($this)) {
            $this.find("." + stickyClass).removeClass(stickyClass);
            $this.find("." + attachmentClass).removeClass(attachmentClass);
            $this.find("." + spaceClass).remove();
            return;
        }

        // Add style to popin compose only once
        var alreadyStyled = $this.find(".HE").hasClass(stickyClass);
        if(!alreadyStyled) {
            var emailCompose = $this.find(".qz.aXjCH");
            if (emailCompose.length == 0) {
              // 1/26/21: the "aXjCH" class doesn't appear to be in the popin composer anymore.
              // It looks like the class has been replaced with "aiL"
              emailCompose = $this.find(".qz.aiL");
            }
            var bothSendBars = $this.find(".HE");
            var attachmentContainer = $this.find(".GM");
            var popinSpace = "<div class='" + spaceClass + "'></div>";

            emailCompose.append(popinSpace);
            bothSendBars.addClass(stickyClass);
            push_attachment_container($this);

            var sendBarsStyleAttr = $this.find('.gm-sticky-popin-bars .aDg .aDj.aDi').attr('style');
            $this.find('.gm-sticky-popin-bars .aDg .aDj.aDi').attr('style', sendBarsStyleAttr + 'bottom: 0px !important;');
        }
    });
};

function auto_open_composer_and_meet_menu() {
  // Ensure the bookable announcement does not show
  set_bookable_announcement_snooze_time();

  autoOpenMeetMenu = true;
  var composeButton = $(".Yh.akV");
  if (composeButton.length == 0) {
    composeButton = $(".T-I.T-I-KE.L3");
  }
  composeButton.click();

  track_event([ "bookable-email-CTA-btn", "clicked" ]);
}

function check_for_magic_images() {
  var TABLE_ALREADY_SCANNED = "bcal-scanned";
  var $tables = $(MESSAGE_BODY_SELECTOR + ":visible table[name='b4g-bcal-table']:not(."+ TABLE_ALREADY_SCANNED +")");
  var needToCheckIfLoggedIn = false;

  $tables.each(function () {
    var $table = $(this);
    $table.addClass(TABLE_ALREADY_SCANNED);
    // Special marketing click to open the menu
    $table.find("table[name='b4g-click-meet']").each(function() {
      var $clickableLink =$(this);
      $clickableLink.find("a").removeAttr("href");
      $clickableLink.css("cursor", "pointer")
      $clickableLink.click(auto_open_composer_and_meet_menu);
    });
    // Replace Gmail-proxy images with the original b4g.baydin.com source
    $table.find("img").each(function() {
      var $img = $(this);
      var src = $img.attr("src");
      if (src) {
        var actualImgSrcs = ["https://b4g.baydin.com/bookablecalendar/i", "https://b4g.baydin.com/calendar/", "https://s3.amazonaws.com/MailerBucket/demomap.png"];
        actualImgSrcs.forEach(function(url){
          var myIndex = src.indexOf(url);
          if (myIndex >= 0) {
            var newSrc = src.substring(myIndex);
            if (read_from_html5_storage("b4g_bookable_overlay") == "true") {
              needToCheckIfLoggedIn = true;
              newSrc = newSrc.replace("overlay=0", "overlay=1");
            }
            $img.attr("src", newSrc);
          }
        });
      }
    });
    // Replace the "overlay my calendar" landing page with our own click_overlay_toggle event
    $table.find("area").each(function() { 
      var $area = $(this);
      var href = $area.attr("href");
      if (href && (href.indexOf("https://b4g.baydin.com/bookablecalendar/u/") == 0 || 
          href.indexOf("https://meet.boomerangapp.com/") == 0 ||
          href.indexOf("https://www.boomeranggmail.com/") == 0 ||
          href.indexOf("https://baydin.us1.list-manage.com/track/click") == 0 ||
          href.indexOf("https://b4g.baydin.com/calendar/") == 0)) {
        $area.removeAttr("href");
        $area.css("cursor", "pointer");
        if ($area.attr("coords") == "273,0,546,51") {
          $area.click(click_overlay_toggle);
          $area.addClass("b4g_magic_overlay_toggle");
        } else if (href.indexOf("overlay.html") >= 0) {
          $area.click(click_overlay_toggle);
          $area.addClass("b4g_magic_overlay_toggle");
        } else {
          $area.click(function(){
            var overlayWindow = window.open(href);
            var handleOverlayWindow = function(event) {
              if (event.origin != 'https://b4g.baydin.com' 
                && event.origin != "https://meet.boomerangapp.com") {
                // Reject messages from unexpected domains
                return;
              }
              var data = event.data;
              if (data.status === "successful bookable" || data.status === "successful suggest") {
                if (!CalendarSettings["hasSeenCalendarFTUE"]) {
                  // double check in case signed out
                  $.ajax({
                    method: "GET",
                    url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
                    data: {
                      "guser": get_gmail_user(),
                    },
                    xhr: xhr_with_credentials,
                    success: function(response) {
                      if (response.status === "success") {
                        if (response.hasSeenCalendarFTUE === false) {
                          show_overlay_tada();
                        }
                      } else if (response.showCurrentAnnouncementOrFTUE === true) {
                        // The user does not exist in the database.
                          show_overlay_tada();
                      }
                    }
                  });
                }
                window.removeEventListener("message", handleOverlayWindow);
              }
            }
            window.addEventListener("message", handleOverlayWindow);

            var checkForNavigateAway = setInterval(function() {
              if (!overlayWindow.closed) {
              } else {
                clearInterval(checkForNavigateAway);
                window.removeEventListener("message", handleOverlayWindow);
              }
            }, 1000)
          })
        }
      }
    });
  });
  // Revert if not logged in and sticky overlay was on
  if (needToCheckIfLoggedIn) {
    var guser = get_gmail_user();
    var data = {"guser": guser};
    data["includecsrf"] = "True";

    $.ajax({
        url: "https://b4g.baydin.com/mailcruncher/checklogin2",
        data: data,
        type: "GET",
        xhr: xhr_with_credentials,
        success: function (data) {
            var status = data["status"];
            if (status == "success") {
            } else {
              write_to_html5_storage("b4g_bookable_overlay", "false");
              $tables.each(function () {
                var $table = $(this);
                $table.find("img").each(function() {
                  var $img = $(this);
                  var src = $img.attr("src");
                  if (src) {
                    var actualImgSrcs = ["https://b4g.baydin.com/bookablecalendar/i", "https://b4g.baydin.com/calendar/"];
                    actualImgSrcs.forEach(function(url){
                      var myIndex = src.indexOf(url);
                      if (myIndex >= 0) {
                        var newSrc = src.substring(myIndex);
                        newSrc = newSrc.replace("overlay=1", "overlay=0");
                        $img.attr("src", newSrc);
                      }
                    });
                  }
                });
              });
            }
        },
    });
  }
}

function show_overlay_tada(){
  track_event(["overlay-post-install-flow", "show-bcal-announcement"]);
  var overlayAnnouncement = "<div class='dialogdiv b4g-overlay-announcement-div-dialog' style='padding-top: 0px; padding-bottom: 32px; padding-left: 0px; padding-right: 0px; border-radius: 8px;'>" +
        "<div class='b4g-overlay-announcement-div-dialog-content' style='font-family: Roboto, helvetica, arial, sans-serif'>" +
          "<div>" +
            "<img style='height: 320px; width: 544px;' src='https://b4g.baydin.com/site_media/img/ftue/b4g_meet_preview@2x.png'>" +
          "</div>" +
          "<div style='font-weight: bold; margin-top:32px; font-size: 20px; text-align: center;'>" +
            "Easy meeting scheduling is only the beginning" +
          "</div>" +
          "<div style='line-height:20px; padding: 0px 32px; font-size: 14px; color: #444; margin-top: 16px'>" +
            "Now that you’ve added Boomerang to Gmail, scheduling your own meetings will be a breeze." +
          "</div>" +
          "<div style='line-height:20px; padding: 0px 32px; font-size: 14px; color: #444; margin-top: 16px;'>" +
            "Click the <strong>Meet</strong> button when composing a new message or reply to quickly Share Free/Busy availability, Suggest Times to meet, or set up and reuse your very own Bookable Schedule." +
          "</div>" +
          "<div style='margin-top: 32px; font-size: 14px;font-weight: 500; text-align: right; padding-right: 32px;'>" +
            "<span class='b4g-try-later' style='cursor:pointer; color: #055DA0; margin-right: 20px;'>OK, I'll try it later.</span>" +
            "<span class='b4g-learn-more' style='cursor:pointer; padding: 8px 16px;background: #055DA0;border-radius: 4px;color:white;'>Learn more</span>" +
          "</div>" +
        "</div>" +
      "</div>";
  var frameDoc = get_frame();
  $(".dialogdiv").remove();

  var dialog = overlayAnnouncement;
  $("body", frameDoc).append($(dialog));
  fix_all_dialog_links();

  var $overlayAnnouncementDiv = $(".dialogdiv", frameDoc).dialog({
      modal: true,
      closeOnEscape: false,
      width: 544,
      height: "auto",
  });

  // remove default title from the menu
  $overlayAnnouncementDiv.parent().children().first().remove();
  $overlayAnnouncementDiv.parent().removeClass('b4g-ui-widget-content');

  /**
   * Minified by jsDelivr using Terser v5.3.5.
   * Original file: /npm/canvas-confetti@1.4.0/dist/confetti.browser.js
   *
   * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
   */
  !function(t,e){!function t(e,n,a,i){var o=!!(e.Worker&&e.Blob&&e.Promise&&e.OffscreenCanvas&&e.OffscreenCanvasRenderingContext2D&&e.HTMLCanvasElement&&e.HTMLCanvasElement.prototype.transferControlToOffscreen&&e.URL&&e.URL.createObjectURL);function r(){}function l(t){var a=n.exports.Promise,i=void 0!==a?a:e.Promise;return"function"==typeof i?new i(t):(t(r,r),null)}var c,s,u,d,f,h,g,m,b=(u=Math.floor(1e3/60),d={},f=0,"function"==typeof requestAnimationFrame&&"function"==typeof cancelAnimationFrame?(c=function(t){var e=Math.random();return d[e]=requestAnimationFrame((function n(a){f===a||f+u-1<a?(f=a,delete d[e],t()):d[e]=requestAnimationFrame(n)})),e},s=function(t){d[t]&&cancelAnimationFrame(d[t])}):(c=function(t){return setTimeout(t,u)},s=function(t){return clearTimeout(t)}),{frame:c,cancel:s}),v=(m={},function(){if(h)return h;if(!a&&o){var e=["var CONFETTI, SIZE = {}, module = {};","("+t.toString()+")(this, module, true, SIZE);","onmessage = function(msg) {","  if (msg.data.options) {","    CONFETTI(msg.data.options).then(function () {","      if (msg.data.callback) {","        postMessage({ callback: msg.data.callback });","      }","    });","  } else if (msg.data.reset) {","    CONFETTI.reset();","  } else if (msg.data.resize) {","    SIZE.width = msg.data.resize.width;","    SIZE.height = msg.data.resize.height;","  } else if (msg.data.canvas) {","    SIZE.width = msg.data.canvas.width;","    SIZE.height = msg.data.canvas.height;","    CONFETTI = module.exports.create(msg.data.canvas);","  }","}"].join("\n");try{h=new Worker(URL.createObjectURL(new Blob([e])))}catch(t){return void 0!==typeof console&&"function"==typeof console.warn&&console.warn("Could not load worker",t),null}!function(t){function e(e,n){t.postMessage({options:e||{},callback:n})}t.init=function(e){var n=e.transferControlToOffscreen();t.postMessage({canvas:n},[n])},t.fire=function(n,a,i){if(g)return e(n,null),g;var o=Math.random().toString(36).slice(2);return g=l((function(a){function r(e){e.data.callback===o&&(delete m[o],t.removeEventListener("message",r),g=null,i(),a())}t.addEventListener("message",r),e(n,o),m[o]=r.bind(null,{data:{callback:o}})}))},t.reset=function(){for(var e in t.postMessage({reset:!0}),m)m[e](),delete m[e]}}(h)}return h}),y={particleCount:50,angle:90,spread:45,startVelocity:45,decay:.9,gravity:1,drift:0,ticks:200,x:.5,y:.5,shapes:["square","circle"],zIndex:100,colors:["#26ccff","#a25afd","#ff5e7e","#88ff5a","#fcff42","#ffa62d","#ff36ff"],disableForReducedMotion:!1,scalar:1};function p(t,e,n){return function(t,e){return e?e(t):t}(t&&null!=t[e]?t[e]:y[e],n)}function M(t){return t<0?0:Math.floor(t)}function w(t){return parseInt(t,16)}function x(t){return t.map(C)}function C(t){var e=String(t).replace(/[^0-9a-f]/gi,"");return e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),{r:w(e.substring(0,2)),g:w(e.substring(2,4)),b:w(e.substring(4,6))}}function k(t){t.width=document.documentElement.clientWidth,t.height=document.documentElement.clientHeight}function I(t){var e=t.getBoundingClientRect();t.width=e.width,t.height=e.height}function T(t,e,n,o,r){var c,s,u=e.slice(),d=t.getContext("2d"),f=l((function(e){function l(){c=s=null,d.clearRect(0,0,o.width,o.height),r(),e()}c=b.frame((function e(){!a||o.width===i.width&&o.height===i.height||(o.width=t.width=i.width,o.height=t.height=i.height),o.width||o.height||(n(t),o.width=t.width,o.height=t.height),d.clearRect(0,0,o.width,o.height),(u=u.filter((function(t){return function(t,e){e.x+=Math.cos(e.angle2D)*e.velocity+e.drift,e.y+=Math.sin(e.angle2D)*e.velocity+e.gravity,e.wobble+=.1,e.velocity*=e.decay,e.tiltAngle+=.1,e.tiltSin=Math.sin(e.tiltAngle),e.tiltCos=Math.cos(e.tiltAngle),e.random=Math.random()+5,e.wobbleX=e.x+10*e.scalar*Math.cos(e.wobble),e.wobbleY=e.y+10*e.scalar*Math.sin(e.wobble);var n=e.tick++/e.totalTicks,a=e.x+e.random*e.tiltCos,i=e.y+e.random*e.tiltSin,o=e.wobbleX+e.random*e.tiltCos,r=e.wobbleY+e.random*e.tiltSin;return t.fillStyle="rgba("+e.color.r+", "+e.color.g+", "+e.color.b+", "+(1-n)+")",t.beginPath(),"circle"===e.shape?t.ellipse?t.ellipse(e.x,e.y,Math.abs(o-a)*e.ovalScalar,Math.abs(r-i)*e.ovalScalar,Math.PI/10*e.wobble,0,2*Math.PI):function(t,e,n,a,i,o,r,l,c){t.save(),t.translate(e,n),t.rotate(o),t.scale(a,i),t.arc(0,0,1,r,l,c),t.restore()}(t,e.x,e.y,Math.abs(o-a)*e.ovalScalar,Math.abs(r-i)*e.ovalScalar,Math.PI/10*e.wobble,0,2*Math.PI):(t.moveTo(Math.floor(e.x),Math.floor(e.y)),t.lineTo(Math.floor(e.wobbleX),Math.floor(i)),t.lineTo(Math.floor(o),Math.floor(r)),t.lineTo(Math.floor(a),Math.floor(e.wobbleY))),t.closePath(),t.fill(),e.tick<e.totalTicks}(d,t)}))).length?c=b.frame(e):l()})),s=l}));return{addFettis:function(t){return u=u.concat(t),f},canvas:t,promise:f,reset:function(){c&&b.cancel(c),s&&s()}}}function E(t,n){var a,i=!t,r=!!p(n||{},"resize"),c=p(n,"disableForReducedMotion",Boolean),s=o&&!!p(n||{},"useWorker")?v():null,u=i?k:I,d=!(!t||!s)&&!!t.__confetti_initialized,f="function"==typeof matchMedia&&matchMedia("(prefers-reduced-motion)").matches;function h(e,n,i){for(var o,r,l,c,s,d=p(e,"particleCount",M),f=p(e,"angle",Number),h=p(e,"spread",Number),g=p(e,"startVelocity",Number),m=p(e,"decay",Number),b=p(e,"gravity",Number),v=p(e,"drift",Number),y=p(e,"colors",x),w=p(e,"ticks",Number),C=p(e,"shapes"),k=p(e,"scalar"),I=function(t){var e=p(t,"origin",Object);return e.x=p(e,"x",Number),e.y=p(e,"y",Number),e}(e),E=d,S=[],F=t.width*I.x,N=t.height*I.y;E--;)S.push((o={x:F,y:N,angle:f,spread:h,startVelocity:g,color:y[E%y.length],shape:C[(c=0,s=C.length,Math.floor(Math.random()*(s-c))+c)],ticks:w,decay:m,gravity:b,drift:v,scalar:k},r=void 0,l=void 0,r=o.angle*(Math.PI/180),l=o.spread*(Math.PI/180),{x:o.x,y:o.y,wobble:10*Math.random(),velocity:.5*o.startVelocity+Math.random()*o.startVelocity,angle2D:-r+(.5*l-Math.random()*l),tiltAngle:Math.random()*Math.PI,color:o.color,shape:o.shape,tick:0,totalTicks:o.ticks,decay:o.decay,drift:o.drift,random:Math.random()+5,tiltSin:0,tiltCos:0,wobbleX:0,wobbleY:0,gravity:3*o.gravity,ovalScalar:.6,scalar:o.scalar}));return a?a.addFettis(S):(a=T(t,S,u,n,i)).promise}function g(n){var o=c||p(n,"disableForReducedMotion",Boolean),g=p(n,"zIndex",Number);if(o&&f)return l((function(t){t()}));i&&a?t=a.canvas:i&&!t&&(t=function(t){var e=document.createElement("canvas");return e.style.position="fixed",e.style.top="0px",e.style.left="0px",e.style.pointerEvents="none",e.style.zIndex=t,e}(g),document.body.appendChild(t)),r&&!d&&u(t);var m={width:t.width,height:t.height};function b(){if(s){var e={getBoundingClientRect:function(){if(!i)return t.getBoundingClientRect()}};return u(e),void s.postMessage({resize:{width:e.width,height:e.height}})}m.width=m.height=null}function v(){a=null,r&&e.removeEventListener("resize",b),i&&t&&(document.body.removeChild(t),t=null,d=!1)}return s&&!d&&s.init(t),d=!0,s&&(t.__confetti_initialized=!0),r&&e.addEventListener("resize",b,!1),s?s.fire(n,m,v):h(n,m,v)}return g.reset=function(){s&&s.reset(),a&&a.reset()},g}n.exports=E(null,{useWorker:!0,resize:!0}),n.exports.create=E}(function(){return void 0!==t?t:"undefined"!=typeof self?self:this||{}}(),e,!1),t.confetti=e.exports}(window,{});
  //# sourceMappingURL=/sm/3d17452464e7344caa152082ab03b3013560da4b254d3bbebc71c00e84e8ab0b.map

  var confettiX = 0.5;
  var confettiY = 0.5;
  function confettiLoop() {
    confetti({
      zIndex: 2000,
      origin: {
        x: confettiX,
        y: confettiY
      },
      colors: ["#fcbc44", "#e4543c", "#04a414", "#045ca4"],
    });
    confettiX = Math.random();
    confettiY = Math.random();
  }
  confettiLoop();
  var confettiInterval = setInterval(confettiLoop, 2000);

  $(".b4g-learn-more").click(function() {
    openingShowFtueImmediately = true;
    $overlayAnnouncementDiv.dialog("destroy");
    clearInterval(confettiInterval);

    var composes = $(".HE");
    if (composes.length > 0) {
    } else{
      // click compose
      var composeButton = $(".Yh.akV");
      if (composeButton.length == 0) {
        composeButton = $(".T-I.T-I-KE.L3");
      }
      composeButton.click();
    }
  });
  $(".b4g-try-later").click(function(){
    $overlayAnnouncementDiv.dialog("destroy");
    clearInterval(confettiInterval);
  });

  $.ajax({
    url: "https://b4g.baydin.com/calendar/marktadaasseen",
    type: "POST",
    data: {},
    xhr: xhr_with_credentials,
  });

}
B4G_CAL_SCREEN = show_overlay_tada;

var BCal_overlay_loading_in_progress = false;
function click_overlay_toggle() {
  // Toggle the image url's overlay=0 with overlay=1
  // Make sure we avoid double-clicks. Show some kind of loading indicator?
  if (BCal_overlay_loading_in_progress) {
    return;
  }
  BCal_overlay_loading_in_progress = true;
  var $this = $(this);
  var mapName = $this.closest("map").attr("name");
  var $img = $("img[usemap='#" + mapName + "']");
  var src = $img.attr("src");
  $img.css("opacity", "0.5");
  var $overlayLoadingIndicator = $(`
    <div class='b4g-mlc-overlay-loading'>
      <div class="b4g-lds-ring"><div></div><div></div><div></div><div></div></div>
    </div>
  `);
  $img.after($overlayLoadingIndicator);
  $overlayLoadingIndicator.position({of:$img, my: "center", at: "center", collision: "none"});

  if (src && src.indexOf("overlay=1") >= 0 ) {
    track_event(['overlay-post-install-flow', 'overlay-toggle-click-attempt', 'disable']);
  } else if (src && src.indexOf("overlay=0") >= 0) {
    track_event(['overlay-post-install-flow', 'overlay-toggle-click-attempt', 'enable']);
  }

  call_function_after_calendar_login(function(){
    var newSrc;
    if (src && src.indexOf("overlay=1") >= 0 ) {
      newSrc = src.replace("overlay=1", "overlay=0");
      write_to_html5_storage("b4g_bookable_overlay", "false");
      track_event(['overlay-post-install-flow', 'overlay-toggle-click', 'disabled']);
    } else if (src && src.indexOf("overlay=0") >= 0) {
      newSrc = src.replace("overlay=0", "overlay=1");
      write_to_html5_storage("b4g_bookable_overlay", "true");
      track_event(['overlay-post-install-flow', 'overlay-toggle-click', 'enabled']);
    } else if (src == "https://s3.amazonaws.com/MailerBucket/demomap.png") {
      // special demo flow
      newSrc = "https://b4g.baydin.com/calendar/availabilityimage?id=availabilitydemo&email=joe@baydin.com&overlay=1";
    }

    if (newSrc) {
      $img.unbind("load");
      $img.bind("load", function(){
        BCal_overlay_loading_in_progress = false;
        $img.css("opacity", "1");
        $img.next('.b4g-mlc-overlay-loading').remove();
      }).attr("src", newSrc);
    } else {
      $img.css("opacity", "1");
      $img.next('.b4g-mlc-overlay-loading').remove();
    }
  }, function(){
    BCal_overlay_loading_in_progress = false;
    $img.css("opacity", "1");
    $img.next('.b4g-mlc-overlay-loading').remove();
    track_event(['overlay-post-install-flow', 'overlay-toggle-permissions-fail']);
  }, null, false, false, false, true);
}
/**
 * 6. B4G Button/Menu Insertion 
 */


/**
 * Adds a "Manage Boomerang" link to the top menu bar of GMail.
 */
function add_management_link()
{
  var frameDoc = get_frame();
  var management = $("#b4g_manage", frameDoc);

  if(management.length > 0 || get_gmail_user() === "")
  {
    return;
  }

  var gmailAppSelectorIcon = $("#gbwa");
  if (gmailAppSelectorIcon.length === 0){
    gmailAppSelectorIcon = $("gb_kb");
  }
  var divStyles, imageStyles;
  if(which_gmail() === NEW_GMAIL) {
      divStyles = "width: 40px; height: 40px; margin: 4px;display: inline-block;vertical-align: middle;";
      wrapperStyles = "display: flex;height:100%;width:100%;";
      imageStyles = "margin:auto";
  } else {
      divStyles = "";
      wrapperStyles = "";
      imageStyles = "top: 7px; left: 3px;";
  }
  gmailAppSelectorIcon.first().before(
          '<div class="manage_menu" style="display: inline-block; -webkit-flex: 0 0 auto; flex: 0 0 auto;' + divStyles + '" id="b4g_manage" data-tooltip="Boomerang">' +
            '<div style="' + wrapperStyles + '">' + 
              '<img id="b4g_app_loader_icon" src="' + B4G_STATIC_FILES_DIRECTORY + 'ico_boomerang_colors-24.svg" style="cursor:pointer; position: relative;' + imageStyles + '"/>' +
            '</div>' + 
          '</div>'
        );

  // Closes boomerang menu when the other Google bar icons are clicked
  var gmailBarIcons = $(".gb_ca");
  gmailBarIcons.click(function() {$(frameDoc).click();});


  $("#b4g_manage", frameDoc).click(function(){
    openTopMenu($(this));
  });

  var B4G_LAUNCHER_WIDTH = 40;

  var topToolbar = $(".gb_5.gb_tb.gb_f.gb_sb");
  var currentMinWidth = topToolbar.css("min-width");
  var newMinWidth = (parseInt(currentMinWidth, 10) + B4G_LAUNCHER_WIDTH).toString() + "px"; 
  topToolbar.css("min-width", newMinWidth);

}

// Opens the top menu when clicked
function openTopMenu(elt)
{
  var top_menu, userNum, referLoginURL, opened_menu, manageLoginURL;
  opened_menu = $(".b4g_manage_dropdown", frameDoc);
  if (opened_menu.length > 0){
    $(opened_menu).remove();
    return;
  }
  userNum = get_gmail_user_num_for_multiple_sign_in();
  manageLoginURL = BOOMERANG_URL + "managelogin?guser=" + encodeURIComponent(get_gmail_user()) + "&userNum=" + userNum;
  referLoginURL = BOOMERANG_URL + "submitinvitelogin?email="+ encodeURIComponent(get_gmail_user());
    var toolboxUrl = BOOMERANG_URL + "toolbox";
    var premiumSupportUrl = BOOMERANG_URL + "premiumsupport";
    var calendarSettingsUrl = BOOMERANG_URL + "calendar/calendarsettingslogin?guser=" + encodeURIComponent(get_gmail_user());
    var bookableCalendarUrl = BOOMERANG_URL + "bookableschedulesfromgmail?guser=" + encodeURIComponent(get_gmail_user());
    var managePendingEventsUrl = BOOMERANG_URL + "events-pending";

    var calendarSettingsMenuItemHTML = "";
    if (can_use_bcal()) {
      // Add Calendar Settings and Bookable Calendar menu items if user is bcal whitelisted
      calendarSettingsMenuItemHTML = "<li id='tmpendingevents' ><a href='"+ managePendingEventsUrl +"' class='top_menu_option' target='_blank' style='cursor:pointer;'>Manage pending events</a></li>";
      calendarSettingsMenuItemHTML += "<li id='tmcalsettings' ><a href='"+calendarSettingsUrl+"' class='top_menu_option' target='_blank' style='cursor:pointer;'>Calendar settings</a></li>";
      if (can_use_bookable_schedule()) {
        calendarSettingsMenuItemHTML += "<li id='tmbookablecalendar' ><a href='"+bookableCalendarUrl+"' class='top_menu_option' target='_blank' style='cursor:pointer;'>Bookable Schedule</a></li>";
      }
    }

    var plan = get_cached_plan();
    if (is_premium_plan(plan)){
        var manageLinks =
        "<li class='boomerang-menu-section-header'>Email</li>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            "<li id='tmmanage' > <a href='"+ manageLoginURL +"' class='top_menu_option' target='_blank' >Manage scheduled messages</a></li>"+
            "<li id='tminsights' ><a href='https://b4g.baydin.com/insights/insightsfromgmail?guser=" + encodeURIComponent(get_gmail_user()) + "' class='top_menu_option' target='_blank'>Boomerang Insights</a></li>" +
            "<li id='tmtoolbox' > <a href='"+ toolboxUrl +"' class='top_menu_option' target='_blank' >Premium Toolbox</a></li>"+
            "<li id='tmsettings' ><a class='top_menu_option' target='_blank' style='cursor:pointer;'>Email settings</a></li>" + 
        "</ul>" + 
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' +
        "</div>" +
        "<li class='boomerang-menu-section-header'>Calendar</li>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            calendarSettingsMenuItemHTML +
        "</ul>" + 
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
        "</div>" + 
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            "<li id='tmpremiumsupport' > <a href='"+ premiumSupportUrl +"' class='top_menu_option' target='_blank' >Premium Support</a></li>"+
            "<li id='tmfaq' > <a href='https://www.boomeranggmail.com/faq.html' class='top_menu_option' target='_blank' >Help</a></li>"+
            "<li id='tmhowto' > <a class='top_menu_option' target='_blank' style='cursor: pointer'>How To</a></li>"+
        "</ul>" +
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
        "</div>" + 
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px'> " +
            "<li id='tmfriend' ><a href='"+ referLoginURL  + "' class='top_menu_option' target='_blank'>Refer a friend</a></li>" + 
            "<li id='tmbuy' > <a href='https://b4g.baydin.com/subscriptions?guser=" + encodeURIComponent(get_gmail_user()) + "' class='top_menu_option' target='_blank'>Buy a subscription</a></li>"+
        "</ul>" +
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
        "</div>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px'> " +
            "<li id='tmblog' ><a href='https://blog.boomerangapp.com?utm_source=b4g+dropdown&utm_medium=gmail' class='top_menu_option' target='_blank'>Data-backed productivity tips</a></li>" +
            "<li id='tmjobs' > <a href='https://www.boomerangapp.com/jobs.html?utm_source=b4g+dropdown&utm_medium=gmail' class='top_menu_option' target='_blank'>We're hiring!</a></li>"+
        "</ul>";
    }
    else{
        var manageLinks =
        "<li class='boomerang-menu-section-header'>Email</li>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            "<li id='tmmanage' > <a href='"+ manageLoginURL +"' class='top_menu_option' target='_blank' >Manage scheduled messages</a></li>"+
            "<li id='tminsights' ><a href='https://b4g.baydin.com/insights/insightsfromgmail?guser=" + encodeURIComponent(get_gmail_user()) + "' class='top_menu_option' target='_blank'>Boomerang Insights</a></li>" +
            "<li id='tmsettings' ><a class='top_menu_option' target='_blank' style='cursor:pointer;'>Email settings</a></li>" + 
        "</ul>" + 
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' +
        "</div>" +
        "<li class='boomerang-menu-section-header'>Calendar</li>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            calendarSettingsMenuItemHTML +
        "</ul>" +
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' +
        "</div>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
            "<li id='tmfaq' > <a href='https://www.boomeranggmail.com/faq.html' class='top_menu_option' target='_blank' >Help</a></li>"+
            "<li id='tmhowto' > <a class='top_menu_option' target='_blank' style='cursor: pointer'>How To</span></li>"+
        "</ul>" +
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
        "</div>" + 
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px'> " +
            "<li id='tmfriend' ><a href='"+ referLoginURL  + "' class='top_menu_option' target='_blank'>Refer a friend</a></li>" + 
            "<li id='tmbuy' > <a href='https://b4g.baydin.com/subscriptions?guser=" + encodeURIComponent(get_gmail_user()) + "' class='top_menu_option' target='_blank'>Buy a subscription</a></li>"+
        "</ul>" +
        "<div style='padding:0px 8px'>" +
            '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
        "</div>" +
        "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px'> " +
            "<li id='tmblog' ><a href='https://blog.boomerangapp.com?utm_source=b4g+dropdown&utm_medium=gmail' class='top_menu_option' target='_blank'>Data-backed productivity tips</a></li>" +
            "<li id='tmjobs' > <a href='https://www.boomerangapp.com/jobs.html?utm_source=b4g+dropdown&utm_medium=gmail' class='top_menu_option' target='_blank'>We're hiring!</a></li>"+
        "</ul>";
        //"<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px'> " +
            //"<li>Inline Data Sync:</li>" + 
            //"<li><b class='tmdataupdate' style='color:#444;'></b><input id='tmdata' type='button' class='b4g-button' style='position:absolute;bottom:10px;right:7px;margin:0px;font-size:12px;padding:5px 10px;' value='Update'/></li>"+
        //"</ul>"
    }

  var topMenuStyles, leftVal, divClasses, contextualArrow;
  if(which_gmail() === NEW_GMAIL) {
      topMenuStyles = "";
      leftVal = "12px";
      divClasses = "J-M J-M-ayU aka gm-manage-boomerang";
      contextualArrow = "";
  } else {
      topMenuStyles = "box-shadow: 0 2px 10px rgba(0,0,0,.2); left:-15px;";
      leftVal = "auto";
      divClasses = "";
      contextualArrow = '<div class="b4g_manage_dropdown" style="display:block; margin-left:5px; left:' + leftVal + '; border-color: transparent;border-style: dashed dashed solid;border-width: 0 8px 8px;position: absolute;z-index: 1;height: 0;width: 0;-webkit-animation: gb__a .2s;animation: gb__a .2s;border-bottom-color: #ccc;border-bottom-color: rgba(0,0,0,.2);top: 36px;"></div>' +
                '<div class="b4g_manage_dropdown" style="display:block; margin-left:5px; left:' + leftVal + '; border-color: transparent;border-bottom-color: #fff;border-style: dashed dashed solid;border-width: 0 8px 8px;position: absolute;top: 37px;z-index: 1;height: 0;width: 0;-webkit-animation: gb__a .2s;animation: gb__a .2s;"></div>';
  }

  top_menu = $('<div class="b4g_manage_dropdown manage_menu ' + divClasses + '" style="' + topMenuStyles + 'display: block; width:200px; margin-left:-5px; background: #fff; border: 1px solid #ccc; border-color: rgba(0,0,0,.2); overflow: hidden; position: absolute; right: 0; top: 44px; -webkit-animation: gb__a .2s; animation: gb__a .2s; -webkit-border-radius: 2px; border-radius: 2px; -webkit-user-select: text; ">' + 
            manageLinks +
          '</div>' +
          contextualArrow
          );

  if(which_gmail() !== NEW_GMAIL) {
    var topMenuLinks = top_menu.find("a");
    topMenuLinks.css("color", "#36c");
    topMenuLinks.css("text-decoration","none");
    topMenuLinks.hover(function() {
      $(this).css("text-decoration", "underline");
    }, function() {
      $(this).css("text-decoration", "none");
    });
  } else {
    // this is a small hack for the new Gmail UI that allows
    // the user to click the LI element and trigger the "open
    // link in new tab" behavior of the child A element
    var topMenuLinkParents = top_menu.find("li");
    topMenuLinkParents.click(function(e) {
      var didntClickTheLink = e.target.nodeName !== "A";
      var link = containsLink = $(e.target).find("a").attr("href");
      if(didntClickTheLink && containsLink) {
        window.open(link, "_blank");
      }
    });
    // dynamically reposition dropdown menu. based off the current
    // location of the boomerang logo in the top right corner
    var boomerang_offset = $("#b4g_app_loader_icon").offset();
    top_menu.css({
        top: boomerang_offset.top + 36 + "px",
        left: boomerang_offset.left - 100 + "px",
        position: "fixed"
    });
  }
  top_menu.appendTo("#b4g_manage");
  track_event(['Top Menu', 'Open menu']);

  var updateTime = read_from_html5_storage("b4g-inline-manage-last-update-"+get_gmail_user());
  if (updateTime == null) {
    var now = new Date();
    var date = (now.getMonth()+1)+"/"+now.getDate()+"/"+now.getFullYear();

    updateTime = date + " 12:00 AM";
  }

  $(".tmdataupdate", frameDoc).text(updateTime);

  $(frameDoc).click(function closeManageMenu(e){
        var target = get_target(e);
        if ($(target).parents().andSelf().filter("#b4g_manage").length === 0)
        {
          $(top_menu).remove();
          $(frameDoc).unbind('click', closeManageMenu);
        }
  });

    $('#tmdata', frameDoc).click(function() {
      call_function_after_logged_in(function() { update_inline_data(frameDoc); });
    });
    $('#tmmanage', frameDoc).click(function() {
      track_event(['Top Menu', 'Click manage scheduled messages']);
    });
    $('#tmbuy', frameDoc).click(function() {
      track_event(['Top Menu', 'Click buy a subscription']);
    });
    $('#tmfaq', frameDoc).click(function() {
      track_event(['Top Menu', 'Click help']);
    });
    $('#tmhowto', frameDoc).click(function() {
      show_welcome_dialog(1);
      track_event(['Top Menu', 'Click How To']);
    });
    $('#tmfriend', frameDoc).click(function() {
      track_event(['Top Menu', 'Click tell a friend']);
    });
    $('#tmblog', frameDoc).click(function() {
      track_event(['Top Menu', 'Click blog']);
    });
    $('#tminsights', frameDoc).click(function() {
      track_event(['Top Menu', 'Click insights']);
    });
    $('#tmjobs', frameDoc).click(function() {
      track_event(['Top Menu', 'Click jobs']);
    });
        $('#tmtoolbox', frameDoc).click(function() {
            track_event(['Top Menu', 'Click toolbox']);
        });
        $('#tmpremiumsupport', frameDoc).click(function() {
            track_event(['Top Menu', 'Click premium support']);
        });
    $('#tmsettings', frameDoc).click(function() {
      call_function_after_logged_in(show_settings_dialog);
      track_event(['Top Menu', 'Click settings']);
    });
    $('#tmcalsettings', frameDoc).click(function() {
      track_event(['Top Menu', 'Click calendar settings']);
    });
    $('#tmpendingevents', frameDoc).click(function() {
      track_event(['Top Menu', 'Click manage pending events']);
    });
    $('#tmbookablecalendar', frameDoc).click(function() {
      track_event(['Top Menu', 'Click bookable calendar']);
    });

}


/**
 * Adds a Boomerang button to the menu bars above and below the body of the current conversation.
 */
function add_boomerang_button_to_menu()
{
  var frameDoc = get_frame();
  var existingButton = $(".boomerang-button:visible", frameDoc);
  if(existingButton.length > 0)
  {
    return;
  }
  var messageBodyElt = $(MESSAGE_BODY_SELECTOR, frameDoc);
  if (messageBodyElt.length < 1)
  {
    return;
  }
  //Build our boomerang button
  var button = document.createElement('div');

  var newGmailClass = "";
  if(which_gmail() === NEW_GMAIL) {
    newGmailClass = " gm-boomerang-button-thread";
  }

  //The next two lines of code give the button a style that looks like a GMail button

  button.innerHTML = "<div aria-haspopup='true' style='-webkit-user-select: none; -moz-user-select:none;margin-bottom:0px;margin-top:-2px;margin-right:0px;border-top-right-radius:0px !important;border-bottom-right-radius:0px !important; outline: none;' role='button' class='T-I J-J5-Ji nf T-I-ax7 L3" + newGmailClass + "' tabindex='0'><img class='f tk3N6e-I-J3' src='" + B4G_STATIC_FILES_DIRECTORY + "ico_boomerang_colors-32@2x.png' style='vertical-align: middle;width:28px;'/> Boomerang <div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji'> </div></div>";

  // TODO: style changes for right-to-left-languages
  $(button).attr("class", "G-Ni J-J5-Ji boomerang-button b4g_button");

  //Build our create event button
  var threadBCalButton = document.createElement('div');
  var newGmailthreadBCalBtnClass = " gm-boomerang-bcal-button-thread";

  //The next two lines of code give the button a style that looks like a GMail button
  threadBCalButton.innerHTML = "<div aria-haspopup='true' style='-webkit-user-select: none; -moz-user-select:none;margin-bottom:0px;margin-top:-2px;margin-left:0px;border-top-left-radius:0px !important;border-bottom-left-radius:0px !important; outline: none;' role='button' class='T-I J-J5-Ji nf T-I-ax7 L3" + newGmailthreadBCalBtnClass + "' tabindex='0'><img class='f tk3N6e-I-J3' src='https://b4g.baydin.com/site_media/calendar/img/ico_calendar@2x.png' style='vertical-align: middle;width:24px;'/> <div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji'> </div></div>";

  // TODO: style changes for right-to-left-languages
  $(threadBCalButton).attr("class", "G-Ni J-J5-Ji boomerang-button b4g_button");

  var buttonCopy = null;
  var threadBCalButtonCopy = null;
  var menuBar = $(MENU_BAR_SELECTOR, frameDoc);
  for(var i = 0; i < menuBar.length; i++)
  {
    buttonCopy = button.cloneNode(true);
    $(buttonCopy).click(function(e) {
      toggle_boomerang_menu(e, this, b4g_time_clicked);
      track_event([ "thread menu", "click" ]);
    });
    menuBar.get(i).appendChild(buttonCopy);

    threadBCalButtonCopy = threadBCalButton.cloneNode(true);
    $(threadBCalButtonCopy).click(function(e) {
      thread_view_toggle_bcal_features_menu(e, $(this));
    });
    menuBar.get(i).appendChild(threadBCalButtonCopy);
  }
}

var SEND_LATER_TABLE_CAL_FEATURES_ROW = '<div class="b4g-bcal-features-button-holder">' +
  '<div class="b4g-bcal-features-button J-Z-I" data-tooltip="Boomerang Meeting Scheduling">' +
    '<?xml version="1.0" encoding="UTF-8"?><svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title></title><g id="Compose-Bar-Test" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="BCalendar"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><path d="M6,4 L6,5 C6,6.1045695 6.8954305,7 8,7 C9.1045695,7 10,6.1045695 10,5 L10,5 L10,4 L14,4 L14,5 C14,6.0543618 14.8158778,6.91816512 15.8507377,6.99451426 L16,7 C17.1045695,7 18,6.1045695 18,5 L18,5 L18,4 L18.9375,4 C20.0203125,4 20.9151989,4.75172749 20.994315,5.77681042 L21,5.92505875 L21,19.0749413 C21,20.1749748 20.071875,21 18.9375,21 L18.9375,21 L5.0625,21 C3.928125,21 3,20.1749748 3,19.0749413 L3,19.0749413 L3,5.92505875 C3,4.82502518 3.928125,4 5.0625,4 L5.0625,4 L6,4 Z M19.5,9.5 L4.5,9.5 L4.5,19.5 L19.5,19.5 L19.5,9.5 Z M16,14 C16.5522847,14 17,14.4477153 17,15 L17,16 C17,16.5522847 16.5522847,17 16,17 L15,17 C14.4477153,17 14,16.5522847 14,16 L14,15 C14,14.4477153 14.4477153,14 15,14 L16,14 Z M8,2 C8.55228475,2 9,2.44771525 9,3 L9,5 C9,5.55228475 8.55228475,6 8,6 C7.44771525,6 7,5.55228475 7,5 L7,3 C7,2.44771525 7.44771525,2 8,2 Z M16,2 C16.5522847,2 17,2.44771525 17,3 L17,5 C17,5.55228475 16.5522847,6 16,6 C15.4477153,6 15,5.55228475 15,5 L15,3 C15,2.44771525 15.4477153,2 16,2 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path></g></g></svg>' +
  '</div>' +
'</div>';

var SEND_LATER_TABLE_ROW_NEW_WITH_BCAL =
  '<div class="sendLaterTable boomerangReply gm-send-later-table b4g-send-bar" style="height: 62px; background-color: #FFF;">' +
    '<div class="gm-send-later-delimeter"></div>' +
    '<div class="send-later-button T-I J-J5-Ji T-I-atl L3 T-I-Zf-aw2 T-I-JW" role="button" style="margin-top: 0px; float: left; user-select: none; background-color: #d14836;" tabindex="0">' +
      'Send Later' +
    '</div>' +
    '<div class="Uz" style="float: left; margin-left: 0px; margin-top: 5px;"></div>' +
    '<div class="boomerangSendWidget" style="font-size:11px; float:left; margin-top: 2px; padding: 4px; height: 22px; display:flex; flex-flow: row nowrap;">' +
      '<label style="float: left; position: relative; margin-top: auto; margin-bottom: auto;">' +
        '<input type="checkbox" class="boomerangSendCheck" value="boomSend" style="margin-top: 0px; margin-right: 0px; height:12px; width: 12px;"/>' +
        '<span style="padding-right:4px; padding-left: 4px; position: relative; vertical-align: top; font-weight: 500;"> {{boomerang_on_send}}</span>' +
      '</label>' +
      '<div class="b4g-tiny-compose-icon-holder"></div>' +
      '<div class="b4g_button sendboomerang-button" style="float: left; height: 20px; font-weight: normal; margin: 0; position: relative;">' +
        '<div class="conditional-caption" aria-haspopup="true" style="line-height: 20px;" role="button" tabindex="0">' +
          '<span class="conditional-caption-text"> in 2 days</span>' +
          '<div class="VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji">' +
        '</div>' +
      '</div>' +
    '</div>' +
    '<div class="b4g_button b4g-send-condition" style="float: left; height: 20px; top: 3px; margin: -3px 0px 0px 4px; position: relative;">' +
      '<select name="ifResponse" class="boomerangSendCondition" style=" border:0; padding: 3px 5px 2px 1px; background-color: transparent; -webkit-appearance: none; -moz-appearance: none; vertical-align: middle; margin: 0px 5px 6px 0px;">' +
        '<option value="no reply">if no reply</option>' +
        '<option value="no click">if not clicked</option>' +
        '<option value="no open">if not opened</option>' +
        '<option value="always">regardless</option>' +
      '</select>' +
    '</div>' +
  '</div>' +
  '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 b4g_button b4g-tracking-toggle-holder" style="height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;"></div>' +
  SEND_LATER_TABLE_CAL_FEATURES_ROW
;

var SEND_LATER_TABLE_ROW_NEW =
  '<div class="sendLaterTable boomerangReply gm-send-later-table" style="height: 62px; background-color: #FFF;">' +
    '<div class="gm-send-later-delimeter"></div>' +
    '<div class="send-later-button T-I J-J5-Ji T-I-atl L3 T-I-Zf-aw2 T-I-JW" role="button" style="margin-top: 0px; float: left; user-select: none; background-color: #d14836;" tabindex="0">' +
      'Send Later' +
    '</div>' +
    '<div class="Uz" style="float: left; margin-left: 0px; margin-top: 5px;"></div>' +
    '<div class="boomerangSendWidget" style="font-size:11px; float:left; margin-top: 8px; display:flex; flex-flow: row nowrap;">' +
      '<label style="float: left; position: relative; margin-top: auto; margin-bottom: auto;">' +
        '<input type="checkbox" class="boomerangSendCheck" value="boomSend" style="margin-top: 0px; margin-right: 0px; height:12px; width: 12px;"/>' +
        '<span style="padding-right:4px; padding-left: 4px; position: relative; vertical-align: top;"> {{boomerang_on_send}}</span>' +
      '</label>' +
      '<div class="b4g-tiny-compose-icon-holder"></div>' +
      '<div class="b4g_button sendboomerang-button" style="float: left; height: 20px; font-weight: normal; margin: 0; position: relative;">' +
        '<div class="conditional-caption" aria-haspopup="true" style="line-height: 20px;" role="button" tabindex="0">' +
          '<span class="conditional-caption-text"> in 2 days</span>' +
          '<div class="VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji">' +
          '<div class="conditional-caption-arrow G-asx T-I-J3 J-J5-Ji">&nbsp;</div>' +
        '</div>' +
      '</div>' +
    '</div>' +
    '<div class="b4g_button b4g-send-condition" style="float: left; height: 20px; top: 3px; margin: -3px 8px 0px 4px; position: relative;">' +
      '<select name="ifResponse" class="boomerangSendCondition" style="background: url(' + B4G_STATIC_FILES_DIRECTORY + 'ifnoreplyarrow.png) no-repeat right center; border:0; padding: 3px 5px 2px 1px; background-color: transparent; -webkit-appearance: none; -moz-appearance: none; vertical-align: middle; margin: 0px 5px 6px 0px;">' +
        '<option value="no reply">if no reply</option>' +
        '<option value="no click">if not clicked</option>' +
        '<option value="no open">if not opened</option>' +
        '<option value="always">regardless</option>' +
      '</select>' +
    '</div>' +
    '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 b4g_button b4g-tracking-toggle-holder" style="height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;"></div>' +
  '</div>' +
  SEND_LATER_TABLE_CAL_FEATURES_ROW
;
var SEND_LATER_TABLE_ROW_OLD = SEND_LATER_TABLE_ROW_NEW;

var SEND_LATER_TABLE_SPACE = "<div class='gm-send-later-space' style='height: 62px; width: 100%;'></div>"

var SEND_LATER_TABLE_ROW =
  '<div class="sendLaterTable boomerangReply" style="background-color: whiteSmoke; border: 1px solid #CFCFCF; border-width: 0 1px 1px 1px; margin: 0 -1px; overflow-y: hidden;">' +
    '<table style="width:100%">' +
      '<tr>' +
        '<td style="width: 80px">' +
          '<div class="send-later-button tk3N6e-I J-J5-Ji W6eDmd tk3N6e-I-n2to0e L3 J-Zh-I J-J5-Ji Bq L3" aria-haspopup="true" style="-moz-user-select: none; background-color: #D14836; background-image: -webkit-linear-gradient(top,#DD4B39,#D14836); background-image: -moz-linear-gradient(top,#DD4B39,#D14836); background-image: -ms-linear-gradient(top,#DD4B39,#D14836); background-image: linear-gradient(top,#DD4B39,#D14836); color: white; border: 1px solid transparent; padding: 0 9px; -webkit-border-radius: 2px; -moz-border-radius: 2px; border-radius: 2px;cursor: pointer;font-size: 11px; font-weight: bold; white-space: nowrap; margin: 3px; height: 27px;line-height: 27px;min-width: 54px; outline: 0; box-shadow: none;" tabindex="0">' +
            'Send Later' +
          '</div>' +
        '</td> ' +
        '<td style="border-top: none; width: 7px">' +
          '<div class="Uz"></div>' +
        '</td>' +
        '<td>' +
          '<div class="boomerangSendWidget" style="font-size:11px; float:left;">' +
            '<label>' +
              '<input type="checkbox" class="boomerangSendCheck" value="boomSend" style="vertical-align:text-bottom;"/>' +
              '<span style="padding-right:4px;"> {{boomerang_on_send}}</span>' +
            '</label>' +
            '<div class="b4g-tiny-compose-icon-holder"></div>' +
            '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 b4g_button sendboomerang-button" style="padding: 1px 2px; height: 20px; font-weight: normal; margin: 0;">' +
              '<div class="conditional-caption" aria-haspopup="true" style="line-height: 20px;" role="button" tabindex="0">' +
                '<span class="conditional-caption-text"> in 2 days</span>' +
                '<div class="VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji">' +
                  '<div class="conditional-caption-arrow G-asx T-I-J3 J-J5-Ji">&nbsp;</div>' +
                '</div>' +
              '</div>' +
            '</div>' +
            '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 b4g_button b4g-send-condition" style="height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;">' +
              '<select name="ifResponse" class="boomerangSendCondition" style="background: url(' + B4G_STATIC_FILES_DIRECTORY + 'ifnoreplyarrow.png) no-repeat right center; border:0; padding: 2px 5px 2px 1px; background-color: transparent; color: #444; -webkit-appearance: none; -moz-appearance: none; vertical-align: middle; margin: 0px 5px 6px 0px;">' +
                '<option value="no reply">if no reply</option>' +
                '<option value="no click">if not clicked</option>' +
                '<option value="no open">if not opened</option>' +
                '<option value="always">regardless</option>' +
              '</select>' +
            '</div>' +
            '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 b4g_button b4g-tracking-toggle-holder" style="height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;">' +
            '<div/>' +
          '</div>' +
        '</td>' +
      '</tr>' +
    '</table>' +
  '</div>'
;

function add_send_later_button_to_new_compose_windows()
{
  var composeContainers = $(".nH.Hd[role='dialog']");
  composeContainers.each(function(){
    var $this = $(this);

    // If the text body can't be found, then the composeContainer isn't done loading
    if(!get_compose_text_body($this)) { return; }

    add_send_later_button_to_compose_window($this);
  });
  function add_send_later_button_to_compose_window(composeContainer){
    var existingSendLater = $(".sendLaterTable", composeContainer);
    if (existingSendLater.length === 0){

      var sendBar = $(".aDj", composeContainer);
      if (sendBar.length === 0){
        return;
      }

      var sendLaterHtml = which_gmail() === NEW_GMAIL ? SEND_LATER_TABLE_ROW_NEW : SEND_LATER_TABLE_ROW;

      sendBar.append(sendLaterHtml);

      var $calFeaturesBtn = sendBar.find('.b4g-bcal-features-button');
      $('<div class="b4g-bcal-features-txt">Meet</div>').insertAfter($calFeaturesBtn.find('svg'))
      $calFeaturesBtn.css('width', '100% !important').closest('.b4g-bcal-features-button-holder').css('width', '68px !important');
      $calFeaturesBtn.find('.J-J5-Ji.J-Z-I-Kv-H').css('width', '100%');

      $(".send-later-button", composeContainer).click(function(e){
        compose_dialog_toggle_send_later_menu(e, this, false);
      });

      $(".sendboomerang-button", composeContainer).click(function(e){
        compose_dialog_toggle_send_boomerang_menu(e, this, false);
      });

      if (can_use_bcal()) {
        $(".b4g-bcal-features-button", composeContainer).click(function(e){
          var self = this;
          if ($("#bcal_features_menu").length > 0) {
            close_bcal_features_menu();
            return;
          }
          call_function_after_calendar_login(function(){
            compose_dialog_toggle_bcal_features_menu(e, self, false);
          }, $.noop, composeContainer, true);
        });

        // Special behavior to get UI to fit in tiny compose
        adjust_send_later_bar_ui_for_tiny_compose(composeContainer);

        if (autoOpenMeetMenu) {
          call_function_after_calendar_login(function(){
            compose_dialog_toggle_bcal_features_menu(undefined, $(".b4g-bcal-features-button", composeContainer), false);
            track_event([ "bookable-email-CTA-btn", "meet-menu-displayed" ]);
          }, $.noop, composeContainer, false);
          autoOpenMeetMenu = false;
        }
      }

      try{
        create_tracking_toggle(composeContainer);
      }
      catch(e){
        //console.log(e);
      }

      // wire up event handler for each send button
      // sendButtons includes both Send and Send&Archive button
      var sendButtons = get_the_send_buttons(composeContainer);
      var scheduledSendButtons = get_the_scheduled_send_button(composeContainer);

      var boomerang_on_send_handler = function() {
        var boomerangOnSendCheckboxIsChecked = $('.boomerangSendCheck',composeContainer).is(":checked");
        var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
        if (boomerangOnSendCheckboxIsChecked){
          var params = compose_dialog_build_send_and_boomerang_params(composeContainer);
          if (which_gmail() === OLD_GMAIL) {
            var baseUrl = "https://b4g.baydin.com/mailcruncher/schedulereturndelay";
            var url = generate_url_with(baseUrl, params);
            send_image_request(url, function(b4gStatus) {
              if (is_nag_status(b4gStatus) || b4gStatus === PAYWALL)
              {
                nag_screen(b4gStatus);
                inline_manage.expire_cache();
              }

              else if (b4gStatus !== SUCCESS)
              {
                show_dialog("Your most recent Boomerang-on-Send failed. To Boomerang your sent email, please open your message in 'Sent Mail' and Boomerang the message manually. <br/><br/> Error Details:<br/> " + POSSIBLE_RESPONSES[b4gStatus]);
              }
              else if(b4gStatus === SUCCESS)
              {
                show_viral_hook_if_appropriate({ type: "return-later" });
                inline_manage.expire_cache();
              }
            }, "success");
          } else {
            var url = "https://b4g.baydin.com/gmailmigration/boomerangfromdraft";
            $.ajax({
              type: "POST",
              url: url,
              data: params,
              xhr: xhr_with_credentials,
              success: function(response) {
                handle_boomerang_on_send_response_new_ui(response);
              }
            });
          }
        }
        else if (trackingCheckboxIsChecked){
          saveTrackedEmail(composeContainer);
        }
      };
      sendButtons
        .click(boomerang_on_send_handler)
        .keydown(function(e) {
          if (e.which === 32 || e.which === 13){
            boomerang_on_send_handler();
          }
        })
      ;
      var boomerang_on_scheduled_send_handler = function() {
        var boomerangOnSendCheckboxIsChecked = $('.boomerangSendCheck',composeContainer).is(":checked");
        var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
        if (boomerangOnSendCheckboxIsChecked || trackingCheckboxIsChecked) {
          scheduledSendButtons.each(simulate_click);
          var send_later_button_png = B4G_STATIC_FILES_DIRECTORY + "send-later-button.png";
          var warning_png = B4G_STATIC_FILES_DIRECTORY + "warning.png";
          var message = "<p style='padding-top: 15px; font-size: 18px; font-weight: bold; margin: 0px 55px; color:#444;'><img style='position: absolute; left:40px; width: 23px;' src='" + warning_png + "'>Using Gmail's Schedule Send will disable all Boomerang features on this message.</p>" +
           "<p style='font-size: 14px; color:#444; margin: 0px 55px;'>Instead, please use Boomerang's <img class='b4g-send-later-button-img' style='position: relative; top: 16px; width: 93px;' src='" + send_later_button_png + "'> to schedule this message.</p>";
          var title = "Boomerang for Gmail";
          var buttons = {
            "Okay": {
                text: "OK, I'll use Send Later",
                "class": "b4g-button blue scheduled-send-ok",
                click: function() { 
                  $(this).dialog("destroy");
                  $(".send-later-button", composeContainer).click();
                  track_event(["gmail scheduled send dialog", "ok"]);
                }
            },
            "Disable": {
                text: "Disable Boomerang features on this message",
                "class": "b4g-button dialog-gray scheduled-send-disable",
                click: function() { 
                  if (boomerangOnSendCheckboxIsChecked) {
                    $('.boomerangSendCheck',composeContainer).attr("checked", false);
                  }
                  if (trackingCheckboxIsChecked) {
                    var $trackingToggle = $(".b4g-tracking-toggle", composeContainer);
                    $trackingToggle.trigger("b4g-toggle-state");
                  }
                  $(this).dialog("destroy");
                  track_event(["gmail scheduled send dialog", "disable"]);
                }
            }
          };
          var opts = {
            width: 550,
            dialogClass: ""
          }
          show_dialog(message, title, buttons, opts);
          track_event(["gmail scheduled send dialog", "show"]);
          $(".scheduled-send-ok,.scheduled-send-disable").css({
            "display": "block", 
            "margin": "10px auto",
            "width": "400px",
            "height": "30px",
          });
          $(".b4g-ui-dialog-buttonpane").css({"text-align": "center", "padding-bottom": "35px"});
          // If the user clicks the Send Later button image, programatically click the dialog's OK button
          var $sendLaterImg = $('.b4g-send-later-button-img');
          $sendLaterImg.click(function() {
            $('.scheduled-send-ok').click();
          });
        }
      };
      scheduledSendButtons
        .click(boomerang_on_scheduled_send_handler)
        .keydown(function(e) {
          if (e.which === 32 || e.which === 13){
            boomerang_on_scheduled_send_handler();
          }
        })
      ;

      // wire up the checkbox for user authentication
      $('.boomerangSendCheck',composeContainer).click(function(){
        check_authentication_for_send_boomerang_checkbox(composeContainer);
      });
      $('.boomerangSendCheck', composeContainer).change(function() {
        track_event([ "boomerang this", ($(this).is(":checked") ? "checked" : "un-checked") ]);

        if ($(this).is(":checked")) {
          $(this).closest('.boomerangSendWidget').addClass('boomerangTrackingEnabled');
        } else {
          $(this).closest('.boomerangSendWidget').removeClass('boomerangTrackingEnabled');
        }
      });

      $('.boomerangSendCondition',composeContainer).change(function() {
        $('.boomerangSendCheck',composeContainer).attr("checked", true);
        var chosenOption = $(this).val();
        track_event(['Send and Boomerang', "Change 'if i don't hear back' field", chosenOption ]);
        if (chosenOption === "no click" || chosenOption === "no open"){
          if (!email_tracking_is_turned_on(composeContainer)){
            var $trackingToggle = $(".b4g-tracking-toggle", composeContainer);
            $trackingToggle.trigger("b4g-toggle-state");
          }
        }
        check_authentication_for_send_boomerang_checkbox(composeContainer);
      });

            var SEND_LATER_TABLE_ROW_HEIGHT = 42;

            var attachmentBox = $(".GW, .bv8", composeContainer);
            if (attachmentBox.length > 0){
                var attachmentBoxBottom = parseInt(attachmentBox.css("bottom"), 10);
                /*
                    Gmail moves the attachment bar when the Recipients field is being edited by the user.
                    We are creating a Mutation Observer to observe the Recipients field.
                    If the Recipients field is visible, then we need to move the attachment bar
                */
                var recipientsInput = $(".aoD.hl", composeContainer)[0];
                var openedRecipientsSection = $('.fX.aXjCH', composeContainer)[0];
                var adjust_attachment_boxes = function() {
                  if ($(recipientsInput).is(":visible")){
                      attachmentBox.css("bottom", attachmentBoxBottom.toString() + "px");
                  }
                  else{
                      var openedRecipientsSectionHeight = $(openedRecipientsSection).innerHeight();
                      attachmentBox.css("bottom", (attachmentBoxBottom + SEND_LATER_TABLE_ROW_HEIGHT + openedRecipientsSectionHeight - 78).toString() + "px");
                  }
                };
                var observer = new MutationObserver(function(mutations) {
                    mutations.forEach(adjust_attachment_boxes);
                });
                observer.observe(recipientsInput, {attributes: true});
                $('.fX.aXjCH', composeContainer).bind('click keyup keydown', adjust_attachment_boxes);
                $('.fX.aXjCH textarea', composeContainer).bind('focus blur', adjust_attachment_boxes);
                $('.aB.gQ.pE, .aB.gQ.pB', composeContainer).bind('click', function() {
                  // When "cc" and "bcc" links are clicked, we need this slight delay so the recipients fields can expand before we adjust the attachment boxes
                  setTimeout(function() {
                    adjust_attachment_boxes();
                  });
                });
            }


            // Fix for small screen sizes: ensure gmail compose containers won't be overlapped by 
            // Gmail top row UI 
            var $wholeEditBox = $(".GP", composeContainer)[0];
            var highestLevelOfCurrentComposeContainers = $wholeEditBox.closest('.dw');
            $(highestLevelOfCurrentComposeContainers).addClass('b4g-raise-compose-container-z-idx');

            // If it's not a pop-out reply, then force Gmail to resize
            if (composeContainer.find(".HQ").length === 0){
                $(".Am.Al", composeContainer).focus(); // click editable stuff and force Gmail to resize compose window
                setTimeout(function(){$(".aoD.hl", composeContainer).focus();}, 100); // return the cursor to default location
            }
            enable_sticky_send_and_boomerang_settings(composeContainer);

      keyboard_shortcuts.add_compose_listen(composeContainer);
      if (can_use_bcal()) {
        if(GimmeBetaActivated && !GimmeBetaFtueSeen) {
          // TODO: (steve) I think this code path is not used and can be removed
          GimmeBetaFtueSeen = true;
          close_b4g_menu();
          show_calendar_ftue(composeContainer);
        }
      }

      if (openingShowFtueImmediately && read_from_html5_storage("b4g-has-seen-bookable-announcement-tooltip") !== "true") {
        // We are auto-showing the calendar FTUE.  Snooze the bookable announcement for later
        set_bookable_announcement_snooze_time();
      } else {
        display_bookable_announcement_if_necessary(composeContainer);
      }

    }
    if (openingShowFtueImmediately) {
      openingShowFtueImmediately = false;
      show_calendar_ftue(composeContainer);
    }

    _make_responsive_adjustments(composeContainer);

  }
}

function handle_boomerang_on_send_response_new_ui(response) {
  var status = response["status"];
  if (status === "success") {

    show_viral_hook_if_appropriate({ type: "return-later" });
    inline_manage.expire_cache();

  } else if (status === "nag" || response["message"] === "paywall") {

    nag_screen_new_gmail(response["message"]);
    inline_manage.expire_cache();

  } else if (status === "error") {

    show_dialog("Your most recent Boomerang-on-Send failed. To Boomerang your sent email, please open your message in 'Sent Mail' and Boomerang the message manually. <br/><br/> Error Details:<br/> " + response["message"]);
  }
}


function add_send_later_button_to_new_pop_out_compose(){
  add_send_later_button_to_new_compose_replies();
}

var timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen = new Date();
function add_send_later_button_to_new_compose_replies(){
  $(".HE").each(function(){
    var composeContainer = get_compose_container(this);

    // If the text body can't be found, then the composeContainer isn't done loading
    if(!get_compose_text_body(composeContainer)) { return; }

    add_send_later_button_to_a_single_reply(composeContainer);
  });

  function add_send_later_button_to_a_single_reply(composeContainer){
    if ($(".sendLaterTable", composeContainer).length === 0){
      var sendBar;
      if (which_gmail() === NEW_GMAIL && !is_pop_out_window() || is_pop_out_thread_view(composeContainer)) {
        var space = composeContainer.find(".aDh").parent().parent();
        space.after(SEND_LATER_TABLE_SPACE)
        sendBar = composeContainer.find(".aDh");
        sendBar.append(SEND_LATER_TABLE_ROW_NEW);
        $(".sendLaterTable", composeContainer).addClass('b4g-adjust-reply-send-later-container b4g-not-sticky-reply-send-later-container');

        var sendBarElement = composeContainer.find(".aDj")[0];
        // The following code is so that we can keep the send later bar on the screen when the user scrolls in reply compose
        // Otherwise, the send later bar would be stuck at the bottom of the screen.
        var adjust_send_bar = function() {

            // debouncer
            if(Date.now() < timeSinceLastExec) {
                return;
            } else {
                timeSinceLastExec = Date.now() + 15;
            }


            var stickyDetector = composeContainer.find(".aDj");
            var isSticky = stickyDetector.hasClass("aDi") || stickyDetector.hasClass("ahe");
            // // the user has scrolled such that our Send Later bar should be stickied
            if (lastStickyStatus != isSticky) {
              var $sendLaterTable = composeContainer.find(".sendLaterTable");
              if(isSticky) {
                $sendLaterTable.css({
                  "position": "relative",
                  "bottom": "12px"
                }).removeClass('b4g-not-sticky-reply-send-later-container');
                $sendLaterTable.closest(".aDh").css({
                  "position": "relative",
                  "bottom": "35px",
                  "background-color": "white"
                })
                composeContainer.find(".Ur").css({
                  "margin-bottom": "30px",
                })
                $sendLaterTable.closest(".HE").find('.gm-send-later-space').css({
                  "height": "40px",
                  // "height": "27px",
                })
              } else {
                $sendLaterTable.css({
                  "position": "initial",
                  "bottom": "0px",
                }).addClass('b4g-not-sticky-reply-send-later-container');
                $sendLaterTable.closest(".aDh").css({
                  "position": "initial",
                  "bottom": "0px",
                  "background-color": "none",
                })
                composeContainer.find(".Ur").css({
                  "margin-bottom": "0px",
                })
                $sendLaterTable.closest(".HE").find('.gm-send-later-space').css({
                  "height": "62px",
                })
              }
            }
            lastStickyStatus = isSticky;
        };
        var timeSinceLastExec = Date.now() + 15;
        var lastStickyStatus = false;
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(adjust_send_bar);
        });
        observer.observe(sendBarElement, {attributes: true, attributeFilter: ["style"]});
      } else if (which_gmail() === NEW_GMAIL && is_pop_out_window()) {
        sendBar = composeContainer.find(".aDh");
        sendBar.after(SEND_LATER_TABLE_ROW_NEW);
      } else {
        sendBar = composeContainer.find(".aDh");
        sendBar.after(SEND_LATER_TABLE_ROW);
      }
      composeContainer.append("<div>&nbsp</div><div>&nbsp</div><div>&nbsp</div>");

      var $calFeaturesBtn = sendBar.find('.b4g-bcal-features-button');
      // We need this check to make sure we find the button in pop-out compose
      if ($calFeaturesBtn.length === 0) $calFeaturesBtn = composeContainer.find('.b4g-bcal-features-button');
      $('<div class="b4g-bcal-features-txt">Meet</div>').insertAfter($calFeaturesBtn.find('svg'))
      $calFeaturesBtn.css('width', '100% !important').closest('.b4g-bcal-features-button-holder').css('width', '68px !important');
      $calFeaturesBtn.find('.J-J5-Ji.J-Z-I-Kv-H').css('width', '100%');

      var SEND_LATER_TABLE_ROW_HEIGHT = 42;

      var isEmailThread = $(".aDd").length > 0;
      if (is_pop_out_window() && !isEmailThread){
        var sendBarHeight = sendBar.height();
        sendBar.css("height", (sendBarHeight + SEND_LATER_TABLE_ROW_HEIGHT).toString() + "px");

        /*
          Gmail resizes the PopOut window when the Recipients field is being edited by the user.
          We are creating a Mutation Observer to observe the Recipients field.
          If the Recipients field is visible, then we need a margin-top for the Send Bar.

          Due to other extensions in the same area, we can't rely on hardcoding heights/margins.
          We have to calculate the new values somehow.
        */
        var recipientsInput = $(".aoD.hl")[0];
        var originalSendBarMarginTop = sendBar.css("margin-top");
        // observe send bar class that is added when it gets stickeied to the bottom. then, remove /adjust the clip.
        var newSendBarMarginTop = parseInt(originalSendBarMarginTop, 10) - sendBarHeight;
        newSendBarMarginTop = which_gmail() === NEW_GMAIL ? newSendBarMarginTop - 2 : newSendBarMarginTop;
        newSendBarMarginTop = newSendBarMarginTop.toString() + "px";
        var adjust_send_bar = function() {
          if ($(recipientsInput).is(":visible")){
            sendBar.css("margin-top", newSendBarMarginTop);
          }
          else{
            sendBar.css("margin-top", originalSendBarMarginTop);
          }
        };
        var observer = new MutationObserver(function(mutations) {
          mutations.forEach(adjust_send_bar);
        });
        observer.observe(recipientsInput, {attributes: true});
        adjust_send_bar();

        /*
          The new Send Bar hides the bottommost rows of text.
          Here, we're attempting to decrease the height of the edit box by the height of our Send Later bar.
          We have to do it every time Gmail adjusts the height.
          The "b4g_delay" method ensures that this isn't run rapidly while the the user resizes the window.
        */
        var wholeEditBox = $(".GP")[0];
        var adjust_edit_window_height = function(){
          b4g_delay(function(){
            var editBox = $(".qz.aXjCH");
            var oldEditBoxHeight = editBox.css("max-height");
            var newEditBoxHeight = (parseInt(oldEditBoxHeight, 10) - sendBarHeight).toString() + "px";
            editBox.css("max-height", newEditBoxHeight);

            var smallerEditbox = $(".Am.Al");
            var oldSmallerEditBoxHeight = smallerEditbox.css("min-height");
            var newSmallerEditBoxHeight = (parseInt(oldSmallerEditBoxHeight, 10) - sendBarHeight).toString() + "px";
            smallerEditbox.css("min-height", newSmallerEditBoxHeight);
          }, 250);
        };
        var editObserver = new MutationObserver(function(mutations) {
          mutations.forEach(adjust_edit_window_height);
        });
        editObserver.observe(wholeEditBox, {attributes: true});
        adjust_edit_window_height();

        /*
          Add some additional css to the Send Later Table because we are in a pop out window
        */
        var sendLaterTable = $(".sendLaterTable", composeContainer);
        sendLaterTable.css("margin-top", "-" + SEND_LATER_TABLE_ROW_HEIGHT.toString() + "px");
        sendLaterTable.css("border-top-width", "1px");

        /*
          Our Send Later bar pushes up the Send bar, which covers up the Attachments bar.
          We need to bump the Attachments bar up 40 pixels.
          However, the Attachments bar doesn't load immediately, so we can poll until it appears.
        */
        var check_for_attachment_block = function(){
          var attachmentBox = $(".GW", composeContainer);
          if (attachmentBox.length > 0){
            var attachmentBoxBottom = parseInt(attachmentBox.css("bottom"), 10);
            if (attachmentBoxBottom){
              attachmentBox.css("bottom", (attachmentBoxBottom + SEND_LATER_TABLE_ROW_HEIGHT).toString() + "px");
            }
            else{
              attachmentBox.css("bottom", SEND_LATER_TABLE_ROW_HEIGHT.toString() + "px");
            }
          }
          else{
            setTimeout(check_for_attachment_block, 2000);
          }
        };
        check_for_attachment_block();
      }


      $(".send-later-button", composeContainer).click(function(e){
        compose_dialog_toggle_send_later_menu(e, this, true);
      });

      $(".sendboomerang-button", composeContainer).click(function(e){
        compose_dialog_toggle_send_boomerang_menu(e, this, true);
      });

      if (can_use_bcal()) {
        $(".b4g-bcal-features-button", composeContainer).click(function(e){
          // TODO: fix placement when scrolling in thread and calendar features button is at the very bottom of the screen
          var self = this;
          if ($("#bcal_features_menu").not('.bcal-thread-view-features-menu').length > 0) {
            close_bcal_features_menu();
            return;
          }
          call_function_after_calendar_login(function(){
            compose_dialog_toggle_bcal_features_menu(null, self, true);
          }, $.noop, composeContainer, true);
        });

        // Special behavior to get UI to fit in tiny compose
        adjust_send_later_bar_ui_for_tiny_compose(composeContainer);
      }

      $('.boomerangSendCondition',composeContainer).change(function() {
        $('.boomerangSendCheck',composeContainer).attr("checked", true);
        var chosenOption = $(this).val();
        track_event(['Send and Boomerang', "Change 'if i don't hear back' field", chosenOption ]);
        if (chosenOption === "no click" || chosenOption === "no open"){
          if (!email_tracking_is_turned_on(composeContainer)){
            var $trackingToggle = $(".b4g-tracking-toggle", composeContainer);
            $trackingToggle.trigger("b4g-toggle-state");
          }
        }
        check_authentication_for_send_boomerang_checkbox(composeContainer);
      });

      try{
        create_tracking_toggle(composeContainer);
      }
      catch(e){
        //console.log(e);
      }

      // wire up event handler for each send button
      // sendButtons includes both Send and Send&Archive button
      var sendButtons = get_the_send_buttons(composeContainer);
      var scheduledSendButtons = get_the_scheduled_send_button(composeContainer);

      var boomerang_on_send_handler = function(){
        var boomerangOnSendCheckboxIsChecked = $('.boomerangSendCheck',composeContainer).is(":checked");
        var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
        if (boomerangOnSendCheckboxIsChecked){

          var params = compose_dialog_build_send_and_boomerang_params(composeContainer);
          if (which_gmail() === OLD_GMAIL) {
            var baseUrl = "https://b4g.baydin.com/mailcruncher/schedulereturndelay";
            var url = generate_url_with(baseUrl, params);
            send_image_request(url, function(b4gStatus, url, successMessage) {
              if (is_nag_status(b4gStatus) || b4gStatus === PAYWALL)
              {
                nag_screen(b4gStatus);
                inline_manage.expire_cache();
              }

              else if (b4gStatus !== SUCCESS)
              {
                show_dialog("Your most recent Boomerang-on-Send failed. To Boomerang your sent email, please open your message in 'Sent Mail' and Boomerang the message manually. <br/><br/> Error Details:<br/> " + POSSIBLE_RESPONSES[b4gStatus]);
              }
              else if(b4gStatus === SUCCESS)
              {
                show_viral_hook_if_appropriate({ type: "return-later" });
                inline_manage.expire_cache();
              }
            }, "success");
          }
          else {
            var url = "https://b4g.baydin.com/gmailmigration/boomerangfromdraft";
            $.ajax({
              type: "POST",
              url: url,
              data: params,
              xhr: xhr_with_credentials,
              success: function(response) {
                handle_boomerang_on_send_response_new_ui(response);
              }
            });
          }
        }
        else if (trackingCheckboxIsChecked){
          saveTrackedEmail(composeContainer);
        }
      };
      sendButtons
        .click(boomerang_on_send_handler)
        .keydown(function(e) {
          if (e.which === 32 || e.which === 13){
            boomerang_on_send_handler();
          }
        })
      ;
      var boomerang_on_scheduled_send_handler = function() {
        var boomerangOnSendCheckboxIsChecked = $('.boomerangSendCheck',composeContainer).is(":checked");
        var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
        if (boomerangOnSendCheckboxIsChecked || trackingCheckboxIsChecked) {
          scheduledSendButtons.each(simulate_click);
          var send_later_button_png = B4G_STATIC_FILES_DIRECTORY + "send-later-button.png";
          var warning_png = B4G_STATIC_FILES_DIRECTORY + "warning.png";
          var message = "<p style='padding-top: 15px; font-size: 18px; font-weight: bold; margin: 0px 55px; color:#444;'><img style='position: absolute; left:40px; width: 23px;' src='" + warning_png + "'>Using Gmail's Schedule Send will disable all Boomerang features on this message.</p>" +
           "<p style='font-size: 14px; color:#444; margin: 0px 55px;'>Instead, please use Boomerang's <img class='b4g-send-later-button-img' style='position: relative; top: 16px; width: 93px;' src='" + send_later_button_png + "'> to schedule this message.</p>";
          var title = "Boomerang for Gmail";
          var buttons = {
            "Okay": {
                text: "OK, I'll use Send Later",
                "class": "b4g-button blue scheduled-send-ok",
                click: function() { 
                  $(this).dialog("destroy");
                  $(".send-later-button", composeContainer).click();
                  track_event(["gmail scheduled send dialog", "ok"]);
                }
            },
            "Disable": {
                text: "Disable Boomerang features on this message",
                "class": "b4g-button dialog-gray scheduled-send-disable",
                click: function() { 
                  if (boomerangOnSendCheckboxIsChecked) {
                    $('.boomerangSendCheck',composeContainer).attr("checked", false);
                  }
                  if (trackingCheckboxIsChecked) {
                    var $trackingToggle = $(".b4g-tracking-toggle", composeContainer);
                    $trackingToggle.trigger("b4g-toggle-state");
                  }
                  $(this).dialog("destroy");
                  track_event(["gmail scheduled send dialog", "disable"]);
                }
            }
          };
          var opts = {
            width: 550,
            dialogClass: ""
          }
          show_dialog(message, title, buttons, opts);
          track_event(["gmail scheduled send dialog", "show"]);
          $(".scheduled-send-ok,.scheduled-send-disable").css({
            "display": "block", 
            "margin": "10px auto",
            "width": "400px",
            "height": "30px",
          });
          $(".b4g-ui-dialog-buttonpane").css({"text-align": "center", "padding-bottom": "35px"});
          // If the user clicks the Send Later button image, programatically click the dialog's OK button
          var $sendLaterImg = $('.b4g-send-later-button-img');
          $sendLaterImg.click(function() {
            $('.scheduled-send-ok').click();
          });
        }
      };
      scheduledSendButtons
        .click(boomerang_on_scheduled_send_handler)
        .keydown(function(e) {
          if (e.which === 32 || e.which === 13){
            boomerang_on_scheduled_send_handler();
          }
        })
      ;

      if (!isEmailThread && is_pop_out_window()){
        $(".Am.Al", composeContainer).focus(); // force Gmail to resize this compose window
        setTimeout(function(){$(".aoD.hl", composeContainer).focus();}, 100); // return the cursor to default location
        // If we're coming from the "boomerang-the-web" Chrome button, we should populate the to: header
        if (_params["boomerangtheweb"]){
          var $to = $(".anm[name='to'] .agP.aFw, .anm[name='to'] .agP.aFx");
          var recipient = get_gmail_user();
          if ($to.length == 0) { // old path
            $to = composeContainer.find("*[name='to']");
          }
          $to.val(recipient);
        }
      }

      // wire up the checkbox for user authentication
      $('.boomerangSendCheck',composeContainer).click(function(){
        check_authentication_for_send_boomerang_checkbox(composeContainer);
      });
      $('.boomerangSendCheck', composeContainer).change(function() {

        if ($(this).is(":checked")) {
          $(this).closest('.boomerangSendWidget').addClass('boomerangTrackingEnabled');
        } else {
          $(this).closest('.boomerangSendWidget').removeClass('boomerangTrackingEnabled');
        }
      });

      enable_sticky_send_and_boomerang_settings(composeContainer);

      keyboard_shortcuts.add_compose_listen(composeContainer);
      if(can_use_bcal()) {
        if(GimmeBetaActivated && !GimmeBetaFtueSeen) {
          // TODO: (steve) I think this code path is not used and can be removed
          GimmeBetaFtueSeen = true;
          close_b4g_menu();
          show_calendar_ftue(composeContainer);
        }
      }
    }
    _make_responsive_adjustments(composeContainer);

    var now = new Date();
    var $bcalFeaturesButton = $(".b4g-bcal-features-button", composeContainer);
    if (openingShareFreeBusyFromThreadViewMenu) {
      if (now-timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen > 1000) {
        timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen = new Date();
        openingShareFreeBusyFromThreadViewMenu = false;
        $bcalFeaturesButton.addClass('b4g-opening-share-free-busy-from-thread-view');
        $bcalFeaturesButton.click();
      }
    } else if (openingSuggestTimesFromThreadViewMenu) {
      if (now-timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen > 1000) {
        timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen = new Date();
        openingSuggestTimesFromThreadViewMenu = false;
        $bcalFeaturesButton.addClass('b4g-opening-suggest-times-from-thread-view');
        $bcalFeaturesButton.click();
      }
    } else if (openingBookableFromThreadViewMenu) {
      if (now-timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen > 1000) {
        timeOfLastShareFreeBusyOrSuggestTimesOrBookableThreadViewOpen = new Date();
        openingBookableFromThreadViewMenu = false;
        $bcalFeaturesButton.addClass('b4g-opening-bookable-from-thread-view');
        $bcalFeaturesButton.click();  
      }
    }
  }
}

function add_magic_link()
{
  var frameDoc = get_frame();
  var existingMagicUI = $(".b4g-magic", frameDoc);
  var insertionArea = $(".nH.V8djrc.byY", frameDoc);

  if (which_gmail() !== NEW_GMAIL) {
    var boomerangLabels = $(".cf.hX:contains('Boomerang')", frameDoc);
  } else {
    // New Gmail UI placed the labels in a different selector
    // check if the highlighted label on the left contains the word "Boomerang"
    var leftPanel = get_new_gmail_left_panel();
    var boomerangLabels = $(".aim.ain:contains('Boomerang')", leftPanel);
  }

  if(existingMagicUI.length > 0 || boomerangLabels.length>0 || insertionArea.length == 0)
  {
    return;
  }
  // Build our By Magic link
  var childElement = $(".nH.V8djrc.byY", frameDoc).after("<div id='gm-boomerang-magic'></div>");
  var byMagicUI = $("#gm-boomerang-magic", frameDoc);
  // Prevent multiple voodoos from running by inserting a dummy .b4g-magic early
  // This doesn't actually seem to a problem with setInterval, but there doesn't seem to be a harm in including it anyway.
  byMagicUI.html("<span class='b4g-magic' style='display:none'></span>");

  // Use Magic
  var suggestions = [];
  var hasTime = false;
  var sourceGmailId = "";
  var sources = grab_inbox_conversation_text();
  for (var i = 0; i < sources.length; i++) {
    var source = sources[i];
    var sourceText = source["subject"] + " " + source["text"];
    sourceGmailID = source["gmailId"];
    var suggestionsData = voodoo(sourceText, source["emailDate"], 6); 
    suggestions = suggestionsData["suggestions"];
    hasTime = suggestionsData["hasTime"];
    if (suggestions.length > 0) {
      break;
    }
  }
  if(suggestions.length > 0)
  {
    var timeCaption = "";
    var returnDate = new Date(suggestions[0]);
    if (hasTime)
    {
      timeCaption = "2 hours before";
      returnDate= returnDate.addHours(-2);
    }
    else
    {
      timeCaption = "1 day before";
      returnDate= returnDate.addDays(-1);
    }

    if (returnDate > new Date())
    {
      var magicTime = suggestions[0];

      var magicOptions = "";
      if (can_use_bcal()) {
        magicOptions = " <img class='f' src='" + B4G_STATIC_FILES_DIRECTORY + "ico_boomerang_colors-32@2x.png' style='margin: 1px 0px -1px 0px; vertical-align: middle;'/>";
        magicOptions += "<div class='b4g-magic-text-wrapper-div b4g-magic-date-found-txt'>Return to Inbox?</div>";
        magicOptions += "<div id='b4g-magic-caption'><span id='b4g-magic-input'>2 hours before</span><img src='https://b4g.baydin.com/site_media/bookmarklet/down.png' width='10px' style='opacity:.7;vertical-align:middle;margin:-2px 0px 0px 5px;'></div>";
        var dateDisplay = magicTime.toString("ddd, MMM d yyyy");
        var timeDisplay = magicTime.toString("h:mmtt");
        if (magicTime.getFullYear() == new Date().getFullYear()) {
          dateDisplay = magicTime.toString("ddd, MMM d");
        }
        if (magicTime.getMinutes() == 0) {
          timeDisplay = magicTime.toString("htt");
        }
        if (hasTime) {
          magicOptions +="<div class='b4g-magic-text-wrapper-div b4g-magic-time-wrapper'><strong> " + dateDisplay + ", " + timeDisplay +"</strong></div> ";
        } else {
          magicTime.setHours(9);
          magicTime.setMinutes(0);
          magicOptions +="<div class='b4g-magic-text-wrapper-div b4g-magic-time-wrapper'><strong> " + dateDisplay + "</strong></div> ";
        }
      } else {
        magicOptions = " <img class='f' src='" + B4G_STATIC_FILES_DIRECTORY + "tinyboomlogo.png' style='margin: 1px 0px -1px 0px; vertical-align: middle;'/> Boomerang this? ";

        magicOptions += "<select style='padding: 1px  0;line-height: 12px;' name='b4g-magic-choice' id='b4g-magic-choice' >" +
                "<option value='the week before'>the week before</option>" +
                "<option value='the day before'>the day before</option>" +
                "<option value='the morning of'>the morning of</option>" +
                "<option value='2 hours before'>2 hours before</option>" +
                "<option value='the afternoon of'>the afternoon of</option>" +
                "<option value='the day after'>the day after</option>" +
                "<option value='the week after'>the week after</option>" +
                "</select>";

        magicOptions +="<strong> " + magicTime.toString("MMM d, yyyy") + " " +magicTime.toString("h:mmtt") +"</strong>. ";

      }


      if (can_use_bcal()) {
        var voodooDateAttrString = "";
        if(suggestions.length > 0) {
          var voodooDate = new Date(suggestions[0]);
          voodooDateAttrString = "b4g-voodoo-date='" + String(voodooDate.getTime()) + "'";
        }

        magicOptions += "<input type='submit' id='b4g-confirm-magic' value='Confirm'/>";
        magicOptions += "</div>";
        magicOptions += "<div class='b4g-magic' style='font-family: Helvetica, Arial, Sans-serif; font-weight: normal !important; background-color: rgb(218, 231, 241); padding: 8px; font-size: 80%;'>";
        magicOptions += "<div class='b4g-magic-create-event-feature-wrapper'>";
        magicOptions += "<div id='b4g-bcal-create-event-magic-btn' b4g-source-gmail-id='" + sourceGmailID + "' " + voodooDateAttrString + "aria-haspopup='true' style='-webkit-user-select: none; -moz-user-select:none;margin-bottom:0px;margin-top:-2px; outline: none;' role='button' class='T-I J-J5-Ji nf T-I-ax7 L3 gm-boomerang-button-home' tabindex='0'>" +
                          '<div class="b4g-cal-img-container"><svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>ico_addevent</title><g id="Boomerang-UI" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="ico_addevent"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><path d="M17,3 C17.5522847,3 18,3.44771525 18,4 L18,5 L19,5 C20.1045695,5 21,5.8954305 21,7 L21,19 C21,20.1045695 20.1045695,21 19,21 L5,21 C3.8954305,21 3,20.1045695 3,19 L3,7 C3,5.8954305 3.8954305,5 5,5 L6,5 L6,4 C6,3.44771525 6.44771525,3 7,3 C7.55228475,3 8,3.44771525 8,4 L8,5 L16,5 L16,4 C16,3.44771525 16.4477153,3 17,3 Z M19,9 L5,9 L5,19 L19,19 L19,9 Z M15,12 C15.5522847,12 16,12.4477153 16,13 L16,14 L17,14 C17.5522847,14 18,14.4477153 18,15 C18,15.5522847 17.5522847,16 17,16 L16,16 L16,17 C16,17.5522847 15.5522847,18 15,18 C14.4477153,18 14,17.5522847 14,17 L14,16 L13,16 C12.4477153,16 12,15.5522847 12,15 C12,14.4477153 12.4477153,14 13,14 L14,13.999 L14,13 C14,12.4477153 14.4477153,12 15,12 Z" id="Combined-Shape" fill="#737373"></path></g></g></svg></div>' +
                          "<div class='bcal-div-txt-wrapper'>Add event</div>" +
                          "<div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji'> </div>" +
                        "</div>";
        magicOptions += "</div>";
      } else {
        magicOptions += "<input type='submit' id='b4g-confirm-magic' value='Confirm'/>";
      }

      byMagicUI.attr("style", "height: 25px; padding-top: 5px; margin-bottom: 5px; text-align:center;");

      if (can_use_bcal()) {
        byMagicUI.html("<div class='vh boomerang b4g-magic' style='font-family: Helvetica, Arial, Sans-serif; font-weight: normal !important; background-color: rgb(218, 231, 241); padding: 8px; font-size: 80%;'>" + magicOptions + "</div> ");
      } else {
        byMagicUI.html("<span class='vh boomerang b4g-magic' style='font-weight: normal !important; background-color: #FFC; padding: 5px 5px 5px 5px; font-size: 80%; color: rgb(42, 93, 176);'>" + magicOptions + "</span> ");
      }

      if (hasTime){
        $("#b4g-magic-caption #b4g-magic-input").text("2 hours before");
        $("#b4g-magic-choice option[value='2 hours before']", frameDoc).attr('selected', 'selected');
      }
      else{
        $("#b4g-magic-caption #b4g-magic-input").text("the day before");
        $("#b4g-magic-choice option[value='the day before']", frameDoc).attr('selected', 'selected');
      }
      $("#b4g-confirm-magic", frameDoc).click(function(){
        if (can_use_bcal()) {
          var magic_selected = $("#b4g-magic-caption #b4g-magic-input").text();
        } else {
          var magic_selected = $("#b4g-magic-choice", frameDoc).val();
        }
        var morningOffset = BOOMERANG_MORNING_OFFSET;
        var chosen_time = "";
        switch(magic_selected){
          case "the week before":
            chosen_time = new Date(magicTime).clearTime().addDays(-7).addHours(morningOffset);
            break;
          case "the day before":
            chosen_time = new Date(magicTime).clearTime().addDays(-1).addHours(morningOffset);
            break;
          case "the morning of":
            chosen_time = new Date(magicTime).clearTime().addHours(morningOffset);
            break;
          case "2 hours before":
            chosen_time = new Date(magicTime).addHours(-2);
            break;
          case "the afternoon of":
            chosen_time = new Date(magicTime).clearTime().addHours(12);
            break;
          case "the day after":
            chosen_time = new Date(magicTime).clearTime().addDays(1).addHours(morningOffset);
            break;
          case "the week after":
            chosen_time = new Date(magicTime).clearTime().addDays(7).addHours(morningOffset);
            break;
          default:
            chosen_time = new Date(magicTime).addHours(-2);
        }

        //Show Processing Wheel
        if (can_use_bcal()) {
          byMagicUI.attr("style","height: 32px; list-style-type:none;padding: 0px 5px 5px 5px;text-align:center;display:flex;");
          byMagicUI.html("<img class='b4g-magic' src='" + B4G_STATIC_FILES_DIRECTORY + "b4gloading.gif' alt='Loading...' style='margin:auto;'>");
        } else {
          byMagicUI.attr("style","height: 32px; list-style-type:none;padding: 0px 5px 5px 5px;text-align:center;");
          byMagicUI.html("<img class='b4g-magic' src='" + B4G_STATIC_FILES_DIRECTORY + "b4gloading.gif' alt='Loading...'>");
        }
        b4g_time_clicked(chosen_time, { isByMagic: true });
        track_event([ "magic link", "click", magic_selected ]);
      });

      if (can_use_bcal()) {
        $("#b4g-magic-caption").click(function(){open_bcal_confirm_magic_menu(magicTime)});
        $('#b4g-bcal-create-event-magic-btn').click(function(event) {
          var target = $(event.target).closest('#b4g-bcal-create-event-magic-btn').get(0);

          // TODO: Test if this Safari special-case flow is necessary and makes sense
          // We can't pop-up directly because of Safari's default pop-up blocker
          if (browser_name === "Safari" || browser_name === "Old Safari") {
            display_magic_create_event_dialog(target);
            track_event([ "bcal", "create-event-from-magic" ]);
          } else {
            call_function_after_calendar_login(function(){
              display_magic_create_event_dialog(target);
              track_event([ "bcal", "create-event-from-magic" ]);
            }, false, null, false, true);
          }
          // TODO: should we not allow multiple dialogs to be opened from one thread?
        });

        byMagicUI.addClass('b4g-bcal-new-magic-styling');

        // Initialize custom select elements
        $('.bcal-custom-select', byMagicUI).each(function(idx, el) {
          initializeCustomBCalSelectElement($(el));
        });
      }
    } else {
      byMagicUI.html("<span class='vh boomerang b4g-magic' style='display:none'></span>");
      if(which_gmail() === NEW_GMAIL) {
        byMagicUI.hide();
      }
    }
  }
  else // no date detected
  {
    byMagicUI.html("<span class='vh boomerang b4g-magic' style='display:none'></span>");
    if(which_gmail() === NEW_GMAIL) {
        byMagicUI.hide();
    }
  }
}

function open_bcal_confirm_magic_menu(magicTime) {
    var opened_menu = $(".b4g_manage_dropdown", frameDoc);
    if (opened_menu.length > 0){
      $(opened_menu).remove();
      return;
    }
    var manageLinks =
    "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the week before</span><span class='b4g-magic-time'></span></li>"+
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the day before</span><span class='b4g-magic-time'></span></li>"+
    "</ul>" +
    "<div style='padding:0px 0px!important'>" +
        '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
    "</div>" + 
    "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the morning of</span><span class='b4g-magic-time'></span></li>"+
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>2 hours before</span><span class='b4g-magic-time'></span></li>"+
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the afternoon of</span><span class='b4g-magic-time'></span></li>"+
    "</ul>" +
    "<div style='padding:0px 0px!important'>" +
        '<div style="border-top-style: solid;border-width: 1px;border-color: #ccc;"></div>' + 
    "</div>" +
    "<ul style='list-style-type: none; line-height: 1.8em; padding: 0px 10px; margin-top: 10px; margin-bottom: 10px;'> " +
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the day after</span><span class='b4g-magic-time'></span></li>"+
        "<li class='b4g-magic-option'><span class='b4g-magic-menu-caption'>the week after</span><span class='b4g-magic-time'></span></li>"+
    "</ul>";
    var divClasses = "J-M J-M-ayU aka gm-manage-boomerang";
    var top_menu = $('<div class="b4g_manage_dropdown manage_menu ' + divClasses + '" style="' + 'display: block; width:200px; margin-left:-5px; background: #fff; border: 1px solid #ccc; border-color: rgba(0,0,0,.2); overflow: hidden; position: absolute; right: 0; top: 44px; -webkit-animation: gb__a .2s; animation: gb__a .2s; -webkit-border-radius: 2px; border-radius: 2px; -webkit-user-select: text; ">' + 
        manageLinks +
      '</div>' 
      );
    var boomerang_offset = $("#b4g-magic-caption").offset();
    top_menu.css({
        top: boomerang_offset.top - 16 + "px",
        left: boomerang_offset.left - 40 + "px",
        position: "fixed"
    });
    $("#b4g-magic-caption").after(top_menu);
    $(".b4g-magic-option").each(function(){
      var $this = $(this)
      var caption = $this.find(".b4g-magic-menu-caption").text();
      var timeDisplay = $this.find(".b4g-magic-time");
      var preview = "";
      var morningOffset = BOOMERANG_MORNING_OFFSET;
      switch(caption){
        case "the week before":
          preview = new Date(magicTime).clearTime().addDays(-7).addHours(morningOffset).toString("ddd, M/d");
          break;
        case "the day before":
          preview = new Date(magicTime).clearTime().addDays(-1).addHours(morningOffset).toString("ddd, M/d");
          break;
        case "the morning of":
          preview = new Date(magicTime).clearTime().addHours(morningOffset).toString("h:mm tt");
          break;
        case "2 hours before":
          preview = new Date(magicTime).addHours(-2).toString("h:mm tt");
          break;
        case "the afternoon of":
          preview = new Date(magicTime).clearTime().addHours(12).toString("h:mm tt");
          break;
        case "the day after":
          preview = new Date(magicTime).clearTime().addDays(1).addHours(morningOffset).toString("ddd, M/d");
          break;
        case "the week after":
          preview = new Date(magicTime).clearTime().addDays(7).addHours(morningOffset).toString("ddd, M/d");
          break;
        default:
          preview = new Date(magicTime).addHours(-2).toString("ddd, M/d");
      }
      timeDisplay.text(preview);
    });

    $(".b4g-magic-option").click(function(){
      var $this = $(this);
      var text = $this.find(".b4g-magic-menu-caption").text();
      $("#b4g-magic-caption #b4g-magic-input").text(text)
      $(document).click(); // close menu
    })
    $(document).click(function closeManageMenu(e){
          var target = get_target(e);
          if ($(target).parents().andSelf().filter(".b4g_manage_dropdown,#b4g-magic-caption").length === 0)
          {
            $(top_menu).remove();
            $(frameDoc).unbind('click', closeManageMenu);
          }
    });
}



function display_magic_create_event_dialog(target, openedFromReplyOrBoomerangButton) {
  var $createEventBtn = $(target);

  var guser = get_gmail_user();

  var createEventPageURL = "https://b4g.baydin.com/calendar/createeventpage";

  var dialogWidth = 1240;
  var dialogHeight = 800;

  var top = 0;
  var left = 0;
  // Dimension setting code taken from unauthenticated_flow function for auth dialog (but with increas):
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }


  // Setup URL params:
  var createEventWindowOpenTimestamp = Date.now();  // Used to make sure we only act on messages from correct dialog
  var gmailId = $createEventBtn.attr("b4g-source-gmail-id");

  var createEventDialogURL = createEventPageURL +
    '?openTimestamp=' + createEventWindowOpenTimestamp +
    '&guser=' + guser +
    '&gmailId=' + encodeURIComponent(gmailId);

  var $magicCreateEventBtn = $('#b4g-bcal-create-event-magic-btn');
  var voodooDate;
  var hasMagicDate = false;
  if ($magicCreateEventBtn.length > 0) {
    var voodooDate = $magicCreateEventBtn.attr("b4g-voodoo-date");
    if (voodooDate) {
      createEventDialogURL += '&magicDate=' + voodooDate;
      hasMagicDate = true;
    }
  }

  if (openedFromReplyOrBoomerangButton && !hasMagicDate) {
    createEventDialogURL += "&createNewEvent=true";
  }

  var createEventWindow = window.open(createEventDialogURL, "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);
  var previousThreadId =  get_boomerang_thread_id();

  var checkForNavigateAway = setInterval(function() {
    // check for a different threadId and notify the new window if so
    var newThreadId = get_boomerang_thread_id()
    if (!createEventWindow.closed) {
      if (newThreadId != previousThreadId) {
        createEventWindow.postMessage("navigated_away", "https://b4g.baydin.com");
        clearInterval(checkForNavigateAway);
      }
    } else {
      clearInterval(checkForNavigateAway);
    }
  }, 1000)

  var handleCreateEventWindowEvent = function(event) {
    if (event.origin != 'https://b4g.baydin.com') {
      // Reject messages from unexpected domains
      return;
    }
    if (event.data.createEventWindowOpenTimestamp !== createEventWindowOpenTimestamp) {
      // Reject messages from other create event dialogs that may be open
      return
    }

    var data = event.data;
    if (data.status === "suggestOthers") {
      // Suggest Others button was clicked
      window.removeEventListener("message", handleCreateEventWindowEvent);
      var currentThreadId = get_boomerang_thread_id();
      // Still on the same thread
      if (currentThreadId == previousThreadId) {
        var replyButtons =$(".ams.bkH").last();
        if (replyButtons.length > 0) {
          replyButtons[0].click();
        }

        // Wait one second to allow Gmail to load the draft
        setTimeout(function(){
          var $composeContainer = get_compose_container($(".HE").last())
          var $composeTextBody = get_compose_text_body($composeContainer);
          $composeTextBody.focus();
          var selection = document.getSelection();
          var range;
          if (selection === null || !$.contains($composeContainer, $(selection.anchorNode))) {
            // We either didn't get a selection or the selection wasn't in the compose container.
            // This is not expected to happen - since we focused on the $composeTextBody we should get the selection of the correct compose container.
            // Fallback behavior - we'll insert content at the end of the current email:
            // TODO: this case: what should we do if anything? if we couldn't focus on the $composeTextBody we shouldn't be able to here as well
          } else {
            range = selection.getRangeAt(0);
          }
          $composeTextBody.blur();
          display_suggest_times_screen($composeTextBody, range);
        }, 1000);
      }
    } else if (data.status === "boomerang") {
        window.removeEventListener("message", handleCreateEventWindowEvent);
        var readableDate = make_readable_date(new Date(data.returnTimestamp), false)
        var returnMessage = "Message will return " + readableDate + ". ";

        hijack_gmail_notification(returnMessage, 5000);
    } else {
      // TODO: what do we do here? alerting for now
      alert('There was an issue with Suggest Other Times')
    }
  }

  window.addEventListener("message", handleCreateEventWindowEvent);
}

/**
 * 6a. Shared Menu Functions
 */

function b4g_menu_frameDoc_click_handler(e)
{
  var frameDoc = get_frame();
  var target = get_target(e);

  // Do nothing if we click the menu itself, or any of the other menu options
  if(
    target.className.indexOf("ui") !== 0 &&
    target.className.indexOf("f") !== 0 &&
    target.className.indexOf("VP5otc-d2fWKd") === -1 &&
    target.className.indexOf("menu-anchor") === -1 &&
    target.className.indexOf("b4g_menu") === -1 &&
    target.className.indexOf("menu-caption") === -1 &&
    target.className.indexOf("send-later-button") === -1 &&
    target.className.indexOf("boomerang-button") === -1 &&
    target.className.indexOf("sendboomerang-button") === -1 &&
    target.className.indexOf("conditional-caption") === -1 &&
    target.className.indexOf("conditional-caption-text") === -1 &&
    target.className.indexOf("overlay") === -1 &&
    target.className.indexOf("ge-btn") === -1 && // Extension conflict: grexit triggers 'ge-btn' click events on every document.body click for some reason, so ignore those
    $(target).closest(".b4g-ui-datepicker,.b4g_menu,.b4g-ui-corner-all,.boomerang-button").length === 0
  ) {
    var composeContainer = get_compose_container(e.data.owner, null);
    // If composeContainer is null, we're using boomerang from inbox and don't want to run is_allowed_boomerang_on_send_label_click_in_tiny_compose
    if (composeContainer && is_allowed_boomerang_on_send_label_click_in_tiny_compose(target, e.data.owner)) {
      return;
    }

    close_b4g_menu(e, e.data.owner);
    $(frameDoc).unbind('click', b4g_menu_frameDoc_click_handler);
  }
}

function close_b4g_menu(e, owner)
{
  $("#b4g_menu").remove();
  //Remove "clicked" style from button
  if (owner) {
    $("div", owner).removeClass("T-I-Kq");
  }
}


function bind_datepicker(inputBox)
{
  inputBox.datepicker({
    showOn: "button",
    buttonImage: B4G_STATIC_FILES_DIRECTORY + "calendarpicker_17x15.png",
    buttonImageOnly: true,
    constrainInput: false,
    dateFormat: "m/dd/yy",
    minDate: 0,
    onSelect: function(dateText, inst){
      var thisInputBox = inputBox;
      var timeStr = new Date().toString("hh:mm tt");
      thisInputBox.val(thisInputBox.val() + " " + timeStr);
      track_event([ "boomerang menu", "select custom time", thisInputBox.val() ]);
    },
    onClose: function(dateText, inst){inputBox.focus();}
  });
  $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-left","5px");
  $(".b4g-ui-datepicker-trigger", frameDoc).css("vertical-align","middle");
  if(which_gmail() === NEW_GMAIL) {
    $("#b4g-ui-datepicker-div").addClass("gm-datepicker");
  }
}

var GimmeBetaActivated = false; // for triggering ftue
var GimmeBetaFtueSeen = false; // prevent duplicate views
function update_date_preview (input) {
  if (input.toLowerCase() == "bookme" || input.toLowerCase() == "producthunt") {
    write_to_html5_storage("b4g_bookable_calendar_enabled", "true");
    write_to_html5_storage("b4g_bookable_typed_book_me", "true");
    write_to_html5_storage("b4g-has-seen-bookable-announcement", "false");
    $("#datepicker").val("");
    on_gmail_loaded();
    $('.sendLaterTable, #gm-boomerang-magic, .gm-send-later-space').remove();
    $(".email-meter").removeClass("email-meter").removeData("emailMeterGauge");
    $("#date-preview", frameDoc).html("<span class='b4g_menu'>" + "Beta program enabled!" + "</span>");
    close_b4g_menu();
    adjust_b4g_menu_height();
    track_event([ "enable_bookable", "beta_enabled"]);
    return;
  } else if (input == "goawaybeta") {
    write_to_html5_storage("b4g_bookable_calendar_enabled", "false");
    $("#datepicker").val("");
    on_gmail_loaded();
    $('.sendLaterTable, #gm-boomerang-magic, .gm-send-later-space').remove();
    $(".email-meter").removeClass("email-meter").removeData("emailMeterGauge");
    $("#date-preview", frameDoc).html("<span class='b4g_menu'>" + "Beta program disabled!" + "</span>");
    adjust_b4g_menu_height();
    return;
  }

  var frameDoc = get_frame();
  if(!input) { return; }

  the_date = parse_date(input);
  var readableDate = make_readable_date(the_date, true);

  if(the_date == null)
  {
    //Red: Invalid date
    $("#date-preview", frameDoc).html("<span class='b4g_menu' style='color:#ff0000;'>" + readableDate + "</span>");
  }
  else if(the_date < new Date())
  {
    //Red: Date in the past
    $("#date-preview", frameDoc).html("<span class='b4g_menu' style='color:#ff0000;'>" + readableDate + "</span>");
  }
  else
  {
    //Green: Valid date
    $("#date-preview", frameDoc).html("<span class='b4g_menu'>" + readableDate + "</span>");
  }
  adjust_b4g_menu_height();
}

function prevent_form_submit($form) {
  // prevent invalid form entries from refreshing the page
  $form.submit(function(e) {
    e.preventDefault();
  });
}

/**
 * Creates a menu item for use in the boomerang menu.
 * @param itemTxt The text of the menu item
 * @param delegate The callback function that handles a click on the menu item
 * @param classes A string representing additional classes to add to the <li>
 * @param styles A string representing additional styles to add to the <li>
 * @param divideBelow A boolean value; if true, a divider is placed below the menu item
 * @return The menu item as a DOM element
 */
function build_b4g_menu_item(itemTxt, divideBelow)
{
  var a = '<a href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding: 3px 11px;display:block;cursor:pointer;" class="b4g_menu_item menu-anchor J-N">'+ itemTxt +'</a>';
  var menuItem = '<div class="b4g-menu-option">'+ a +'</div>';

  if(divideBelow) {
    menuItem += '<div class="b4g-menu-divider" style="height:1px;margin:6px 11px;background:#ddd;"></div>';
  }
  
  return menuItem;
}

function build_custom_b4g_menu_item(itemTxt, callback)
{
  var a = '<a href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding: 3px 11px;display:block;cursor:pointer;" class="b4g-custom-menu-item menu-anchor J-N">'+ itemTxt +'</a>';
  var menuItem = '<div class="b4g-menu-option">'+ a +'</div>';

  return menuItem;
}

function add_dividers_to_default_menu_items(frame) {

  var lastHourItem = $(".b4g_menu_item:contains('hour'):last", frame);
  lastHourItem.parent().after('<div class="b4g-menu-divider" style="height:1px;margin:6px 11px;background:#ddd;"></div>');

  var lastTomorrowItem = $(".b4g_menu_item:contains('Tomorrow'):last", frame);
  lastTomorrowItem.parent().after('<div class="b4g-menu-divider" style="height:1px;margin:6px 11px;background:#ddd;"></div>');

  var lastDaysOrLongerItem = $(".b4g_menu_item:contains('days'),.b4g_menu_item:contains('week'),.b4g_menu_item:contains('month')").last();
  lastDaysOrLongerItem = $(lastDaysOrLongerItem, frame);
  lastDaysOrLongerItem.parent().after('<div class="b4g-menu-divider" style="height:1px;margin:6px 11px;background:#ddd;"></div>');
}

function add_dividers_to_custom_menu_items(frame) {
  var lastCustomItem = $(".b4g-custom-menu-item:last", frame);
  lastCustomItem.parent().after('<div class="b4g-menu-divider" style="height:1px;margin:6px 11px;background:#ddd;"></div>');
}

/**
 * Handles a click on the "Random Time" button of the Boomerang / Send Later menu, showing additional options.
 * @param that The element that generated the click event
 * @param b4gMenu The Boomerang / Send Later menu
 */
function random_time_open(that, b4gMenu)
{
  $(".random", b4gMenu).show();
  that.html('<span style="vertical-align:bottom;margin-left:0px;">Random time</span><img src="'+B4G_STATIC_FILES_DIRECTORY+'up.png" width="10px" style="opacity:.7;vertical-align:middle;margin:-2px 0px 0px 5px;"/>');
}

/**
 * Handles a click on the "Random Time" button of the Boomerang / Send Later menu, hiding additional options.
 * @param that The element that generated the click event
 * @param b4gMenu The Boomerang / Send Later menu
 */
function random_time_close(that, b4gMenu)
{
  $(".random", b4gMenu).hide();
  that.html('<span style="vertical-align:bottom;margin-left:0px;">Random time</span><img src="'+B4G_STATIC_FILES_DIRECTORY+'down.png" width="10px" style="opacity:.7;vertical-align:middle;margin:-2px 0px 0px 5px;"/>');
}



/**
 * Modifies the Boomerang/Send Later menu to show a "Processing..." notification during AJAX calls
 * @remarks The Boomerang or Send Later menu must be opened for this to work.
 */
function show_processing_notification()
{
  var frameDoc = get_frame();
  var b4gMenu = $("#b4g_inner_menu", frameDoc);
  if (b4gMenu.length > 0) // If the menu is open
  {
    b4gMenu.empty();
    $(".b4g-ui-datepicker").css("display", "none");

    b4gMenu.append('<li style="list-style-type:none;text-align:center;padding:15px 2px;margin:0px 0px;">Processing message...</li>');
    b4gMenu.append('<li style="list-style-type:none;padding:0px 10px 15px 10px;text-align:center;"><img src="' + B4G_STATIC_FILES_DIRECTORY + 'b4gloading.gif" alt="Loading..."></li>');

    adjust_b4g_menu_height();
  }
}


/**
 * Add hover text to show the absolute datetime for a relative datetime.
 * For example, adds a tooltip of "3 pm" to a menu with text "In 1 hour".
 *
 * @param elem The jQuery elem where the tooltip should be added.
 * @param morningOffset The number of hours after midnight to interpret as
 * "morning". See caption_to_return_time.
 */
function add_resolved_time_hover_text(elem, morningOffset)
{
    elem.hover(
        function()
        {
            var resolvedDate = null;
            var originalDate = caption_to_return_time(
                    $(this).text(), morningOffset, false);

            // Handle cases where the time is randomized after clicking.
            switch($(this).text().toLowerCase())
            {
            // Use approximate times for morning/afternoon.
            case "monday morning":
            case "tomorrow morning":
            case "tomorrow afternoon":
                var approxDate = make_readable_date_portion(
                        originalDate, true);
                var approxTime = make_readable_time(originalDate, true);
                resolvedDate = approxDate + ", around " + approxTime;
                break;

            // The "Random times" strings have generic text.
            case "- by 5pm today":
            case "by 5pm today":
                resolvedDate = "At a random time before 5pm today";
                break;
            case "- within 1 week":
            case "within 1 week":
                resolvedDate = "At a random time within 1 week";
                break;
            case "- within 1 month":
            case "within 1 month":
                resolvedDate = "At a random time within 1 month";
                break;
            case "- within 1 year":
            case "within 1 year":
                resolvedDate = "At a random time within 1 year";
                break;
            default:
                resolvedDate = make_readable_date(originalDate, true);
            }
            if (resolvedDate == null)
            {
                // There was an error determining the date, so hide the
                // tooltip.
                resolvedDate = "";
            }
            $(this).attr("title", resolvedDate);
        },
        function()
        {
            $(this).attr("title", "");
        }
    );
}

function adjust_b4g_menu_height(){
  adjust_outer_menu_height("b4g_inner_menu", "b4g_menu");
}

function adjust_outer_menu_height(innerMenuId, outerMenuId)
{
  try
  {
    var frameDoc = get_frame();
    var innerMenu = $("#" + innerMenuId, frameDoc);
    var outerMenu = $("#" + outerMenuId, frameDoc);
    var height = innerMenu.height();
    outerMenu.css("min-height", innerMenu.height() + "px");
  }
  catch(err){}
}


/*
 * 6b. Menu Customization
 */

var MENU_ITEMS_LIMIT = 15;

function get_count_of_b4g_menu_items() {
  var customItems = $('#b4g_user_menu_option_list li').length;
  var enabledDefaultItems = $('#b4g-menu-default-times input[type="checkbox"]:checked').length;
  return customItems + enabledDefaultItems;
}

function update_available_slots_message() {
  var currentMenuItemCount = get_count_of_b4g_menu_items();
  var remainingSlotMessage = $('#b4g-used-slot-indicator');
  $('#b4g_current_menu_item_count').text(currentMenuItemCount);
  if (currentMenuItemCount >= 13) {
    remainingSlotMessage.css('visibility', 'visible');
  } else {
    remainingSlotMessage.css('visibility', 'hidden');
  }
}

var OVER_MENU_ITEM_LIMIT_ALERT =("You can only have fifteen total times stored in the menu right now. "+
                "Please remove an existing item to add a new one.");

function show_menu_customization_dialog()
{
  close_b4g_menu();
  var dialogHtmlSource =  "<div id='custom-b4g-container'>" +
                "<div id='customize_b4g_custom_menu_options'>" +
                  "<h3 class='b4g-time-list-title'>Add your own menu item:</h3>" +
                  "<div class='customize_menu_samples'>Examples: Tomorrow 8am, Monday 7am, +15 days, +3 weeks, +6 months, Dec 31</div>" +
                  "<div id='custom_time_input'></div>" +
                  "<ul id='b4g_user_menu_option_list'></ul>" +
                "</div>" +
                "<div id='customize_b4g_default_menu_options'>" +
                  "<h3 class='b4g-time-list-title' style='margin-bottom:4px;'>Default items:</h3>" +
                  "<table id='b4g-menu-default-times'>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 1 hour</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 2 hours</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 4 hours</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>Tomorrow morning</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>Tomorrow afternoon</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 2 days</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 4 days</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 1 week</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 2 weeks</span></td></tr>" +
                    "<tr><td><input class='b4g-default-menu-item-checkbox' type='checkbox' checked /></td>" +
                    "<td><span class='b4g-time-option'>In 1 month</span></td></tr>" +
                  "</table>" +
                "</div>" +
              "</div>";

  var dialogButtons = {
              "Ok": {
                'class': 'b4g-button blue b4g-custom-menu-update-button',
                text: 'Update Menu',
                click: function() {
                  update_menu_customizations();
                  $(this).dialog("destroy");
                },
              },
              "Cancel": {
                'class': 'b4g-button dialog-gray',
                text: 'Cancel',
                click: function() {
                  $(this).dialog("destroy");
                }
              }
            };

  if (browser_name === "Old Safari"){
    alert(message);
    return;
  }
  else
  {
    var frameDoc = get_frame();
    $(".dialogdiv").remove();

    var title = "Customize Boomerang Menu";
    var dialog = "<div class='dialogdiv' id='b4g-customize-menu-dialog' style='display:none;'>"+dialogHtmlSource+"</div>";
    $("body", frameDoc).append($(dialog));

    $(".dialogdiv",frameDoc).dialog($.extend({
      title: title,
      modal: true,
      height: "auto",
      closeOnEscape: true,
      buttons: dialogButtons,
      width: 415
    }));
    fix_all_dialog_links();

    // Add remaining slots indicator
    $('.b4g-ui-dialog-buttonset .b4g-button.blue').before("<span id='b4g-used-slot-indicator'>Using <span id='b4g_current_menu_item_count'>x</span> of 15 available slots</span>");

    if(which_gmail() === NEW_GMAIL) {
        $(".b4g-ui-dialog").addClass("gm-customize-modal");
    }

  }

  var defaultEntries = {};
  var menuState = JSON.parse(read_from_html5_storage("b4g-menu-customizations"));
  if(menuState != null) {
    defaultEntries = menuState["defaultEntries"];
  }

  $("#customize_b4g_default_menu_options .b4g-time-option").parent().parent().each(function() {
    if ($(this).text() in defaultEntries && !defaultEntries[$(this).text()]) {
      $(this).find('input:first').removeAttr('checked');
    }
  });

  // Set up custom times entry form
  var formItem = $("<form autocomplete='off' id='b4g-custom-time-input-form'>" +
    "<input type='text' name='time'/><input type='button' class='by-button by-button-secondary' id='b4g-add-button' style='margin: 3px 0 5px 3px;padding:3px 13px;' value='Add'/>" +
    "<div id='b4g-custom-time-entry-date-preview-div' style='color:#969696; margin-left:3px;'>" +
    "<span id='date-preview' style='color:green'>" +
    "</span></div></form>");

  $("#custom_time_input").replaceWith(formItem);
  var textbox = formItem.find("input[type=text]");

  prevent_form_submit(formItem);

  // Set width of textbox dynamically so that it is as wide as possible while allowing
  // the "Add" button to fit on the same line:
  // TODO: consider using the calc function to set the Add button width
  var inputFormWidth = $('#b4g-custom-time-input-form').outerWidth(true);
  var addButtonWidth = $('#b4g-add-button').outerWidth(true);
  var textboxBorderWidth = parseInt(textbox.css('border-left-width'), 10);
  textboxBorderWidth += parseInt(textbox.css('border-right-width'), 10);
  var textboxMaxWidth = inputFormWidth - addButtonWidth - textboxBorderWidth;
  textbox.outerWidth(textboxMaxWidth);

  textbox.focus().select();
  textbox.keyup(function () {
    update_date_preview($(this).val());
  });
  var allowEnterPress = true;
  function resetEnterPressTimer() { // Called after a dialog is brought up after an enter press
    setTimeout(function(){
      allowEnterPress = true;
    }, 500);
  }
  textbox.keydown(function (e) {
    // The use of the allowEnterPress boolean (controlled by resetEnterPressTimer) stops alerts from
    // piling up if a user holds the enter key in firefox while inputing an invalid time.
    // TODO: consider using delay_function here instead
    if (e.keyCode === 13) {
      if (allowEnterPress) {
        allowEnterPress = false;
        $('#b4g-add-button').trigger("click");
      }
    }
  });
  textbox.focus(function () {
    update_date_preview($(this).val());
  });

  // Set the scrollbar cutoff point for the custom items list
  var windowBottom = $(window).height();
  var customTimesTopPosition = $('#b4g_user_menu_option_list').offset().top;
  var buttonset = $('.b4g-ui-dialog-buttonset').first();
  var buttonsetHeight = buttonset.outerHeight();
  var dialogBoxMinGapFromWindowBottom = 20;
  var customTimesBottomPosition = windowBottom - buttonsetHeight - dialogBoxMinGapFromWindowBottom;
  $("#b4g_user_menu_option_list").css('max-height', (customTimesBottomPosition - customTimesTopPosition));

  var customEntries = [];
  if(menuState != null) {
    customEntries = menuState["customEntries"];
  }
  for (var i = 0; i < customEntries.length; i++) {
    append_user_added_time_link(customEntries[i], $("#b4g_user_menu_option_list"));
  }

  update_available_slots_message();

  formItem.find("input[type=button]").click(function() {
    the_date = parse_date(textbox.val());

    var theDateInputString = textbox.val().toLowerCase();
    var customTimeNameStrings = [];
    $('.b4g-custom-time-entry-text').each(function() {
      customTimeNameStrings.push($(this).text().toLowerCase());
    })

    if(the_date == null) {
      alert("Boomerang doesn't understand your date format. Please try again.");
      resetEnterPressTimer();
    }
    else if(the_date < new Date()) {
      alert("This date is in the past. Please try again.");
      resetEnterPressTimer();
    }
    else if(customTimeNameStrings.indexOf(theDateInputString) !== -1) {
      alert("You have already added this custom menu item.");
      resetEnterPressTimer();
    }
    else {
      var currentMenuItemCount = get_count_of_b4g_menu_items(); // makes sure we have the current num of menu items before we see if the user can add another

      if (currentMenuItemCount < MENU_ITEMS_LIMIT) {
        append_user_added_time_link(textbox.val(), $("#b4g_user_menu_option_list"));
        textbox.val("");
        $("#date-preview").html("");
        allowEnterPress = true;

        // Scroll to last added custom time if a scrollbar is needed to display all custom times
        $("#b4g_user_menu_option_list").animate({
          scrollTop: $("#b4g_user_menu_option_list").children("li").last().position().top
        }, 500);
      }
      else {
        alert(OVER_MENU_ITEM_LIMIT_ALERT);
        resetEnterPressTimer();
      }
    }
    update_available_slots_message();
  });

  var outerHeight = $(".dialogdiv").parent().height();
  var windowHeight = $(window).height();
  if (outerHeight > windowHeight) {
    var innerHeight = $("#custom-b4g-container").height();

        $("#custom-b4g-container").height(innerHeight - (outerHeight - windowHeight));
        $("#custom-b4g-container").css({"overflow-y" : "scroll"});
    }

  $(".dialogdiv").dialog({position: "center"});

  track_event([ "Show dialog", "Customize Boomerang Menu"]);

  /***
  This jQuery function listens for the user checking any of the default menu item checkboxes.
  When a user checks an unchecked box, the function will check if there is enough space in the menu for the new item to be added.
  If there is not enough space, the box will be unchecked and the user will be alerted.
  */
  $(".b4g-default-menu-item-checkbox").change(function() {

    // we only want to act when the user is checking a box
    if ($(this).attr("checked")){
      var currentMenuItemCount = get_count_of_b4g_menu_items(); // update currentMenuItemCount

      if (currentMenuItemCount > MENU_ITEMS_LIMIT) {

        // uncheck box
        $(this).attr('checked', false);

        alert(OVER_MENU_ITEM_LIMIT_ALERT);
      }
    }

    update_available_slots_message();
  });
}

function save_customized_date(dateInputStr)
{
  var storedDateStr = read_from_html5_storage("b4gMenuEntries");
  var storedDates = {};
  if (storedDateStr == null)
  {
    storedDates[dateInputStr] = 1;
  }
  else
  {
    storedDates = JSON.parse(storedDateStr);
    var count = storedDates[dateInputStr];
    if (count == null)
    {
      // Do a bit of cleanup
      clean_up_stored_dates(storedDates);

      // Now add the new customized date
      storedDates[dateInputStr] = 1;
    }
    else
    {
      // Add in a recency bias - add half the value of the #3 item each time
      var sortable = [];
      for (var item in storedDates)
      {
        if (storedDates.hasOwnProperty(item)) {
          sortable.push([item, storedDates[item]]);
        }
      }
      sortable.sort(function(a, b){return b[1] - a[1];});
      var bias = 1;
      if (sortable.length > 2)
      {
        bias = sortable[2][1] / 2;
      }

      // Increment the counter to weigh the newly-typed thing more heavily
      storedDates[dateInputStr] = count + bias;

    }
  }
  write_to_html5_storage("b4gMenuEntries", JSON.stringify(storedDates));

}

function clean_up_stored_dates(storedDates)
{
    var sortable = [];
    for (var item in storedDates)
    {
      if (storedDates.hasOwnProperty(item)) {
        sortable.push([item, storedDates[item]]);
      }
    }
    sortable.sort(function(a, b){return b[1] - a[1];});
    if (sortable.length > 25)
    {
        for(var i = 10; i < sortable.length; i++)
        {
            delete(storedDates[sortable[i][0]]);
        }
    }
    if (sortable[0][1] > 1000)
    {
        for (var eachDate in storedDates)
        {
            if (storedDates.hasOwnProperty(eachDate)) {
              storedDates[eachDate] = Math.ceil(storedDates[eachDate] / 25);
            }
        }
    }
    return storedDates;
}

function load_user_specified_dates()
{
  var storedDateStr = read_from_html5_storage("b4g-menu-customizations");
  var userSpecifiedDates = [];

  if (storedDateStr != null)
  {
    userSpecifiedDates = JSON.parse(storedDateStr)["customEntries"];
  }
  return userSpecifiedDates;
}


/***
 * Construct a remove-link li element in the correct format for the customize menu and
 * add it where specified
 *
 * @param text - the text of the menu item
 * @param $destinationElement - The jQuery-wrapped list element to which the created element will be appended
 */
function append_user_added_time_link(text, $destinationElement)
{
  var removeLink = $("<span class='b4g-custom-time-entry' style='margin-left:20px;'><img style='cursor:pointer;' src='" + B4G_STATIC_FILES_DIRECTORY + "delete.png'></img></span>");
  removeLink.click(function() {
    $(this).closest("li").remove();
    update_available_slots_message();
  });
  removeLink.hover(function () {
    $(this).css("opacity", "1");
  }, function () {
    $(this).css("opacity", ".8");
  });
  var menuItem = $("<span class='b4g-custom-time-entry-text b4g-custom-time-entry'>" + text.charAt(0).toUpperCase() + text.slice(1) + "</span>");
  $destinationElement.append(menuItem);
  menuItem.wrap("<li class='b4g-custom-time-entry-wrapper'></li>");
  menuItem.after(removeLink);
}

function update_menu_customizations()
{
  var defaultEntries = {};
  $("#customize_b4g_default_menu_options .b4g-time-option").each(function()
  {
    var entryText = $(this).text();
    var state = $(this).closest("tr").find("input:first").attr("checked"); 
    defaultEntries[entryText] = state;
  });

  var customEntries = [];
  $("#b4g_user_menu_option_list .b4g-custom-time-entry-text").each(function()
  {
    customEntries.push($(this).text());
  });
  
  var b4gMenuCustomizations = {};
  b4gMenuCustomizations["customEntries"] = customEntries;
  b4gMenuCustomizations["defaultEntries"] = defaultEntries;
  write_to_html5_storage("b4g-menu-customizations", JSON.stringify(b4gMenuCustomizations));
}


/**
 * Create and append an array of time entries to a Boomerang/Send Later menu. 
 * Exclude any entries that the user has chosen not to show in the customization
 * dialog. Matches are case-insensitive.
 *
 * @param menuEntries - Array of strings that should reflect the labels of the default
 *      entries for this menu
 *
 * @param entriesWithDividers - Array of strings that should have lower dividers
 *
 * @param menu - The menu where the built items should be appended
 *
 * @param clickCallback - the function that should get called on click
 *
 */
function append_customized_default_menu_items(menu)
{
  var menuEntries = ["In 1 hour","In 2 hours","In 4 hours","Tomorrow morning","Tomorrow afternoon","In 2 days","In 4 days","In 1 week","In 2 weeks","In 1 month"];

  var menuState = JSON.parse(read_from_html5_storage("b4g-menu-customizations"));
  var defaultEntries = [];
  if(menuState != null) {
    var mcDefaultEntries = menuState["defaultEntries"];
    var keyList = Object.keys(mcDefaultEntries);
    for (var i = 0; i < keyList.length; i++) {
      defaultEntries[keyList[i].toLowerCase()] = mcDefaultEntries[keyList[i]];
    }
  }
  for (var k=0; k < menuEntries.length; k++) {
    var entryText = menuEntries[k];
    var lcEntryText = entryText.toLowerCase();
    if (!(lcEntryText in defaultEntries) || defaultEntries[lcEntryText]) {
      var menuItem = build_b4g_menu_item(entryText, false);
      menu.append(menuItem);
    }   
  }
}

/**
 * 7. Boomerang
 */

/**
 * 7a. Read View Boomerang
 */

function gmHandleCheckboxClick(e) {
    var $el = $(this);
    var $checkbox = $el.find("div[role='checkbox']");
    var nextCheckboxValueIsTrue = !($checkbox.attr("aria-checked") === "true");
    var isNoteCheckbox = $el.attr('id') === "gm-boomerang-note-checkbox";
    var isReplyCheckbox = $el.attr('id') === "gm-boomerang-reply-checkbox";
    var isEditNoteButton = e.target.id === "gm-boomerang-edit-note";

    if(isEditNoteButton) {
        return;
    }

    if(isReplyCheckbox) {
      track_event([ "thread menu", "conditional boomerang", (nextCheckboxValueIsTrue ? "checked" : "un-checked") ]);
      write_to_html5_storage("b4g_standard_boomerang_sticky_conditional-" + get_gmail_user(), nextCheckboxValueIsTrue);
    }

    if(nextCheckboxValueIsTrue) {
      if(isNoteCheckbox) {
        $("#notes_toggle").trigger("click");
      } else {
        $checkbox.addClass("gm-checkbox-checked").attr("aria-checked", "true");
        $el.addClass("gm-checkbox-background-checked").removeClass("gm-checkbox-background-unchecked");
      }
    } else {
      $checkbox.removeClass("gm-checkbox-checked").attr("aria-checked", "false");
      $el.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
      $("#note_entry", frameDoc).val("");
      if(isNoteCheckbox) {
        $("#gm-boomerang-edit-note").hide();
      }
    }
}

function toggle_boomerang_menu(e, owner, menuOptionClickCallback)
{
  var frameDoc = get_frame();

  //We want to prevent clicks on the b4g menu from closing the menu
  var target = e.target;

  if($(target).closest("#b4g_menu").length > 0)
  {
    return;
  }

  var b4gMenu = frameDoc.getElementById("b4g_menu");
  if (b4gMenu)
  {
    close_b4g_menu(e, owner);
  }
  else
  {
    //Add "clicked" style to button
    $("div", owner).addClass("T-I-Kq");

    var divClasses, menuHeader, noResponseDialog, displayNotesButton;
    var randomTimes = [
      "By 5pm today",
      "Within 1 week",
      "Within 1 month",
      "Within 1 year"
    ];

    // new styles and content for new UI
    if(which_gmail() === NEW_GMAIL) {
      divClasses = "J-M J-M-ayU aka gm-boomerang-menu";
      menuHeader = '<span style="padding: 0px; color: #666666!important;">Return Conversation to Inbox...</span>';
      noResponseDialog = '<li id="gm-boomerang-note-checkbox" class="b4g_menu b4g-menu-option" title="Attach a note for yourself. When the message returns to your Inbox, your note will be appended to the message thread.">' +
                           '<div class="gm-checkbox" tabindex="1" role="checkbox" aria-checked="false" ><div class="T-Jo-auh"></div></div>' +
                           '<span>with a note</span>' +
                           '<img id="gm-boomerang-edit-note" data-tooltip="Edit Note" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'notes_on@2x.png" />' +
                         '</li>' +
                         '<li id="gm-boomerang-reply-checkbox" class="b4g_menu b4g-menu-option" title="Remember to follow up on messages if you don\'t get a response by a certain time.">' +
                           '<div class="gm-checkbox" tabindex="1" role="checkbox" aria-checked="false" ><div class="T-Jo-auh"></div></div><span>if no reply</span>' +
                         '</li>';
      displayNotesButton = "display: none;"

    // maintain the old style and old content for the old UI
    } else {
      divClasses = "";
      menuHeader = '<span style="padding: 0px;">Return Conversation to Inbox:</span>';
      noResponseDialog = '<li class="b4g_menu b4g-menu-option" style="padding:6px 11px 6px 11px;">' +
                           '<input type="checkbox" id="conditionalBoomerang" class="b4g_menu" name="condBoomerang"/> Only if nobody responds' +
                         '</li>';
      displayNotesButton = "";
      randomTimes.forEach( (val, idx, arr) => arr[idx] = "- " + arr[idx] );
    }

    //Create the menu
    // boomerang a message for later using the topbar
    var b4g_menu_core = '<ul id="b4g_menu" tabindex="0" class="b4g_menu" style="padding:0px;position:absolute;left:'+$(e.currentTarget).position().left+'px;  background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 17em;min-height:auto;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
                '<div id="b4g_inner_menu" class="b4g_menu SK AX ' + divClasses + '" style="-webkit-user-select: none; font-size:12px;color:#333;padding:0;">' +
                  '<li class="menu-caption" style="list-style-type:none;padding: 7px 11px 0 11px;margin: 0 0 1px 0;">' +
                    menuHeader +
                    '<img class="b4g_menu" id="notes_toggle" data-tooltip="Add Note to Self" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'notes_off.png"  height="16px" style="opacity:.9;position:absolute;right:31px;top:6px;cursor:pointer;' + displayNotesButton + '"/>' +
                    '<img id="b4g-menu-customization-button" data-tooltip="Customize Menu" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'gear.png" height="16px" style="opacity:.9;position:absolute;right:11px;top:7px;cursor:pointer;">' +
                  '</li>' +
                  '<div id="notes_menu" class="b4g_menu SK AX" style="display:none;min-width:17em;min-height:auto;left:2px;margin:5px;border:none;box-shadow:none;-moz-box-shadow:none;">' + _notesTemplate +'</div>' +
                  noResponseDialog +
                  '<li class="b4g-menu-divider" style="height:1px;margin:6px 11px 6px 11px;background:#ddd;"></li>' +
                  '<li class="b4g-standard-times">' +
                  '</li>' +
                  '<li class="b4g-custom-times"></li>' +
                  '<li class="menu-caption" style="padding:7px 11px 4px 11px;">' +
                    'At a specific time:' +
                  '</li>' +
                  '<li class="b4g-menu-option" style="padding: 0 0 7px 11px;">' +
                    '<div style="color: #666; font-style: italic; font-size: 10px; margin-top: 3px;" class="b4g_menu">' +
                      'Examples: "Monday 9am", "Dec 23"' +
                    '</div>' +
                    '<div autocomplete="off">' +
                      '<div style="padding-top:3px; vertical-align: middle;" class="b4g_menu">' +
                        '<input style="margin-left:1px;padding:3px 22px 2px 2px;" class="b4g_menu" type="text" name="time" id="datepicker">' +
                        '<input id="specific-time-submit" type="submit" value="Confirm" style="margin: 0px 7px 5px 9px;font-size:11px;vertical-align:top;" class="b4g_menu by-button by-button-secondary">' +
                      '</div>' +
                      '<div style="color:#969696;margin-left:1px;">' +
                        '<span id="date-preview" class="b4g_menu" style="color:green;"></span>' +
                      '</div>' +
                    '</div>' +
                  '</li>' +
                  '<li class="b4g-menu-divider" style="height:1px;margin:0px 11px;background:#ddd;"></li>' +
                  '<li class="b4g-menu-option">' +
                    '<a id="random-time" class="menu-anchor" href="javascript:void(0)" style="margin:4px 0px;border-width:0px;color:#333;padding: 6px 11px;cursor:pointer;">' +
                      '<span style="vertical-align:bottom;margin-left:0px;">Random time</span>' +
                      '<img src="'+B4G_STATIC_FILES_DIRECTORY+'down.png" width="10px" style="opacity:.7;vertical-align:middle;margin:-2px 0px 0px 5px;"/>' + 
                    '</a>' +
                  '</li>' +
                  '<li class="random b4g-menu-option" style="display:none;">' +
                    '<a class="random_link menu-anchor" href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding:3px 13px;display:block;cursor:pointer;">' + randomTimes[0] + '</a>' +
                  '</li>' +
                  '<li class="random b4g-menu-option" style="display:none;">' +
                    '<a class="random_link menu-anchor" href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding:3px 13px;display:block;cursor:pointer;">' + randomTimes[1] + '</a>' +
                  '</li>' +
                  '<li class="random b4g-menu-option" style="display:none;">' +
                    '<a class="random_link menu-anchor" href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding:3px 13px;display:block;cursor:pointer;">' + randomTimes[2] + '</a>' +
                  '</li>' +
                  '<li class="random b4g-menu-option" style="display:none;margin-bottom:6px;">' +
                    '<a class="random_link menu-anchor" href="javascript:void(0)" style="border-width:0px;text-decoration:none;color:#333;line-height:1.1em;padding:3px 13px;display:block;cursor:pointer;">' + randomTimes[3] + '</a>' +
                  '</li>' +
                '</div>' +
              '</ul>';


    $(owner).parent().append(b4g_menu_core);
    var b4gContainer = $("#b4g_menu", frameDoc);

    var $dateForm = b4gContainer.find("form").first();
    prevent_form_submit($dateForm);
    // add listener to handle checkbox behavior for new UI
    // space bar behavior lives in the keyboard shortcut logic
    if(which_gmail() === NEW_GMAIL) {

        // clicking the checkbox
        $("#gm-boomerang-reply-checkbox, #gm-boomerang-note-checkbox").click(gmHandleCheckboxClick);

        // mousedown on checkbox to preventDefault (this way the checkbox isn't in focus)
        $("#gm-boomerang-reply-checkbox > .gm-checkbox, #gm-boomerang-note-checkbox > .gm-checkbox").mousedown(function(e) {
            e.preventDefault();
        });

        // open note editor on img click
        $("#gm-boomerang-edit-note").click(function(e) {
            $("#notes_toggle").trigger("click");
        });

        // move the menu down 35px
        b4gContainer.css({
            "top": "35px"
        });
    }

    keyboard_shortcuts.enable_menu_arrow_keys(b4gContainer);

    // Premium only: make the conditional checkbox sticky
    if (is_premium_plan(get_cached_plan())){
      var isCheckedString = read_from_html5_storage("b4g_standard_boomerang_sticky_conditional-" + get_gmail_user());
      if (isCheckedString === "true"){ // values from local storage are strings
        if(which_gmail() === NEW_GMAIL) {
          $("#gm-boomerang-reply-checkbox").addClass("gm-checkbox-background-checked");
          $("#gm-boomerang-reply-checkbox").find("div[role='checkbox']").addClass("gm-checkbox-checked").attr("aria-checked", "true");
        } else {
          $("#conditionalBoomerang", frameDoc).attr("checked", true);
        }
      }
    }

    // the new gmail UI is tracked above in the click handler
    // and also in keyboard shortcuts. this logic only handles
    // the old UI
    $("#conditionalBoomerang", frameDoc).change(function() {
      var isChecked = $(this).is(":checked");
      track_event([ "thread menu", "conditional boomerang", (isChecked ? "checked" : "un-checked") ]);
      write_to_html5_storage("b4g_standard_boomerang_sticky_conditional-" + get_gmail_user(), isChecked);
    });

    append_customized_default_menu_items($(".b4g-standard-times", frameDoc));
    add_dividers_to_default_menu_items(frameDoc);
    
    $(".b4g_menu_item", frameDoc).click(function() { 
      function standardTimeClosure(text) {
        menuOptionClickCallback(text);
        track_event([ "boomerang menu", "send later time", text ]);
      }

      standardTimeClosure($(this).text());
    });
    add_resolved_time_hover_text($(".b4g_menu_item", frameDoc),
      BOOMERANG_MORNING_OFFSET);
    

    if(last_date_selected == null || last_date_selected < new Date()) {
      the_date = Date.today().addDays(2).addHours(8);
    }
    else {
      the_date = last_date_selected;
    }

    var strDate = the_date.toString("M/d/yyyy h:mm tt");
    var inputBox = $("#datepicker", frameDoc);
    inputBox.val(strDate);
    inputBox.keyup(function () {
      var input = $(this).val();
      update_date_preview(input);
    });
    inputBox.focus(function () {
      var input = $(this).val();
      update_date_preview(input);
    });

    $("input#specific-time-submit", frameDoc).click(function(e) {
      specific_time_chosen(e, menuOptionClickCallback);
    });

    $("#datepicker", frameDoc).keypress(function(e) {
      if(e.which === 13) {
        specific_time_chosen(e, menuOptionClickCallback);
      }
    });

    // Add customized times
    var customTimes = load_user_specified_dates();
    if (customTimes.length > 0) {
      for (var idx=0; idx<customTimes.length; idx++) {
        var menuItem = build_custom_b4g_menu_item(customTimes[idx], null);
        $(".b4g-custom-times", frameDoc).append(menuItem);
      }

      $(".b4g-custom-menu-item", frameDoc).hover(function() {
        $(this).addClass("J-N-JT");
      }, function() {
        $(this).removeClass("J-N-JT");
      });
      $(".b4g-custom-menu-item", frameDoc).click(function() {
        function customTimeClosure(text) {
          custom_time_chosen(text, menuOptionClickCallback);
          track_event([ "b4g menu", "picked", text ]);
        }

        customTimeClosure($(this).text());
      });
      add_resolved_time_hover_text($(".b4g-custom-menu-item", frameDoc),
        BOOMERANG_MORNING_OFFSET);
    }

    var rOpen = function()
    {
      random_time_open($("#random-time:first-child", frameDoc), b4gMenu);
      adjust_b4g_menu_height();

      // For smaller displays that require the user to scroll to see the random time options,
      // we'll autoscroll down to the bottom of the menu so the user can see the random time options
      // as soon as they've opened them
      var $openMenu = $('#b4g_inner_menu');
      $openMenu.scrollTop($openMenu[0].scrollHeight);

      track_event([ "thread menu", "random time", "opened" ]);
    };
    var rClose = function()
    {
      random_time_close($("#random-time:first-child", frameDoc), b4gMenu);
      adjust_b4g_menu_height();

      track_event([ "thread menu", "random time", "closed" ]);
    };
    $("#random-time", frameDoc).parent().toggle(rOpen, rClose);

    $(".random_link", frameDoc).click(function () {
      function randomTimeClosure(text) {
        // we removed the "- " prepended to random time choices for aethstetics
        // on the new Gmail UI, but caption_to_return_time(text) expects
        // the "- " while computing the return time, so we add it back here
        if(which_gmail() === NEW_GMAIL) {
            text = "- " + text;
        }
        menuOptionClickCallback(text);
        track_event([ "b4g menu", "random time", "picked - " + text ]);
      }

      randomTimeClosure($(this).text());
    });
    add_resolved_time_hover_text($(".random_link", frameDoc),
      BOOMERANG_MORNING_OFFSET);

    add_dividers_to_custom_menu_items(frameDoc);

    var custom = $("#b4g-menu-customization-button", frameDoc);
    custom.click(function() { show_menu_customization_dialog(); });
    custom.hover(function () {
      $(this).css("opacity", "1");
    }, function () {
      $(this).css("opacity", ".9");
    });

    $(frameDoc).bind('click', {owner: owner}, b4g_menu_frameDoc_click_handler);
    bind_datepicker(inputBox);

    // Move datepicker button into the input text field
    $(".b4g-ui-datepicker-trigger", frameDoc).css("cursor", "pointer");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-left", "-21px");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-top", "-2px");
    $(".b4g-ui-datepicker-trigger", frameDoc).hover(function () {
      $(this).css("box-shadow", "0px 0px 3px #aaa");
    }, function () {
      $(this).css("box-shadow", "none");
    });

    // Prevent Gmail from making the textbox unselectable
    inputBox.mousedown(function(event){
      event.stopImmediatePropagation();
    });
    inputBox.css("-moz-user-select","text");
    inputBox.parents().each(function(){ $(this).css("-moz-user-select","text"); });

    // Focus input box for immediate typing
    // NOTE: do not focus if in New Gmail in the hover menu. This will unexpectedly jump the page!
    //       fortunately, this is the only menu that could potentially jump the page in this way
    var isHoverMenu = $("#b4g_menu").parent().hasClass("bqY");
    if (!isHoverMenu) {
      inputBox.focus();
    }
    inputBox.select();
    $('span#date-preview.b4g_menu',frameDoc).text("");

    // Event handlers for notes features
    $("#note_entry", frameDoc).val("");

    $("#notes_toggle", frameDoc).click(function(){
            continue_if_on_personal_plan(notes_success_callback, notes_failure_callback);
            track_event([ "notes", "click" ]);
    }).hover(function() {
      $(this).css("opacity", "1");
    }, function () {
      $(this).css("opacity", ".9");
    });

    $("#notes_save_button, #notes_cancel_button").mousedown(function(e) {
        e.preventDefault();
    });

    $("#notes_save_button", frameDoc).click(function(){
      var noteString = $("#note_entry", frameDoc).val();
      if (hasEmoji(noteString)) {
        show_dialog(EMOJI_IN_NOTE_ERROR);
        return;
      }
      // if the note is empty, do not attach a note
      var $checkboxWrapper = $("#gm-boomerang-note-checkbox");
      if(which_gmail() === NEW_GMAIL) {
        if(!$("#note_entry", frameDoc).val()) {
          $checkboxWrapper.find("div[role='checkbox']").removeClass("gm-checkbox-checked").attr("aria-checked", "false");
          $checkboxWrapper.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
          $("#gm-boomerang-edit-note").hide();
        } else {
          $("#gm-boomerang-edit-note").show();
          $checkboxWrapper.find("div[role='checkbox']").addClass("gm-checkbox-checked").attr("aria-checked", "true");
          $checkboxWrapper.addClass("gm-checkbox-background-checked").removeClass("gm-checkbox-background-unchecked");
        }
      }

      toggle_b4g_notes();
      if (noteString){
        $("#notes_toggle", frameDoc).attr("src", B4G_STATIC_FILES_DIRECTORY + 'notes_on.png');
        $("#notes_toggle", frameDoc).attr("data-tooltip", "Edit Note to Self");
        $("#notes_toggle", frameDoc).css("top", "6px");
      }
      adjust_b4g_menu_height();

      // refocus on datepicker and remove selected state on "with a note" checkbox
      if(which_gmail() === NEW_GMAIL) {
        $("#datepicker").focus().parents().eq(2).addClass("b4g-state-selected");
        $("#gm-boomerang-note-checkbox").removeClass("b4g-state-selected");
      }
    });
    $("#notes_cancel_button", frameDoc).click(function(){

      // uncheck the note checkbox
      if(which_gmail() === NEW_GMAIL) {
        var $checkboxWrapper = $("#gm-boomerang-note-checkbox");
        $checkboxWrapper.find("div[role='checkbox']").removeClass("gm-checkbox-checked").attr("aria-checked", "false")
        $checkboxWrapper.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
        $("#gm-boomerang-edit-note").hide();
      }
      toggle_b4g_notes();
      $("#note_entry", frameDoc).val("");
      $("#notes_toggle", frameDoc).attr("src", B4G_STATIC_FILES_DIRECTORY + 'notes_off.png');
      $("#notes_toggle", frameDoc).attr("data-tooltip", "Add Note to Self");
      $("#notes_toggle", frameDoc).css("top", "6px");
      adjust_b4g_menu_height();

      // refocus on datepicker and remove selected state on "with a note" checkbox
      if(which_gmail() === NEW_GMAIL) {
        $("#datepicker").focus().parents().eq(2).addClass("b4g-state-selected");
        $("#gm-boomerang-note-checkbox").removeClass("b4g-state-selected");
      }
    });

    adjust_b4g_menu_height();
    if(which_gmail() === NEW_GMAIL) {
      $("#b4g_menu").click(prevent_inline_boomerang_menu_from_closing)
    }
  }
}

/**
 * Converts a caption from the Boomerang / Send Later button into a
 * @param caption The caption of the boomerang menu item
 */
function b4g_time_clicked(caption, extra)
{
  extra = extra || {};
  var frameDoc = get_frame();
  var gmailUser = get_gmail_user();
  var subject = get_subject_of_thread_emails();
  var senders = get_senders_of_thread_emails();
  var sentDates = get_sent_dates_of_thread_emails();

  var offset = caption_to_return_time(caption, BOOMERANG_MORNING_OFFSET);
  last_date_selected = offset;
  var readableDate = make_readable_date(offset, false);

  var notes = $("#note_entry", frameDoc).val();
  if (notes == null){
    notes = "";
  }

  var url = "https://b4g.baydin.com/mailcruncher/schedulereturn";
  url = url + "?subject=" + encodeURIComponent(subject);
  url = url + "&senders=" + encodeURIComponent(JSON.stringify(senders));
  url = url + "&guser=" + encodeURIComponent(gmailUser);
  url = url + "&sentDates=" + encodeURIComponent(JSON.stringify(sentDates));
  url = url + "&offset=" + encodeURIComponent(offset.valueOf());
  url = url + "&threadId=" + encodeURIComponent(get_boomerang_thread_id());
  if(is_gmail_in_english()) {
    url= url + "&language=English";
  } else {
    url= url + "&language=notEnglish";
  }


  if ($("#conditionalBoomerang", frameDoc).attr("checked")){
    url = url + "&conditional=" + encodeURIComponent("True");
  }
  else {
    url = url + "&conditional=" + encodeURIComponent("False");
  }

  // If we are in the inbox...
  if (get_element_by_name("^i").length > 0 && loc.indexOf('label') > 0)
  {
    url = url + "&inbox=True";
  }
  else
  {
    url = url + "&inbox=False";
  }

  url = url + "&notes=" + encodeURIComponent(notes);


  var currentLocation = String(document.location);
  var message = "Message will return " + readableDate + ". ";

  if (which_gmail() === OLD_GMAIL) {
    call_function_after_paywall_check(old_send_b4g_time_clicked_request, close_b4g_menu);
  } else {
    call_function_after_paywall_check(new_send_b4g_time_clicked_request, close_b4g_menu);
  }

  function old_send_b4g_time_clicked_request(){
    function handle_boomerang_response(b4gStatus, requestedURL, successMessage)
    {
      if (is_nag_status(b4gStatus))
      {
        nag_screen(b4gStatus);
        inline_manage.expire_cache();
      }
      else if (b4gStatus === PAYWALL)
      {
        nag_screen(b4gStatus);
        window.location = currentLocation;
        inline_manage.expire_cache();
      }
      else if (b4gStatus !== SUCCESS)
      {
        show_dialog("Attempt failed: " + POSSIBLE_RESPONSES[b4gStatus]);
        window.location = currentLocation;
      }
      else if(b4gStatus === SUCCESS) {
        show_viral_hook_if_appropriate({
          type: "return-later", isByMagic: extra.isByMagic
        });
        inline_manage.expire_cache();
      }
    }

    show_processing_notification();
    send_image_request(url, handle_boomerang_response, message);
    delayed_redirect_and_show_gmail_notification(message, 300, "return");
  }

  function new_send_b4g_time_clicked_request(){
    function handle_boomerang_response_new_ui(response) {
      var status = response["status"];
      if (status === "success") {
        show_viral_hook_if_appropriate({
          type: "return-later", isByMagic: extra.isByMagic
        });
        inline_manage.expire_cache();
      } else if (status === "nag" && response["message"] !== "paywall") {
        nag_screen_new_gmail(response["message"]);
        inline_manage.expire_cache();
      } else if (status === "nag" && response["message"] === "paywall") {
        nag_screen_new_gmail(response["message"]);
        window.location = currentLocation;
        inline_manage.expire_cache();
      } else {
        show_dialog("Attempt failed: " + response["message"]);
        window.location = currentLocation;
      }
    }

    var url = "https://b4g.baydin.com/gmailmigration/boomerangfromconversation";
    var conditional;
    if(which_gmail() === NEW_GMAIL) {
      conditional = $("#gm-boomerang-reply-checkbox").find(".gm-checkbox").attr("aria-checked") === "true"  ? "True" : "False";
    } else {
      conditional =  $("#conditionalBoomerang", frameDoc).attr("checked") ? "True" : "False";
    }
    show_processing_notification();
    var params = {
      "guser": gmailUser,
      "gmailId": $(".adn.ads[data-message-id]:visible").last().attr("data-message-id").replace("#", ""),
      "notes": notes,
      "offset": offset.valueOf(),
      "conditional": conditional,
      "threadId": get_boomerang_thread_id(),
    }
    $.ajax({
      type: "POST",
      url: url,
      data: params,
      xhr: xhr_with_credentials,
      success: function(response) {
        handle_boomerang_response_new_ui(response);
      }
    });
    delayed_redirect_and_show_gmail_notification(message, 300, "return");
  }
}


/**
 * Handles the selection of a date/time by a user. Converts this date/time to an offset,
 * and passes it to a callback function
 * @param e The event corresponding to the click that called this function
 * @param callback The function to call with the offset as a parameter
 * @remarks Reads the global variable the_date
 */
function specific_time_chosen(e, callback)
{
  var frameDoc = get_frame();
  var offset = Date.parse(the_date);

  if (offset != null)
  {
    var customizedDateStr = $("#datepicker", frameDoc).val();
    if (is_in_future(customizedDateStr))
    {
      save_customized_date(customizedDateStr);
      callback(offset);
    }
    else
    {
    show_dialog("The time you entered is in the past. We can only schedule messages for the future.");
    track_event([ "boomerang menu", "confirm specific time", "error time in the past entered" ]);
    }
  }
  else
  {
    show_dialog("Unable to read specified time. Please try again.");

    track_event([ "boomerang menu", "confirm specific time", "error invalid time" ]);
  }

  track_event([ "boomerang menu", "confirm specific time", "clicked" ]);
}

function custom_time_chosen(customTimeText, callback)
{
  var offset = parse_date(customTimeText);
  if (offset != null)
  {
    callback(offset);
  }
  else
  {
    show_dialog("Something went wrong processing the customized date. Please let the Boomerang team know.");
  }
}

/**
 * 7b. Boomerang on Send
 */

// `container` parameter is sometimes frameDoc other times it's a composeContainer
function send_boomerang_menu_clicked(caption, container)
{
  if (!container){
    container = get_frame();
  }
  var conditionalButton = $(".conditional-caption", container);

  write_to_html5_storage("b4g_sticky_send_and_boomerang-" + get_gmail_user(), caption);

  var returnDate = caption_to_return_time(caption, BOOMERANG_MORNING_OFFSET);
  last_date_selected = returnDate;
  conditionalButton.data("returnDate", returnDate);

  $(".conditional-caption-text", container).text(String(caption));
  $(".b4g-ui-datepicker").css("display", "none");
  $(".boomerangSendCheck", container).attr("checked", true);
  check_authentication_for_send_boomerang_checkbox(container);
  if(which_gmail() === NEW_GMAIL && is_pop_out_window()) {
    $(".b4g_menu").remove();
  } else {
    $(".b4g_menu", container).remove();
  }

  track_event([ "boomerang menu", "send boomrang menu", "clicked" ]); /* todo: typo */
}

// `container` parameter is sometimes frameDoc other times it's a composeContainer
function send_boomerang_specific_time_clicked(offset, container)
{
  if (!container){
    container = get_frame();
  }
  var conditionalButton = $(".conditional-caption", container);

  var returnDate = caption_to_return_time(offset, BOOMERANG_MORNING_OFFSET);
  // ensure that returnDate is in the future
  if (new Date(returnDate) < new Date()) {
    show_dialog("The time you entered is in the past. We can only schedule messages for the future.");
    track_event([ "boomerang menu", "confirm specific time", "error time in the past entered" ]);
    return;
  }

  last_date_selected = returnDate;
  conditionalButton.data("returnDate", returnDate);

  $(".conditional-caption-text", container).html("<span class='by-text'>by </span>" + offset.toString("ddd MMM d h:mm tt"));
  $(".b4g-ui-datepicker").css("display", "none");
  $(".boomerangSendCheck", container).attr("checked", true);
  check_authentication_for_send_boomerang_checkbox(container);
  $(".b4g_menu", container).remove();

  track_event([ "boomerang menu", "send specific time", "clicked" ]);
}

/**
 * Converts a time from Send Condition Local Storage settings into a date/time
 * @param offsetNum - The offset value set in the settings dialog (1 - 31)
 * @param offsetUnit - The offset type set in settings dialg (hours, days, weeks, months)
 * @return The date/time represented by the settings
 */
function conditional_send_settings_to_return_time (offsetNum, offsetUnit){
        var returnTime = new Date();
        var randomMinutes = Math.floor(Math.random() * 30) - 15;
    switch(offsetUnit){    
    case "hours":
        returnTime = returnTime.addHours(parseInt(offsetNum));
        break;
    case "days":
        returnTime = returnTime.addDays(parseInt(offsetNum)).addMinutes(randomMinutes);
        break;
    case "weeks":
        returnTime = returnTime.addWeeks(parseInt(offsetNum)).addMinutes(randomMinutes);
        break;
    case "months":
        returnTime = returnTime.addMonths(parseInt(offsetNum)).addMinutes(randomMinutes);
        break;
    default:
        returnTime = 0;
    }    
    return returnTime;
}


function enable_sticky_send_and_boomerang_settings(composeContainer){
    var plan = get_cached_plan();

    var stickySendAndBoomerangCaption = read_from_html5_storage("b4g_sticky_send_and_boomerang-" + get_gmail_user());
    if (stickySendAndBoomerangCaption) {
        var returnDate = caption_to_return_time(stickySendAndBoomerangCaption, BOOMERANG_MORNING_OFFSET);
        $(".conditional-caption", composeContainer).data("returnDate", returnDate);
        $(".conditional-caption-text", composeContainer).text(stickySendAndBoomerangCaption);
    }

    // premium features overwrite the usual sticky settings
    if (plan === "premium"){
        var data = JSON.parse(read_from_html5_storage("b4g_preferences-" + get_gmail_user()));
        var check = (data.onSendSetting ? "checked" : "");
        var offset = (data.onSendOffset == null) ? "1_weeks" : data.onSendOffset;
        var condition = (data.onSendCond == null) ? "reply" : data.onSendCond;
        var readReceipts = (data.readReceipts ? "on" : "off");

        if (check === "checked" || readReceipts === "on"){
            call_function_after_paywall_check(function(){
                if ((check === "checked" && (condition === "no click" || condition === "no open")) || readReceipts === "on"){
                    if (!email_tracking_is_turned_on(composeContainer)){
                        var $trackingToggle = $(".b4g-tracking-toggle", composeContainer);
                        $trackingToggle.trigger("b4g-toggle-state");
                    }
                }
                var offsetValue = offset.split("_");
                var offsetText = " in " + offsetValue[0] + " " + offsetValue[1];
                // Make the last word in the caption singular if the value is 1
                if (offsetValue[0] === "1" && offsetText.charAt(offsetText.length - 1) === "s") {
                    offsetText = offsetText.substring(0, offsetText.length - 1);
                }
                var returnDate = conditional_send_settings_to_return_time(offsetValue[0], offsetValue[1]);

                if (check === "checked"){
                    $(".boomerangSendCheck", composeContainer).get(0).checked = (check === "checked") ? 1: 0;
                    $("[name=ifResponse]", composeContainer).val(condition);
                    $(".conditional-caption", composeContainer).data("returnDate", returnDate);
                    $(".conditional-caption-text", composeContainer).text(offsetText);
                }
            });
        }

        if (data.crm.active && (data.crm.bccIncludeWith === "every" || (data.crm.bccIncludeWith === "boomerang" && check === "checked"))){
            var address = data.crm.bccAddress;
            insert_bcc_in_compose_container(composeContainer, address);
        }

        track_event(["Compose Window", "boomerang on-send setting applied successfully"]);
    }
}

function is_allowed_boomerang_on_send_label_click_in_tiny_compose(target, owner) {
  // If BCal is enabled, we're in a a narrow compose container, and we click on the remind me checkbox/label, we must open the remind me menu.
  // This method checks if this is an allowed click that should NOT close the remind me menu
  var composeContainer = $(get_compose_container(owner));
  var $target = $(target);
  if (can_use_bcal() && composeContainer.hasClass('b4g-narrow-sm')) {

    if ($target.hasClass('b4g-tiny-compose-icon-holder') ||
      ($target.hasClass('boomerangSendCheck') || $target.find('boomerangSendCheck').length > 0))
    {
      return true;
    }

  }
  return false;
}

function compose_dialog_toggle_send_boomerang_menu(e, owner, isAReply)
{
  //We want to prevent clicks on the menu from closing the menu
  var menuItem, target = get_target(e);
  if(
    target.className.indexOf("J-Zh-I") === -1 &&
    target.className.indexOf("f") !== 0 &&
    target.className.indexOf("VP5otc-d2fWKd") === -1 &&
    target.className.indexOf("conditional-caption") === -1 &&
    target.className.indexOf("conditional-caption-text") === -1 &&
    target.className.indexOf("conditional-caption-arrow") === -1
  ) {

    if (is_allowed_boomerang_on_send_label_click_in_tiny_compose(target, owner)) {
      // Don't do anything - we're in the smallest compose view so clicking the boomerang on send label should open the menu
    } else {
      return;
    }

  }
  var frameDoc = get_frame();
  var composeContainer = get_compose_container(owner);

  var b4gMenu = frameDoc.getElementById("b4g_menu");
  if (b4gMenu)
  {
    close_b4g_menu(e, owner);
  }
  else
  {
    track_event(['Send and Boomerang', 'Open menu']);

    var send_boomerang_option_clicked_wrapper_for_this_compose_window = function(caption){
      send_boomerang_menu_clicked(caption, composeContainer);
    };

    var divClasses, divStyles, noResponseDialog;

    if(which_gmail() === NEW_GMAIL) {
        divClasses = "J-M J-M-ayU aka gm-boomerang-menu";
        divStyles = "display: none;";
        attachNote = '<li id="gm-boomerang-note-checkbox" class="b4g_menu b4g-menu-option gm-boomerang-reminder-on-send" title="Attach a note for yourself. When the message returns to your Inbox, your note will be appended to the message thread.">' +
                             '<div class="gm-checkbox" tabindex="1" role="checkbox" aria-checked="false" ><div class="T-Jo-auh"></div></div>' +
                             '<span>with a note</span>' +
                             '<img id="gm-boomerang-edit-note" data-tooltip="Edit Note" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'notes_on@2x.png" />' +
                           '</li>';
    } else {
        divClasses = "";
        divStyles = "";
        attachNote = "";
    }

    //Create the menu
    // boomerang reminder on send
    var b4g_menu_core = '<ul id="b4g_menu" tabindex="0" class="b4g_menu" style="padding:0px;background:#fff;position:absolute; bottom: ' + (isAReply ? -21 : 22) + 'px; left: 195px;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
                '<div id="b4g_inner_menu" class="b4g_menu SK AX ' + divClasses + '" style="-webkit-user-select: none; font-size:12px;padding:0;">' +
                  '<li id="b4g_menu_title" class="menu-caption b4g-menu-option" style="list-style-type:none;padding:6px 11px 6px 11px;">' +
                    boomerang_on_send_text + ': ' +
                    '<img class="b4g_menu" id="notes_toggle" data-tooltip="Add Note to Self" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'notes_off.png"  height="16px" style="' + divStyles + 'opacity:.9;position:absolute;right:33px;top:6px;cursor:pointer;"/>' +
                    '<img id="b4g-menu-customization-button" data-tooltip="Customize Menu" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'gear.png" height="16px" style="opacity:.9;height:16px;width:16px;position:absolute;right:13px;top:6px;cursor:pointer;">' +
                  '</li>' +
                  attachNote +
                  '<div id="notes_menu" class="b4g_menu SK AX" style="display:none;min-width:17em;min-height:auto;left:2px;margin:5px;border:none;box-shadow:none;-moz-box-shadow:none;">' + _notesTemplate +'</div>' +
                  '<li class="b4g-menu-divider" style="height:1px;margin:0 11px 6px 11px;background:#ddd;"></li>' +
                  '<li class="b4g-standard-times">' +
                  '</li>' +
                  '<li class="b4g-custom-times"></li>' +
                  '<li class="menu-caption" style="padding:7px 11px 4px 11px;">' +
                    'At a specific time:' +
                  '</li>' +
                  '<li class="b4g-menu-option" style="padding: 0 0 7px 11px;">' +
                    '<div style="color: #666; font-style: italic; font-size: 10px; margin-top: 3px;" class="b4g_menu">' +
                      'Examples: "Monday 9am", "Dec 23"' +
                    '</div>' +
                    '<form autocomplete="off">' +
                      '<div style="padding-top:3px; vertical-align: middle;" class="b4g_menu">' +
                        '<input style="margin-left:1px;padding:3px 22px 2px 2px;" class="b4g_menu" type="text" name="time" id="datepicker">' +
                        '<input id="specific-time-submit" type="submit" value="Confirm" style="margin: 0px 7px 5px 9px;font-size:11px;vertical-align:top;" class="b4g_menu by-button by-button-secondary">' +
                      '</div>' +
                      '<div style="color:#969696; margin-left: 1px;">' +
                        '<span id="date-preview" class="b4g_menu" style="color:green;"></span>' +
                      '</div>' +
                    '</form>' +
                  '</li>' +
                '</div>' +
              '</ul>';

    if(which_gmail() === NEW_GMAIL && is_pop_out_window()) {
        $("body").append(b4g_menu_core);
    } else if(which_gmail() === NEW_GMAIL) {
        get_compose_container(owner).append(b4g_menu_core);
    } else {
        $(owner).parent().append(b4g_menu_core);
    }
    var b4gContainer = $("#b4g_menu", frameDoc);

    var $dateForm = b4gContainer.find("form").first();
    prevent_form_submit($dateForm);

    // add listener to handle checkbox behavior for new UI
    // space bar behavior lives in the keyboard shortcut logic
    if(which_gmail() === NEW_GMAIL) {

        // clicking the checkbox
        $("#gm-boomerang-note-checkbox").click(gmHandleCheckboxClick);

        // mousedown on checkbox to preventDefault (this way the checkbox isn't in focus)
        $("#gm-boomerang-note-checkbox > .gm-checkbox").mousedown(function(e) {
            e.preventDefault();
        });

        // edit note on img click
        $("#gm-boomerang-edit-note").click(function(e) {
            $("#notes_toggle").trigger("click");
        });

        var marginBottom;
        if(isAReply) {
            marginBottom = 65;
        } else {
            marginBottom = 26;
        }
        $("#b4g_menu").css({
            "margin-bottom": marginBottom + "px"
        });
    }

    keyboard_shortcuts.enable_menu_arrow_keys(b4gContainer);

    append_customized_default_menu_items($(".b4g-standard-times", frameDoc));
    add_dividers_to_default_menu_items(frameDoc);
    
    $(".b4g_menu_item", frameDoc).click(function() { 
      function standardTimeClosure(text) {
        send_boomerang_option_clicked_wrapper_for_this_compose_window(text);
        track_event([ "boomerang menu", "send later time", text ]);
      }

      standardTimeClosure($(this).text()); 
    });
    add_resolved_time_hover_text($(".b4g_menu_item", frameDoc),
      BOOMERANG_MORNING_OFFSET);

    if(last_date_selected == null || last_date_selected < new Date()) {
      the_date = Date.today().addDays(2).addHours(8);
    }
    else {
      the_date = last_date_selected;
    }

    var strDate = the_date.toString("M/d/yyyy h:mm tt");
    var inputBox = $("#datepicker", frameDoc);
    inputBox.val(strDate);
    inputBox.keyup(function () {
      var input = $(this).val();
      update_date_preview(input);
    });
    inputBox.focus(function () {
      var input = $(this).val();
      update_date_preview(input);
    });

    $("input#specific-time-submit", frameDoc).click(function(e) {
      track_event(['Send and Boomerang', 'At a specific time']);
      var offset = Date.parse(the_date);
      if (offset != null) {
        send_boomerang_specific_time_clicked(offset, composeContainer);
      } else {
        show_dialog("Unable to read specified time. Please try again.");
      }
    });

    // Add customized times
    var customTimes = load_user_specified_dates();
    if (customTimes.length > 0) {
      for (var idx=0; idx<customTimes.length; idx++) {
          menuItem = build_custom_b4g_menu_item(customTimes[idx], null);
          $(".b4g-custom-times", frameDoc).append(menuItem);
      }
      $(".b4g-custom-times").append('<li class="b4g-menu-divider" style="height:1px;margin:0 11px 6px 11px;background:#ddd;"></li>')

      $(".b4g-custom-menu-item", frameDoc).click(function() {
        function customTimeClosure(text) {
          send_boomerang_option_clicked_wrapper_for_this_compose_window(text);
          track_event([ "b4g menu", "picked", text ]);
        }

        customTimeClosure($(this).text());
      });
      add_resolved_time_hover_text($(".b4g-custom-menu-item", frameDoc),
        BOOMERANG_MORNING_OFFSET);
    }

    var custom = $("#b4g-menu-customization-button", frameDoc);
    custom.click(function() { show_menu_customization_dialog(); });
    custom.hover(function () {
      $(this).css("opacity", "1");
    }, function () {
      $(this).css("opacity", ".9");
    });

    $(frameDoc).bind('click', {owner: owner}, b4g_menu_frameDoc_click_handler);
    bind_datepicker(inputBox);

    if(which_gmail() === NEW_GMAIL && isAReply) {
      b4gContainer.position({of:$(e.currentTarget), my: "left bottom", at: "left top"});
    }

    // Move datepicker button into the input text field
    $(".b4g-ui-datepicker-trigger", frameDoc).css("cursor", "pointer");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-left", "-21px");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-top", "-2px");
    $(".b4g-ui-datepicker-trigger", frameDoc).hover(function () {
      $(this).css("box-shadow", "0px 0px 3px #aaa");
    }, function () {
      $(this).css("box-shadow", "none");
    });

    // Prevent Gmail from making the textbox unselectable
    inputBox.mousedown(function(event){
      event.stopImmediatePropagation();
    });
    inputBox.css("-moz-user-select","text");

    inputBox.parents().each(function(){ $(this).css("-moz-user-select","text"); });

    // Focus input box for immediate typing
    inputBox.focus();
    inputBox.select();
    $('span#date-preview.b4g_menu',frameDoc).text("");

    // Event handlers for notes features
    var existingNotes = composeContainer.data("notes");
    if (composeContainer.data("notes")) {
      $("#note_entry", frameDoc).val(existingNotes);
      $("#notes_toggle", frameDoc).attr("src", B4G_STATIC_FILES_DIRECTORY + 'notes_on.png');
      $("#notes_toggle", frameDoc).attr("data-tooltip", "Edit Note to Self");
      $("#notes_toggle", frameDoc).css("top", "6px");
    }
    else {
      $("#note_entry", frameDoc).val("");
    }

    // move the menu up a little bit in the new UI
    if(which_gmail() === NEW_GMAIL && !is_pop_out_window()) {
      var bottomPadding = 20;
      var leftPadding = -14;
      var b4gMenu = $("#b4g_menu");
      var bottomDistance = Number(b4gMenu.css("bottom").slice(0, -2));
      var leftDistance = Number(b4gMenu.css("left").slice(0, -2));
      b4gMenu.css({
          "bottom": bottomDistance + bottomPadding + "px",
          "left": leftDistance + leftPadding + "px"
      });
    } else if(which_gmail() === NEW_GMAIL && is_pop_out_window()) {
        var bottomPadding = 20;
        var b4gMenu = $("#b4g_menu");
        var bottomDistance = Number(b4gMenu.css("bottom").slice(0, -2));
        b4gMenu.css({
            "top": "",
            "bottom": bottomDistance + bottomPadding + "px",
        });
    }

    $("#notes_toggle", frameDoc).click(function(){
            continue_if_on_personal_plan(notes_success_callback, notes_failure_callback);
            track_event([ "notes", "click" ]);
    }).hover(function() {
      $(this).css("opacity", "1");
    }, function () {
      $(this).css("opacity", ".9");
    });

    $("#notes_save_button, #notes_cancel_button").mousedown(function(e) {
        e.preventDefault();
    });

    $("#notes_save_button", frameDoc).click(function(){
      var noteString = $("#note_entry", frameDoc).val();
      if (hasEmoji(noteString)) {
        show_dialog(EMOJI_IN_NOTE_ERROR);
        return;
      }

      // if the note is empty, do not attach a note
      var $checkboxWrapper = $("#gm-boomerang-note-checkbox");
      if(which_gmail() === NEW_GMAIL) {
        if(!$("#note_entry", frameDoc).val()) {
          $checkboxWrapper.find("div[role='checkbox']").removeClass("gm-checkbox-checked").attr("aria-checked", "false");
          $checkboxWrapper.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
          $("#gm-boomerang-edit-note").hide();
        } else {
          $("#gm-boomerang-edit-note").show();
          $checkboxWrapper.find("div[role='checkbox']").addClass("gm-checkbox-checked").attr("aria-checked", "true");
          $checkboxWrapper.addClass("gm-checkbox-background-checked").removeClass("gm-checkbox-background-unchecked");
        }
      }
      toggle_b4g_notes();
      if (noteString){
        $("#notes_toggle", frameDoc).attr("src", B4G_STATIC_FILES_DIRECTORY + 'notes_on.png');
        $("#notes_toggle", frameDoc).attr("data-tooltip", "Edit Note to Self");
        $("#notes_toggle", frameDoc).css("top", "6px");
        composeContainer.data("notes", $("#note_entry", frameDoc).val());
      }
      adjust_b4g_menu_height();

      // refocus on datepicker and remove selected state on "with a note" checkbox
      if(which_gmail() === NEW_GMAIL) {
        $("#datepicker").focus();
        $("#gm-boomerang-note-checkbox").find("div[role='checkbox']").removeClass("b4g-state-selected");
      }
    });
    $("#notes_cancel_button", frameDoc).click(function(){

      // uncheck the note checkbox
      if(which_gmail() === NEW_GMAIL) {
        var $checkboxWrapper = $("#gm-boomerang-note-checkbox");
        $checkboxWrapper.find("div[role='checkbox']").removeClass("gm-checkbox-checked").attr("aria-checked", "false")
        $checkboxWrapper.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
        $("#gm-boomerang-edit-note").hide();
      }
      toggle_b4g_notes();
      $("#note_entry", frameDoc).val("");
      $("#notes_toggle", frameDoc).attr("src", B4G_STATIC_FILES_DIRECTORY + 'notes_off.png');
      $("#notes_toggle", frameDoc).attr("data-tooltip", "Add Note to Self");
      $("#notes_toggle", frameDoc).css("top", "6px");
      composeContainer.data("notes", "");
      adjust_b4g_menu_height();

      // refocus on datepicker and remove selected state on "with a note" checkbox
      if(which_gmail() === NEW_GMAIL) {
        $("#datepicker").focus();
        $("#gm-boomerang-note-checkbox").find("div[role='checkbox']").removeClass("b4g-state-selected");
      }
    });

    adjust_b4g_menu_height();


    if(browser_name === "Safari" && which_gmail() === NEW_GMAIL && isAReply && !is_pop_out_window()) {
      var b4gMenu = $("#b4g_menu");
      // Safari-specific thread view replies fix:
      // It seems that Gmail UI confuses Jquery's normal collision detection
      // Sometimes the menu appears offscreen due to Gmail's multiple scroll windows
      // To prevent this, we'll force it to drop down instead of up and scroll the page downward.
      b4gMenu.position({of:$(e.currentTarget), my: "left top", at: "left bottom", collision: "none"});
      var b4gMenuTop = b4gMenu.offset().top;
      $("#b4g_menu").closest(".Tm.aeJ").scrollTop(b4gMenuTop);
    }
  }
}

function compose_dialog_build_send_and_boomerang_params(composeContainer) {
  params = {};
  var gmailUser = get_gmail_user();
  var subject = get_element_by_name("subjectbox", composeContainer).val();

  var senders = [];
  var sentDates = [];

  //From
  var from = $(".J-JN-M-I.J-J5-Ji.az2.az4.L3", composeContainer);
  if(from.length > 0) {
    from = strip_email_addresses(from.text());
  }
  else {
    from = gmailUser;
  }

  var to = extract_email_addresses_from_field("to", composeContainer);
  var cc = extract_email_addresses_from_field("cc", composeContainer);
  var bcc = extract_email_addresses_from_field("bcc", composeContainer);

  if (!to && !cc && !bcc) {
    var pillboxes = extract_email_addresses_from_pillboxes(composeContainer);
    to = pillboxes["to"];
    cc = pillboxes["cc"];
    bcc = pillboxes["bcc"];
  }

  var threadId = get_send_later_thread_id(composeContainer);
  if (threadId == null || threadId === "undefined"){
    threadId = get_boomerang_thread_id();
  }

  params.subject = subject;
  params.senders = JSON.stringify(senders);
  params.guser = gmailUser;
  params.sentDates = JSON.stringify(sentDates);
  params.threadId = threadId;
  if(is_gmail_in_english()) {
    params.language = "English";
  } else {
    params.language = "notEnglish";
  }

  var bsCondition = $('.boomerangSendCondition', composeContainer).val();

  var urlDelay = get_boomerang_conditional_date_from_compose_window(composeContainer);
  var urlCondition;

  switch(bsCondition)
  {
    case "no reply":
      urlCondition = "reply";
      break;
    case "no click":
      urlCondition = "click";
      break;
    case "no open":
      urlCondition = "open";
      break;
    case "always":
      urlCondition = "none";
      break;
    default:
      urlCondition = "none";
  }

  params.offset = urlDelay.valueOf();
  params.conditional = urlCondition;

  // If we are in the inbox...
  if (get_element_by_name("^i").length > 0) {
    params.inbox = true;
  }
  else {
    params.inbox = false;
  }

  params.to = to;
  params.cc = cc;
  params.bcc = bcc;

  if (email_tracking_is_turned_on(composeContainer)) {
    params.trackingCode = get_tracking_code_from_compose_window(composeContainer);
  }

  var notes = composeContainer.data("notes");
  if (notes == null){
    notes = ""
  }
  params.notes = notes;

  return params;
}

function get_boomerang_conditional_date_from_compose_window(composeContainer){
  var theConditionalDate = $(".conditional-caption", composeContainer).data("returnDate");
  if (theConditionalDate == null){
    theConditionalDate = Date.today().addDays(2).addHours(7).addMinutes(Math.floor(Math.random() * 30) - 15);
  }
  return theConditionalDate;
}

/*
 *  7c. Notes
 */

// conditionally style for the new gmail
var notesByButtonClass, notesPadding;
if(which_gmail() === NEW_GMAIL) {
    notesByButtonClass = "";
    notesPadding = "10px 0px 7px 10px";
} else {
    notesByButtonClass = "by-button ";
    notesPadding = "10px 10px 7px 10px";
}

var _notesTemplate =
  "<div class='b4g-notes'>" +
    "<h3 style='margin: 7px 0 10px 0;'>Enter the note to yourself below.</h3>" +
    "<textarea rows='10' id='note_entry' style='border:1pxsolid#999;background-color:#fbf1b5;width:100%;box-sizing:border-box;min-width:220px; min-height: 146px;' tabindex='1'>Some text</textarea>" +
    "<div style='font-size:.9em'>This note will return with your message.</div>" +
    "<div style='text-align:right;padding:" + notesPadding + ";'>" +
      "<button id='notes_save_button' class='" + notesByButtonClass + "by-button-secondary' tabindex='1' style='width:70px;'>" +
        "<span class='by-button-text'>Save</span>" +
      "</button>"+
      "<button id='notes_cancel_button' class='" + notesByButtonClass + "' style='width:70px;margin-left:5px;' tabindex='1'>" +
        "<span class='by-button-text'>Cancel</span>" +
      "</button>" +
    "</div>" +
  "</div>"
;

function toggle_b4g_notes()
{
  var frameDoc = get_frame();
  $("#notes_menu", frameDoc).toggle();
  var b4g_inner_menu = $("#b4g_inner_menu", frameDoc);
  b4g_inner_menu.children().not("#notes_menu").toggle();
  $(".random", b4g_inner_menu).hide();
  adjust_b4g_menu_height();
}

function notes_success_callback(){
    toggle_b4g_notes();
    $("#note_entry", frameDoc).focus();
}
function notes_failure_callback(){
    show_dialog(
        "A Personal or Pro subscription is required to use this feature. To add notes, " +
        "please upgrade your subscription.",
        "Boomerang for Gmail",
        {
            "Upgrade": {
                text: "Upgrade to add notes",
                "class": "b4g-button green",
                click: function() {
                    window.open("https://b4g.baydin.com/subscriptions", "_blank");
                }
            },
            "Never mind": {
                text: "Never mind",
                "class": "b4g-button dialog-gray",
                click: function() { $(this).dialog("destroy"); }
            }
        },
        {
            width: 350,
            dialogClass: "b4g-upgradenag-dialog"
        }
    );
    track_event([ "notes", "blocked non-subscriber" ]);
}

// We are currently (4/6/18) unable to save notes that have emojis in them. Whenever we save a note,
// we will now check if it contains an emoji. If it does, we will display an error message with this text:
var EMOJI_IN_NOTE_ERROR = "Boomerang is unable to save notes that have emojis. Please remove them and try again.";
// credit to stackoverflow: https://stackoverflow.com/a/39652525/6833348
function hasEmoji(str) {
  var ranges = [
      '\ud83c[\udf00-\udfff]', // U+1F300 to U+1F3FF
      '\ud83d[\udc00-\ude4f]', // U+1F400 to U+1F64F
      '\ud83d[\ude80-\udeff]' // U+1F680 to U+1F6FF
  ];
  return str.match(ranges.join('|'));
}

/**
 * 7d. Bulk Boomerang
 */

function add_bulk_boomerang_button(){
  $(".Cq.aqL>div>div", frameDoc).each(function(){

    var currentBulkButtons = $(".bulkboomerang, .gm-boomerang-bcal-button-bulk", this);
    var deleteButtonIsVisible = $("[act='10']", this).filter(":visible").length > 0;

    if(currentBulkButtons.length === 0)
    {
      var newGmailClass = "";
      if(which_gmail() === NEW_GMAIL) {
          newGmailClass = " gm-boomerang-button-home";
      }
      var bulk_boomerang_button = $("<div aria-haspopup='true' style='-webkit-user-select: none; -moz-user-select:none;margin-bottom:0px;outline: none;' role='button' class='J-J5-Ji W6eDmd L3 J-Zh-I J-J5-Ji Bq L3' tabindex='0'><img class='f tk3N6e-I-J3' src='" + B4G_STATIC_FILES_DIRECTORY + "ico_boomerang_colors-32@2x.png' style='vertical-align: middle;width:28px;'/> Boomerang <div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji'> </div></div>");
      var buttonClasses = $("[role='button']", frameDoc).filter(function(){ return $(this).attr("act") === "20"; }).attr("class");

      bulk_boomerang_button.attr("class", "f " + buttonClasses + " bulkboomerang b4g_button" + newGmailClass);
      bulk_boomerang_button.css("display", "inline-block");
      bulk_boomerang_button.hide();
      if(which_gmail() === NEW_GMAIL) {
          bulk_boomerang_button.removeClass("T-I-ax7");
      }

      // Unfortunately, we have to disable bulk boomerang if we have multiple inboxes
      if ((b4g_is_multiple_inbox() || b4g_is_priority_inbox()) && which_gmail() === OLD_GMAIL ) {
        var tooltipError = "Priority Inbox and Multiple Inboxes are not yet\r\nsupported when using Boomerang from this view.\r\nPlease open each message individually to Boomerang it.";
        var dialogError = "Priority Inbox and Multiple Inboxes are not yet supported when using Boomerang from this view. <b>Please open each message individually</b> to Boomerang it.";
        bulk_boomerang_button.css("opacity", ".4");
        bulk_boomerang_button.attr("data-tooltip", tooltipError);
        bulk_boomerang_button.click(function(){
          show_dialog(dialogError)
        });
      }
      else {
        bulk_boomerang_button.click(function(e){
          toggle_boomerang_menu(e, this, bulk_boomerang_clicked);
          track_event([ "bulk boomerang", "click" ]);
        });
      }
      $(this).append(bulk_boomerang_button);


      //Build our create event button
      var threadBCalButton = document.createElement('div');
      var newGmailthreadBCalBtnClass = " gm-boomerang-bcal-button-thread gm-boomerang-bcal-button-bulk";

      //The next two lines of code give the button a style that looks like a GMail button
      threadBCalButton.innerHTML = "<div aria-haspopup='true' style='-webkit-user-select: none; -moz-user-select:none;margin-bottom:0px;margin-top:-2px;margin-left:0px;border-top-left-radius:0px !important;border-bottom-left-radius:0px !important; outline: none;' role='button' class='T-I J-J5-Ji nf T-I-ax7 L3" + newGmailthreadBCalBtnClass + "' tabindex='0'><img class='f tk3N6e-I-J3' src='https://b4g.baydin.com/site_media/calendar/img/ico_calendar@2x.png' style='vertical-align: middle;width:24px;'/> <div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji'> </div></div>";

      $threadBCalButton = $(threadBCalButton)
      $threadBCalButton.attr("class", "G-Ni J-J5-Ji boomerang-button b4g_button");

      $threadBCalButton.click(function(e) {
        thread_view_toggle_bcal_features_menu(e, $(this));
      });

      $threadBCalButton.hide();

      $(this).append($threadBCalButton);
    }
    if (deleteButtonIsVisible)
    {
      currentBulkButtons.not('.gm-boomerang-bcal-button-bulk').css("display", "inline-block");

      // Logic for showing/hiding BCal button: if we are in preview pane showing an email and no email bulk-selection 
      // checkboxes are checked, we show the BCal button

      var threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
        return $(this).parents(".zA").find("[data-thread-id]").attr("data-thread-id");
      }).get();
      // Sometimes in preview pane (but not all the time), the threadId is in the adjacent cell
      if (threadIds.length === 0) {
        threadIds = $("[gh='tl'] div[role='checkbox'][aria-checked='true']").map(function(){
          return $(this).parents(".zA").next().find("[data-thread-id]").attr("data-thread-id");
        }).get();
      }

      // If it's Preview Pane and there's a visible subject open, show BCal button
      if (threadIds.length === 0 && b4g_is_preview_pane()) {
        currentBulkButtons.not('.gm-boomerang-bcal-button-bulk').addClass("b4g-bulk-boomerang-bcal-btn-showing");
        $('.gm-boomerang-bcal-button-bulk').css("display", "inline-flex");

      } else {
        currentBulkButtons.not('.gm-boomerang-bcal-button-bulk').removeClass("b4g-bulk-boomerang-bcal-btn-showing");
        $('.gm-boomerang-bcal-button-bulk').hide();
      }
    }
    else
    {
      currentBulkButtons.hide();
    }
  });
}

function bulk_boomerang_clicked(caption){
  var notes = $("#note_entry", frameDoc).val();
  if (notes == null){
    notes = "";
  }

  if ($('[gh="tl"] div[role="checkbox"][aria-checked="true"]').length > 25) {
    show_dialog("You can Boomerang at most 25 messages at a time. Please choose up to 25 messages to Boomerang.")
    return;
  }

  var chosenReturnTime = caption_to_return_time(caption, BOOMERANG_MORNING_OFFSET);
  last_date_selected = chosenReturnTime;
  var readableDate = make_readable_date(chosenReturnTime, false);
  var chosenReturnTimeValue = chosenReturnTime.valueOf();
  var conditional;
  if(which_gmail() === NEW_GMAIL) {
    conditional = $("#gm-boomerang-reply-checkbox").find(".gm-checkbox").attr("aria-checked") === "true";
  } else {
    conditional = $("#conditionalBoomerang", frameDoc).attr("checked");
  }

  var overlay = $(BULK_OVERLAY); // prevent user navigation
  $("body").append(overlay);

  show_bulk_processing_notification();

  call_function_after_paywall_check(function() {
    if (which_gmail() === OLD_GMAIL) {
      try { // try catch for Gmail.js which isn't robust 
        var gmail = new Gmail();
        var selectedEmails = gmail.get.selected_emails_data();
        var gmailIds = [];
        for (var i = 0; i < selectedEmails.length; i++){
          gmailIds.push(selectedEmails[i].last_email)
        }
      }
      catch (e) {
        overlay.remove();
        close_b4g_menu();
        show_dialog("Something went wrong while using bulk boomerang. Please try again.")
        return;
      }
      var data = {"conditional": conditional, "notes": notes, "date": chosenReturnTimeValue, "gmailIds": gmailIds.join()}

      $.ajax({
        type: "get",
        url: "https://b4g.baydin.com/mailcruncher/schedulereturnbulk2",
        data: data,
        xhr: xhr_with_credentials,
        success: function(response) {
          var status = response["status"];
          if (status === "success") {
            archive_thread();
            click_gmail_refresh_button();
            var message = "Messages will return " + readableDate + ". ";
            setTimeout(function(){
              hijack_gmail_notification(message, 5000);
            }, 2000);
          }
          else if (status === "error") {
            show_dialog(response["message"]);
          }
          else if (status === "upgrade") {
            show_dialog(
              response["message"],
              "Boomerang for Gmail",
              {
                "Upgrade": {
                  text: "Upgrade to schedule",
                  "class": "b4g-button green",
                  click: function() {
                    window.open("https://b4g.baydin.com/subscriptions", "_blank");
                  }
                },
                "Never mind": {
                  text: "Never mind",
                  "class": "b4g-button dialog-gray",
                  click: function() { $(this).dialog("destroy"); }
                }
              },
              {
                width: 350,
                dialogClass: "b4g-upgradenag-dialog"
              }
            );
          }
          else {
            show_dialog("Something went wrong while using bulk boomerang. Please try again.");
          }
        },
        error: function(response) {
          show_dialog("Something went wrong while using bulk boomerang. Please try again.");
        },
        complete: function() {
          close_b4g_menu();
          click_gmail_refresh_button();
          overlay.remove();
          inline_manage.expire_cache();
        },
        dataType: "json"
      });
    } else {
      var threadIds = get_selected_new_ui_thread_ids();
      if (threadIds.length == 0) {
        show_dialog("Something went wrong while using Boomerang. Please try again. If still unsuccessful, contact support@baydin.com for help resolving the issue.");
        close_b4g_menu();
        overlay.remove();
        return;
      }
      var data = {"conditional": conditional, "notes": notes, "date": chosenReturnTimeValue, "threadIds": threadIds.join()}

      $.ajax({
        type: "post",
        url: "https://b4g.baydin.com/gmailmigration/boomerangfromthreadlist",
        data: data,
        xhr: xhr_with_credentials,
        success: function(response) {
          var status = response["status"];
          if (status === "success") {
            archive_thread();
            click_gmail_refresh_button();
            var message = "Messages will return " + readableDate + ". ";
            setTimeout(function(){
              hijack_gmail_notification(message, 5000);
            }, 2000);
          }
          else if (status === "error") {
            show_dialog(response["message"]);
          }
          else if (status === "upgrade") {
            show_dialog(
              response["message"],
              "Boomerang for Gmail",
              {
                "Upgrade": {
                  text: "Upgrade to schedule",
                  "class": "b4g-button green",
                  click: function() {
                    window.open("https://b4g.baydin.com/subscriptions", "_blank");
                  }
                },
                "Never mind": {
                  text: "Never mind",
                  "class": "b4g-button dialog-gray",
                  click: function() { $(this).dialog("destroy"); }
                }
              },
              {
                width: 350,
                dialogClass: "b4g-upgradenag-dialog"
              }
            );
          }
          else {
            show_dialog("Something went wrong while using bulk boomerang. Please try again.");
          }
        },
        error: function(response) {
          show_dialog("Something went wrong while using bulk boomerang. Please try again.");
        },
        complete: function() {
          close_b4g_menu();
          click_gmail_refresh_button();
          inline_manage.expire_cache();
          overlay.remove();
        },
        dataType: "json"
      });
    }
  }, function () {
    close_b4g_menu();
    overlay.remove();
  });
}

function show_bulk_processing_notification()
{
  var frameDoc = get_frame();
  var b4gMenu = $("#b4g_inner_menu", frameDoc);
  if (b4gMenu.length > 0) // If the menu is open
  {
    b4gMenu.empty();
    $(".b4g-ui-datepicker").css("display", "none");

    b4gMenu.append('<li style="list-style-type:none;text-align:center;padding:0px 2px;margin:6px 0px;">Processing...</li>');
    b4gMenu.append('<li style="list-style-type:none;padding:5px 10px;text-align:center;"><img src="' + B4G_STATIC_FILES_DIRECTORY + 'b4gloading.gif" alt="Loading..."></li>');

    adjust_b4g_menu_height();
  }
}



/**
 * 8. Send Later
 */

function compose_dialog_toggle_send_later_menu(e, owner, isAReply)
{
  var frameDoc = get_frame();
  var menuOptionClickCallback = function(caption){
    compose_dialog_send_later(caption, owner);
  };
  var recurringMenuOptionClickSuccessCallback = function(){
    compose_dialog_show_recurring_dialog(owner);
  };
    var recurringMenuOptionClickFailCallback = function(){
        show_dialog(
            "A Pro subscription is required to use this feature. To schedule recurring messages, " +
            "please upgrade your subscription.",
            "Boomerang for Gmail",
            {
                "Upgrade": {
                    text: "Upgrade to schedule",
                    "class": "b4g-button green",
                    click: function() {
                        window.open("https://b4g.baydin.com/subscriptions", "_blank");
                    }
                },
                "Never mind": {
                    text: "Never mind",
                    "class": "b4g-button dialog-gray",
                    click: function() { $(this).dialog("destroy"); }
                }
            },
            {
                width: 350,
                dialogClass: "b4g-upgradenag-dialog"
            }
        );
        track_event([ "compose dialog schedule recurring message", "blocked non-subscriber" ]);
    };

  //We want to prevent clicks on the b4g menu from closing the menu
  var target = get_target(e);
  if(target.className.indexOf("J-Zh-I") === -1 && target.className.indexOf("f") !== 0 && target.className.indexOf("VP5otc-d2fWKd") === -1 && which_gmail() !== NEW_GMAIL){
    return;
  } else if(false && which_gmail() === NEW_GMAIL) { // 01/24/18: the above logic seems unapplicable, so for new gmail UI, do nothing
    return;
  }

  var b4gMenu = frameDoc.getElementById("b4g_menu");
  if (b4gMenu)
  {
    close_b4g_menu(e, owner);
  }
  else
  {
    track_event([ "send later compose menu", "click" ]);
    
    //Create the menu
    var b4g_menu_top_offset = (!isAReply) ? $(e.currentTarget).position().top : ($(e.currentTarget).position().top + 73);
    var b4g_menu_left_offset = (!isAReply) ? $(e.currentTarget).position().left : ($(e.currentTarget).position().left + 40);

    var divClasses, divStyles;

    if(which_gmail() === NEW_GMAIL) {
        divClasses = "J-M J-M-ayU aka gm-boomerang-menu";
        divStyles = "";
    } else {
        divClasses = "";
        divStyles = "";
    }

    // send later menu
    var b4g_menu_core = '<ul id="b4g_menu" tabindex="0" class="b4g_menu" style="position: absolute; padding: 0px; top:'+b4g_menu_top_offset+'px; left:'+b4g_menu_left_offset+'px;  background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 17em;height: auto;min-height: 398px;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
                '<div id="b4g_inner_menu" class="b4g_menu SK AX ' + divClasses + '" style="' + divStyles + '-webkit-user-select: none; font-size:12px;padding:0;">' +
                  '<li id="b4g_menu_title" class="menu-caption" style="list-style-type:none;padding: 6px 11px 0 11px;">' +
                    'Send Message:' +
                    '<img id="b4g-menu-customization-button" class="Ha"  data-tooltip="Customize Menu" data-tooltip-delay="400" src="'+B4G_STATIC_FILES_DIRECTORY+'gear.png" height="16px" style="opacity:.9;background:none;height:16px;width:16px;position:absolute;right:13px;top:6px;cursor:pointer;">' +
                  '</li>' +
                  '<li class="b4g-menu-divider" style="height:1px;margin:6px 11px 6px 11px;background:#ddd;"></li>' +
                  '<li class="b4g-standard-times">' +
                  '</li>' +
                  '<li class="b4g-custom-times"></li>' +
                  '<li class="menu-caption" style="padding:7px 11px 4px 11px;">' +
                    'At a specific time:' +
                  '</li>' +
                  '<li class="b4g-menu-option" style="padding: 0 0 7px 11px;">' +
                    '<div style="color: #666; font-style: italic; font-size: 10px; margin-top: 3px;" class="b4g_menu">' +
                      'Examples: "Monday 9am", "Dec 23"' +
                    '</div>' +
                    '<div autocomplete="off">' +
                      '<div style="padding-top:3px; vertical-align: middle;" class="b4g_menu">' +
                        '<input style="margin-left:1px;padding:3px 22px 2px 2px;" class="b4g_menu" type="text" name="time" id="datepicker">' +
                        '<input id="specific-time-submit" type="submit" value="Confirm" style="margin: 0px 7px 5px 9px;font-size:11px;vertical-align:top;" class="b4g_menu by-button by-button-secondary">' +
                      '</div>' +
                      '<div style="color:#969696; margin-left: 1px;">' +
                        '<span id="date-preview" class="b4g_menu" style="color:green;"></span>' +
                      '</div>' +
                    '</div>' +
                  '</li>' +
                  '<li class="b4g-menu-divider" style="height:1px;margin:0px 11px;background:#ddd;"></li>' +
                  '<li class="b4g-menu-option" >' +
                    '<a id="recurring" style="margin:4px 0px;border-width:0px;color:black;cursor:pointer;display:block;padding: 6px 12px;" class="menu-anchor">' +
                      '<img id="recurring-image"  class="menu-anchor" src="'+B4G_STATIC_FILES_DIRECTORY+'recurring.png" height="16px" style="vertical-align:middle;"/>' +
                      '<span style="vertical-align:middle;margin-left:6px;">Schedule recurring message</span>' +
                    '</a>' +
                  '</li>' +
                '</div>' +
              '</ul>';

    var emailThread = $(".if > .aHU");
    // 2/17/15: some weird z-index and scrolling issues here. Try to attach menu to the thread. If it fails, try the document body.
    if (emailThread.length == 1 && which_gmail() !== NEW_GMAIL){
      emailThread.append(b4g_menu_core);
    } else if(which_gmail() === NEW_GMAIL && !isAReply) {
        get_compose_container(owner).append(b4g_menu_core);
    } else {
        $(owner).parent().append(b4g_menu_core);
    }

    var b4gContainer = $("#b4g_menu", frameDoc);

    var $dateForm = b4gContainer.find("form").first();
    prevent_form_submit($dateForm);

    keyboard_shortcuts.enable_menu_arrow_keys(b4gContainer);

    if (isAReply){

      // TODO fix keyboard shortcuts for Send Later when replying to a thread
      var condCheck;
      if(which_gmail() === NEW_GMAIL) {
        condCheck = '<li id="gm-boomerang-reply-checkbox" class="b4g_menu b4g-menu-option gm-boomerang-if-no-reply" title="Remember to follow up on messages if you don\'t get a response by a certain time.">' +
          '<div class="gm-checkbox" tabindex="1" role="checkbox" aria-checked="false" ><div class="T-Jo-auh"></div></div><span>if no reply</span>' +
        '</li>';
      } else {
        condCheck = '<li class="b4g_menu b4g-menu-option" style="padding:6px;">' +
                      '<input type="checkbox" id="conditionalSendLater" class="b4g_menu" name="condBoomerang"/> Only if nobody replies' +
                    '</li>';
      }

      $("#b4g_menu_title", frameDoc).after(condCheck);

      if(which_gmail() === NEW_GMAIL) {

          // clicking the checkbox
          $("#gm-boomerang-reply-checkbox").click(gmHandleCheckboxClick);

          // mousedown on checkbox to preventDefault (this way the checkbox isn't in focus)
          $("#gm-boomerang-reply-checkbox > .gm-checkbox").mousedown(function(e) {
              e.preventDefault();
          });
      }
    } else {
      if(which_gmail() === NEW_GMAIL) {

          // remove the gap made to accomodate checkboxes
          $(".b4g-standard-times").css({
              "margin-top": "6px"
          });
      }
    }

    append_customized_default_menu_items($(".b4g-standard-times", frameDoc));
    add_dividers_to_default_menu_items(frameDoc);

    $(".b4g_menu_item", frameDoc).click(function() { 
      function standardTimeClosure(text) {
        menuOptionClickCallback(text);
        track_event([ "boomerang menu", "send later time", text ]);
      }

      standardTimeClosure($(this).text()); 
    });
    add_resolved_time_hover_text($(".b4g_menu_item", frameDoc),
      SEND_LATER_MORNING_OFFSET);

    if(last_date_selected == null || last_date_selected < new Date()) {
      the_date = Date.today().addDays(2).addHours(8);
    }
    else {
      the_date = last_date_selected;
    }

    var strDate = the_date.toString("M/d/yyyy h:mm tt");
    var inputBox = $("#datepicker", frameDoc);
    inputBox.val(strDate);
    inputBox.keyup(function () {
      var input = $(this).val();
      update_date_preview(input);
    });
    inputBox.focus(function () {
      var input = $(this).val();
      update_date_preview(input);
    });

    $("input#specific-time-submit", frameDoc).click(function(e) {
      specific_time_chosen(e, menuOptionClickCallback);
    });

    $("#datepicker", frameDoc).keypress(function(e) {
        if(e.which === 13) {
            specific_time_chosen(e, menuOptionClickCallback);
        }
    });

    // Add customized times
    var customTimes = load_user_specified_dates();
    if (customTimes.length > 0) {
      for (var idx=0; idx<customTimes.length; idx++) {
          var menuItem = build_custom_b4g_menu_item(customTimes[idx], null);
          $(".b4g-custom-times", frameDoc).append(menuItem);
      }

      $(".b4g-custom-menu-item", frameDoc).click(function() {
        function customTimeClosure(text) {
          custom_time_chosen(text, menuOptionClickCallback);
          track_event([ "b4g menu", "picked", text ]);
        }

        customTimeClosure($(this).text());
      });
      add_resolved_time_hover_text($(".b4g-custom-menu-item", frameDoc),
        SEND_LATER_MORNING_OFFSET);
    }

    add_dividers_to_custom_menu_items(frameDoc);

    // conditionally attach the menu to the appropriate place
    if(which_gmail() === NEW_GMAIL && !is_pop_out_window()) {
      get_compose_container(owner).append(b4gContainer);
    } else if (!isAReply || is_pop_out_window()){
      if (is_pop_out_window()){
        $(owner).closest(".HE").after(b4gContainer);
      }
      else{
        $(owner).parent().append(b4gContainer);
      }
    }

    var custom = $("#b4g-menu-customization-button", frameDoc);
    custom.click(function() { show_menu_customization_dialog(); });
    custom.hover(function () {
      $(this).css("opacity", "1");
    }, function () {
      $(this).css("opacity", ".9");
    });

    var recurring = $("a#recurring", frameDoc);
    recurring.click(function(){
            track_event([ "compose dialog schedule recurring message", "clicked" ]);
            continue_if_on_pro_plan(recurringMenuOptionClickSuccessCallback, recurringMenuOptionClickFailCallback);
    });
    recurring.hover(function() {$(this).addClass("J-N-JT");}, function() {$(this).removeClass("J-N-JT");});

    $(frameDoc).bind('click', {owner: owner}, b4g_menu_frameDoc_click_handler);
    bind_datepicker(inputBox);

    // Move datepicker button into the input text field
    $(".b4g-ui-datepicker-trigger", frameDoc).css("cursor", "pointer");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-left", "-21px");
    $(".b4g-ui-datepicker-trigger", frameDoc).css("margin-top", "-2px");
    $(".b4g-ui-datepicker-trigger", frameDoc).hover(function () {
      $(this).css("box-shadow", "0px 0px 3px #aaa");
    }, function () {
      $(this).css("box-shadow", "none");
    });

    // Prevent Gmail from making the textbox unselectable
    inputBox.mousedown(function(event){
      event.stopImmediatePropagation();
    });
    inputBox.css("-moz-user-select","text");

    inputBox.parents().each(function(){ $(this).css("-moz-user-select","text"); });

    $("#conditionalSendLater", frameDoc).click(function(){
      if ($("[name='subject']:visible",frameDoc).length > 0){
        show_dialog_with_custom_header("<p>If you change the message subject, the new message becomes part of a separate conversation, so Boomerang's response tracking will not work properly.</p>"+
              "<p>To ensure that responses are detected accurately, please copy your message text, discard this email, and paste the text into a new reply.</p>",
              "Did you change the subject?");
        $(this).attr("checked", true);
      }

    });


    // Focus input box for immediate typing
    inputBox.select();
    $('span#date-preview.b4g_menu',frameDoc).text("");

    adjust_b4g_menu_height();

    // Final adjustments

    var menu_height_offset;
    if(which_gmail() === NEW_GMAIL && isAReply) {
      var b4gMenu = $("#b4g_menu");
      b4gMenu.position({of:$(e.currentTarget), my: "left bottom", at: "left top"});
      // It seems that Gmail UI confuses Jquery's normal collision detection
      // Sometimes the menu appears offscreen due to Gmail's multiple scroll windows
      // If the css-top is too negative, we'll force it to drop down instead of up and scroll the page downward.
      var top = b4gMenu.css("top");
      if (parseInt(top) < -35) {
        b4gMenu.position({of:$(e.currentTarget), my: "left top", at: "left bottom", collision: "none"});
        var b4gMenuTop = b4gMenu.offset().top;
        $("#b4g_menu").closest(".Tm.aeJ").scrollTop(b4gMenuTop);
      }

    } if(which_gmail() === NEW_GMAIL) {
      var b4gMenu = $("#b4g_menu");
      b4gMenu.position({of:$(e.currentTarget), my: "left bottom", at: "left top"});
    } else if(!isAReply){
      menu_height_offset = $(b4gContainer).height() - 47;
      $(b4gContainer).css("top", "-" + menu_height_offset + "px");
    } else {
      var isEmailThread = $(".aDd").length > 0;
      if (is_pop_out_window() && isEmailThread){
        menu_height_offset = $(b4gContainer).height() - 198;
        $(b4gContainer).css("top", "-" + menu_height_offset + "px");
        $(b4gContainer).css("left", "39px");
      }
      else{
        var b4gMenu = $("#b4g_menu");
        b4gMenu.position({of:$(e.currentTarget), my: "left bottom", at: "left top"});
        // It seems that Gmail UI confuses Jquery's normal collision detection
        // Sometimes the menu appears offscreen due to Gmail's multiple scroll windows
        // If the css-top is too negative, we'll force it to drop down instead of up and scroll the page downward.
        var top = b4gMenu.css("top");
        if (parseInt(top) < -35) {
          b4gMenu.position({of:$(e.currentTarget), my: "left top", at: "left bottom", collision: "none"});
          var b4gMenuTop = b4gMenu.offset().top;
          $("#b4g_menu").closest(".Tm.aeJ").scrollTop(b4gMenuTop);
        }
      }
    }

    if(which_gmail() === NEW_GMAIL && !isAReply) {
      // move the menu up a little more
      var topDistance = Number(b4gContainer.css("top").slice(0, -2));
      b4gMenu.css({ "top": topDistance - 25 + "px" });
    } else if(which_gmail() === NEW_GMAIL && isAReply) {
      var topValue= b4gMenu.css("top").slice(0,-2);
      b4gMenu.css({
        "top": (topValue - 25) + "px"
      });
    }
  }
}

/**
 * Gathers the necessary information from a message and tells the b4g.baydin.com server when it should be sent.
 * @param caption A caption from the Send Later menu representing when the message should be sent
 * @remarks Makes an AJAX call to b4g.baydin.com through the file background.html
 */
function compose_dialog_send_later(caption, owner)
{
  var composeContainer = get_compose_container(owner);

  var gmailUser = get_gmail_user();
  var subject = get_element_by_name("subjectbox", composeContainer).val();

  if(subject.length > 200)
  {
    show_dialog("You've exceeded the maximum subject length. Please shorten your subject and try again.");
    return;
  }
  //From
  var from = $(".J-JN-M-I.J-J5-Ji.az2.az4.L3", composeContainer);
  if(from.length > 0)
  {
    from = strip_email_addresses(from.text());
  }
  else
  {
    from = gmailUser;
  }

  var to = extract_email_addresses_from_field("to", composeContainer);
  var cc = extract_email_addresses_from_field("cc", composeContainer);
  var bcc = extract_email_addresses_from_field("bcc", composeContainer);

  if (!to && !cc && !bcc) {
    var pillboxes = extract_email_addresses_from_pillboxes(composeContainer);
    to = pillboxes["to"];
    cc = pillboxes["cc"];
    bcc = pillboxes["bcc"];
  }

  if(!to && !cc && !bcc)
  {
    show_dialog("Please enter a recipient.");
    return;
  }
  if (check_if_has_invalid_recipients(composeContainer)){
    show_dialog("One of the addresses you entered is not recognized. Please make sure that all addresses are properly formed.")
    return;
  }

  var recipients = to + " " + cc + " " + bcc;
  var emailRegEx = EMAIL_REGEX;
  var matches = recipients.toLowerCase().match(emailRegEx);
  matches = eliminateDuplicates(matches);

  if(matches.length > 100)
  {
    show_dialog("Boomerang limits you to 100 recipients at a time. Please enter a shorter list.");
    return;
  }

  //Send time
  var offset = caption_to_return_time(caption, SEND_LATER_MORNING_OFFSET);
  last_date_selected = offset;
  var readableDate = make_readable_date(offset, false);

  var approxTimeSaved = new Date();

  //Rank in drafts folder
  var rank = "0/0";

  var boomerang_reminder = "None";
  if ($('.boomerangSendCheck',composeContainer).is(':checked')){

    var theConditionalDate = get_boomerang_conditional_date_from_compose_window(composeContainer);
    if (theConditionalDate <= offset){
      show_dialog("Your Send Later message must be scheduled earlier than your Boomerang reminder.");
      return;
    }
    else{
      boomerang_reminder = theConditionalDate.valueOf();
    }
  }

  var bsCondition = $('.boomerangSendCondition',composeContainer).val();
  var urlCondition = "";
  switch(bsCondition)
  {
    case "no reply":
      urlCondition = "reply";
      break;
    case "no click":
      urlCondition = "click";
      break;
    case "no open":
      urlCondition = "open";
      break;
    case "always":
      urlCondition = "none";
      break;
    default:
      urlCondition = "none";
  }

  var conditionalSendLater = "False";
  var frameDoc = get_frame();

  if (which_gmail() !== NEW_GMAIL) {
    if($('#conditionalSendLater', frameDoc).attr('checked')){
      conditionalSendLater = "True";
    }
  } else {
    if ($("#gm-boomerang-reply-checkbox").find(".gm-checkbox").attr("aria-checked") === "true") {
      conditionalSendLater = "True";
    }
  }

  var threadId = get_element_by_name("draft", composeContainer).val();
  var draftId = composeContainer.find("*[name='draft']").first().val();
  if (draftId) {
    draftId = draftId.replace("#", "");
  }

    close_b4g_menu();
    $(composeContainer)
        .append('<div class="b4g-ui-widget-overlay b4g-overlay overlay"></div>')
        .append(
            '<div class="b4g-overlay" style="position: absolute; top: 50%; left: 50%; margin: -38px 0 0 -120px; background: white; width: 220px; text-align: center; padding: 15px; z-index: 1001;">' +
                '<div style="font-size: 14px; padding-bottom: 15px;">Scheduling message...</div>' +
                '<img height="32" width="32" src="' + B4G_STATIC_FILES_DIRECTORY + 'b4gloading.gif">' +
            '</div>'
        )
    ;

  if (is_uploading_attachment_in_new_compose_window(composeContainer)){
    show_dialog("Please wait for your attachments to upload before sending.");
    $(".b4g-overlay", composeContainer).remove();
  }
  else{
    call_function_after_draft_has_been_saved(composeContainer, function(err){
      if(err) { show_failed_to_detect_saved_draft(); return; }

      var threadId = get_send_later_thread_id(composeContainer);
      if (threadId == null || threadId === "undefined"){
        threadId = get_boomerang_thread_id();
      }
      var params = {};
      params.guser                = gmailUser;
      params.from                 = from;
      params.subject              = subject;
      params.rank                 = rank;
      params.esttimesaved         = approxTimeSaved.valueOf();
      params.offset               = offset.valueOf();
      params.to                   = to;
      params.cc                   = cc;
      params.bcc                  = bcc;
      params.boomerangoffset      = boomerang_reminder;
      params.boomerangconditional = urlCondition;
      params.sendlaterconditional = conditionalSendLater;
      params.threadId             = threadId;
      params.draftId              = draftId;
      if(is_gmail_in_english()) {
        params.language = "English";
      } else {
        params.language = "notEnglish";
      }
      var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
      if (trackingCheckboxIsChecked){
        var trackingCode = get_tracking_code_from_compose_window(composeContainer);
        params.trackingCode = trackingCode;
      }
      var notes = composeContainer.data("notes");
      if (notes == null){
        notes = ""
      }
      params.notes = notes;

      var url;
      if(which_gmail() === OLD_GMAIL) { 
        var baseurl = "https://b4g.baydin.com/mailcruncher/schedulesend";
        url = generate_url_with(baseurl, params);
      } else {
        url = "https://b4g.baydin.com/gmailmigration/sendlater";
      }
      compose_dialog_send_later_helper(
        url, readableDate, composeContainer, { condition: conditionalSendLater }, params
      );
    });
  }
}

function generate_url_with(baseurl, params) {
    var paramString = "?";
    for(var k in params) {
        if(paramString !== "?") {
            paramString += "&";
        }
        paramString += k + "=" + encodeURIComponent(params[k]);
    }
    if(paramString === "?") {
        paramString = "";
    }
    return baseurl + paramString;
}

function compose_dialog_send_later_helper(url, readableDate, composeContainer, extra, params) {
  extra = extra || {};
  var currentLocation = String(document.location);
  var message = "Message will be sent " + readableDate + ". ";

  var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
  var guid;
  if (trackingCheckboxIsChecked){
    guid = get_tracking_code_from_compose_window(composeContainer);
  }

  call_function_after_paywall_check(send_send_later_request, function() {
    $(".b4g-overlay", composeContainer).remove();
  });
  function send_send_later_request(){
    setTimeout(function(){
      close_compose_window(composeContainer);
    }, SEND_LATER_CLOSE_NEW_COMPOSE_WINDOW_DELAY);
    function handle_send_later_response(b4gStatus, requestedURL, successMessage){
      if (b4gStatus === SUCCESS)
      {
        show_viral_hook_if_appropriate({
          type: "send-later", isIfNoReply: extra.condition === "True"
        });
                inline_manage.expire_cache();
                if (is_pop_out_window()){
                  delayed_redirect_and_show_gmail_notification(message, SEND_LATER_REDIRECT_DELAY, "send_new_compose");
                } else if(is_dialog(composeContainer)){
                  click_gmail_refresh_button();
                  hijack_gmail_notification(message, 5000);
                } else{
                  click_gmail_refresh_button();
                }
      }
      else if (is_nag_status(b4gStatus))
      {
        nag_screen(b4gStatus);
        inline_manage.expire_cache();
      }
      else if (b4gStatus === PAYWALL)
      {
        nag_screen(b4gStatus);
        window.location = currentLocation;
        inline_manage.expire_cache();
      }
      else if (b4gStatus !== SUCCESS)
      {
        show_dialog("Attempt failed: " + POSSIBLE_RESPONSES[b4gStatus]);
        window.location = currentLocation;
      }
    }

    if(which_gmail() === OLD_GMAIL) { 
      send_image_request(url, handle_send_later_response, message);
    } else {
      $.ajax({
        type: "POST",
        url: url,
        data: params,
        xhr: xhr_with_credentials,
        success: function(response) {
          var status = response["status"];
          if (status === "success") {
            show_viral_hook_if_appropriate({
              type: "send-later", isIfNoReply: extra.condition === "True"
            });
            inline_manage.expire_cache();
            if (is_pop_out_window()){
              delayed_redirect_and_show_gmail_notification(message, SEND_LATER_REDIRECT_DELAY, "send_new_compose");
            } else if(is_dialog(composeContainer)){
              click_gmail_refresh_button();
              hijack_gmail_notification(message, 5000);
            } else{
              click_gmail_refresh_button();
            }
          } else if (status === "nag" && response["message"] !== "paywall") {
            nag_screen_new_gmail(response["message"]);
            inline_manage.expire_cache();
          }
          else if (status === "nag" && response["message"] === "paywall") {
            nag_screen_new_gmail(response["message"]);
            window.location = currentLocation;
            inline_manage.expire_cache();
          } else if (status === "error") {
            show_dialog("Attempt failed: " + response["message"]);
            window.location = currentLocation;
          }
        }
    });
    }
    // Delay the redirect if it's a pop out window (wait for errors first)
        if (!is_pop_out_window() && !is_dialog(composeContainer)){
      delayed_redirect_and_show_gmail_notification(message, SEND_LATER_REDIRECT_DELAY, "send_new_compose");
        }
  }
}



 /**
 * 8a. Edit
 */


function insert_edit_message_buttons_if_necessary() {
  var $controls = $(".gU.Up > .J-J5-Ji"); // Send button container

  if($controls.find(".by-button").length > 0) { return; }

  var oldGmailId = _params["b4goldgid"];
  var newThreadId = _params["b4gnewtid"];

  var $save = $(
    '<button class="by-button by-button-secondary" style="height: 30px; margin: 6px 0;">' +
      '<span class="by-button-text">Save message</span>' +
    '</button>'
  );
  var $cancel = $(
    '<button class="by-button" style="height: 30px; margin: 6px 0 6px 5px;">' +
      '<span class="by-button-text">Cancel</span>' +
    '</button>'
  );

  var requestSent = false;
  var show_error = function(response, defMsg) {
    var msg = response.responseText || response.error;
    if($.type(msg) !== "string") {
      msg = "Sorry, there was an error. We can't edit your message at the moment. " +
        "Try again later."
      ;
    }

    alert(msg);

    $save.find(".by-button-text").text("Save message");
    $cancel.find(".by-button-text").text("Cancel");
  };
  $save.click(function() {
    var url = "https://b4g.baydin.com/inline-manage/update-";
    url += ($(".b4g-inline-send").length > 0 ? "send-later" : "recurring");

    $save.find(".by-button-text").text("Saving...");

    var composeContainer = get_compose_container($save);
    call_function_after_draft_has_been_saved(composeContainer, function(err) {
      $.ajax({
        type: "post",
        url: url,
        data: { "oldGmailId": oldGmailId, "newThreadId": newThreadId },
        xhr: xhr_with_credentials,
        success: function(data) {
          if(!data["success"]) { show_error(data); return; }

          window.close();
        },
        error: show_error,
        dataType: "json"
      });
      requestSent = true;
    });
  });
  $cancel.click(function() {
    $cancel.find(".by-button-text").text("Cancelling...");
    $.ajax({
      type: "post",
      url: "https://b4g.baydin.com/inline-manage/delete-draft",
      data: { "gmailId": _params["b4gdraftgid"] },
      xhr: xhr_with_credentials,
      success: function(data) {
        if(!data["success"]) { show_error(data); return; }

        window.close();
      },
      error: show_error,
      dataType: "json"
    });
    requestSent = true;
  });

  $controls
    .append($save)
    .append($cancel)
    .children(".T-I-atl").remove()
  ;

    // hide send-and-archive buttons
    $(".T-I.J-J5-Ji.aoO.L3.T-I-ax7").hide();
    $(".T-I.J-J5-Ji.Uo.T-I-atl.L3").hide();

  var $attachIcon = $(".gU.er");
  var pos = $attachIcon.position();

  // Adjust left edge of attachments toolbar
  if(pos) { $(".eq").css("left", pos.left + $attachIcon.outerWidth() - 4); }

  window.onbeforeunload = window.onunload = function() {
    if(!requestSent) { $cancel.click(); }
    window.opener.postMessage("b4g-edit-window-close", "https://mail.google.com");
  };
}

function switch_to_b4g_manage_editing_view(){
  insert_edit_message_buttons_if_necessary();

  // Uncollapse all messages in thread
  var collapsedMessages = $(".adf.ads:visible");
  if(collapsedMessages.length) {
    $(".T-I-JN.L3 .gx").each(simulate_click).click();
  }

  // Hide all messages that aren't being edited
  if($(".h7.Jux0I").length > 0) { $(".h7:not(.Jux0I)").hide(); }

  // Consider moving this stuff to CSS files
  $(".nH.oy8Mbf.qp", frameDoc).hide(); // top bar
  $(".Bu.y3", frameDoc).hide(); // ad bar
  $(".nH.Gn", frameDoc).hide(); // lower bar
  $(".cf.gz", frameDoc).hide(); // reply bar
  $(".Cp", frameDoc).hide(); // hide  inbox view
  $("[role='button']", frameDoc)  // all buttons
    .not(".conditional-caption, .wG.J-Z-I") // filter buttons in the format toolbar
    .filter(function() { return $(this).closest(".aDh, [role='toolbar']").length <= 0; })
    .hide()
  ;
  $(".oh, .az5 .Uz").hide(); // delete draft button and separator
  $(".boomerang-button", frameDoc).hide();
  $(".d2", frameDoc).hide(); // draft saved
  $(".hP", frameDoc).hide(); // broken subject
  $(".nH > .ha").hide(); // mark-as-important UI
  $(".aeH").hide(); // top input options tool bar
  $(".ar5.J-J5-Ji").hide(); // paginator info
  $(".mq, .ae4").hide(); // Random grey boxes and lines
  $(".PS").hide(); // bottom ad
  $(".adz").hide(); // Hide recipients bars (recipients are already shown in the editable area)
  $(".w-asV.aiw").hide(); // random top bar
  $(".AT").hide(); // Upper right ad

  // Adding class to hide and show inline-manage elements with css
  $("body")
    .addClass("b4g-state-edit-message")
    .attr("style", "overflow: auto!important") // For some reason gmail disables scrolling
  ;
  $(".nH.oy8Mbf.nn.aeN", frameDoc).css({ "visibility": "hidden", "width": 100 }); //side bar
  $(".gB.acO").css({ "padding-top": 0, "border": "none" });
  $(".adn").css("padding-bottom", 0);
  $(".G3.G2").css("border", "none");
  $(".aeJ") // Message container
    .css({ "height": "auto", "padding-right": 0, "overflow": "hidden" })
  ;
  // Hacky fix to weird scroll bug that occurs when user opens formatting menu
  $(".aeJ")[0].scrollTop = 0;

  var padding = $(".aoY").width() - (
    $(".b4g-inline-manage:visible").outerWidth() - $(".I5").outerWidth()
  );
  $(".aoY") // Hide and adjust width of left padding of edit area
    .css({ "visibility": "hidden" })
    .width(padding)
  ;

  $("#b4g_clicktoclose", frameDoc).click(function(){
    ConfirmNavigateAway = false;
    window.close();
    setTimeout(function(){ window.location = "mail.google.com"; }, 250);
  });
}

function get_b4g_user_from_manage_page(){
  return _params["b4guser"] || "";
}


/**
 * 9. Recurring
 */

function compose_dialog_show_recurring_dialog(owner) {
  var frameDoc = get_frame();
  var composeContainer = get_compose_container(owner);

  close_b4g_menu();

  if (browser_name === "Old Safari"){
    alert("This feature is available in Safari versions 5.1 and higher. Please update Safari to use this feature.");
  }
  else{
    var to = extract_email_addresses_from_field("to", composeContainer);
    var cc = extract_email_addresses_from_field("cc", composeContainer);
    var bcc = extract_email_addresses_from_field("bcc", composeContainer);

    if (!to && !cc && !bcc) {
      var pillboxes = extract_email_addresses_from_pillboxes(composeContainer);
      to = pillboxes["to"];
      cc = pillboxes["cc"];
      bcc = pillboxes["bcc"];
    }

    if(!to && !cc && !bcc)
    {
      show_dialog("Please enter a recipient.");
      return;
    }
    if (check_if_has_invalid_recipients(composeContainer)){
      show_dialog("One of the addresses you entered is not recognized. Please make sure that all addresses are properly formed.")
      return;
    }

    $(".dialogdiv").remove();
    var dialog = "";
    if (which_gmail() === NEW_GMAIL) {
      dialog ="<div class='dialogdiv' style='display:none;'>" +
                "<div id='recurring_dialog' class='recurring-dialog-new-ui'>"+
                  "<div class='recurring-menu-title-new-ui'>Schedule Recurring Message" +
                  "</div>" +
                  "<div id='start_date_time' class='recurring-field-new-ui'>" +
                    "<span class='recurring-row-title'>Starts</span>"  +
                    "<span id='start_date' class='recurring_right_col'>" +
                      "<input id='start_date_input' type='text' name='starts' size='15'/>" +
                      "<span id='start_time'>" +
                        "Send Time: " +
                        "<input id='start_time_input' name='time' size='10'/>" +
                      "</span>" +
                    "</span>" +
                  "</div>" +
                  "<div  class='recurring-field-new-ui'>" +
                    "<span class='recurring-row-title'>Repeats</span>" +
                    "<select id='frequency'  class='recurring_right_col'>" +
                      "<option value='day'> Daily</option>" +
                      "<option value='week' selected='selected'>Weekly</option>" +
                      "<option value='weekday' >Every Weekday</option>" +
                      "<option value='month' >Monthly on the same date</option>" +
                      "<option value='monthweek' >Monthly on the same week</option>" +
                      "<option value='year'>Yearly</option>" +
                    "</select>" +
                  "</div>" +
                  "<div id='num_time_interval'  class='recurring-field-new-ui'> Every <span class='recurring_right_col'> <input type='number' value='1' min='1' max='12' name='num_interval' id='num_interval'/>" +
                    "<span id='interval'> week</span>" +
                    "<div id='date_position_div' style='display: inline-block;'>" +
                      "<span class='recurring-field-new-ui'>" +
                        "Date: " +
                        "<input type='number' value='1' min='1' max='31' id='date_position' name='date_position'/>" +
                      "</span>" +
                    "</div>" +
                    "<div id='set_position_div' style='display: inline-block;'>" +
                      "<span class='recurring-field-new-ui'>" +
                        "<select id='set_position'>" +
                          "<option value='1'>First</option>" +
                          "<option value='2'>Second</option>" +
                          "<option value='3'>Third</option>" +
                          "<option value='4'>Fourth</option>" +
                          "<option value='-1'>Last</option>" +
                        "</select>" +
                      "</span>" +
                      "<span class='recurring-field-new-ui'>" +
                        "<select id='set_position_day'>" +
                          "<option value='6'>Sunday</option>" +
                          "<option value='0'>Monday</option>" +
                          "<option value='1'>Tuesday</option>" +
                          "<option value='2'>Wednesday</option>" +
                          "<option value='3'>Thursday</option>" +
                          "<option value='4'>Friday</option>" +
                          "<option value='5'>Saturday</option>" +
                        "</select>" +
                      "</span>" +
                    "</div>" +
                  "</div>" +
                  "<div id='days_of_week'  class='recurring-field-new-ui'>" +
                    "<span class='recurring-row-title'>On</span>" +
                    "<span class='recurring_right_col' style='vertical-align: top;'>" +
                      "<input class='day_cb' type='checkbox' value='6' name='Sun' style='margin-left:0px'/> Sun" +
                      "<input class='day_cb' type='checkbox' value='0' name='Mon'/> Mon" +
                      "<input class='day_cb' type='checkbox' value='1' name='Tue'/> Tue" +
                      "<input class='day_cb' type='checkbox' value='2' name='Wed'/> Wed" +
                      "<input class='day_cb' type='checkbox' value='3' name='Thur'/> Thur" +
                      "<input class='day_cb' type='checkbox' value='4' name='Fri'/> Fri" +
                      "<input class='day_cb' type='checkbox' value='5' name='Sat'/> Sat" +
                    "</span>" +
                  "</div>" +
                  "<div  class='recurring-field-new-ui'>" +
                    "<span class='recurring-row-title'> Ends </span>" +
                    "<div class='recurring_right_col' style='display:inline-block;vertical-align: middle; line-height: 24px;'>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_num_occurences' name='end_group' checked/> After <input type='number' value='10' min='1' max='100' id='num_occurences' name='num_occurences'/> messages" +
                      "</div>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_end_date' name='end_group'/> On <input id='end_date' value='' name='end_date' size='15'/>" +
                      "</div>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_no_end' name='end_group'/> No end date <br/>" +
                      "</div>" +
                    "</div>" +
                  "</div>" +
                  "<br/><br/><br/><br/>" +
                  "<div id='summary' class='recurring-field-new-ui'>" +
                    "<span class='recurring-row-title'>Summary:</span>" +
                    "<div id='recurring_feedback' class='recurring_right_col' style='display:inline-block;padding-right:20px;'> </div>" +
                  "</div>" +
                  "<div class='b4g-button-container recurring-btn-container-new-ui' align='right'>" +
                    "<button id='schedule_recurring' class='b4g-button red recurring-schedule-btn-new-ui'> Schedule </button>" +
                    "<button id='cancel_recurring' class='b4g-button dialog-gray recurring-cancel-btn-new-ui'>Cancel</button>" +
                  "</div>" +
                  "<br/>" +
                "</div>" +
              "</div>";
    } else {
      dialog ="<div class='dialogdiv' style='display:none;'>" +
                "<div id='recurring_dialog'>"+
                  "<div id='start_date_time' class='recurring_field'>" +
                    "<span class='recurring-row-title'>Starts</span>"  +
                    "<span id='start_date' class='recurring_right_col'>" +
                      "<input id='start_date_input' type='text' name='starts' size='15'/>" +
                      "<span id='start_time'>" +
                        "Send Time: " +
                        "<input id='start_time_input' name='time' size='10'/>" +
                      "</span>" +
                    "</span>" +
                  "</div>" +
                  "<div  class='recurring_field'>" +
                    "<span class='recurring-row-title'>Repeats</span>" +
                    "<select id='frequency'  class='recurring_right_col'>" +
                      "<option value='day'> Daily</option>" +
                      "<option value='week' selected='selected'>Weekly</option>" +
                      "<option value='weekday' >Every Weekday</option>" +
                      "<option value='month' >Monthly on the same date</option>" +
                      "<option value='monthweek' >Monthly on the same week</option>" +
                      "<option value='year'>Yearly</option>" +
                    "</select>" +
                  "</div>" +
                  "<div id='num_time_interval'  class='recurring_field'> Every <span class='recurring_right_col'> <input type='number' value='1' min='1' max='12' name='num_interval' id='num_interval'/>" +
                    "<span id='interval'> week</span>" +
                    "<div id='date_position_div' style='display: inline-block;'>" +
                      "<span class='recurring_field'>" +
                        "Date: " +
                        "<input type='number' value='1' min='1' max='31' id='date_position' name='date_position'/>" +
                      "</span>" +
                    "</div>" +
                    "<div id='set_position_div' style='display: inline-block;'>" +
                      "<span class='recurring_field'>" +
                        "<select id='set_position'>" +
                          "<option value='1'>First</option>" +
                          "<option value='2'>Second</option>" +
                          "<option value='3'>Third</option>" +
                          "<option value='4'>Fourth</option>" +
                          "<option value='-1'>Last</option>" +
                        "</select>" +
                      "</span>" +
                      "<span class='recurring_field'>" +
                        "<select id='set_position_day'>" +
                          "<option value='6'>Sunday</option>" +
                          "<option value='0'>Monday</option>" +
                          "<option value='1'>Tuesday</option>" +
                          "<option value='2'>Wednesday</option>" +
                          "<option value='3'>Thursday</option>" +
                          "<option value='4'>Friday</option>" +
                          "<option value='5'>Saturday</option>" +
                        "</select>" +
                      "</span>" +
                    "</div>" +
                  "</div>" +
                  "<div id='days_of_week'  class='recurring_field'>" +
                    "<span class='recurring-row-title'>On</span>" +
                    "<span class='recurring_right_col' style='vertical-align: top;'>" +
                      "<input class='day_cb' type='checkbox' value='6' name='Sun' style='margin-left:0px'/> Sun" +
                      "<input class='day_cb' type='checkbox' value='0' name='Mon'/> Mon" +
                      "<input class='day_cb' type='checkbox' value='1' name='Tue'/> Tue" +
                      "<input class='day_cb' type='checkbox' value='2' name='Wed'/> Wed" +
                      "<input class='day_cb' type='checkbox' value='3' name='Thur'/> Thur" +
                      "<input class='day_cb' type='checkbox' value='4' name='Fri'/> Fri" +
                      "<input class='day_cb' type='checkbox' value='5' name='Sat'/> Sat" +
                    "</span>" +
                  "</div>" +
                  "<div  class='recurring_field'>" +
                    "<span class='recurring-row-title'> Ends </span>" +
                    "<div class='recurring_right_col' style='display:inline-block;vertical-align: middle; line-height: 24px;'>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_num_occurences' name='end_group' checked/> After <input type='number' value='10' min='1' max='100' id='num_occurences' name='num_occurences'/> messages" +
                      "</div>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_end_date' name='end_group'/> On <input id='end_date' value='' name='end_date' size='15'/>" +
                      "</div>" +
                      "<div style='margin-bottom:3px;'>" +
                        "<input type='radio' id='radio_no_end' name='end_group'/> No end date <br/>" +
                      "</div>" +
                    "</div>" +
                  "</div>" +
                  "<br/><br/><br/><br/>" +
                  "<div id='summary' class='recurring_field'>" +
                    "<span class='recurring-row-title'>Summary:</span>" +
                    "<div id='recurring_feedback' class='recurring_right_col' style='display:inline-block;padding-right:20px;'> </div>" +
                  "</div>" +
                  "<div class='b4g-button-container' align='center'>" +
                    "<button id='schedule_recurring' class='b4g-button red' style='margin:4px 10px;'> Schedule </button>" +
                    "<button id='cancel_recurring' class='b4g-button dialog-gray' style='margin:4px 10px;'>Cancel</button>" +
                  "</div>" +
                  "<br/>" +
                "</div>" +
              "</div>";
    }


    $("body", frameDoc).append($(dialog));


    var $recurringDialog = $(".dialogdiv",frameDoc).dialog({
      modal: true,
      title: 'Schedule Recurring Message',
      closeOnEscape: true,
      width: 530,
      dialogClass: "recurringDialog"
    });

    if (which_gmail() === NEW_GMAIL) {
      $recurringDialog.parent().children().first().remove();
      $recurringDialog.parent().removeClass('b4g-ui-widget-content');
      $recurringDialog.addClass('b4g-recurring-dialog-container-new-ui');
    }

    $(".dialogdiv", frameDoc).css({"padding" : "0px"});

    $("#start_date_input", frameDoc).datepicker({
      showOn: "button",
      buttonImage: B4G_STATIC_FILES_DIRECTORY + "calendarpicker_17x15.png",
      buttonImageOnly: true,
      constrainInput: false,
      defaultDate: 0,
      minDate: 0,
    });

    $("#end_date", frameDoc).datepicker({
      showOn: "button",
      buttonImage: B4G_STATIC_FILES_DIRECTORY + "calendarpicker_17x15.png",
      buttonImageOnly: true,
      constrainInput: false,
      defaultDate: 0,
      minDate: 0,
      onClose: function(dateText, inst){$("#radio_end_date").attr("checked", true);},
    });

    $(".b4g-ui-datepicker-trigger", frameDoc).css({
      "cursor" : "pointer",
      "margin" : "-2px 0px 0px -25px"
    }).hover(function () {
      $(this).css("box-shadow", "0px 0px 3px #aaa");
      $(this).css("-moz-box-shadow", "0px 0px 3px #aaa");
    }, function () {
      $(this).css("box-shadow", "none");
      $(this).css("-moz-box-shadow", "none");
    });

    $('#schedule_recurring', frameDoc).click(function () {
      compose_dialog_schedule_recurring(composeContainer);
      track_event("compose dialog recurring dialog", "click", "schedule recurring");
    });

    $('#cancel_recurring', frameDoc).click(function () {
      $('.dialogdiv').dialog('close');
    });

    var sampleDate = new Date().addMinutes(10);
    $("#start_date_input", frameDoc).val(sampleDate.toString("MM/dd/yyyy"));
    $("#start_time_input", frameDoc).val(sampleDate.toString("h:mm tt"));

    load_recurring_ui();
    $("#frequency").change();

    if (is_pop_out_window()){
      $("#recurring_dialog", frameDoc).css("font-size", "1.3em");
    }
    track_event("compose dialog recurring dialog", "show");
  }
}

function compose_dialog_schedule_recurring(composeContainer){
  $('.dialogdiv').dialog('close'); // Close recurring-message dialog

  $(composeContainer)
    .append('<div class="b4g-ui-widget-overlay b4g-overlay overlay"></div>')
    .append(
      '<div class="b4g-overlay" style="position: absolute; top: 50%; left: 50%; margin: -38px 0 0 -120px; background: white; width: 220px; text-align: center; padding: 10px; z-index: 1001;">' +
        '<img height="32" width="32" src="' + B4G_STATIC_FILES_DIRECTORY + 'b4gloading.gif">' +
        '<br>' +
        '<span style="font-size: 14px;">Setting up recurring messages</span>' +
      '</div>'
    )
  ;
  call_function_after_draft_has_been_saved(composeContainer, function(err) {
    if(err) { show_failed_to_detect_saved_draft(); return; }

    compose_dialog_schedule_recurring_helper(composeContainer, function() {
      $(".b4g-overlay", composeContainer).remove();
    });
  });
}

function compose_dialog_schedule_recurring_helper(composeContainer, callback) {
  callback = callback || $.noop;

  if(is_loading_attachments()) {
    show_dialog("Please wait for your attachments to upload before sending.");
    setTimeout(function() { callback({ "active-attachments": true }); });
    return;
  }

  var approxTimeSaved = new Date();

  //User
  var gmailUser = get_gmail_user();

  //Subject
  var subject = get_element_by_name("subjectbox", composeContainer).val();

  if(subject.length > 200)
  {
    show_dialog("You've exceeded the maximum subject length. Please shorten your subject and try again.");
    setTimeout(function() { callback({ "long-subject": true }); });
    return;
  }

  //From
  var from = $(".J-JN-M-I.J-J5-Ji.az2.az4.L3", composeContainer);
  if(from.length > 0)
  {
    from = strip_email_addresses(from.text());
  }
  else
  {
    from = gmailUser;
  }

  var to = extract_email_addresses_from_field("to", composeContainer);
  var cc = extract_email_addresses_from_field("cc", composeContainer);
  var bcc = extract_email_addresses_from_field("bcc", composeContainer);

  if (!to && !cc && !bcc) {
    var pillboxes = extract_email_addresses_from_pillboxes(composeContainer);
    to = pillboxes["to"];
    cc = pillboxes["cc"];
    bcc = pillboxes["bcc"];
  }

  if(!to && !cc && !bcc)
  {
    show_dialog("Please enter a recipient.");
    setTimeout(function() { callback({ "no-recipient": true }); });
    return;
  }
  if (check_if_has_invalid_recipients(composeContainer)){
    show_dialog("One of the addresses you entered is not recognized. Please make sure that all addresses are properly formed.")
    setTimeout(function() { callback({ "invalid-recipient": true }); });
    return;
  }

  var recipients = to + " " + cc + " " + bcc;
  var emailRegEx = EMAIL_REGEX;
  var matches = recipients.toLowerCase().match(emailRegEx);
  matches = eliminateDuplicates(matches);

  if(matches.length > 100)
  {
    show_dialog("<p>Boomerang limits you to 100 recipients at a time. Please enter a shorter list.</p>");
    setTimeout(function() { callback({ "too-many-recipients": true }); });
    return;
  }

  var start_string = $("#start_date_input").val() + " " + $("#start_time_input").val();
  var start = Date.parse(start_string);
  if (start == null || start < new Date()){
    alert ("Invalid start date");
    setTimeout(function() { callback({ "invalid-start-date": true }); });
    return;
  }

  var frequency = get_frequency();
  var setPosition = null;
  if ($('#frequency').val() == "monthweek") {
    setPosition = $("#set_position").val();
    var utc_weekday = get_weekday();
  } else {
    var utc_weekday = get_utc_weekday(start);
  }
  var interval = $('#num_interval').val();

  if (utc_weekday === ""){
    alert("You must select a day of the week.");
    setTimeout(function() { callback({ "no-day-selected": true }); });
    return;
  }

  var num_occurences = "None";
  var end = "None";

  if ($("#radio_num_occurences").attr("checked"))
  {
    num_occurences = $("#num_occurences").val();
  }
  else if ($("#radio_end_date").attr("checked"))
  {
    var end_date = $("#end_date").val() + " " + $("#start_time_input").val();
    end_date = Date.parse(end_date);
    if (end_date == null){
      alert("Invalid end date");
      setTimeout(function() { callback({ "invalid-end-date": true }); });
      return;
    }
    end = end_date.valueOf();
  }

  var threadId = get_send_later_thread_id(composeContainer);
  if (threadId == null || threadId === "undefined"){
    threadId = get_boomerang_thread_id();
  }

  var draftId = composeContainer.find("*[name='draft']").first().val();
  if (draftId) {
    draftId = draftId.replace("#", "");
  }

  var userTz = jstz.determine().name();

  var params = {};
  params.guser = gmailUser;
  params.from = from;
  params.subject = subject;
  params.to = to;
  params.cc = cc;
  params.bcc = bcc;
  params.esttimesaved = approxTimeSaved.valueOf();
  params.frequency = frequency;
  params.interval = interval;
  if (setPosition) {
    params.setPosition = setPosition;
  }
  params.utc_weekday = utc_weekday;
  params.start = start.valueOf();
  params.end = end;
  params.num_occurences = num_occurences;
  params.threadId = threadId;
  params.draftId = draftId;
  if(is_gmail_in_english()) {
    params.language = "English";
  } else {
    params.language = "notEnglish";
  }
  params.tz = userTz;
  var trackingCheckboxIsChecked = email_tracking_is_turned_on(composeContainer);
  if (trackingCheckboxIsChecked){
    var trackingCode = get_tracking_code_from_compose_window(composeContainer);
    params.trackingCode = trackingCode;
  }

  var url;
  if(which_gmail() === OLD_GMAIL) { 
      var baseurl = "https://b4g.baydin.com/mailcruncher/schedulerecurring";
      url = generate_url_with(baseurl, params);
  } else {
      url = "https://b4g.baydin.com/gmailmigration/sendrecurring";
  }

  var feedback = $("#recurring_feedback").text();
  var message = "Recurring message scheduled: " + feedback;

  function send_schedule_recurring_request(){
    close_compose_window(composeContainer);
    function handle_recurring_response(b4gStatus, requestedURL, successMessage)
    {
      if (b4gStatus === SUCCESS || is_nag_status(b4gStatus))
      {
        setTimeout(function() {
          callback(null);
        }, SEND_LATER_CLOSE_NEW_COMPOSE_WINDOW_DELAY);

        if(is_nag_status(b4gStatus)) { nag_screen(b4gStatus); }
        inline_manage.expire_cache();
        click_gmail_refresh_button();
      }
      else if (b4gStatus === PAYWALL)
      {
        nag_screen(b4gStatus);
        callback({ "pay-wall": true });
      }
      else
      {
        show_dialog("Attempt failed: " + POSSIBLE_RESPONSES[b4gStatus]);
        callback({ "failure": POSSIBLE_RESPONSES[b4gStatus] });
      }
    }

    if(which_gmail() === OLD_GMAIL) { 
        send_image_request(url, handle_recurring_response, message);
    } else {
        $.ajax({
            type: "POST",
            url: url,
            data: params,
            xhr: xhr_with_credentials,
            success: function(response) {
              var status = response["status"];
              if (status === "nag" && response["message"] === "paywall") {
                nag_screen_new_gmail(response["message"]);
                callback({ "pay-wall": true });
              } else if (status === "success" || status === "nag") {
                setTimeout(function() {
                  callback(null);
                }, SEND_LATER_CLOSE_NEW_COMPOSE_WINDOW_DELAY);

                if(status === "nag") { nag_screen_new_gmail(response["message"]); }
                inline_manage.expire_cache();
                click_gmail_refresh_button();
              } else {
                show_dialog("Attempt failed: " + response["message"]);
                callback({ "failure": response["message"]});
              }
            }
        })
    }

    // Delay the redirect if it's a pop out window (wait for errors first)
    if (!is_pop_out_window() && !is_dialog(composeContainer)){
      delayed_redirect_and_show_gmail_notification(message, SEND_LATER_REDIRECT_DELAY, "send_new_compose");
    }
  }
  call_function_after_paywall_check(send_schedule_recurring_request);
}


/**
 *  Displays a recurring dialog.
 *  For inline-manage Rescheduling only. See compose_dialog_show_recurring_dialog() for the compose dialog
 */
function show_recurring_dialog(callback) {
  var frameDoc = get_frame();
  if (browser_name === "Old Safari"){
    alert("This feature is available in Safari versions 5.1 and higher. Please update Safari to use this feature.");
  }
  else{
    $(".dialogdiv").remove();
    var $dialog = $("<div class='dialogdiv' style='display:none;'>" +
            "<div id='recurring_dialog'>"+
              "<div id='start_date_time' class='recurring_field'>" +
                "<span class='recurring-row-title'>Starts</span>"  +
                "<span id='start_date' class='recurring_right_col'>" +
                  "<input id='start_date_input' type='text' name='starts' size='15'/>" +
                  "<span id='start_time'>" +
                    "Send Time: " + 
                    "<input id='start_time_input' name='time' size='10'/>" +
                  "</span>" +
                "</span>" +
              "</div>" +
              "<div  class='recurring_field'>" +
                "<span class='recurring-row-title'>Repeats</span>" +
                "<select id='frequency'  class='recurring_right_col'>" +
                  "<option value='day'> Daily</option>" +
                  "<option value='week' selected='selected'>Weekly</option>" +
                  "<option value='weekday' >Every Weekday</option>" +
                  "<option value='month' >Monthly on the same date</option>" +
                  "<option value='monthweek' >Monthly on the same week</option>" +
                  "<option value='year'>Yearly</option>" +
                "</select>" +
              "</div>" +
              "<div id='num_time_interval'  class='recurring_field'> Every <span class='recurring_right_col'> <input type='number' value='1' min='1' max='12' name='num_interval' id='num_interval'/>" +
                "<span id='interval'> week</span>" +
                "<div id='date_position_div' style='display: inline-block;'>" +
                  "<span class='recurring_field'>" + 
                    "Date: " +
                    "<input type='number' value='1' min='1' max='31' id='date_position' name='date_position'/>" +
                  "</span>" +
                "</div>" +
                "<div id='set_position_div' style='display: inline-block;'>" +
                  "<span class='recurring_field'>" + 
                    "<select id='set_position'>" +
                      "<option value='1'>First</option>" +
                      "<option value='2'>Second</option>" +
                      "<option value='3'>Third</option>" +
                      "<option value='4'>Fourth</option>" +
                      "<option value='-1'>Last</option>" +
                    "</select>" +
                  "</span>" +
                  "<span class='recurring_field'>" + 
                    "<select id='set_position_day'>" +
                      "<option value='6'>Sunday</option>" +
                      "<option value='0'>Monday</option>" +
                      "<option value='1'>Tuesday</option>" +
                      "<option value='2'>Wednesday</option>" +
                      "<option value='3'>Thursday</option>" +
                      "<option value='4'>Friday</option>" +
                      "<option value='5'>Saturday</option>" +
                    "</select>" +
                  "</span>" +
                "</div>" +
              "</div>" +
              "<div id='days_of_week'  class='recurring_field'>" +
                "<span class='recurring-row-title'>On</span>" +
                "<span class='recurring_right_col' style='vertical-align: top;'>" +
                  "<input class='day_cb' type='checkbox' value='6' name='Sun' style='margin-left:0px'/> Sun" +
                  "<input class='day_cb' type='checkbox' value='0' name='Mon'/> Mon" +
                  "<input class='day_cb' type='checkbox' value='1' name='Tue'/> Tue" +
                  "<input class='day_cb' type='checkbox' value='2' name='Wed'/> Wed" +
                  "<input class='day_cb' type='checkbox' value='3' name='Thur'/> Thur" +
                  "<input class='day_cb' type='checkbox' value='4' name='Fri'/> Fri" +
                  "<input class='day_cb' type='checkbox' value='5' name='Sat'/> Sat" +
                "</span>" +
              "</div>" +
              "<div  class='recurring_field'>" +
                "<span class='recurring-row-title'> Ends </span>" +
                "<div class='recurring_right_col' style='display:inline-block;vertical-align: middle; line-height: 24px;'>" +
                  "<div style='margin-bottom:3px;'>" +
                    "<input type='radio' id='radio_num_occurences' name='end_group' checked/> After <input type='number' value='10' min='1' max='100' id='num_occurences' name='num_occurences'/> messages" +
                  "</div>" +
                  "<div style='margin-bottom:3px;'>" +
                    "<input type='radio' id='radio_end_date' name='end_group'/> On <input id='end_date' value='' name='end_date' size='15'/>" +
                  "</div>" +
                  "<div style='margin-bottom:3px;'>" +
                    "<input type='radio' id='radio_no_end' name='end_group'/> No end date <br/>" +
                  "</div>" +
                "</div>" +
              "</div>" +
              "<br/><br/><br/><br/>" +
              "<div id='summary' class='recurring_field'>" +
                "<span class='recurring-row-title'>Summary:</span>" +
                "<div id='recurring_feedback' class='recurring_right_col' style='display:inline-block;padding-right:20px;'> </div>" +
              "</div>" +
              "<div class='b4g-button-container' align='center'>" +
                "<button id='schedule_recurring' class='b4g-button red' style='margin:4px 10px;'> Schedule </button>" +
                "<button id='cancel_recurring' class='b4g-button dialog-gray' style='margin:4px 10px;'>Cancel</button>" +
              "</div>" +
              "<br/>" +
            "</div>" +
          "</div>");

    $("body", frameDoc).append($dialog);


    $(".dialogdiv",frameDoc).dialog({
      modal: true,
      title: 'Schedule Recurring Message',
      closeOnEscape: true,
      width: 530,
      dialogClass: "recurringDialog"
    });

    $(".dialogdiv", frameDoc).css({"padding" : "0px"});

    $("#start_date_input", frameDoc).datepicker({
      showOn: "button",
      buttonImage: B4G_STATIC_FILES_DIRECTORY + "calendarpicker_17x15.png",
      buttonImageOnly: true,
      constrainInput: false,
      defaultDate: 0,
      minDate: 0,
    });

    $("#end_date", frameDoc).datepicker({
      showOn: "button",
      buttonImage: B4G_STATIC_FILES_DIRECTORY + "calendarpicker_17x15.png",
      buttonImageOnly: true,
      constrainInput: false,
      defaultDate: 0,
      minDate: 0,
      onClose: function(dateText, inst){$("#radio_end_date").attr("checked", true);},
    });

    $(".b4g-ui-datepicker-trigger", frameDoc).css({
      "cursor" : "pointer",
      "margin" : "-2px 0px 0px -25px"
    }).hover(function () {
      $(this).css("box-shadow", "0px 0px 3px #aaa");
      $(this).css("-moz-box-shadow", "0px 0px 3px #aaa");
    }, function () {
      $(this).css("box-shadow", "none");
      $(this).css("-moz-box-shadow", "none");
    });

    load_recurring_ui();

    $('#schedule_recurring').click(function () {
      (callback || schedule_recurring)();
    });

    $('#cancel_recurring').click(function () {
      $('.dialogdiv').dialog('close');
    });

    var sampleDate = new Date().addMinutes(10);
    $("#start_date_input").val(sampleDate.toString("MM/dd/yy"));
    $("#start_time_input").val(sampleDate.toString("h:mm tt"));

    return $dialog;
  }
}


/** Recurring Dialog UI **/
function move_week_days_up(days_of_week)
{
  return days_of_week.replace("6","x").replace("5","6").replace("4","5").replace("3","4").replace("2","3").replace("1","2").replace("0","1").replace("x","0");
}
function move_week_days_down(days_of_week)
{
  return days_of_week.replace("0","x").replace("1","0").replace("2","1").replace("3","2").replace("4","3").replace("5","4").replace("6","5").replace("x","6");
}

// Turn frequency dropdown to properly formatted string for server request
function get_frequency(){
  var frequency = $('#frequency').val();
  switch (frequency)
  {
    case "day":
      frequency = "DAILY";
      break;
    case "week":
      frequency = "WEEKLY";
      break;
    case "weekday":
      frequency = "WEEKLY";
      break;
    case "month":
      frequency = "MONTHLY";
      break;
    case "monthweek":
      frequency = "MONTHLY";
      break;
    case "YEARLY":
      frequency = "YEARLY";
      break;
    default:
      frequency = "YEARLY";
      break;
  }
  return frequency;
}

function get_weekday(){
  var weekday = $('.day_cb:checked').map(function(i,n) {return $(n).val();}).get(); // get the values of each checked element in day checkboxes
  var usr_weekday = "";

  // put list of weekdays into properly formatted string for python-dateutil
  for (var i = 0; i < weekday.length; i++)
  {
    if (usr_weekday === "")
    {
      usr_weekday += "(" + weekday[i];
    }
    else
    {
      usr_weekday += "," + weekday[i];
    }
  }

  if (usr_weekday !== ""){
    usr_weekday += ")";
  }

  return usr_weekday;
}

// do not touch until talking to mike
function get_utc_weekday(start){
  var weekday = $('.day_cb:checked').map(function(i,n) {return $(n).val();}).get(); // get the values of each checked element in day checkboxes
  var utc_weekday = "";

  // put list of weekdays into properly formatted string for python-dateutil
  for (var i = 0; i < weekday.length; i++)
  {
    if (utc_weekday === "")
    {
      utc_weekday += "(" + weekday[i];
    }
    else
    {
      utc_weekday += "," + weekday[i];
    }
  }

  if (utc_weekday !== ""){
    utc_weekday += ")";
  }

  if (start.getUTCDay() > start.getDay() || (start.getUTCDay() === 0 && start.getDay() === 6)){
    utc_weekday = move_week_days_up(utc_weekday);
  }
  else if (start.getUTCDay() < start.getDay() || (start.getUTCDay() === 6 && start.getDay() === 0)){
    utc_weekday = move_week_days_down(utc_weekday);
  }
  return utc_weekday;
}

function update_recurring_preview()
{
  clear_output();
  var readable_schedule = "";
  try{
    var frequency = get_frequency();
    var interval = $('#num_interval').val();
    var setPosition = null;
    if ($('#frequency').val() == "monthweek") {
      setPosition = $("#set_position").val();
    }
    var start_string = $("#start_date_input").val() + " " + $("#start_time_input").val();
    var start = Date.parse(start_string);
    var utc_minute = start.getUTCMinutes();
    var utc_hour = start.getUTCHours();
    var utc_day_of_month = start.getUTCDate();
    var utc_month = start.getUTCMonth() + 1;
    var utc_weekday = get_utc_weekday(start);
    readable_schedule = make_schedule_readable(frequency, interval, setPosition, utc_minute, utc_hour, utc_day_of_month, utc_month, utc_weekday);
  }catch(err){}
  $("#recurring_feedback").text(readable_schedule);
}

// Given schedule UTC, makes readable to user time
function make_schedule_readable(frequency, interval, setPosition, utc_minute, utc_hour, utc_day_of_month, utc_month, utc_weekday)
{
  var utc_datetime = Date.UTC(new Date().getFullYear(), utc_month -1, utc_day_of_month, utc_hour, utc_minute);
  var local_datetime = new Date(utc_datetime);

  var local_day_of_week = utc_weekday;
  if (local_datetime.getUTCDay() > local_datetime.getDay() || (local_datetime.getUTCDay() === 0 && local_datetime.getDay() === 6) ){
    local_day_of_week = move_week_days_down(utc_weekday);
  }
  else if (local_datetime.getUTCDay() < local_datetime.getDay() || (local_datetime.getUTCDay() === 6 && local_datetime.getDay() === 0)){
    local_day_of_week = move_week_days_up(utc_weekday);
  }

  var readable_weekdays = "";
  var readable_day_of_week = local_day_of_week.replace("(", "").replace(")","");
  for (var x =0; x < WEEK.length; x++){
    readable_day_of_week = readable_day_of_week.replace(x.toString(),WEEK[x]);
  }
  readable_weekdays += readable_day_of_week;
  if (readable_weekdays === ""){
    return "";
  }

  var readable_schedule = "Every ";
  if (interval > 1){
    readable_schedule += interval + " ";
  }

  switch (frequency)
  {
    case "DAILY":
      readable_schedule += "day";
      break;
    case "WEEKLY":
      readable_schedule += "week";
      break;
    case "MONTHLY":
      readable_schedule +=  "month";
      break;
    case "YEARLY":
      readable_schedule +=  "year";
      break;
  }

  if (interval > 1){
    readable_schedule += "s";
  }

  readable_schedule += ", ";

  if (frequency === "WEEKLY"){
    readable_schedule += "on " + readable_weekdays.split(",").join(", ") + " ";
  }
  if (frequency === "MONTHLY"){
    if (setPosition == null) {
      readable_schedule += "on day " + local_datetime.getDate();
      if (local_datetime.getDate() > 28){
        readable_schedule += "(or the last day of the month)";
      }
      readable_schedule += " ";
    }
    else {
      switch (setPosition)
      {
        case "-1":
          readable_schedule += "on last ";
          break;
        case "1":
          readable_schedule += "on first ";
          break;
        case "2":
          readable_schedule += "on second ";
          break;
        case "3":
          readable_schedule += "on third ";
          break;
        case "4":
          readable_schedule += "on fourth ";
          break;
      }
      readable_schedule += readable_weekdays + " ";
    }
  }
  if (frequency === "YEARLY"){
    readable_schedule += "on " + local_datetime.toString("MMM d") + " ";
  }

  readable_schedule += "at " + local_datetime.toString("h:mm tt");

  return readable_schedule;
}

function clear_output()
{
  $('#recurring_feedback').text("");
}

function hide_days_of_the_week(){
  $('input.day_cb').attr('checked',true);
  $('#days_of_week').css('display', 'none');
}

function show_days_of_the_week(){
  $('#days_of_week').css('display', 'block');
}

function load_recurring_ui()
{
  function sync_set_position_with_day_checkboxes() {
    var dayChosen = $("#set_position_day").val();
    $('input.day_cb').attr('checked', false);
    $('input.day_cb').filter('[value=' + dayChosen + ']').attr('checked' ,true);
  }

  $('#frequency').change(function(){
    $('#num_interval').val(1);

    if ($('#frequency').val() === 'week') {
      show_days_of_the_week();
      $('input.day_cb').attr('checked',false);
      $("#set_position_div").hide();
      $("#date_position_div").hide();
      $('#interval').text(' week');
    }
    else if($('#frequency').val() === 'weekday'){
      show_days_of_the_week();
      $('input.day_cb').filter("[value='0'], [value='1'], [value='2'], [value='3'], [value='4']").attr("checked",true);
      $('input.day_cb').filter("[value='5'], [value='6']").attr("checked",false);
      $("#set_position_div").hide();
      $("#date_position_div").hide();
      $('#interval').text(' week');
    }
    else if ($('#frequency').val() == 'monthweek'){
      hide_days_of_the_week();
      sync_set_position_with_day_checkboxes();
      $("#set_position_div").show();
      $("#date_position_div").hide();
      $('#interval').text(' month');
    }
    else { // daily, monthly, yearly
      if ($('#frequency').val() == 'month') {
        $("#date_position_div").show();
      }
      else {
        $("#date_position_div").hide();
      }
      hide_days_of_the_week();
      $("#set_position_div").hide();
      $('#interval').text(" " + $('#frequency').val());
    }
    $("#start_date_input").change();
   });
   $('#num_interval').change(function(){
    update_recurring_preview();
   });
   $('#num_interval').click(function(){
    update_recurring_preview();
   });
   $('.day_cb, #start_time_input').change(function(){
    update_recurring_preview();
   });
   $('#start_time_input').keyup(function(){
    update_recurring_preview();
   });
  $("#start_date_input").change(function() {
    // Get the nth_day and date options to match the start_date
    var start_string = $("#start_date_input").val();
    var start = Date.parse(start_string);
    var n_syntax = convert_date_to_nth_syntax(start);
    $("#set_position").val(n_syntax["n"]);
    $("#set_position_day").val(n_syntax["weekday"]);
    $("#date_position").attr("max", Date.getDaysInMonth(start.getYear(), start.getMonth()));
    $("#date_position").val(start.getDate());
    if ($('#frequency').val() == 'week' || $('#frequency').val() == 'monthweek') {
      sync_set_position_with_day_checkboxes();
    }
    update_recurring_preview();
  });
  $('#set_position, #set_position_day').change(function(){
    sync_set_position_with_day_checkboxes();
    // Get the start date to match the nth_day syntax
    var n = parseInt($("#set_position").val());
    var weekday = parseInt($("#set_position_day").val());
    var defaultStart = convert_nth_syntax_to_date(n, weekday);
    $("#start_date_input").val(defaultStart.toString("M/d/yyyy"));
    update_recurring_preview();
  });
  $("#date_position").change(function() {
    // Get the start date to match the date position
    var start_string = $("#start_date_input").val();
    var start = Date.parse(start_string);
    var chosenDay = parseInt($(this).val());
    try {
      start.set({day: chosenDay});
      // if the chosen day is in the past, use next month's day
      var now = new Date();
      if (start < now) {
        var newMonth = (now.getMonth() + 1) % 12;
        start.set({month: newMonth});
      }
    }
    catch (e){
      if (e instanceof RangeError) {
        start.moveToLastDayOfMonth();
      }
    }
    $("#start_date_input").val(start.toString("M/d/yyyy"));
    update_recurring_preview();
  });
}


/**
 * 10. Read Receipt
 */

 function generate_thread_guid() {
  return Math.random().toString(36).substr(5) + Date.now().toString(36);
}

function remove_opt_out_footer($composeTextBody) {
  $(
    "a[href^='https://mailstat.us/tr/opt-out?guid']," +
    "img[src^='https://mailstat.us/tr/']," +
    ".b4g-open-track", $composeTextBody
  ).remove();
}

function remove_malformed_opt_out_footers($composeTextBody, guid) {
  $("a[href^='https://mailstat.us/tr/opt-out']", $composeTextBody)
    .not(":has(img[src^='https://mailstat.us/tr/'])").remove().end()
    .not("[href='https://mailstat.us/tr/opt-out?guid=" + guid + "']").remove()
  ;
  $("img[src^='https://mailstat.us/tr/']", $composeTextBody).filter(function() {
    return this.parentNode.tagName.toLowerCase() !== "a";
  }).remove();
}

function find_images_and_anchors(node) {
  if(!node.tagName) { return []; }
  if(node.tagName.toLowerCase() === "img") { return [ node ]; }

  return $(node).find("a, img").andSelf().filter("a, img").toArray();
}
function update_open_tracking($composeContainer) {
  var isChecked = $(".b4g-tracking-toggle", $composeContainer).data("is-selected");

  var $composeTextBody = get_compose_text_body($composeContainer);

  if(!isChecked) { remove_opt_out_footer($composeTextBody); return; }

  if(!$composeTextBody.data("has-tracking-opt-out-observer")) {
    new MutationObserver(function(mutations) {
      for(var m = 0; m < mutations.length; m++) {
        var mut = mutations[m];
        var added = $.map(mut.addedNodes || [], find_images_and_anchors);
        var removed = $.map(mut.removedNodes || [], find_images_and_anchors);
        var nodes = [].concat(added, removed);

        for(var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var tag = node.tagName.toLowerCase();

          if(tag === "a" && node.href.indexOf("https://mailstat.us/tr/opt-out?guid=") === 0) {
            update_open_tracking($composeContainer);
            return;
          }
          if(tag === "img" && node.src.indexOf("https://mailstat.us/tr/") === 0) {
            update_open_tracking($composeContainer);
            return;
          }
        }
      }
    }).observe($composeTextBody[0], { childList: true, subtree: true });
    $composeTextBody.data("has-tracking-opt-out-observer", true);
  }

  var threadGuid = $composeTextBody.data("thread-guid") || generate_thread_guid();
  $composeTextBody.data("thread-guid", threadGuid);

  var $optout = $("a[href='https://mailstat.us/tr/opt-out?guid=" + threadGuid + "']:has(img[src^='https://mailstat.us/tr/'])", $composeTextBody);
  if($optout.length > 0) {
    remove_malformed_opt_out_footers($composeTextBody, threadGuid);
    $optout.slice(1).remove().end().addClass("b4g-open-track");
    return;
  }

  remove_opt_out_footer($composeTextBody);
  $optout = $(
    '<a href="https://mailstat.us/tr/opt-out?guid=' + threadGuid + '">' +
      '<img src="https://mailstat.us/tr/optout-blk-nologo.png?guid=' + threadGuid + '" />' +
    '</a>'
  ).addClass("b4g-open-track");

  $composeTextBody.append($optout);
  // Add BR before if one isn't there to ensure opt-out image is on its own line.
  if(!$optout.prev().is("br")) { $optout.before("<br/>"); }
}

var rFindUrl = /\b((?:(?:https?:\/\/)|(?:www\d{0,3}[.])|(?:[a-z0-9.\-]+[.][a-z]{2,4})\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/;
function linkify_compose_message($composeContainer) {
  var $composeTextBody = get_compose_text_body($composeContainer);

  $composeTextBody.find("*:not(a)").andSelf().replaceText(rFindUrl, function(_, url) {
    var href = url;
    if(href.indexOf("http://") !== 0 && href.indexOf("https://") !== 0) {
      href = "http://" + href;
    }

    return '<a href="' + href + '" target="_blank">' + url + '</a>';
  });
}

var rTrackedUrl = /^https:\/\/mailstat\.us\/tr\/t\/[a-z0-9]+\/[a-z0-9]+\/(.*)$/;
function revert_tracked_url(href) {
  var result = rTrackedUrl.exec(href);

  if(result) { return result[1]; }

  return href;
}
function revert_tracked_links($composeTextBody) {
  $("a[href^='https://mailstat.us/tr/t/']", $composeTextBody).each(function() {
    var $this = $(this);

    if($this.is(".b4g-track-dummy")) { $this.remove(); return; }

    var original = revert_tracked_url(this.href);
    $this.attr("href", original).removeClass("b4g-track-link");
  });
}

var uniq_id = (function() {
  var num = 1;
  return function() { return (num++).toString(36); };
})();
function get_tracking_url(threadGuid, url) {
  url = revert_tracked_url(url); // Make sure we don't double track URLs
  return "https://mailstat.us/tr/t/" + threadGuid + "/" + uniq_id() + "/" + url;
}

function find_anchors(node) {
  if(!node.tagName) { return []; }
  if(node.tagName.toLowerCase() === "a") { return [ node ]; }

  return $(node).find("a").toArray();
}

function update_click_tracking($composeContainer) {
  var isChecked = $(".b4g-tracking-toggle", $composeContainer).data("is-selected");

  var $composeTextBody = get_compose_text_body($composeContainer);

  if(!isChecked) { revert_tracked_links($composeTextBody); return; }

  if(!$composeTextBody.data("has-click-tracking-observer")) {
    new MutationObserver(function(mutations) {
      for(var m = 0; m < mutations.length; m++) {
        var mut = mutations[m];
        var added = $.map(mut.addedNodes || [], find_anchors);
        var removed = $.map(mut.removedNodes || [], find_anchors);
        var nodes = [].concat(added, removed);

        if(mut.type === "attributes") { nodes.push(mut.target); }

        for(var i = 0; i < nodes.length; i++) {
          var node = nodes[i];

          var href = $(node).removeClass("b4g-track-link").attr("href");
          if(href.charAt(0) === "/") { continue; }

          if($.inArray(node, added) > -1) { node.href = revert_tracked_url(href); }

          update_click_tracking($composeContainer);
          return;
        }
      }
    }).observe(
      $composeTextBody[0],
      { childList: true, attributes: true, subtree: true, attributeFilter: [ "href" ] }
    );
    $composeTextBody.data("has-click-tracking-observer", true);
  }

  var $links = $("a:not(.b4g-track-wont)", $composeTextBody);

  $links = $links.each(function() {
    var href = this.href;
    // Don't track mailto URLs
    if(href.indexOf("mailto:") === 0) { $(this).addClass("b4g-track-wont"); }
    // Don't track opt out url
    if(href.indexOf("https://mailstat.us/tr/opt-out?guid=") === 0) { $(this).addClass("b4g-track-wont"); }
  }).not(".b4g-track-wont");

  if($links.length <= 0) { // Adds dummy anchor to keep track whether or not user selected click tracking
    var $dummy = $('<a href="https://mailstat.us/tr/t/dummy"></a>')
      .addClass("b4g-track-link b4g-track-dummy")
      .css({ "border": "0", "text-decoration": "none", "width": "1px" })
      .hide()
    ;
    $composeTextBody.append($dummy);
    return;
  }

  // When a dummy anchor is saved in drafts and re-opened, the b4g-track-dummy class is removed
  $links.filter("[href^='https://mailstat.us/tr/t/dummy']:not(.b4g-track-dummy)").addClass("b4g-track-dummy");

  $links = $links.not(".b4g-track-dummy");
  if($links.length > 0) {
    $(".b4g-track-dummy", $composeTextBody).remove();
  }

  $links = $links.not(".b4g-track-link, .b4g-track-wont");
  if($links.length <= 0) { return; }

  var threadGuid = $composeTextBody.data("thread-guid") || generate_thread_guid();
  $composeTextBody.data("thread-guid", threadGuid);

  var $untracked = $links.not("[href^='https://mailstat.us/tr/t/" + threadGuid + "']");
  if($untracked.length <= 0) { $links.addClass("b4g-track-link"); return; }

  $untracked.each(function() {
    var url = get_tracking_url(threadGuid, this.href);

    $(this).attr("href", url).addClass("b4g-track-link");
  });
}

function create_tracking_toggle(composeContainer) {
  var $composeTextBody = get_compose_text_body(composeContainer);
  var label = "Request read receipt and track clicks";
  var backgroundSize = which_gmail() === NEW_GMAIL ? "20" : "21";

  var trackingToggleMargin = "-1px 5px 0 5px";
  var trackingTogglePadding = "3px 2px 0 2px";
  var trackingToggleInnerImgMargin = "0px 0px 0px 4px";
  if (can_use_bcal()) {
    trackingToggleMargin = "0px 5px 0px 5px";
    trackingTogglePadding = "0px";
    trackingToggleInnerImgMargin = "4px 0px 0px 0px";
  }

  var trackingToggleCssAttr = {
    "width": "24px",
    "display": "inline-block",
    "margin": trackingToggleMargin,
    "padding": trackingTogglePadding,
    "text-align": "center"
  }
  if (can_use_bcal()) {
    trackingToggleCssAttr["width"] = "28px";
    trackingToggleCssAttr["height"] = "28px";
  }

  var $trackingToggle = $(".J-Z-aEu-I.J-Z-I.J-J5-Ji", composeContainer)
    .first().clone() // Cloning gmail's `Bold` button (because it's also a toggle button)
    .addClass("b4g-tracking-toggle").removeClass("gU")
    .hover(
      function() { $(this).addClass("J-Z-I-JW J-Z-I-KO"); },
      function() {
        $(this).removeClass("J-Z-I-JW");
        if ($(this).attr("aria-selected") !== "true") {
          // Don't remove this class if the button is active
          $(this).removeClass("J-Z-I-KO");
        }
      }
    )
    .bind("b4g-toggle-state", function(e, state) {
      var $button = $(this);

      // If state is not specified toggle current state
      if(state == null) { state = ($button.attr("aria-selected") !== "true"); }

      $button
        .toggleClass("J-Z-I-KO", state)
        .attr("aria-selected", state + "")
      ;
      $(this).data("is-selected", state);
      if(state) { inline_manage.enable(); }
    })
    .click(function() {
      var $toggle = $(this);
      call_function_after_paywall_check(function(){
        $toggle.trigger("b4g-toggle-state");

        show_click_open_tracking_tutorial(function(err) {
          if(err || !$toggle.data("is-selected")) { return; }

          click_open_tracking_tutorial_step1(composeContainer);
        });
      }, function() {
        // if paywall:
        // hack to remove "message not scheduled" text in paywall if using read receipt
        $("#b4g-message-not-scheduled").text("Your read receipt was NOT included.");
      });
    })
    .attr("data-tooltip", label)
    .attr("command", "")
    .attr("aria-label", label)
    .attr("id", null).css(trackingToggleCssAttr)
    .find(".aaB")
      // jQuery doesn't understand !important css rules, so have to set style attr directly.
      // I wish gmail didn't use !important so much...
      .attr(
        "style",
        "background-image: url(" + B4G_STATIC_FILES_DIRECTORY + "tracking-toggle.png) !important;" +
        "background-size: " + backgroundSize + "px !important;" + // background-size fixes retina displays
        "background-position: center 0 !important;" +
        "margin: " + trackingToggleInnerImgMargin + ";" +
        "opacity: 1;"
      )
    .end()
  ;
  if (can_use_bcal()) {
    // Replace old tracking icon with new svg one if we're using BCal
    $trackingToggle.find(".aaB").replaceWith('<?xml version="1.0" encoding="UTF-8"?><svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title></title><g id="Compose-Bar-Test" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="ico_ReadReceipt"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><path d="M13.2512309,2.43973679 L22,9 L22,18 C22,19.8644356 20.8225397,21 19,21 L5,21 C3.17746033,21 2,19.8644356 2,18 L2,9 L10.7487691,2.43973679 C11.4798947,1.85342107 12.5201053,1.85342107 13.2512309,2.43973679 Z M20.5,10.093 L15.509,13.731 L17.7405898,15.407151 C18.0226151,15.6190375 18.0842381,16.0259543 17.8782287,16.3160252 C17.6928202,16.577089 17.3538189,16.654534 17.0822763,16.5129472 L16.9945638,16.4575907 L14.421,14.524 L12.6804811,15.7934742 C12.2812721,16.1077941 11.7187279,16.1077941 11.3195189,15.7934742 L9.577,14.523 L7.00560196,16.457466 C6.72364367,16.6694467 6.32799342,16.6061979 6.12189239,16.3161959 C5.93640147,16.055194 5.96766289,15.6994745 6.18131768,15.4764067 L6.25924412,15.4072757 L8.489,13.73 L3.5,10.093 L3.5,18.5 C3.5,19.3860183 3.64985963,19.4174037 4.5,19.5 L19.5,19.5 C20.3714251,19.5 20.4187641,19.3643772 20.5,18.5 L20.5,10.093 Z M12,12.0045826 C11.4477153,12.0045826 11,12.4524835 11,13.0049974 C11,13.5575113 11.4477153,14.0054123 12,14.0054123 C12.5522847,14.0054123 13,13.5575113 13,13.0049974 C13,12.4524835 12.5522847,12.0045826 12,12.0045826 Z M12.0443446,4 C11.4677295,4 10.9631914,4.12455346 10.53073,4.37366038 C10.0982687,4.62276729 9.32243695,5.19660332 9.25128412,6.1868214 C9.23846846,6.3651742 9.32243695,6.53226263 9.46474259,6.6860083 C9.60704823,6.83975398 9.78169607,6.91662682 9.9886861,6.91662682 C10.3398299,6.91662682 10.53073,6.6477452 10.7039106,6.25688272 C11.0803463,5.45831341 11.6377571,5.23191155 12.0443446,5.23191155 C12.3917922,5.23191155 12.6754794,5.33894968 12.8954063,5.55302593 C13.1153332,5.76710219 13.2252967,6.02983214 13.2252967,6.34121579 C13.2252967,6.50079991 13.1892582,6.64870714 13.1171813,6.78493748 C13.0451045,6.92116783 12.9563944,7.04474821 12.8510513,7.15567864 C12.7457082,7.26660906 12.5747566,7.43105855 12.3381965,7.6490271 C12.0683703,7.89813402 11.8539877,8.11318335 11.695049,8.29417509 C11.5361102,8.47516684 11.3808677,8.6853508 11.2847651,8.92472697 L11.2851965,9.1355228 L11.2851965,9.1355228 L11.285936,9.51387163 C11.2860455,9.57212501 11.2861482,9.62797602 11.2862441,9.68142464 L11.2869219,10.097598 C11.2869767,10.1366324 11.2870246,10.1732644 11.2870657,10.207494 L11.2872506,10.4506961 L11.2872506,10.4506961 C11.2872506,10.8152744 11.4660156,11.0045826 11.9692088,11.0045826 C12.453726,11.0045826 12.6708591,10.8152744 12.6708591,10.4506961 L12.6708591,9.32757957 C12.7078216,9.2516798 12.7808225,9.16799545 12.8565957,9.0765265 C12.9323688,8.98505756 13.0330916,8.8789925 13.1587642,8.75833134 C13.613403,8.33017883 13.9285083,8.0256067 14.1040802,7.84461495 C14.2796521,7.66362321 14.4311984,7.44857388 14.558719,7.19946696 C14.6862397,6.95036004 14.75,6.66038402 14.75,6.3295389 C14.75,5.90917098 14.6381884,5.51994142 14.4145653,5.16185023 C14.1909421,4.80375904 13.8739886,4.52059453 13.4637048,4.31235672 C13.053421,4.10411891 12.580301,4 12.0443446,4 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path></g></g></svg>');

    $('<div class="b4g-tracking-toggle-txt">Track</div>').insertAfter($trackingToggle.find('svg'))
    $trackingToggle.css('width', '68px');
    $trackingToggle.find('.J-J5-Ji.J-Z-I-Kv-H').css('width', '100%');
  }
  $(".sendLaterTable .b4g-tracking-toggle-holder", composeContainer).replaceWith($trackingToggle);

  var hasTracking = ($("a[href^='https://mailstat.us/tr/t/']", $composeTextBody).length > 0);
  hasTracking = hasTracking || ($(
    "a[href^='https://mailstat.us/tr/opt-out?guid=']:has(img[src^='https://mailstat.us/tr/'])",
    $composeTextBody
  ).length > 0);
  $trackingToggle
    .trigger("b4g-toggle-state", hasTracking)
    .bind("b4g-toggle-state", function() {
      if($composeTextBody.data("is-plain-text")) {
        if($(this).data("is-selected")) {
          show_dialog("Read receipts and click tracking do not work with plain text emails.");
          $(this).trigger("b4g-toggle-state", false);
        }

        return false;
      }

      update_open_tracking(composeContainer);
      update_click_tracking(composeContainer);
    })
  ;
  $(".aoO, .send-later-button", composeContainer).bind("mousedown focus", function() { // Attaching to send button
    var $composeContainer = $(this).closest(".I5,.fN");
    update_open_tracking($composeContainer);
    if($trackingToggle.data("is-selected")) {
      linkify_compose_message($composeContainer);
    }
    update_click_tracking($composeContainer);
  });
  update_open_tracking(composeContainer);
  update_click_tracking(composeContainer);
  track_plain_text_changes(composeContainer);
  display_tracking_announcement_if_necessary(composeContainer);
}


 // Code to ignore tracked emails from current user.  B4G-496
var init_ignore_tracked_email_detector = (function() {
  var _ignoredGuids = {};

  function ignore_guids(guids, retries) {
    var now = $.now();

    retries = retries || 0;
    guids = guids.filter(function(guid) {
      var lastIgnored = _ignoredGuids[guid];
      return !lastIgnored || (now - lastIgnored > 2 * 60 * 1000); // corresponds to IGNORE_OPEN_REQUESTS_DELTA in views.py
    });

    if(guids.length <= 0) { return; }

    $.ajax({
      type: "post",
      url: "https://b4g.baydin.com/tr/track-sender-open",
      data: { email: get_gmail_user(), guids: guids.join() },
      xhr: xhr_with_credentials,
      success: function() {},
      error: function() {
        guids.forEach(function(guid) { _ignoredGuids[guid] = 0; });

        if(retries > 2) { return; }

        ignore_guids(guids, retries + 1);
      }
    });

    guids.forEach(function(guid) { _ignoredGuids[guid] = now; });
  }

  function init_detector() {
    var $mainContent = $(".aeF");

    if($mainContent.length <= 0) { setTimeout(init_detector, 1000); return; }

    new MutationObserver(function(mutations) {
      if(!get_boomerang_thread_id()) { return; }

      // .aHU is the email thread content container
      var $thread = $(".aHU");
      if($thread.length <= 0) { return; }

      var $images = $thread.find("[href^='https://mailstat.us/tr/opt-out']");
      if($images.length <= 0) { return; }

      var guids = $images.map(function() {
        if($(this).data("has-been-ignored")) { return null; }

        var href = this.href;
        var match = href.match(/\bguid=([0-9a-z]+)\b/);

        if(!match) { return null; }

        $(this).data("has-been-ignored", true);
        return match[1];
      }).toArray();

      if(guids.length > 0) { ignore_guids(guids); }
    }).observe($mainContent[0], { childList: true, subtree: true });
  }

  return init_detector;
})();

function email_tracking_is_turned_on(composeContainer){
  return $(".b4g-tracking-toggle", composeContainer).data("is-selected");
}

function get_tracking_code_from_compose_window(composeContainer){
  return get_compose_text_body(composeContainer).data("thread-guid");
}


function compose_dialog_build_send_and_track(composeContainer){
  var gmailUser = get_gmail_user();

  var subject = get_element_by_name("subject", composeContainer).val();
  var to = extract_email_addresses_from_field("to", composeContainer);
  var cc = extract_email_addresses_from_field("cc", composeContainer);
  var bcc = extract_email_addresses_from_field("bcc", composeContainer);
  var threadId = get_element_by_name("draft", composeContainer).val();
  var draftId = get_element_by_name("draft", composeContainer).val();
  var trackingCode = get_tracking_code_from_compose_window(composeContainer);

  if (!to && !cc && !bcc) {
    var pillboxes = extract_email_addresses_from_pillboxes(composeContainer);
    to = pillboxes["to"];
    cc = pillboxes["cc"];
    bcc = pillboxes["bcc"];
  }

  var params = {};
  params.subject = subject;
  params.guser = gmailUser;
  params.threadId = threadId;
  params.draftId = draftId;
  params.trackingCode = trackingCode;
  params.to = to;
  params.cc = cc;
  params.bcc = bcc;

  var url;
  if(which_gmail() === OLD_GMAIL) {
      var baseurl = "https://b4g.baydin.com/mailcruncher/trackemail";
      url = generate_url_with(baseurl, params);
  } else {
      url = "https://b4g.baydin.com/gmailmigration/track";
  }

  return [url, params];
}

function saveTrackedEmail(composeContainer) {
  var [trackUrl, trackParams] = compose_dialog_build_send_and_track(composeContainer);

  if(which_gmail() === OLD_GMAIL) {
      send_image_request(trackUrl, function(b4gStatus, url, data){
        if (is_nag_status(b4gStatus) || b4gStatus === PAYWALL)
        {
          nag_screen(b4gStatus);
        }
        else if (b4gStatus !== SUCCESS)
        {
          // TODO fix this dialog
          show_dialog("Your most recent Boomerang-on-Send failed. To Boomerang your sent email, please open your message in 'Sent Mail' and Boomerang the message manually. <br/><br/> Error Details:<br/> " + POSSIBLE_RESPONSES[b4gStatus]);
        }
        else{
          inline_manage.expire_cache();
        }
      }, "success");
  } else {
      $.ajax({
          type: "POST",
          url: trackUrl,
          data: trackParams,
          xhr: xhr_with_credentials,
          success: function(response) {
              var status = response["status"];
              if (status === "success") {
                inline_manage.expire_cache();
              } else if (status === "error") {
                show_dialog(response["message"]);
              } else if (status === "nag") {
                nag_screen_new_gmail(response["message"])
                inline_manage.expire_cache();
              }
          }
      })
  }
}


/**
 * 11. Settings
 */

function compose_settings_dialog(){
    if (which_gmail() === NEW_GMAIL) {
      return compose_settings_dialog_new_ui();
    }
    return  "<div class='dialogdiv' style='display:none; margin: 3px; color: #333'>" +
                "<div class='b4g_settings_loading' style='margin: 20px 0; font-size: 24px; width: %100; text-align: center;'>" +
                    "Loading..." +
                "</div>" +
                "<div class='b4g_settings_dialog' style='font-size: 13px;'>" +
                    "<div class='b4g_send_condition_settings_box'>" +
                        "<div style='margin: 2px 0 0 0;'>" +
                            "<h3 style='margin: 0 0 10px 0;'>When messages are returned, they should be:</h3>" +
                            "<div class='bullet_text' style='margin:10px 0 0 0;'>" +
                                "<input type='checkbox' class='pref' id='unread' style='margin: 4px 0;vertical-align: middle;'> <label for='unread' style='vertical-align: middle;'>Marked as unread</label><br/>" +
                                "<input type='checkbox' class='pref' id='starred' style='margin: 4px 0;vertical-align: middle;'> <label for='starred' style='vertical-align: middle;'>Starred</label> <br/>" +
                                "<input type='checkbox' class='pref' id='topinbox' style='margin: 4px 0;vertical-align: middle;'> <label for='topinbox' style='vertical-align: middle;'>At the top of your inbox</label><br/>" + 
                                "<input type='checkbox' class='pref' id='labelled' style='margin: 4px 0;vertical-align: middle;'> <label for='labelled' style='vertical-align: middle;'>Labeled as 'Boomerang-Returned'</label> <br/>" +
                            "</div>" +
                        "</div>" +
                        "<div style='margin: 15px 0'>" +
                            "<div>" + 
                                "<input type='checkbox' class='pref' id='b4g_enable_respondable' style='margin: 4px 0;vertical-align: middle;'> " +
                                "<label style='vertical-align: middle;' for='b4g_enable_respondable'>Enable Respondable</label> " +
                                "<div style='margin: 2px 16px;'>" + 
                                    "<div class='b4g_settings_respondable_upgrade_link' style='margin-bottom:5px;'><a href='https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=settings&utm_campaign=settingslink'>Upgrade to the Pro or Premium plan to enable this feature.</a></div>" +
                                    "<div class='b4g_respondable_text_disabled' style='color: #999;'>" + 
                                        "<input type='checkbox' class='pref' id='b4g_enable_premium_respondable' style='margin: 4px 0;vertical-align: middle;'> " +
                                        "<label style='vertical-align: middle;' for='b4g_enable_premium_respondable'>Enable Respondable with advanced machine learning</label> " +
                                        "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_respondable_question' style='cursor:pointer; width:14px; height:14px; vertical-align:middle;'>" +
                                        "<div style='margin-left: 17px; padding: 3px 0px; font-style: italic; color:#666; display:none;'>" + 
                                            "Enables politeness, sentiment, and subjectivity analysis. Your message information will be sent to Boomerang servers for analysis, but message data will not be retained." +
                                        "</div>" + 
                                    "</div>" + 
                                "</div>" + 
                            "</div>" + 
                            "<div id='inbox-pause-settings' style='position: relative;'>" +
                              "<div id='inbox-pause-tooltip' data-tooltip-align='b,l' style='width: 10px; height: 21px;'>" +
                                "<input id='inbox-pause-enabled' type='checkbox' class='pref' style='margin: 4px 0; vertical-align: middle;' checked='checked' /> " +
                                "<label id='inbox-pause-label' for='inbox-pause-enabled' style='white-space: nowrap; position: relative; top: -19.5px; left: 16.5px; vertical-align: middle;'>Enable Inbox Pause</label> " +
                              "</div>" +
                              "<img id='inbox-pause-more' src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_inbox_pause_question' style='float: left; position: absolute; top: 3px; cursor:pointer; width:14px; height:14px;'>" +
                              "<div style='margin-top: 1px; margin-left: 17px; padding: 3px 0px; font-style: italic; color:#666; display:none;'>" +
                                "Stop new email from coming into your Inbox until you're ready for it." +
                              "</div>" +
                            "</div>" +
                            "<input type='checkbox' class='pref' id='keyboard-shortcuts' style='margin: 4px 0;vertical-align: middle;position:relative;'> " +
                            "<label style='vertical-align: middle;' for='keyboard-shortcuts'>Enable keyboard shortcuts</label> " +
                            "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_shortcuts_question' style='cursor:pointer; width:14px; height:14px; vertical-align:middle;'>" +
                            "<ul style='display:none; padding-left: 35px; color:#666; margin-top: 5px;'>" +
                                "<li>Press <strong>b</strong> to open the Boomerang menu</li>" +
                                "<li>Press <strong>Ctrl/Cmd + s</strong> to open the send later menu (while you are composing a message)</li>" +
                                "<li>Use the arrow keys, space bar, and enter to navigate inside the menus.</li>" +
                            "</ul>" +
                        "</div>" +
                        "<div class='bullet_text'>" +
                            "<h3 style='margin: 0 0 10px 0;'>Premium Settings</h3>" +
                            "<div class='b4g_settings_premium_link' style='margin-bottom:5px;'><a href='https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=settings&utm_campaign=settingslink'>Upgrade to the Premium plan to enable these features.</a></div>" +
                            "<div class='b4g_premium-text-disabled' style='color: #999;'>" +
                                "<input type='checkbox' class='pref pref-check' id='b4g_read_receipt_check' style='margin: 4px 0;vertical-align: middle;'> <label for='b4g_read_receipt_check' style='vertical-align: middle;'>Request a read receipt for every email I send</label><br/>" +
                                "<input type='checkbox' class='pref pref-check' id='b4g_send_check' style='margin: 4px 0;vertical-align: middle;'> <label for='b4g_send_check' style='vertical-align: middle;'>Enable Boomerang for every email I send:</label> " +
                                "<div class='b4g_send_condition_value_settings_box' style='margin-top:5px;'>" +
                                    "<span style='margin:8px 9px 8px 18px; color:#666; position:relative; bottom: 3px;'>Remind me</span>" + 
                                    "<span class='' style='height: 20px; top: 3px; margin: 0 0 6px 10px; padding: 1px 0px;'>" +
                                        "<select name='ifResponseSettingNum' id='b4g_send_check_num' class='b4g-enabled-pref pref pref-select' style=''>" +
                                            "<option value='1'>1</option>" +
                                            "<option value='2'>2</option>" +
                                            "<option value='3'>3</option>" +
                                            "<option value='4'>4</option>" +
                                            "<option value='5'>5</option>" +
                                            "<option value='6'>6</option>" +
                                            "<option value='7'>7</option>" +
                                            "<option value='8'>8</option>" +
                                            "<option value='9'>9</option>" +
                                            "<option value='10'>10</option>" +
                                            "<option value='11'>11</option>" +
                                            "<option value='12'>12</option>" +
                                            "<option value='13'>13</option>" +
                                            "<option value='14'>14</option>" +
                                            "<option value='15'>15</option>" +
                                            "<option value='16'>16</option>" +
                                            "<option value='17'>17</option>" +
                                            "<option value='18'>18</option>" +
                                            "<option value='19'>19</option>" +
                                            "<option value='20'>20</option>" +
                                            "<option value='21'>21</option>" +
                                            "<option value='22'>22</option>" +
                                            "<option value='23'>23</option>" +
                                            "<option value='24'>24</option>" +
                                            "<option value='25'>25</option>" +
                                            "<option value='26'>26</option>" +
                                            "<option value='27'>27</option>" +
                                            "<option value='28'>28</option>" +
                                            "<option value='29'>29</option>" +
                                            "<option value='30'>30</option>" +
                                            "<option value='31'>31</option>" +
                                        "</select>" +
                                    "</span>" +  
                                    "<span class='' style='height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;'>" +
                                        "<select name='ifResponseSettingUnit' id='b4g_send_check_unit' class='b4g-enabled-pref pref pref-select' style=''>" +
                                            "<option value='hours'>hours</option>" +
                                            "<option value='days'>days</option>" +
                                            "<option value='weeks'>weeks</option>" +
                                            "<option value='months'>months</option>" +
                                        "</select>" +
                                    "</span>" +
                                    "<span style='margin:8px 7px 8px 8px; color:#777;'>after sending</span>" + 
                                    "<span class='' style='height: 20px; top: 3px; margin: 0 0 6px 4px; padding: 1px 0px;'>" +
                                        "<select name='ifResponseSettingCond' id='b4g_send_check_cond' class='b4g-enabled-pref pref pref-select' style=''>" +
                                            "<option value='no reply'>if no reply</option>" +
                                            "<option value='no open'>if not opened</option>" +
                                            "<option value='always'>regardless</option>" +
                                        "</select>" +
                                    "</span>" +
                                "</div>" +
                            "</div>" +
                            "<div class='b4g_premium-text-disabled' style='color: #999;margin-top:10px;'>" +
                                "<input type='checkbox' id='b4g_crm_enabled' class='pref' style='vertical-align: middle;'> <label style='vertical-align: middle;' for='b4g_crm_enabled'>Enable CRM Integration</label><br/>" +
                                "<div class='b4g_crm_hide_if_disabled' style='display:none;'>" + 
                                    "<div style='clear:both; margin-top:10px; color:#777;'>" +
                                        "<span style='margin:3px 0px 12px 18px; width:120px; float:left; color:#777;' >Select CRM</span> " +
                                        "<select id='b4g_crm_select' class='pref' style='float:left;'>" +
                                            "<option value='salesforce'>Salesforce</option>" +
                                            "<option value='highrise'>Highrise</option>" +
                                            "<option value='insightly'>Insightly</option>" +
                                            "<option value='capsule'>Capsule</option>" +
                                            "<option value='sugar'>Sugar</option>" +
                                            "<option value='pipedrive'>Pipedrive</option>" +
                                            "<option value='zoho'>Zoho</option>" +
                                            "<option value='other'>Other</option>" +
                                        "</select>" +
                                    "</div>" +
                                    "<div style='clear:both; color:#777;'>" +
                                        "<span style='margin:3px 0px 12px 18px; width:120px; float:left; color:#777;' >Bcc Address " +
                                            "<img src='https://s3.amazonaws.com/BoomerangForGmail/bookmarklet/questionmark.png' class='b4g_settings_bccaddress_question' style='margin-right: 5px; cursor:pointer; width:14px; height:14px; vertical-align:middle;'>" +
                                        "</span> " +
                                        "<input id='b4g_bccAddress' class='' placeholder='example@salesforce.com' type='text' style='float:left;width:250px; margin-left:0px; padding-left:4px;'>" +
                                        "<span id='b4g_bccAddressDisplay' style='margin:3px 0px 12px 2px; float:left;'></span>"+
                                        "<span id='b4g_edit_link' style='margin:3px 0px 12px 15px; float:left; color: #333; text-decoration: underline; cursor: pointer;'>Edit</span>"+
                                        "<span id='b4g_save_link' style='margin:3px 0px 12px 15px; float:left; color: #333; text-decoration: underline; cursor: pointer;'>Save</span>"+
                                    "</div>" +
                                    "<div style='clear:both; color:#777;'>" +
                                        "<span style='margin:0px 2px 0px 18px; width:120px; float:left; color:#777;' >Include with</span> " +
                                        "<input style='margin-left: 0px; margin-right: 2px; vertical-align:middle;' class='pref b4g_crm_include_with' type='radio' id='b4g_crm_include_with_every' name='b4g_crm_include_with' value='every'/><label for='b4g_crm_include_with_every'>every email I send</label>" +
                                    "</div>" +
                                    "<div style='clear:both; margin-top: 5px; color:#777;'>" +
                                        "<span style='margin:3px 2px 0px 18px; width:120px; float:left;' ></span> " +
                                        "<input style='margin-left: 0px; margin-right: 2px; vertical-align:middle;' class='pref b4g_crm_include_with' type='radio' id='b4g_crm_include_with_boomerang' name='b4g_crm_include_with' value='boomerang' /><label for='b4g_crm_include_with_boomerang'>only emails I Boomerang when sending</label>" +
                                    "</div>" +
                                "</div>" +
                            "</div>" +
                        "</div>" +
                    "</div>" +
                "</div>" +
            "</div>";   
}

function compose_settings_dialog_new_ui() {
  return "<div class='dialogdiv b4g-settings-dialog-div-new-ui'>" +
                "<div class='b4g_settings_loading b4g-settings-loading-new-ui b4g-settings-loading-new-ui'>" +
                    "Loading..." +
                "</div>" +
                "<div class='b4g_settings_dialog b4g-settings-dialog-new-ui'>" +
                    "<div class='b4g-settings-menu-title-new-ui'>" +
                      "Boomerang Settings" +
                    "</div>" +
                    "<div class='b4g_send_condition_settings_box'>" +
                        "<div class='b4g-settings-send-condition-new-ui'>" +
                            "<div class='b4g-settings-send-condition-title-new-ui'>When messages are returned, they should be</div>" +
                            "<div class='bullet_text b4g-settings-bullet-text-new-ui'>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='unread'> <label for='unread' class='b4g-settings-text-new-ui'>Marked as unread</label>" +
                              "</div>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='starred'> <label for='starred' class='b4g-settings-text-new-ui'>Starred</label>" +
                              "</div>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='topinbox'> <label for='topinbox' class='b4g-settings-text-new-ui'>At the top of your inbox</label>" +
                              "</div>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='labelled'> <label for='labelled' class='b4g-settings-text-new-ui'>Labeled as 'Boomerang-Returned'</label>" +
                              "</div>" +
                            "</div>" +
                        "</div>" +
                        "<div class='b4g-settings-features-list-new-ui'>" +
                            "<div>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='b4g_enable_respondable'> " +
                                "<label class='b4g-settings-text-new-ui' for='b4g_enable_respondable'>Enable Respondable</label> " +
                              "</div>" +
                                "<div class='b4g-settings-premium-respondable-new-ui'>" +
                                    "<div class='b4g_settings_respondable_upgrade_link' class='b4g-settings-premium-respondable-upgrade-link-new-ui'><a href='https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=settings&utm_campaign=settingslink'>Upgrade to the Pro or Premium plan to enable this feature.</a></div>" +
                                    "<div class='b4g_respondable_text_disabled b4g-settings-respondable-text-diabled-new-ui b4g-settings-advanced-respondable-container-new-ui b4g-settings-disabled-if-not-pro-new-ui'>" +
                                        "<input type='checkbox' class='pref b4g-settings-cb-new-ui' id='b4g_enable_premium_respondable'> " +
                                        "<label class='b4g-settings-text-new-ui' for='b4g_enable_premium_respondable'>Enable Respondable with advanced machine learning</label> " +
                                        "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_respondable_question b4g-settings-respondable-question-new-ui'>" +
                                        "<div class='b4g-settings-advanced-respondable-text-new-ui'>" +
                                            "Enables politeness, sentiment, and subjectivity analysis. Your message information will be sent to Boomerang servers for analysis, but message data will not be retained." +
                                        "</div>" +
                                    "</div>" +
                                "</div>" +
                            "</div>" +
                            "<div id='inbox-pause-settings' class='b4g-settings-relative-position-new-ui'>" +
                              "<div id='inbox-pause-tooltip' class='b4g-settings-ibp-tooltip-new-ui b4g-settings-option-container-new-ui' data-tooltip-align='b,l'>" +
                                "<input id='inbox-pause-enabled' type='checkbox' class='pref b4g-settings-cb-new-ui' checked='checked' /> " +
                                "<label id='inbox-pause-label' for='inbox-pause-enabled' class='b4g-settings-inbox-pause-label-new-ui'>Enable Inbox Pause</label> " +
                              "</div>" +
                              "<img id='inbox-pause-more' src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_inbox_pause_question b4g-settings-inbox-pause-question-new-ui'>" +
                              "<div class='b4g-settings-ibp-explanation-text-new-ui'>" +
                                "Stop new email from coming into your Inbox until you're ready for it." +
                              "</div>" +
                            "</div>" +
                              "<div class='b4g-settings-option-container-new-ui'>" +
                                "<input type='checkbox' class='pref b4g-settings-cb-new-ui b4g-settings-relative-position-new-ui' id='keyboard-shortcuts'> " +
                                "<label class='b4g-settings-text-new-ui' for='keyboard-shortcuts'>Enable keyboard shortcuts</label> " +
                              "</div>" +
                            "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='b4g_settings_shortcuts_question b4g-settings-shortcuts-question-new-ui'>" +
                            "<ul class='b4g-settings-ks-list-new-ui'>" +
                                "<li>Press <strong>b</strong> to open the Boomerang menu</li>" +
                                "<li>Press <strong>Ctrl/Cmd + s</strong> to open the send later menu (while you are composing a message)</li>" +
                                "<li>Use the arrow keys, space bar, and enter to navigate inside the menus.</li>" +
                            "</ul>" +
                        "</div>" +
                        "<div class='bullet_text'>" +
                            "<div class='b4g-settings-premium-title-new-ui'>" +
                              "Premium Settings" +
                            "</div>" +
                            "<div class='b4g_settings_premium_link b4g-settings-premium-link-new-ui'><a href='https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=settings&utm_campaign=settingslink'>Upgrade to the Premium plan to enable these features.</a></div>" +
                            "<div class='b4g_premium-text-disabled b4g-settings-premium-link-diabled-new-ui'>" +
                              "<div class='b4g-settings-option-container-new-ui b4g-settings-disabled-if-not-premium-new-ui'>" +
                                "<input type='checkbox' class='pref pref-check b4g-settings-cb-new-ui' id='b4g_read_receipt_check'> <label for='b4g_read_receipt_check' class='b4g-settings-text-new-ui'>Request a read receipt for every email I send</label>" +
                              "</div>" +
                              "<div class='b4g-settings-option-container-new-ui b4g-settings-disabled-if-not-premium-new-ui'>" +
                                "<input type='checkbox' class='pref pref-check b4g-settings-cb-new-ui' id='b4g_send_check'> <label for='b4g_send_check' class='b4g-settings-text-new-ui'>Enable Boomerang for every email I send:</label> " +
                              "</div>" +
                              "<div class='b4g_send_condition_value_settings_box b4g-settings-send-condition-value-new-ui b4g-settings-disabled-if-not-premium-new-ui'>" +
                                  "<span class='b4g-settings-remind-me-new-ui'>Remind me</span>" +
                                  "<span class='b4g-settings-response-options-new-ui'>" +
                                      "<select name='ifResponseSettingNum' id='b4g_send_check_num' class='b4g-enabled-pref pref pref-select'>" +
                                          "<option value='1'>1</option>" +
                                          "<option value='2'>2</option>" +
                                          "<option value='3'>3</option>" +
                                          "<option value='4'>4</option>" +
                                          "<option value='5'>5</option>" +
                                          "<option value='6'>6</option>" +
                                          "<option value='7'>7</option>" +
                                          "<option value='8'>8</option>" +
                                          "<option value='9'>9</option>" +
                                          "<option value='10'>10</option>" +
                                          "<option value='11'>11</option>" +
                                          "<option value='12'>12</option>" +
                                          "<option value='13'>13</option>" +
                                          "<option value='14'>14</option>" +
                                          "<option value='15'>15</option>" +
                                          "<option value='16'>16</option>" +
                                          "<option value='17'>17</option>" +
                                          "<option value='18'>18</option>" +
                                          "<option value='19'>19</option>" +
                                          "<option value='20'>20</option>" +
                                          "<option value='21'>21</option>" +
                                          "<option value='22'>22</option>" +
                                          "<option value='23'>23</option>" +
                                          "<option value='24'>24</option>" +
                                          "<option value='25'>25</option>" +
                                          "<option value='26'>26</option>" +
                                          "<option value='27'>27</option>" +
                                          "<option value='28'>28</option>" +
                                          "<option value='29'>29</option>" +
                                          "<option value='30'>30</option>" +
                                          "<option value='31'>31</option>" +
                                      "</select>" +
                                  "</span>" +
                                  "<span class='b4g-settings-response-options-new-ui'>" +
                                      "<select name='ifResponseSettingUnit' id='b4g_send_check_unit' class='b4g-enabled-pref pref pref-select'>" +
                                          "<option value='hours'>hours</option>" +
                                          "<option value='days'>days</option>" +
                                          "<option value='weeks'>weeks</option>" +
                                          "<option value='months'>months</option>" +
                                      "</select>" +
                                  "</span>" +
                                  "<span class='b4g-settings-premium-after-sending-title-new-ui'>after sending</span>" +
                                  "<span class='b4g-settings-response-options-new-ui'>" +
                                      "<select name='ifResponseSettingCond' id='b4g_send_check_cond' class='b4g-enabled-pref pref pref-select'>" +
                                          "<option value='no reply'>if no reply</option>" +
                                          "<option value='no open'>if not opened</option>" +
                                          "<option value='always'>regardless</option>" +
                                      "</select>" +
                                  "</span>" +
                              "</div>" +
                            "</div>" +
                            "<div class='b4g_premium-text-disabled b4g-settings-enable-crm-container-new-ui'>" +
                              "<div class='b4g-settings-option-container-new-ui b4g-settings-disabled-if-not-premium-new-ui'>" +
                                "<input type='checkbox' id='b4g_crm_enabled' class='pref b4g-settings-cb-new-ui'> <label for='b4g_crm_enabled' class='b4g-settings-text-new-ui'>Enable CRM Integration</label><br/>" +
                              "</div>" +
                                "<div class='b4g_crm_hide_if_disabled' style='display: none;'>" +
                                    "<div class='b4g-settings-crm-options-new-ui'>" +
                                        "<span class='b4g-settings-select-crm-title-new-ui' >Select CRM</span> " +
                                        "<select id='b4g_crm_select' class='pref b4g-settings-crm-select-new-ui'>" +
                                            "<option value='salesforce'>Salesforce</option>" +
                                            "<option value='highrise'>Highrise</option>" +
                                            "<option value='insightly'>Insightly</option>" +
                                            "<option value='capsule'>Capsule</option>" +
                                            "<option value='sugar'>Sugar</option>" +
                                            "<option value='pipedrive'>Pipedrive</option>" +
                                            "<option value='zoho'>Zoho</option>" +
                                            "<option value='other'>Other</option>" +
                                        "</select>" +
                                    "</div>" +
                                    "<div class='b4g-settings-crm-bcc-container-new-ui'>" +
                                        "<span class='b4g-settings-crm-bcc-title-new-ui'>Bcc Address " +
                                            "<img src='https://s3.amazonaws.com/BoomerangForGmail/bookmarklet/questionmark.png' class='b4g_settings_bccaddress_question b4g-settings-bcc-address-question-new-ui'>" +
                                        "</span> " +
                                        "<input id='b4g_bccAddress' class='b4g-settings-bcc-address-input-new-ui' placeholder='example@salesforce.com' type='text'>" +
                                        "<span id='b4g_bccAddressDisplay' class='b4g-settings-bcc-address-display-new-ui'></span>"+
                                        "<span id='b4g_edit_link' class='b4g-settings-edit-save-links-new-ui'>Edit</span>"+
                                        "<span id='b4g_save_link' class='b4g-settings-edit-save-links-new-ui'>Save</span>"+
                                    "</div>" +
                                    "<div class='b4g-settings-crm-include-with-every-email-container-new-ui'>" +
                                        "<span class='b4g-settings-crm-include-with-every-email-title-new-ui'>Include with</span> " +
                                        "<input class='pref b4g_crm_include_with b4g-settings-crm-include-with-option-new-ui' type='radio' id='b4g_crm_include_with_every' name='b4g_crm_include_with' value='every'/><label for='b4g_crm_include_with_every'>every email I send</label>" +
                                    "</div>" +
                                    "<div class='b4g-settings-crm-include-with-boomerang-container-new-ui'>" +
                                        "<span class='b4g-settings-crm-include-with-boomerang-title-new-ui'></span> " +
                                        "<input class='pref b4g_crm_include_with b4g-settings-crm-include-with-option-new-ui' type='radio' id='b4g_crm_include_with_boomerang' name='b4g_crm_include_with' value='boomerang' /><label for='b4g_crm_include_with_boomerang'>only emails I Boomerang when sending</label>" +
                                    "</div>" +
                                "</div>" +
                            "</div>" +
                        "</div>" +
                    "</div>" +
                "</div>" +
            "</div>";
}

function calendar_settings_dialog_html() {
  return "<div class='dialogdiv b4g-settings-dialog-div-new-ui bcal-settings-dialog-div'>" +
                "<div class='b4g_settings_loading b4g-settings-loading-new-ui b4g-settings-loading-new-ui'>" +
                    "Loading..." +
                "</div>" +
                "<div class='b4g_settings_dialog b4g-settings-dialog-new-ui'>" +
                    "<div class='b4g-settings-menu-top-logo-row'>" +
                      "<img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/B4G_logo_with_txt.svg'>" +
                    "</div>" +
                    "<div class='b4g-settings-menu-title-new-ui'>" +
                      "Meeting Scheduling Setup" +
                    "</div>" +
                    "<div class='b4g-calendar-explanation-new-ui'>" +
                      "Customize your settings to get started. And don't worry – you can always adjust these later as needed." +
                    "</div>" +
                    "<div class='b4g-calendar-settings-page'>" +
                      "<div class='b4g-calendar-subtitle-new-ui' style=''>" +
                        "Your name" +
                        "<span class='b4g-hover-tooltip-icon' data-tooltip-contained='true' data-tooltip-align='r' style='margin-left:12px;'>" +
                          "<img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/ico_helptip.svg'>" +
                          "<div class='T-ays-a45'>"+
                            "<div style='width:240px;font-size:12px;text-align:left;'>This is the name guests will see when you send event invitations using Boomerang Meeting Scheduling features.</div>" +
                          "</div>" +
                        "</span>" +
                      "</div>" +
                      "<div class='' style='margin-top: 10px;'>" +
                        "<input type='text' style='width:224px;' class='b4gdisplayName b4g-custom-dialog-input' value='' placeholder='Your name'>"+
                      "</div>" +
                      "<hr style='margin-top: 20px; margin-bottom:20px; height: 1px; border: 0; border-top: 1px solid #eaeaea;'>" +
                      "<div style='margin-bottom: 10px;'>" +
                      "<div class='b4g-calendar-title-new-ui'>" +
                        "Calendars" +
                      "</div>" +
                        "<div class='b4g-calendar-subtitle-new-ui'>" +
                            "Add new events to..." +
                            "<span class='b4g-hover-tooltip-icon b4g-has-two-lines-only' data-tooltip-contained='true' data-tooltip-align='r' style='margin-left:12px;'>" +
                              "<img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/ico_helptip.svg'>" +
                              "<div class='T-ays-a45'>"+
                                "<div style='width:240px;font-size:12px;text-align:left;'>Choose the calendar you'd like to add new events to when you schedule meetings.</div>" +
                              "</div>" +
                            "</span>" +
                        "</div>" +
                        `
                        <div class="b4g-b-relative b4g-toggle-dropdown-container">
                          <div
                            class="b4g-b-dropdown b4g-toggle-dropdown-click"
                            style=""
                          >
                            <span
                              class="b4g-b-dropdown__selected"
                            >
                            </span>
                            <img
                              src="https://b4g.baydin.com/site_media/calendar/bookable/accordion-arrow.svg"
                              class="b4g-b-dropdown__arrow"
                              alt="accordion arrow"
                            >
                          </div>
                          <div class="b4g-b-dropdown-content">
                          </div>
                        </div>
                        ` +
                      "</div>" +
                      "<div class='b4g-selectCalendarDiv' style='margin-top: 15px;'>" +
                        "<div class='b4g-calendar-subtitle-new-ui'>" +
                            "<img src='https://b4g.baydin.com/site_media/calendar/img/logo_GoogleCalendar.svg' height='36' width'36' style='margin-right: 12px;'>" +
                            "<span style='margin-top:8px;'>Check for conflicts to avoid double bookings</span>" +
                            "<span class='b4g-hover-tooltip-icon' data-tooltip-contained='true' data-tooltip-align='r' style='margin-left:12px;margin-top:8px;'>" +
                              "<img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/ico_helptip.svg'>" +
                              "<div class='T-ays-a45'>"+
                                "<div style='width:240px;font-size:12px;text-align:left;'>Set the calendars to check for conflicting events. We'll block out times when you're busy so you don't get double booked.</div>" +
                              "</div>" +
                            "</span>" +
                        "</div>" +
                        "<div class='b4g-settings-syncedCalendarRegion' >" +
                        "</div>" +
                      "</div>" +

                      "<hr style='margin-top: 20px; margin-bottom:20px; height: 1px; border: 0; border-top: 1px solid #eaeaea;'>" +

                      "<div class='b4g-whitelist-zoom'>" +
                        "<div class='b4g-calendar-title-new-ui' style=''>" +
                          "Integrations" +
                        "</div>" +
                        "<div class='b4g-has-zoom' style='display:none;'>" +
                          "<div class='b4g-zoom-revoke-container' style='display:flex; margin: 24px 0px;'>" +
                            "<img src='https://b4g.baydin.com/site_media/calendar/img/logo_zoom.svg' height='36' width'36' style='margin-right: 15px;'>" +
                            "<div>" +
                              "<div style='font-weight: bold; font-size: 16px; margin-top:3px;'>" +
                                "Zoom" +
                              "</div>" +
                              "<div style='font-size: 12px; line-height: 18px; color: #777777; margin-top: 1px; width: 400px'>" +
                                  "Connected to <span class='b4g-zoom-email' style='font-weight:bold;'></span>" +
                              "</div>" +
                            "</div>" +
                            "<div class='b4g-zoom-revoke b-button integration' style='cursor:pointer; height:36px; width: 96px;border-radius: 4px;background-color: #F2F3F4; display: flex; align-items: center;justify-content: center; margin-right: 10px; margin-top: 2px;'>" +
                              "<div 'color:#222;font-size: 14px;'>Disconnect</div>" +
                            "</div>" +
                          "</div>" +
                          "<div class='b4g-zoom-revoke-loading' style='display:none'>" +
                            "Disconnecting..." +
                          "</div>" +
                        "</div>" +
                        "<div class='b4g-no-zoom' style='display:none;'>" +
                            "<div class='b4g-zoom-connect-container' style='display:flex; margin: 24px 0px;'>" +
                              "<img src='https://b4g.baydin.com/site_media/calendar/img/logo_zoom.svg' height='36' width'36' style='margin-right: 15px;'>" +
                              "<div>" +
                                "<div style='font-weight: bold; font-size: 16px; margin-top:3px;'>" +
                                  "Zoom" +
                                "</div>" +
                                "<div style='font-size: 12px; line-height: 18px; color: #777777; margin-top: 1px; width: 400px'>" +
                                  "Automatically create and include Zoom meeting links for your events." +
                                "</div>" +
                              "</div>" +
                              "<div class='b4g-zoom-connect b-button integration' style='cursor:pointer; height:36px; width:80px;border-radius: 4px;background-color: #055DA0; display: flex; align-items: center;justify-content: center; margin-right: 10px; margin-top: 2px'>" +
                                "<div style='font-size: 14px;font-weight:500;'>" +
                                  "Connect" +
                                "</div>" +
                              "</div>" +
                            "</div>" +
                            "<div class='b4g-zoom-connect-loading' style='display:none'>" +
                              "Connecting..." +
                            "</div>" +
                        "</div>" +

                        "<div class='b4g-has-google-meet'>" +
                          "<div class='b4g-meet-connect-container' style='display:flex; margin: 24px 0px;'>" +
                            "<img src='https://b4g.baydin.com/site_media/calendar/img/logo_GoogleMeet.svg' height='36' width'36' style='margin-right: 15px;'>" +
                            "<div>" +
                              "<div style='font-weight: bold; font-size: 16px; margin-top:3px;'>" +
                                "Google Meet" +
                              "</div>" +
                              "<div style='font-size: 12px; line-height: 18px; color: #777777; margin-top: 1px; width: 400px'>" +
                                "Automatically create and include Google Meet links for your events." +
                              "</div>" +
                            "</div>" +
                            "<div class='b4g-google-meet-check' style='height:36px; width:80px;display: flex; align-items: center;justify-content: center; margin-top: 2px; margin-left:auto; margin-right:0px;'>" +
                              "<img style='color:white;font-size: 14px;' src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/ico_greencheck.svg'>" +
                            "</div>" +
                          "</div>" +
                        "</div>" +
                      "</div>" +


                    "</div>" +
                "</div>" +
            "</div>";
}

 /**
 * Displays a settings dialog
 */
function show_settings_dialog() {
    var frameDoc = get_frame();
    $(".dialogdiv").remove();

    var dialog = compose_settings_dialog();
    $("body", frameDoc).append($(dialog));
    set_up_crm_help();

    if (which_gmail() === NEW_GMAIL) {
      var $b4gSettingsDialog = $(".dialogdiv", frameDoc).dialog({
          modal: true,
          closeOnEscape: true,
          width: 500,
          buttons: {
              "Ok": {
                  text: 'OK',
                  'class': 'b4g-button b4g-settings-accept-btn-new-ui',
                  click: function() {
                      if (save_preferences_to_local_storage($(this))){
                          $(this).dialog("destroy");
                      }
                   }
              },
              "Cancel": {
                  text: 'Cancel',
                  'class': 'b4g-button b4g-settings-cancel-btn-new-ui',
                  click: function() { $(this).dialog("destroy");}
              }
          }
      });
      // remove default title from the menu
      $b4gSettingsDialog.parent().children().first().remove();
      $b4gSettingsDialog.parent().removeClass('b4g-ui-widget-content');
    } else {
      $(".dialogdiv", frameDoc).dialog({
          modal: true,
          closeOnEscape: true,
          width: 500,
          title: "Boomerang Settings",
          buttons: {
              "Ok": {
                  text: 'OK',
                  style: 'padding: 5px 20px;',
                  'class': 'b4g-button by-button by-button-secondary',
                  click: function() {
                      if (save_preferences_to_local_storage($(this))){
                          $(this).dialog("destroy");
                      }
                   }
              },
              "Cancel": {
                  text: 'Cancel',
                  style: 'padding: 5px 20px;',
                  'class': 'b4g-button dialog-gray by-button',
                  click: function() { $(this).dialog("destroy");}
              }
          }
      });
    }

    fix_all_dialog_links();

    // Hiding with js instead of css to ensure dialog is vertically centered correctly.
    $(".dialogdiv .b4g_settings_dialog").hide();
    $(".dialogdiv .b4g_settings_shortcuts_question").click(function(e) {
        $(this).next("ul").toggle();
        track_event([ "keyboard-shortcuts-explanation", "toggle"]);
    });
    $(".dialogdiv .b4g_settings_respondable_question").click(function(e) {
        $(this).next("div").toggle();
        track_event([ "respondable-explanation", "toggle"]);
    });
    $(".dialogdiv .b4g_settings_inbox_pause_question").click(function(e) {
        $(this).next("div").toggle();
        track_event([ "inbox-pause-settings-explanation", "toggle"]);
    });

    var windowHeight = $(window).height();
    if (windowHeight < 650) {
      $(".b4g_send_condition_settings_box").css({
          "height": (windowHeight - 200) + "px",
          "max-height": (windowHeight - 200) + "px",
          "overflow-y": "auto",
      });
    }

    $.ajax({
        method: "get",
        url: "https://b4g.baydin.com/getpreferences/",
        xhr: function() {
            var xhr = $.ajaxSettings.xhr();
            xhr.withCredentials = true;
            return xhr;
        },
        success: function(data) {
            if (!data){
                track_event(["Settings Dialog", "failed launch"]);
                $(".dialogdiv").remove();
                show_dialog("<p>There seems to be an issue with your login credentials. Try visiting the <a href='https://b4g.baydin.com/settings'>manage page</a> to adjust your settings.</p>");
                return;
            }

            var unread = (data.unread ? "checked" : "");
            var starred = (data.starred ? "checked" : "");
            var topInbox = (data.topInbox ? "checked" : "");
            var labelled = (data.labelled ? "checked" : "");
            var onSendSetting = (data.onSendSetting ? "checked" : "");
            var onSendOffset = (data.onSendOffset == null) ? "1_weeks" : data.onSendOffset;
            var onSendCond = (data.onSendCond == null) ? "reply" : data.onSendCond;
            var readReceipts = (data.readReceipts ? "checked" : "");
            var isPremium = (data.plan === "premium" ? true : false);
            var isPro = (data.plan === "pro" ? true : false);

            $("#unread", frameDoc).attr("checked", unread);
            $("#starred", frameDoc).attr("checked", starred);
            $("#topinbox", frameDoc).attr("checked", topInbox);
            $("#labelled", frameDoc).attr("checked", labelled);
            $("#keyboard-shortcuts", frameDoc).attr("checked", keyboard_shortcuts.is_enabled());
            $("#inbox-pause-enabled", frameDoc).attr("checked", !inbox_pause_is_disabled());
            $("#b4g_enable_respondable", frameDoc).attr("checked", respondable_is_enabled());

            // B4G-1037: disable checkbox when IBP is on
            if(is_paused() && !inbox_pause_is_disabled()) {

                // add disabled styles
                $("#inbox-pause-enabled").attr("disabled", "disabled");
                $("#inbox-pause-label").css({"color" : "#999"});

                // add empty div to allow both the disabled checkbox and tooltip on hover
                $("#inbox-pause-tooltip").prepend("<div style='position: absolute; margin: 4px 0; height: 13px; width: 13px;'></div>");

                // add tooltip
                $("#inbox-pause-tooltip").append("<div class='T-ays-a45'><div style='text-align: left;'>Your Inbox is currently paused. Please unpause&#10;before disabling the Inbox Pause feature.</div></div>");
                $("#inbox-pause-tooltip").attr("data-tooltip-contained", "true");
            }

            track_event(["Settings Dialog", "successful launch"]);

            // Respondable Settings
            if (isPro || isPremium) {
                $(".b4g_settings_respondable_upgrade_link", frameDoc).hide();
                $(".b4g_respondable_text_disabled", frameDoc).removeClass(".b4g_premium-text-disabled");
                $(".b4g_respondable_text_disabled", frameDoc).css("color", "#333");
                $("#b4g_enable_premium_respondable", frameDoc).attr("checked", premium_respondable_is_enabled());
                // make settings visible in the New Gmail UI
                if (which_gmail() === NEW_GMAIL) {
                  var $proOption = $(".b4g-settings-disabled-if-not-pro-new-ui");
                  $proOption.addClass("b4g-settings-visible-new-ui");
                }
            }
            else {
                $("#b4g_enable_premium_respondable").attr("disabled", "disabled");
            }

            // Premium Settings
            if (isPremium) {
                // make settings visible in the New Gmail UI
                if (which_gmail() === NEW_GMAIL) {
                  var $premiumOptions = $(".b4g-settings-disabled-if-not-premium-new-ui");
                  $premiumOptions.each(function(i) {
                    var $premiumOption = $($premiumOptions[i]);
                    $premiumOption.addClass("b4g-settings-visible-new-ui");
                  });
                }
                // Hide the 'premium subscribe link' and show send condition settings
                $(".b4g_settings_premium_link", frameDoc).hide();
                $(".b4g_premium-text-disabled", frameDoc).removeClass(".b4g_premium-text-disabled").css("color", "#333");
                $(".b4g_send_condition_settings_box", frameDoc).show();

                $("#b4g_send_check", frameDoc).attr("checked", onSendSetting);
                $("[name=ifResponseSettingCond]", frameDoc).val(onSendCond);

                $("#b4g_read_receipt_check", frameDoc).attr("checked", readReceipts);
                
                var offset = onSendOffset.split("_");
                $("[name=ifResponseSettingNum]", frameDoc).val(offset[0]);
                $("[name=ifResponseSettingUnit]", frameDoc).val(offset[1]);

                // If send condition setting not on, dim the select boxes and text
                if (onSendSetting !== "checked") {
                    $(".pref-select", frameDoc).attr("disabled", "disabled").removeClass("b4g-enabled-pref").addClass("b4g-disabled-pref");
                    $(".b4g_send_condition_value_settings_box", frameDoc).addClass("b4g-disabled-send-condition");
                }
                    
                $("#b4g_crm_enabled").click(function(){
                    if ($(this).is(":checked")){
                        $(".b4g_crm_hide_if_disabled").show();
                    }
                    else{
                        $(".b4g_crm_hide_if_disabled").hide();
                    }
                });
                if (data.crm.active){
                    $("#b4g_crm_enabled").attr("checked", true);
                    $(".b4g_crm_hide_if_disabled").show();
                }
                var bccAddress = data.crm.bccAddress;
                $("#b4g_bccAddress").val(bccAddress);
                $("#b4g_bccAddressDisplay").text(bccAddress);
                var crmSelect = data.crm.crm;
                $("#b4g_crm_select").val(crmSelect);
                var bccIncludeWith = data.crm.bccIncludeWith;
                $(".b4g_crm_include_with[value=" + bccIncludeWith + "]").attr("checked", true);

                var switch_to_edit_mode = function(){
                    $("#b4g_bccAddress").show().select();
                    $("#b4g_bccAddressDisplay").hide();
                    $("#b4g_edit_link").hide();
                    $("#b4g_save_link").show();
                };

                var switch_to_view_mode = function(){
                    $("#b4g_bccAddress").hide();
                    $("#b4g_bccAddressDisplay").show();
                    $("#b4g_edit_link").show();
                    $("#b4g_save_link").hide();

                    var address = $("#b4g_bccAddress").val();
                    if (validate_email(address)){
                        $("#b4g_bccAddressDisplay").text(address);
                        return true;
                    }
                    else{
                        switch_to_edit_mode();
                        console.log(address);
                        alert("Please enter a valid email address.");
                        return false;
                    }
                };

                if ($.trim(bccAddress).length > 0){
                    switch_to_view_mode();
                }
                else{
                    switch_to_edit_mode();
                }
                $("#b4g_edit_link").click(switch_to_edit_mode);
                $("#b4g_save_link").click(switch_to_view_mode);

                var update_placeholder = function(){
                    var crmSelect = $("#b4g_crm_select").val();
                    var bccAddress = $("#b4g_bccAddress");
                    switch(crmSelect){
                        case "salesforce":
                            bccAddress.attr("placeholder", "example@salesforce.com");
                            break;
                        case "highrise":
                            bccAddress.attr("placeholder", "dropbox@12345678.highrisehq.com");
                            break;
                        case "insightly":
                            bccAddress.attr("placeholder", "example@mailbox.insight.ly");
                            break;
                        case "capsule":
                            bccAddress.attr("placeholder", "dropbox@12345678.example.capsulecrm.com");
                            break;
                        case "sugar":
                            bccAddress.attr("placeholder", "example@sugarondemand.com");
                            break;
                        case "pipedrive":
                            bccAddress.attr("placeholder", "12345@dropbox.pipedrive.com");
                            break;
                        case "zoho":
                            bccAddress.attr("placeholder", "example@emails.zohocrm.com");
                            break;
                        default:
                            bccAddress.attr("placeholder", "example@example.com");
                            break;
                    }
                };
                update_placeholder();
                $("#b4g_crm_select").change(update_placeholder);
            } else {
                // Disable and dim all Send Condition settings if not premium user
                $(".b4g_send_condition_settings_box", frameDoc).show();
                $(".pref-select", frameDoc).attr("disabled", "disabled").removeClass("b4g-enabled-pref").addClass("b4g-disabled-pref");
                $("#b4g_send_check", frameDoc).attr("disabled", "disabled");
                $("#b4g_read_receipt_check", frameDoc).attr("disabled", "disabled");
                $("#b4g_crm_enabled", frameDoc).attr("disabled", "disabled");
                $(".b4g_send_condition_settings_box", frameDoc).addClass("b4g-disabled-send-condition");
            }
    
            $(".b4g_settings_loading", frameDoc).hide();
            $(".b4g_settings_dialog", frameDoc).show();     

            // B4G-1037: reposition the (?) button after the label has a non-zero width
            $('#inbox-pause-more').css({
                "left"    : $('#inbox-pause-label').width() + 16.5 + 4 + "px"
            });

            $(".pref", frameDoc).not("#b4g_enable_premium_respondable").change(function() {
                    if(this === $("#unread", frameDoc).get(0) && this.checked == 0){
                        $("#topinbox", frameDoc).get(0).checked = 0;
                    }
                    else if (this === $("#topinbox").get(0) && this.checked == 1){
                        $("#unread").get(0).checked = 1;
                    }

                    // if premium respondable features are enabled, then Respondable must be enabled
                    if ($("#b4g_enable_premium_respondable", frameDoc).is(":checked") && !$("#b4g_enable_respondable", frameDoc).is(":checked")) {
                        $("#b4g_enable_premium_respondable", frameDoc).attr("checked", false);
                    }

                    if (isPremium) {
                        // tracked opens must enable read receipts
                        if (this === $("#b4g_send_check_cond").get(0)){
                            if ($(this).val() === "no open"){
                                $("#b4g_read_receipt_check").attr("checked", "checked");
                            }
                        }
                        else if(this === $("#b4g_read_receipt_check").get(0)){
                            if (!$(this).is(":checked") && $("#b4g_send_check_cond").val() === "no open"){
                                $("#b4g_send_check_cond").val("always");
                            }
                        }
                        if ($("#b4g_send_check", frameDoc).get(0).checked){
                            $(".pref-select", frameDoc).removeAttr("disabled").removeClass("b4g-disabled-pref").addClass("b4g-enabled-pref");
                            $(".b4g_send_condition_value_settings_box", frameDoc).removeClass("b4g-disabled-send-condition");
                        }
                        else{
                            $(".pref-select", frameDoc).attr("disabled", "disabled").removeClass("b4g-enabled-pref").addClass("b4g-disabled-pref");
                            $(".b4g_send_condition_value_settings_box", frameDoc).addClass("b4g-disabled-send-condition");
                        }
                    }
            });

            // Special case for turning premium respondable on
            $("#b4g_enable_premium_respondable").change(function() {
                if (!has_consented_to_advanced_respondable() && $(this).is(":checked")) {
                    var self = this;
                    $(self).attr("checked", false);
                    show_consent_dialog(function() {
                        $.ajax({
                            type: "post",
                            url: "https://b4g.baydin.com/mailcruncher/respondableconsent",
                            xhr: xhr_with_credentials,
                            success: function(data) {
                                var status = data["status"];
                                var message = data["message"];
                                if (status == "success") {
                                    sync_preferences_with_server();
                                    $(self).attr("checked", true);
                                    $("#b4g_enable_respondable").attr("checked", true);
                                }
                                else if (status == "error") {
                                    show_dialog(message);
                                }
                            },
                        });
                    });
                }
                // if premium respondable features are enabled, then Respondable must be enabled
                else if ($("#b4g_enable_premium_respondable").is(":checked") && !$("#b4g_enable_respondable").is(":checked")) {
                    $("#b4g_enable_respondable").attr("checked", true);
                }
            });
        },                
        error: function() {
            window.open("https://b4g.baydin.com/settings", "_blank");
            $(".dialogdiv").remove();
            track_event([ "dev-CORS", "failure", "XHR-failure" ]);
        },
        complete: function() {
          inline_manage.expire_cache();
        },
        dataType: "json"
    });
}

function show_calendar_settings_dialog(fromCalendarFtue, $composeContainer) {
    var frameDoc = get_frame();
    $(".dialogdiv").remove();

    var dialog = calendar_settings_dialog_html();
    $("body", frameDoc).append($(dialog));

    var display_name = CalendarSettings["settings"]["display_name"];
    var $calendarSettings = $(".b4g-calendar-settings-page");
    $calendarSettings.find("input.b4gdisplayName").val(display_name);
    var $syncedRegion = $calendarSettings.find(".b4g-settings-syncedCalendarRegion")
    var $addToRegion = $calendarSettings.find(".b4g-b-dropdown-content");
    $addToRegion.bind("b4g-dropdown-selected", function(){
      track_event([ "bcal", "choose-calendar-to-add-extension-settings" ]);
    });

    var calendars = CalendarSettings["settings"]["calendars"];
    for (var i = 0; i < calendars.length; i++) {
      var calendar = calendars[i];
      var $calendarCheckbox = $("<div class='b4g-settings-option-container-new-ui b4g-calendar-checkbox-row'>" +
        "<div class='b4g-custom_checkbox_wrapper'>" +
          "<label class='b4g-custom-checkbox-label'>" +
            "<div class='b4g-custom_visible_checkbox'></div>" +
            "<input class='custom_checkbox b4g-syncCheckbox' type='checkbox'/>" +
            "<span class='b4g-checkbox-calendar-title b4g-settings-text-new-ui'></span>" +
          "</label>" +
        "</div>" +
      "</div>");
      var syncCheckbox = $calendarCheckbox.find(".b4g-syncCheckbox");
      syncCheckbox.attr("name", calendar.calendarId);
      syncCheckbox.attr("value", calendar.calendarId);
      syncCheckbox.closest('.b4g-custom-checkbox-label').find('.b4g-custom_visible_checkbox').css({
        'borderColor': calendar.color,
        'background': calendar.color
      })
      syncCheckbox.change(function(){
        track_event([ "bcal", "choose-calendar-to-show-extension-settings" ]);
        var isChecked = $(this).is(':checked');
        $(this).closest('.b4g-custom-checkbox-label').toggleClass('checked', isChecked);
      });
      if (calendar.isSynced) {
        syncCheckbox.attr("checked", true);
        syncCheckbox.closest('.b4g-custom-checkbox-label').addClass('checked');
      }
      $calendarCheckbox.find(".b4g-checkbox-calendar-title").text(calendar.title).attr("title", calendar.calendarId);
      $syncedRegion.append($calendarCheckbox);

      if (calendar.permission == "writer" || calendar.permission == "owner") {
        var $customOption = $(`
          <div class="b4g-b-dropdown-content__option" title="${calendar.calendarId}" value="${calendar.calendarId}">
            <div class="b4g-new-calendar-dot" style="background: ${calendar.color}; border-color: ${calendar.color};">
            </div>
            <div class="b4g-b-dropdown-title-wrapper">${calendar.title}</div>
          </div>`);
        if (calendar.isDefault) {
          $customOption.addClass('selected');
        }
        $('.b4g-b-dropdown-content').append($customOption)
      }
    }

    var $b4gSettingsDialog = $(".dialogdiv", frameDoc).dialog({
        modal: true,
        closeOnEscape: true,
        width: 600,
        dialogClass: "b4g-ui-dialog-calendar-settings",
        buttons: {
          "Cancel": {
            text: 'Cancel',
            'class': 'b4g-button b4g-settings-cancel-btn-new-ui b-button secondary',
            click: function() { $(this).dialog("destroy");}
          },
          "Ok": {
              text: 'Done',
              'class': 'b4g-button b4g-settings-accept-btn-new-ui b-button primary',
              click: function() {
                track_event([ "bcal", "set-settings" ]);
                var $calendarSettings = $(".b4g-calendar-settings-page");
                var syncedCalendarIds = [];
                var $checkedBoxes = $calendarSettings.find('.b4g-syncCheckbox:checked');
                $checkedBoxes.each(function() {
                    syncedCalendarIds.push($(this).val());
                });
                var postData = {
                    defaultCalendarId: $calendarSettings.find(".b4g-b-dropdown-content__option.selected").attr("value"),
                    syncedCalendarIds: syncedCalendarIds.join(),
                    display_name: $calendarSettings.find('.b4gdisplayName').val()
                };
                $.ajax({
                  type: "POST",
                  url: "https://b4g.baydin.com/calendar/setcalendarsettings",
                  data: postData,
                  xhr: xhr_with_credentials,
                  success: function(response) {
                  }
                });
                $(this).dialog("destroy");
                if (fromCalendarFtue && $composeContainer) {
                  $(".b4g-bcal-features-button", $composeContainer).click();
                }
              }
          }
        }
    });
    // remove default title from the menu
    $b4gSettingsDialog.parent().children().first().remove();
    $b4gSettingsDialog.parent().removeClass('b4g-ui-widget-content');
    fix_all_dialog_links();

    // Hiding with js instead of css to ensure dialog is vertically centered correctly.
    $(".dialogdiv .b4g_settings_dialog").hide();

    $(".b4g_settings_loading", frameDoc).hide();
    $(".b4g_settings_dialog", frameDoc).show();     

    // Add border above buttons
    var $buttonRow = $b4gSettingsDialog.parent().find('.b4g-ui-dialog-buttonpane')
    $buttonRow.addClass('bcal-settings-dialog-buttonpane');

    // Zoom logic
    function update_zoom_display(account) {
      if (account) {
        $(".b4g-zoom-email").text(account);
        $(".b4g-has-zoom").show();
        $(".b4g-no-zoom").hide();
      }
      else {
        $(".b4g-no-zoom").show();
        $(".b4g-has-zoom").hide();
      }
    }
    function check_zoom() {
      $.ajax({
        url: "https://b4g.baydin.com/calendar/haszoom",
        data: {},
        type: "GET",
        xhr: xhr_with_credentials,
        success: function(response) {
          var zoomEmail;
          if (response["hasZoom"]) {
            zoomEmail = response["zoomEmail"];
          }
          update_zoom_display(zoomEmail);
        },
      });
    }
    check_zoom();
    $(".b4g-zoom-revoke").click(function(){
      var message = "<div>" +
        "<div style='padding: 18px 18px 0px 18px;'>You will no longer be able to select Zoom as the meeting location for new events when using Boomerang scheduling features.</div>" +
        "<div style='padding: 18px 18px 18px 18px';>Any Bookable Schedules currently using Zoom will change to a blank location.</div>" +
        "</div>";

      var $dialog = show_dialog(message, "Disconnect Zoom?",
          {
              "Cancel": {
                  text: "Cancel",
                  "class": "b4g-button grey",
                  click: function() {
                    $(this).dialog("destroy");
                    $(".b4g-zoom-revoke-loading").hide();
                    $(".b4g-zoom-revoke-container").show();
                  }
              },
              "Disconnect": {
                  text: "Disconnect",
                  "class": "b4g-button red",
                  click: function() {
                    $(".b4g-zoom-revoke-loading").show();
                    $(".b4g-zoom-revoke-container").hide();
                    $(this).dialog("destroy");
                    $.ajax({
                        type: "post",
                        url: "https://b4g.baydin.com/calendar/zoomrevoke",
                        xhr: function() {
                            var xhr = $.ajaxSettings.xhr();
                            xhr.withCredentials = true;
                            return xhr;
                        },
                        data: {},
                        success: function(data){ 
                          $(".b4g-zoom-revoke-loading").hide();
                          $(".b4g-zoom-revoke-container").show();
                          var status = data["status"];
                          if (status == "success") {
                            var zoomEmail = "";
                            update_zoom_display(zoomEmail);
                          }
                        }, 
                    });
                  }
              },
          },
          {}, "b4g-zoom-dialog"
      );
    })
    $(".b4g-zoom-connect").click(function(){
        $(".b4g-zoom-connect-loading").show();
        $(".b4g-zoom-connect-container").hide();
        var oauthWindow = window.open("https://b4g.baydin.com/calendar/zoomlogin", "_blank");
        var checkOauthWindowInterval = setInterval(function(){
          if ((!oauthWindow&& browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
            clearInterval(checkOauthWindowInterval);
            $(".b4g-zoom-connect-loading").hide();
            $(".b4g-zoom-connect-container").show();
            check_zoom();
          }
        }, 300);
    });

    // Drop downs
    var toggleDropdownClick = function() {
      var $this = $(this);
      event.stopPropagation();
      // Show or hide the nearest dropdown content
      $this.closest(".b4g-toggle-dropdown-container").find(".b4g-b-dropdown-content").toggle();
    }
    $calendarSettings.find('.b4g-toggle-dropdown-click').click(toggleDropdownClick);

    // clicking a dropdown
    $calendarSettings.find(".b4g-b-dropdown-content__option").click(function(){
      dropdownOptionClicked($(this));
    });
    var dropdownOptionClicked = function($option, isSilent) {
      var $dropdownContainer = $option.closest(".b4g-toggle-dropdown-container");
      // Add "selected" class to only the chosen option
      $dropdownContainer.find(".b4g-b-dropdown-content__option").removeClass("selected");
      $option.addClass("selected");
      // Display the chosen option to the user
      var $selectedDisplay = $dropdownContainer.find(".b4g-b-dropdown__selected");
      $selectedDisplay.empty();
      $selectedDisplay.html($option.clone().html());
      // Trigger an event (auto-advance, syncing, etc)
      if (!isSilent) {
        $option.trigger("b4g-dropdown-selected"); 
      }
    }
    $calendarSettings.find(".b4g-b-dropdown-content__option").each(function(idx, el) {
      var $dropdownEl = $(el);
      if ($dropdownEl.hasClass('selected')) {
        dropdownOptionClicked($dropdownEl);
      }
    })

    // Close the dropdown if the user clicks outside of it
    $calendarSettings.click(function(event) {
      if (!event.target.matches('.b4g-b-dropdown') && $(event.target).closest('.b-multi-dropdown-content__option').length == 0) {
        $(".b4g-b-dropdown-content").hide();
      }
    });

    // Special behavior for showing ? icon hover tooltips also on click
    function resetHoverTooltipIcons() {
      $('.b4g-manual-tooltip').remove();
      $('.b4g-hover-tooltip-icon').attr('data-tooltip-contained', 'true');
    }
    $calendarSettings.find('.b4g-hover-tooltip-icon').click(function(event) {
      resetHoverTooltipIcons();
      var $this = $(this);
      var tooltipTextContent = $this.find('.T-ays-a45 > div').text().trim();
      var tooltipHeight = 56;
      if ($this.hasClass('b4g-has-two-lines-only')) tooltipHeight = 40;
      var $manualTooltipTemplate = $(`
      <div class="T-ays b4g-manual-tooltip" role="tooltip" style="left: 0px; top: 0px;">
        <div class="T-ays-iP" style="height:${tooltipHeight}px; display: flex;">
          <div style="width:240px;font-size:12px;text-align:left;margin:auto;height:${tooltipHeight-8}px;white-space:normal;">
            ${tooltipTextContent}
          </div>
        </div>
        <div class="T-ays-hFsbo T-ays-atE" style="top: 38px;">
          <div class="T-ays-atD"></div><div class="T-ays-atC">
          </div>
        </div>
      </div>
      `);

      var frameDoc = get_frame();
      $("body", frameDoc).append($manualTooltipTemplate);
      $manualTooltipTemplate.position({of:$this, my: "left center", at: "right center"})

      $this.removeAttr('data-tooltip-contained');

      $(document).one('click', function() {
        resetHoverTooltipIcons();

      });

      event.stopPropagation();
    });
}







 function update_inline_data(frame){
  inline_manage.expire_cache();
  hijack_gmail_notification("Updating...", 2000);
}


function save_preferences_to_local_storage(preferencesDialog){
    if($("#keyboard-shortcuts", preferencesDialog).is(":checked")) {
      keyboard_shortcuts.enable();
      track_event([ "keyboard-shortcuts", "toggle", "enabled" ]);
    }
    else {
      keyboard_shortcuts.disable();
      track_event([ "keyboard-shortcuts", "toggle", "disabled" ]);
    }
    if($("#inbox-pause-enabled", preferencesDialog).is(":checked")) {
      reenable_inbox_pause_feature();
      track_event([ "inbox-pause-enabled", "toggle", "enabled" ]);
    }
    else {
      disable_inbox_pause_feature();
      track_event([ "inbox-pause-enabled", "toggle", "disabled" ]);
    }

    var unread = ($("#unread", preferencesDialog).get(0).checked == 1) ? "True" : "False";
    var starred = ($("#starred", preferencesDialog).get(0).checked == 1) ? "True" : "False";
    var topInbox = ($("#topinbox", preferencesDialog).get(0).checked == 1) ? "True" : "False";
    var labelled = ($("#labelled", preferencesDialog).get(0).checked == 1) ? "True" : "False";

    var onSendSetting = ($("#b4g_send_check", preferencesDialog).get(0).checked == 1) ? "True" : "False";
    var onSendOffset = $("#b4g_send_check_num option:selected", preferencesDialog).val() + "_" + $("#b4g_send_check_unit", preferencesDialog).val();
    var onSendCond = $("#b4g_send_check_cond option:selected", preferencesDialog).val();
    var readReceipts = ($("#b4g_read_receipt_check", preferencesDialog).get(0).checked == 1) ? "True" : "False";

    var crmActive = $("#b4g_crm_enabled").is(":checked") ? "True" : "False";
    var crmSelect = $("#b4g_crm_select").val();
    var crmBcc = $("#b4g_bccAddress").val();
    if (crmActive === "True" && !validate_email(crmBcc)){
        alert("Please enter a valid email address.");
        return false;
    }
    var crmInclude = $(".b4g_crm_include_with:checked").val();

    var url = "https://b4g.baydin.com/changepreferences";
    var data = {
      "unread": unread,
      "starred": starred,
      "topInbox": topInbox,
      "labelled": labelled,
      "onSendSetting": onSendSetting,
      "onSendOffset": onSendOffset,
      "onSendCond": onSendCond,
      "readReceipts": readReceipts,
      "crmActive": crmActive,
      "crmSelect": crmSelect,
      "crmBcc": crmBcc,
      "crmInclude": crmInclude,
    }

    // Respondable
    if ($("#b4g_enable_respondable", preferencesDialog).is(":checked")) {
      data["respondableEnabled"] = "True";
    }
    else {
      data["respondableEnabled"] = "False";
    }
    if ($("#b4g_enable_premium_respondable", preferencesDialog).is(":checked")) {
      data["machineLearningEnabled"] = "True";
    }
    else {
      data["machineLearningEnabled"] = "False";
    }

    $.ajax({
        type: "post",
        url: url,
        xhr: function() {
            var xhr = $.ajaxSettings.xhr();
            xhr.withCredentials = true;
            return xhr;
        },
        data: data,
        success: function(data){ 
            sync_preferences_with_server(restart_respondable);
            track_event(["Settings Dialog", "settings changed successfully"]);
        }, 
        error: function(data){
            track_event([ "dev-CORS", "failure", "XHR-failure" ]);
        },
    });
    return true;
}

function sync_preferences_with_server(callback) {
    if (!callback) {
        callback = $.noop;
    }
    localStorage.removeItem("b4g_respondable-" + get_gmail_user());
    call_function_after_logged_in(callback);
}




/**
 * 11a. Keyboard Shortcuts
 */

 var keyboard_shortcuts = (function() {
  var isEnabled;
  var isMac = window.navigator.platform.indexOf("Mac") > -1;
  var keyS = "S".charCodeAt(0);
  var keyB = "B".charCodeAt(0);

  var saveSettings = function() {
    _storage.write("b4g-keyboard-shortcuts-enabled", JSON.stringify(isEnabled), function(err) {
      if(err) { console.log("Error saving keyboard-shortcuts-enabled", err); }
    });
  };

  var disable = function() {
    isEnabled = false;
    $(document)
      .unbind("keydown keyup keypress", detectOpenBoomerang)
      .unbind("keydown keyup keypress", detectOpenSendLater)
    ;
    saveSettings();
  };
  var enable = function() {
    isEnabled = true;
    $(document)
      .bind("keydown keyup keypress", detectOpenBoomerang)
      .bind("keydown keyup keypress", detectOpenSendLater)
    ;
    saveSettings();
  };

  var is_enabled = function() {
    return isEnabled;
  };

  var detectOpenBoomerang = function(e) {
    if(!isEnabled) { return; }
    if(e.which !== keyB) { return; }

    if($("#b4g_menu:visible").length > 0) { return; }

    var $target = $(e.target);
    if($target.closest(".editable,input:text,input[type=url],input[type=email],input[type=search],textarea,[contenteditable]").length > 0) {
      return;
    }

    var $buttons = $(".boomerang-button, .bulkboomerang").filter(":visible");
    if($buttons.length <= 0) { return; }

    $buttons.first().click();
    e.preventDefault();
  };
  var detectOpenSendLater = function(e, info) {
    if(!isEnabled) { return; }
    if(e.which !== keyS) { return; }

    if(!( // Is the ctrl/cmd key pressed? If no, exit function.
      isMac && e.metaKey && !e.ctrlKey ||
      !isMac && (e.metaKey || e.ctrlKey)
    )) { return; }

    if($("#b4g_menu:visible").length > 0) { return; }

    if($(".send-later-button:visible").length < 0) { return; }

    var container = get_compose_container(e.target, null);
    if(container === null) { return; }

    $(".send-later-button", container).click();
    e.preventDefault();
  };

  var enable_menu_arrow_keys = function() {
    $("#b4g_menu").keydown(function(e) {
      if(
        e.which !== $.ui.keyCode.UP &&
        e.which !== $.ui.keyCode.TAB &&
        e.which !== $.ui.keyCode.DOWN &&
        e.which !== $.ui.keyCode.ESCAPE &&
        e.which !== $.ui.keyCode.SPACE &&
        e.which !== $.ui.keyCode.LEFT &&
        e.which !== $.ui.keyCode.RIGHT
      ) { return; }

      var $options = $(".b4g-menu-option:visible", this);
      var $curSelection = $(".b4g-state-selected", this);
      var currID = $curSelection.attr('id');

      var pressedDown = (
        e.which === $.ui.keyCode.DOWN ||
        (e.which === $.ui.keyCode.TAB && !e.shiftKey) ||
        e.which === $.ui.keyCode.LEFT
      );
      var nextIndex;
      if($curSelection.length === 0) { // No item is currently selected
        nextIndex = (pressedDown ? 0 : -1);
      } else {
        var delta = (pressedDown ? 1 : -1);
        nextIndex = ($options.index($curSelection) + delta) % ($options.length);
      }

      if(which_gmail() === NEW_GMAIL) {
        var noteComposeIsShowing = $(".b4g-notes:hidden").length === 0 && $("#b4g_menu").find("#gm-boomerang-note-checkbox").length > 0;
        var togglingCheckbox = (e.which === $.ui.keyCode.SPACE) &&
                               (currID === "gm-boomerang-reply-checkbox" || currID === "gm-boomerang-note-checkbox");
        var isNoteCheckbox = (currID === "gm-boomerang-note-checkbox");

        if(noteComposeIsShowing) {
          var tabForward = e.which === $.ui.keyCode.TAB && !e.shiftKey;
          var tabBackward = e.which === $.ui.keyCode.TAB && e.shiftKey;
          var inFocus = $(".b4g-notes").find(":focus");
          var focusOptions = $(".b4g-notes").find("[tabindex='1']");

          // find which element is currently selected
          var currSelection, nextSelection;
          for(var idx=0 ; idx < focusOptions.length ; idx++) {
            if(focusOptions.get(idx) === inFocus.get(0)) {
              currSelection = idx;
              break;
            }
          }

          // refocus on the textarea if there is currently no focus
          currSelection = !currSelection ? 0 : currSelection;

          if(tabForward) {
            nextSelection = currSelection === focusOptions.length-1 ? 0 : currSelection+1;
            focusOptions.get(nextSelection).focus();
            e.preventDefault();
            e.stopPropagation();
          } else if(tabBackward) {
            nextSelection = currSelection === 0 ? focusOptions.length-1 : currSelection-1;
            focusOptions.get(nextSelection).focus();
            e.preventDefault();
            e.stopPropagation();
          } // else the user hasn't pressed tab, then they are writing their
            // note and we shouldn't preventDefault or stopPropagation
          return;

          } else if(togglingCheckbox) {
            var $checkbox = $curSelection.children().first();
            var nextCheckboxValueIsTrue = !($checkbox.attr("aria-checked") === "true");
            var isReplyCheckbox = $curSelection.attr("id") === "gm-boomerang-reply-checkbox";

            $checkbox.toggleClass("gm-checkbox-checked");
            if(isReplyCheckbox) {
              track_event([ "thread menu", "conditional boomerang", (nextCheckboxValueIsTrue ? "checked" : "un-checked") ]);
              write_to_html5_storage("b4g_standard_boomerang_sticky_conditional-" + get_gmail_user(), nextCheckboxValueIsTrue);
            }

            if(nextCheckboxValueIsTrue) {
              if(isNoteCheckbox) {
                $("#notes_toggle").trigger("click");
              } else {
                $checkbox.addClass("gm-checkbox-checked").attr("aria-checked", "true");
                $curSelection.addClass("gm-checkbox-background-checked").removeClass("gm-checkbox-background-unchecked");
              }
            } else {
              $checkbox.attr("aria-checked", "false");
              $curSelection.addClass("gm-checkbox-background-unchecked").removeClass("gm-checkbox-background-checked");
              $("#note_entry", frameDoc).val("");
              if(isNoteCheckbox) {
                $("#gm-boomerang-edit-note").hide();
              }
            }
            e.preventDefault();
            e.stopPropagation();
            return;
          }
      }

      // $curSelection doesn't always accurately determine
      // if the "At a specific time" input is focused, so this
      // extra condition will always check if its focused
      var inputIsSelected = $curSelection.find("#datepicker").length === 1 || $("#datepicker").is(":focus");

      // if the user is on the "At a specific time" input,
      // allow the LEFT and RIGHT keys to function normally
      var ignoreLeftAndRight = inputIsSelected && (e.which === $.ui.keyCode.LEFT || e.which === $.ui.keyCode.RIGHT);

      // earlier we intercepted the space key because we had to add
      // behavior to check and uncheck it. we need to return here
      // so we don't preventDefault or stopPropagation so the old UI
      // can continue to use the space key to toggle its real checkbox
      var ignoreSpace = e.which === $.ui.keyCode.SPACE;

      // if the user is composing a note, allow default behavior for keystroke
      var noteComposeIsSelected = $("#note_entry").is(":focus");

      if(ignoreSpace || ignoreLeftAndRight || noteComposeIsSelected) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();

      // do nothing with LEFT and RIGHT on the old UI
      if((e.which === $.ui.keyCode.LEFT || e.which === $.ui.keyCode.RIGHT) && which_gmail() !== NEW_GMAIL) {
          return;
      }

      if(e.which === $.ui.keyCode.ESCAPE) { close_b4g_menu(); return; }

      $options
        .removeClass("b4g-state-selected")
        .eq(nextIndex)
        .addClass("b4g-state-selected")
        .find("a, input[type='text'], input[type='checkbox'], div[role='checkbox']").focus()
      ;
    });

    // if the user uses keyboard shortcuts to navigate to a menu item but then
    // uses the mouse to click on the "At a specific time:" input, remove the
    // selected style from the menu item that was previously selected
    $("#datepicker").click(function(e) {
        $(".b4g-state-selected").removeClass("b4g-state-selected");
        $("#datepicker").parents().eq(2).addClass("b4g-state-selected");
    });
  };

  var init = function() {
    _storage.read("b4g-keyboard-shortcuts-enabled", function(err, isEnabled_) {
      isEnabled = false;
      try { isEnabled = JSON.parse(isEnabled_); }
      catch(err) { /* swallow error */ }

      if(!isEnabled) { return; }

      $(document)
        .bind("keydown keyup keypress", detectOpenBoomerang)
        .bind("keydown keyup keypress", detectOpenSendLater)
      ;
    });
  };

  // Compose areas in firefox are contentEditable iframes instead of contentEditable divs,
  // so we have to add a special keypress listener.
  var add_iframe_listener = function(container) {
    var $textBody = get_compose_text_body(container);

    if($textBody.data("has-shortcut-listener")) { return; }
    $textBody.data("has-shortcut-listener", true);

    $textBody.keydown(function recur(e) {
      if(!isEnabled) { return; }

      e.target = container;

      detectOpenSendLater(e);

      // Gmail is doing crazy that I don't quite understand.  Fortunately, unbinding and
      // re-adding the keydown event listener seems to workaround the craziness.
      $textBody.unbind("keydown", recur).keydown(recur);
    });
  };

  var add_compose_listen = function(composeContainer) {
    if($(".editable iframe", composeContainer).length > 0) {
      add_iframe_listener(composeContainer);
    }

    $(composeContainer).bind("keydown keyup keypress", function(e) {
      if(!isEnabled) { return; }

      detectOpenSendLater(e);
    });
  };

  return {
    init: init,
    disable: disable,
    enable: enable,
    is_enabled: is_enabled,
    add_compose_listen: add_compose_listen,
    enable_menu_arrow_keys: enable_menu_arrow_keys
  };
})(); // keyboard short cuts



 /**
 * 12. Inline-Manage
 */
var inline_manage = (function() {
    var TIME_TO_RETRY_MANAGE_IDS_CALL = 10 * 60 * 1000; // 10 minutes. This is how long to wait to retry if a refresh call fails.
    var TIME_TO_REFRESH_INDIVIDUAL_THREAD_DATA = 15 * 60 * 1000; // 15 minutes

    var _prettyConditionals = {
      "R": "if there's no reply",
      "O": "if not opened",
      "C": "if not clicked",
      "N": ""
    };
    var _freqs = [ "year", "month", "week", "day" ];
    if (which_gmail() === NEW_GMAIL) {
      var _templates = {
        "container":
          "<div class='b4g-inline-manage b4g-inline-manage-new-ui b4gid-{{b4g-id}} date-{{last-updated}}'>" +
            "<div class='b4g-inline-placeholder-return'/>" +
            "<div class='b4g-inline-placeholder-send'/>" +
            "<div class='b4g-inline-placeholder-recurring'/>" +
            "<div class='b4g-inline-placeholder-tracking'/>" +
            "<div class='b4g-inline-placeholder-notes'/>" +
          "</div>"
        ,
        "return":
          "<div class='b4g-inline-return b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to return: " +
              "<span class='b4g-inline-date'>{{data.pretty-return-time}}</span> " +
              "{{data.pretty-conidition}}" +
            "</div>" +
            "<div class='b4g-inline-controls b4g-inline-controls-new-ui'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-returnnow'>" +
                "<span class='by-button-text'>Return Now</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-noreturn'>" +
                "<span class='by-button-text'>Don't Return</span>" +
              "</button>" +
            "</div>" +
          "</div>"
        ,
        "send":
          "<div class='b4g-inline-send b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to send: " +
              "<span class='b4g-inline-date'>{{data.pretty-send-time}}</span> " +
              "{{data.pretty-conidition}}" +
            "</div>" +
            "<div class='b4g-inline-controls b4g-inline-controls-new-ui'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-sendnow b4g-inline-secondary-btn-new-ui'>" +
                "<span class='by-button-text'>Send Now</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-nosend b4g-inline-secondary-btn-new-ui'>" +
                "<span class='by-button-text'>Don't Send</span>" +
              "</button>" +
            "</div>" +
          "</div>"
        ,
        "recurring":
          "<div class='b4g-inline-recurring b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to send: " +
              "<span class='b4g-inline-date'>{{data.pretty-recurring-time}}</span>" +
            "</div>" +
            "<div class='b4g-inline-controls b4g-inline-controls-new-ui'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-skip'>" +
                "<span class='by-button-text'>Skip Next</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-cancel'>" +
                "<span class='by-button-text'>Stop Sending</span>" +
              "</button>" +
            "</div>" +
            "<div class='b4g-inline-recurring-schedule'>" +
              "<span class='b4g-inline-schedule-part'>Start: <span class='b4g-inline-date'>{{data.pretty-start-time}}</span></span>" +
              "<span class='b4g-inline-schedule-part b4g-inline-reschedule-next'>Next Scheduled: <span class='b4g-inline-date'>{{data.pretty-next-time}}</span></span>" +
              "<span class='b4g-inline-schedule-part'>End: <span class='b4g-inline-date'>{{data.pretty-end-time}}</span></span>" +
            "</div>" +
          "</div>"
        ,
        "tracking":
          "<div class='b4g-inline-tracking b4g-inline-part'>" +
            "<div class='b4g-inline-tracking-opens'>" +
              "<table>" +
                "<colgroup>" +
                  "<col/>" +
                  "<col class='b4g-tracking-first'/>" +
                  "<col class='b4g-tracking-last'/>" +
                "</colgroup>" +
                "<tr>" +
                  "<th class='b4g-inline-tracking-info-new-ui'>" +
                    "Opened &ndash; {{data.open-data.opens}} times" +
                  "</th>" +
                  "<td>" +
                    "<span class='b4g-tracking-time-title'>FIRST</span> " +
                    "{{data.open-data.pretty-first-time}}" +
                  "</td>" +
                  "<td>" +
                    "<span class='b4g-tracking-time-title'>LAST</span> " +
                    "{{data.open-data.pretty-last-time}}" +
                  "</td>" +
                "</tr>" +
              "</table>" +
            "</div>" +
            "<div class='b4g-inline-tracking-clicks'>" +
              "<table class='b4g-inline-linktracking'>" +
                "<colgroup>" +
                  "<col class='b4g-tracking-click-total'/>" +
                  "<col/>" +
                  "<col class='b4g-tracking-first'/>" +
                  "<col class='b4g-tracking-last'/>" +
                "</colgroup>" +
                "<thead><tr><th class='b4g-inline-tracking-info-new-ui' colspan='4'>" +
                  "Clicked &ndash; {{data.total-link-clicks}} times" +
                "</th></tr></thead>" +
                "{{data.link-click-content}}" +
              "</table>" +
            "</div>" +
            "<div class='b4g-tracking-hint-text'>"+
              "Updates every 10 minutes. Not all opens will be tracked. " +
              "<a href='https://help.boomeranggmail.com/category/222-read-receipts'>See here for more information.</a>"+
            "</div>"+
          "</div>"
        ,
        "link-tracking":
          "<tr>" +
            "<td class='b4g-tracking-click-total'>{{clicks}}</td>" +
            "<td class='b4g-trcking-click-url'><a href='{{url}}' target='_blank'>{{url}}</a></td>" +
            "<td><span class='b4g-tracking-time-title'>FIRST</span> {{pretty-first-time}}</td>" +
            "<td><span class='b4g-tracking-time-title'>LAST</span> {{pretty-last-time}}</td>" +
          "</tr>"
        ,
        "notes":
          "<div class='b4g-inline-notes'>" +
            "<span class='b4g-inline-notes-label'>Note added:</span> " +
            "<span class='b4g-inline-notes-text'>{{notes}}</span> <button>Edit</button>" +
          "</div>"
        ,
        "reschedule":
          '<div class="b4g-reschedule-popup">' +
            '<h3>Reschedule this message</h3>' +
            '<form autocomplete="off">' +
              '<select class="b4g-return-condition">' +
                '<option value="N">Return regardless</option>' +
                '<option value="R">Only if there\'s no reply</option>' +
              '</select>' +
              '<label class="b4g-send-ifnoreply">' +
                '<input type="checkbox" value="if-no-reply"/> Only if nobody replies' +
              '</label>' +
              '<div class="b4g-ifnoreply-warning"></div>' +
              '<label>' +
                '<span class="b4g-reschedule-example">Example: "Monday 9am", "Dec 23"</span>' +
                '<input type="text" class="b4g-reschedule-date"/>' +
                '<span class="b4g-reschedule-preview"></span>' +
              '</label>' +
              '<div class="b4g-reschedule-buttons">' +
                '<button type="submit" class="by-button by-button-secondary">' +
                  '<span class="by-button-text">Reschedule</span>' +
                '</button>' +
                '<button class="b4g-reschedule-cancel by-button">' +
                  '<span class="by-button-text">Cancel</span>' +
                '</button>' +
              '</div>' +
            '</form>' +
          '</div>'
        ,
        "recurring-cancel-confirmation":
          '<div class="b4g-recurring-confirmation">' +
            '<h3>Are you sure you want to stop sending all subsequent copies of this ' +
            'recurring message?</h3>' +
            '<p>The message will move back to your Drafts folder.</p>' +
            '<div class="b4g-recur-confirm-buttons">' +
              '<button class="by-button by-button-secondary">' +
                '<span class="by-button-text">Yes, stop sending</span>' +
              '</button>' +
              '<button class="by-button b4g-cancel">' +
                '<span class="by-button-text">Cancel</span>' +
              '</button>' +
            '</div>' +
          '</div>'
        ,
        "recurring-skip-next-confirmation":
          '<div class="b4g-recurring-confirmation">' +
            '<h3>Skip next message?</h3>' +
            '<p>The message scheduled to send on <strong>{{pretty-skip-date}} will be ' +
            'skipped</strong>.  The rest of the messages will still go out as previously ' +
            'scheduled.</p>' +
            '<div class="b4g-recur-confirm-buttons">' +
              '<button class="by-button by-button-secondary">' +
                '<span class="by-button-text">Yes, skip message</span>' +
              '</button>' +
              '<button class="by-button b4g-cancel">' +
                '<span class="by-button-text">Cancel</span>' +
              '</button>' +
            '</div>' +
          '</div>'
        ,
        "edit-email-button":
          '<div class="b4g-edit-button-container b4g-inline-controls-new-ui">' +
            '<button class="b4g-inline-edit-message by-button by-button-primary b4g-inline-edit-message-new-ui">' +
              '<span class="by-button-text">Edit Message</span>' +
            '</button>' +
          '</div>'
      };
    } else {
      // Old UI but new DOM
      var _templates = {
        "container":
          "<div class='b4g-inline-manage b4gid-{{b4g-id}} date-{{last-updated}}'>" +
            "<div class='b4g-inline-placeholder-return'/>" +
            "<div class='b4g-inline-placeholder-send'/>" +
            "<div class='b4g-inline-placeholder-recurring'/>" +
            "<div class='b4g-inline-placeholder-tracking'/>" +
            "<div class='b4g-inline-placeholder-notes'/>" +
          "</div>"
        ,
        "return":
          "<div class='b4g-inline-return b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to return: " +
              "<span class='b4g-inline-date'>{{data.pretty-return-time}}</span> " +
              "{{data.pretty-conidition}}" +
            "</div>" +
            "<div class='b4g-inline-controls'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-returnnow'>" +
                "<span class='by-button-text'>Return Now</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-noreturn'>" +
                "<span class='by-button-text'>Don't Return</span>" +
              "</button>" +
            "</div>" +
          "</div>"
        ,
        "send":
          "<div class='b4g-inline-send b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to send: " +
              "<span class='b4g-inline-date'>{{data.pretty-send-time}}</span> " +
              "{{data.pretty-conidition}}" +
            "</div>" +
            "<div class='b4g-inline-controls'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-sendnow'>" +
                "<span class='by-button-text'>Send Now</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-nosend'>" +
                "<span class='by-button-text'>Don't Send</span>" +
              "</button>" +
            "</div>" +
          "</div>"
        ,
        "recurring":
          "<div class='b4g-inline-recurring b4g-inline-part'>" +
            "<div class='b4g-inline-content'>" +
              "Scheduled to send: " +
              "<span class='b4g-inline-date'>{{data.pretty-recurring-time}}</span>" +
            "</div>" +
            "<div class='b4g-inline-controls'>" +
              "<button class='by-button b4g-inline-reschedule by-button-secondary'>" +
                "<span class='by-button-text'>Reschedule</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-skip'>" +
                "<span class='by-button-text'>Skip Next</span>" +
              "</button>" +
              "<button class='by-button b4g-inline-cancel'>" +
                "<span class='by-button-text'>Stop Sending</span>" +
              "</button>" +
            "</div>" +
            "<div class='b4g-inline-recurring-schedule'>" +
              "<span class='b4g-inline-schedule-part'>Start: <span class='b4g-inline-date'>{{data.pretty-start-time}}</span></span>" +
              "<span class='b4g-inline-schedule-part b4g-inline-reschedule-next'>Next Scheduled: <span class='b4g-inline-date'>{{data.pretty-next-time}}</span></span>" +
              "<span class='b4g-inline-schedule-part'>End: <span class='b4g-inline-date'>{{data.pretty-end-time}}</span></span>" +
            "</div>" +
          "</div>"
        ,
        "tracking":
          "<div class='b4g-inline-tracking b4g-inline-part'>" +
            "<div class='b4g-inline-tracking-opens'>" +
              "<table>" +
                "<colgroup>" +
                  "<col/>" +
                  "<col class='b4g-tracking-first'/>" +
                  "<col class='b4g-tracking-last'/>" +
                "</colgroup>" +
                "<tr>" +
                  "<th>" +
                    "OPENED &ndash; {{data.open-data.opens}} TIMES" +
                  "</th>" +
                  "<td>" +
                    "<span class='b4g-tracking-time-title'>FIRST</span> " +
                    "{{data.open-data.pretty-first-time}}" +
                  "</td>" +
                  "<td>" +
                    "<span class='b4g-tracking-time-title'>LAST</span> " +
                    "{{data.open-data.pretty-last-time}}" +
                  "</td>" +
                "</tr>" +
              "</table>" +
            "</div>" +
            "<div class='b4g-inline-tracking-clicks'>" +
              "<table class='b4g-inline-linktracking'>" +
                "<colgroup>" +
                  "<col class='b4g-tracking-click-total'/>" +
                  "<col/>" +
                  "<col class='b4g-tracking-first'/>" +
                  "<col class='b4g-tracking-last'/>" +
                "</colgroup>" +
                "<thead><tr><th colspan='4'>" +
                  "CLICKED &ndash; {{data.total-link-clicks}} TIMES" +
                "</th></tr></thead>" +
                "{{data.link-click-content}}" +
              "</table>" +
            "</div>" +
            "<div class='b4g-tracking-hint-text'>"+
              "Updates every 10 minutes. Not all opens will be tracked. " +
              "<a href='https://help.boomeranggmail.com/category/222-read-receipts'>See here for more information.</a>"+
            "</div>"+
          "</div>"
        ,
        "link-tracking":
          "<tr>" +
            "<td class='b4g-tracking-click-total'>{{clicks}}</td>" +
            "<td class='b4g-trcking-click-url'><a href='{{url}}' target='_blank'>{{url}}</a></td>" +
            "<td><span class='b4g-tracking-time-title'>FIRST</span> {{pretty-first-time}}</td>" +
            "<td><span class='b4g-tracking-time-title'>LAST</span> {{pretty-last-time}}</td>" +
          "</tr>"
        ,
        "notes":
          "<div class='b4g-inline-notes'>" +
            "<span class='b4g-inline-notes-label'>Note added:</span> " +
            "<span class='b4g-inline-notes-text'>{{notes}}</span> <button>Edit</button>" +
          "</div>"
        ,
        "reschedule":
          '<div class="b4g-reschedule-popup">' +
            '<h3>Reschedule this message</h3>' +
            '<form autocomplete="off">' +
              '<select class="b4g-return-condition">' +
                '<option value="N">Return regardless</option>' +
                '<option value="R">Only if there\'s no reply</option>' +
              '</select>' +
              '<label class="b4g-send-ifnoreply">' +
                '<input type="checkbox" value="if-no-reply"/> Only if nobody replies' +
              '</label>' +
              '<div class="b4g-ifnoreply-warning"></div>' +
              '<label>' +
                '<span class="b4g-reschedule-example">Example: "Monday 9am", "Dec 23"</span>' +
                '<input type="text" class="b4g-reschedule-date"/>' +
                '<span class="b4g-reschedule-preview"></span>' +
              '</label>' +
              '<div class="b4g-reschedule-buttons">' +
                '<button type="submit" class="by-button by-button-secondary">' +
                  '<span class="by-button-text">Reschedule</span>' +
                '</button>' +
                '<button class="b4g-reschedule-cancel by-button">' +
                  '<span class="by-button-text">Cancel</span>' +
                '</button>' +
              '</div>' +
            '</form>' +
          '</div>'
        ,
        "recurring-cancel-confirmation":
          '<div class="b4g-recurring-confirmation">' +
            '<h3>Are you sure you want to stop sending all subsequent copies of this ' +
            'recurring message?</h3>' +
            '<p>The message will move back to your Drafts folder.</p>' +
            '<div class="b4g-recur-confirm-buttons">' +
              '<button class="by-button by-button-secondary">' +
                '<span class="by-button-text">Yes, stop sending</span>' +
              '</button>' +
              '<button class="by-button b4g-cancel">' +
                '<span class="by-button-text">Cancel</span>' +
              '</button>' +
            '</div>' +
          '</div>'
        ,
        "recurring-skip-next-confirmation":
          '<div class="b4g-recurring-confirmation">' +
            '<h3>Skip next message?</h3>' +
            '<p>The message scheduled to send on <strong>{{pretty-skip-date}} will be ' +
            'skipped</strong>.  The rest of the messages will still go out as previously ' +
            'scheduled.</p>' +
            '<div class="b4g-recur-confirm-buttons">' +
              '<button class="by-button by-button-secondary">' +
                '<span class="by-button-text">Yes, skip message</span>' +
              '</button>' +
              '<button class="by-button b4g-cancel">' +
                '<span class="by-button-text">Cancel</span>' +
              '</button>' +
            '</div>' +
          '</div>'
        ,
        "edit-email-button":
          '<div class="b4g-edit-button-container">' +
            '<button class="b4g-inline-edit-message by-button by-button-primary">' +
              '<span class="by-button-text">Edit Message</span>' +
            '</button>' +
          '</div>'
      };
    }


    var _uid = (Math.random() + "").substr(2);
    var _inlineManageData;
    /* Sample data:
      {
        "enabled": true,
        "last-updated": 1477075678910,
        "-ids": {
          "1579c859a7e038ec": {
            "last-updated": 0
          },
          "157e4abc96533740": {
            "returns": [
              {
                "return-time": 1477355830000,
                "sender": "example@gmail.com",
                "recipients": [
                  "example@gmail.com"
                ],
                "hex-gmail-id": "157e4abc96533740",
                "timestamp": 1477010261000,
                "notes": null,
                "id": 125,
                "condition": "O",
                "subject": "awerfwaefwaef",
                "pretty-return-time": "Mon, Oct 24, 2016 5:37 PM",
                "pretty-conidition": "if not opened"
              }
            ],
            "tracks": [
              {
                "hex-gmail-id": "157e4abc96533740",
                "timestamp": 1477010261000,
                "open-data": {
                  "last-open": null,
                  "first-open": null,
                  "opens": 0,
                  "pretty-first-time": "Dec 31 around 4:00 PM",
                  "pretty-last-time": "Dec 31 around 4:00 PM"
                },
                "links-data": [
                  
                ],
                "id": 1,
                "subject": "awerfwaefwaef",
                "total-link-clicks": 0,
                "link-click-content": ""
              }
            ],
            "last-updated": 0
          },
          "157e891fb5c27eac": {
            "sends": [
              {
                "sender": "example@gmail.com",
                "recipients": [
                  "example@gmail.com"
                ],
                "is-conditional": false,
                "hex-gmail-id": "157e891fb5c27eac",
                "send-time": 1477421256000,
                "save-date": 1477075656000,
                "id": 6,
                "subject": "test me",
                "pretty-send-time": "Tue, Oct 25, 2016 11:47 AM",
                "pretty-conidition": ""
              }
            ],
            "last-updated": 1477075680726
          },
          "157e4a8fc5346121": {
            "recurrings": [
              {
                "recipients": [
                  "example@gmail.com"
                ],
                "hex-gmail-id": "157e4a8fc5346121",
                "frequency": 2,
                "setPosition": null,
                "id": 3,
                "subject": "waefawefaewf",
                "end": 1482453840000,
                "sender": "example@gmail.com",
                "next-send": 1477010640000,
                "interval": 1,
                "weekdays": [
                  4
                ],
                "start": 1477010640000,
                "pretty-recurring-time": "Every week Thu",
                "pretty-start-time": "Oct 20, 2016",
                "pretty-next-time": "Oct 20, 2016",
                "pretty-end-time": "Dec 22, 2016"
              }
            ],
            "last-updated": 1477075678840
          }
        }
      }
    */

    var _inFlight = {}; // Stores the state of what Inline-manage calls are currently in progress
    /*
      Object {156b621c228f9857: true} // This means that data for messageId, 156b621c228f9857, is being fetched
      Object {"managed-message-ids": true} // This means that message ids are being collected
    */

    var _nextUpdate = 0;  // next update time for refresh_managed_message_ids_in()

    function expire_cache() {
      var now = new Date();

      // "10/21/2016"
      var date = (now.getMonth()+1)+"/"+now.getDate()+"/"+now.getFullYear(); 

      // "5:07 PM"
      var time = (now.getHours() > 12) ? (now.getHours()-12)+":"+((now.getMinutes() < 10) ? "0" : "")+now.getMinutes()+" PM" : now.getHours()+":"+now.getMinutes()+" AM";
      
      // This is only used for debugging
      write_to_html5_storage("b4g-inline-manage-last-update-"+get_gmail_user(), date + " " + time);

          if (!_inlineManageData){return;}

      _inlineManageData["last-updated"] = 0;
      var messageIds = _inlineManageData["message-ids"];
      for(var messageId in messageIds) { 
        if (messageIds.hasOwnProperty(messageId)) {
          _inlineManageData["message-ids"][messageId]["last-updated"] = 0;
        } 
      }
      enable_inline_manage();
      save_manage_data_to_local_storage(_inlineManageData);
    }

    function enable_inline_manage() {
      if(!get_gmail_user()) { return; }
      if(_inlineManageData === undefined) { return; }
      if(_inlineManageData["enabled"]) { return; }

      _inlineManageData["enabled"] = true;
      update_manage_data_if_necessary(_inlineManageData);
      save_manage_data_to_local_storage(_inlineManageData);
    }

    function save_manage_data_to_local_storage(data) {
      var email = get_gmail_user();

      _storage.write("b4g-inline-manage-data-2:" + email, JSON.stringify(data), function(err) {
        if(err) { console.warn("Error writting b4g inline-mange data: ", err); }
      });
    }

    function refresh_managed_message_ids_in(ms) {
      var now = Date.now();
      // if there's no pending _nextUpdate or the inputted time is earlier than the _nextUpdate
      if (now >= _nextUpdate || now + ms <= _nextUpdate ) {
        setTimeout(function() {
          update_manage_data_if_necessary(_inlineManageData);
        }, ms);
        _nextUpdate = now + ms;
      }
    }

    function init_inline_manage() {
      var $mainContent = $(".aeF");

      if($mainContent.length <= 0) { setTimeout(init_inline_manage, 1000); return; }

      update_manage_data_if_necessary(_inlineManageData);

      new MutationObserver(activate_inline_manage_if_necessary).observe($mainContent[0], { childList: true, subtree: true });

      init_button_click_delegates($mainContent);
    }
    function activate_inline_manage_if_necessary () {
      var messageIds = get_new_ui_message_ids();
      if($(".aHU").length >= 1 && messageIds.length > 0) { // are we reading an email, and do we have message-ids?
        if(
          _inlineManageData && !_inlineManageData["enabled"] &&
          window.location.hash.indexOf("/Boomerang") > -1
        ) { // do we have inline manage data, and does the label in the url begin with Boomerang?
          enable_inline_manage();
        }
        update_manage_data_if_necessary(_inlineManageData);
      }
    }

    function load_manage_data_from_local_storage(callback) {
      var email = get_gmail_user();

      _storage.read("b4g-inline-manage-data-2:" + email, function(err, data) {
        if(err) { console.log("Error loading inline manage data", err); }

        var savedData;
        try { savedData = JSON.parse(data || "{}"); }
        catch(err) { savedData = {}; } // If can't parse JSON, just use in memory copy

        _inlineManageData = _inlineManageData || savedData || {};
        _inlineManageData["enabled"] = savedData["enabled"] || false;
        _inlineManageData["last-updated"] = savedData["last-updated"] || 0;
        _inlineManageData["message-ids"] = savedData["message-ids"] || {};

        callback(_inlineManageData);
      });
    }

    function save_message_ids(messageIds) {
      if(_inlineManageData === undefined) { // Might be loaded if saved through trouble shooting
        load_manage_data_from_local_storage(function() { save_message_ids(messageIds); });
        return;
      }

      var newMessageIds = {};
      var oldMessageIds = _inlineManageData["message-ids"];

      messageIds.forEach(function(id) { // Ensures only managed ids are saved
        newMessageIds[id] = oldMessageIds[id] || {};
      });

      _inlineManageData["message-ids"] = newMessageIds;
      save_manage_data_to_local_storage(_inlineManageData);

      return newMessageIds;
    }

    function update_manage_data_if_necessary(managedData) {
      if(managedData === undefined) { // Makes it easier to call this method asynchronously
        load_manage_data_from_local_storage(function(data) {
          update_manage_data_if_necessary(_inlineManageData);
        });
        return;
      }

      if(!_inlineManageData["enabled"]) { return; }

      update_ui_with_inline_manage(_inlineManageData["message-ids"]);


      if(_inFlight["managed-message-ids"]) { return; }

      var fiveHours = 5 * 60 * 60 * 1000;
      var timeSinceLastUpdate = Date.now() - _inlineManageData["last-updated"];
      if(timeSinceLastUpdate < fiveHours) {
        refresh_managed_message_ids_in(fiveHours - timeSinceLastUpdate);
      }
      else {
        force_manage_data_update(function(err, data) {
          if(err) { refresh_managed_message_ids_in(TIME_TO_RETRY_MANAGE_IDS_CALL); return; }
          if(!data) { refresh_managed_message_ids_in(TIME_TO_RETRY_MANAGE_IDS_CALL); return; }
          if(!data["success"]) { refresh_managed_message_ids_in(TIME_TO_RETRY_MANAGE_IDS_CALL); return; }

          var newMessageIds = save_message_ids(data["message-ids"]);

          refresh_managed_message_ids_in(fiveHours);

          update_ui_with_inline_manage(newMessageIds);
        }); 
      }
    }

    function force_manage_data_update(callback) {
      $.ajax({
        type: "get",
        url: "https://b4g.baydin.com/gmailmigration/inline-manage/managed-message-ids",
        data: { email: get_gmail_user(), uid: _uid },
        xhr: xhr_with_credentials,
        success: function(data) { callback(false, data); },
        error: function(xhr, status, err) { callback({ status: status, error: err }); },
        complete: function() {
          _inFlight["managed-message-ids"] = undefined;
          delete _inFlight["managed-message-ids"]; // Delete to help prevent memory leaks

          if(_inlineManageData) {
            _inlineManageData["last-updated"] = Date.now();
            save_manage_data_to_local_storage(_inlineManageData);
          }
        },
        dataType: "json"
      });
      _inFlight["managed-message-ids"] = true;
    }

    function color_boomerang_labels() {
      $(".ahR:contains('Boomerang')").not(":contains('Boomerang-Returned')") // Selects labels
        .find(".hO").hide().end() // Selects X button on label
        .find(".hN:contains('Boomerang')") // Selects label text body
          .css({ "background-color": "#FBF1B5", "color": "#666", "padding-right": "4px", "border-radius": "4px" })
          .filter(":contains('Boomerang-Outbox')")
            .css({ "background-color": "#FFD76E", "color": "#666" })
      ;
    }
    function update_ui_with_inline_manage(messageIdsData) {
      var messageIds = get_new_ui_message_ids();
      for (var i = 0; i < messageIds.length; i++) {
        var messageId = messageIds[i];
        var data = messageIdsData[messageId];

        if(data) {
          color_boomerang_labels();

          var lastUpdated = data["last-updated"] || 0;
          var doRefresh = (Date.now() - lastUpdated > TIME_TO_REFRESH_INDIVIDUAL_THREAD_DATA);
          if(doRefresh) { update_managed_message(messageId); }

          if(data.returns) { insert_returns_ui(data.returns, lastUpdated); }
          if(data.sends) { insert_sends_ui(data.sends, lastUpdated); }
          if(data.recurrings) { insert_recurrings_ui(data.recurrings, lastUpdated); }
          if(data.tracks) { insert_tracking_ui(data.tracks, lastUpdated); }
         }
      }
    }

    function update_managed_message(messageId) {
      if(_inFlight[messageId]) { return; } // ensures dup ajax requests aren't being made

      $.ajax({
        type: "get",
        url: "https://b4g.baydin.com/gmailmigration/inline-manage/manage-info",
        data: { "message-id": messageId, "email": get_gmail_user() },
        xhr: xhr_with_credentials,
        success: function(data) {
          if(!data["success"]) { /* TODO: handle errors */ return; }

          data["success"] = undefined;
          delete data["success"];

          _inlineManageData["message-ids"][messageId] = data;
          save_manage_data_to_local_storage(_inlineManageData);
          update_ui_with_inline_manage(_inlineManageData["message-ids"]);
        },
        error: function() {
          refresh_managed_message_ids_in(TIME_TO_RETRY_MANAGE_IDS_CALL);
        },
        complete: function() {
          _inFlight[messageId] = undefined;
          delete _inFlight[messageId]; // Delete to help prevent memory leaks

          var data = _inlineManageData["message-ids"][messageId] || {};
          data["last-updated"] = Date.now();
          _inlineManageData["message-ids"][messageId] = data;
          save_manage_data_to_local_storage(_inlineManageData);
        },
        dataType: "json"
      });
      _inFlight[messageId] = true;
    }

    function show_popup($popup, $anchor, offset) {
      offset = offset || {};
      var pos = $anchor.offset();
      $popup
        .addClass("b4g-inline-popup")
        .appendTo("body")
        .css({
          top: pos.top + $anchor.outerHeight() + (offset.top || 0),
          left: pos.left - $popup.outerWidth() + $anchor.outerWidth() + (offset.left || 0)
        })
      ;

      $(document).click(function removePopup(e) {
        if($anchor[0] === e.target) { return; }
        if($popup[0] === e.target) { return; }
        if($.contains($anchor[0], e.target)) { return; }
        if($.contains($popup[0], e.target)) { return; }
        if(!$.contains(document, e.target)) { return; }
        if($(e.target).closest(".b4g-ui-datepicker").length > 0) { return; }

        e.preventDefault();

        $popup.remove();
        $(document).unbind("click", removePopup);
      });
    }
    function show_edit_notes_popup(rtn, $edit, $container) {
      var $notes = $(_notesTemplate);
      $notes
        .addClass("b4g-inline-notes-edit")
        .find("textarea").val(rtn.notes).end()
        .find("#notes_save_button").click(function() {
          var noteString = $("#note_entry", frameDoc).val();
          if (hasEmoji(noteString)) {
            show_dialog(EMOJI_IN_NOTE_ERROR);
            return;
          }
          var oldNotes = rtn.notes;
          rtn.notes = $("textarea", $notes).val();
          $(".b4g-inline-notes-text", $container).text(rtn.notes);
          save_manage_data_to_local_storage(_inlineManageData);

          var onError = function() {
            alert(
              "Sorry, there was an error. We can't save your note. Try again later."
            );
            rtn.notes = oldNotes;
            $(".b4g-inline-notes-text", $container).text(oldNotes);
            save_manage_data_to_local_storage(_inlineManageData);
          };

          call_function_after_logged_in(function() {
            $.ajax({
              type: "post",
              url: "https://b4g.baydin.com/inline-manage/update-notes",
              data: { "return-later-id": rtn.id, "notes": rtn.notes },
              xhr: xhr_with_credentials,
              success: function(data) {
                if(!data["success"]) { onError(); }
              },
              error: onError,
              dataType: "json"
            });
          }, onError);

          $notes.remove();
        }).end()
        .find("#notes_cancel_button").click(function() { $notes.remove(); }).end()
      ;

      show_popup($notes, $edit, { top: 5 });

      return $notes;
    }
    function show_reschedule_popup(data, $anchor, callback) {
      var hasReturnCondition = (data["condition"] != null);
      var hasSendCondition = (data["is-conditional"] != null);
      var date =data["return-time"] || data["send-time"];
      var strDate;
      if (!isNaN(new Date(date).getTime())) {  // If the date millisecond can be resolved to a valid date object
        strDate = new Date(date).toString("MMM d, yyyy h:mm tt")
      } else {  // The exisitng return/send time couldn't be resolved to a valid date object (should not happen)
        strDate = new Date().toString("MMM d, yyyy h:mm tt");
      }

      // .g3 contains the sent date of an email
      var $dateLabels = $(".g3:visible");
      var isPartOfMultiEmailThread = ($dateLabels.length > 0); // note that our own Boomerang-Outbox email doesn't have a date
      // .adn is a class that's on displayed email containers
      var isFirstEmailInThread = ($dateLabels[0] === $anchor.closest(".adn").find(".g3")[0]);
      var showSendCondition = (
        hasSendCondition && (isPartOfMultiEmailThread && !isFirstEmailInThread)
      );

      var $popup = $(_templates.reschedule);
      $popup
        .find(".b4g-reschedule-date")
          .val(strDate)
          .bind("change keyup", function() {
            var date = parse_date($(this).val());
            var readableDate = make_readable_date(date, true);
            $(".b4g-reschedule-preview", $popup)
              .text(readableDate)
              .toggleClass("b4g-state-invalid", (date == null || date < new Date()))
            ;
          })
        .end()
        .find(".b4g-return-condition").toggle(hasReturnCondition).end()
        .find(".b4g-send-ifnoreply, .b4g-ifnoreply-warning").toggle(showSendCondition).end()
        .find(".b4g-send-ifnoreply input").change(function() {
          if(!$(this).is(":checked")) { return; }

          var date = (new Date()).toString("MM/d a\\t h:mmtt");
          $(".b4g-ifnoreply-warning").html(
            "This message will be sent if no replies are received between " +
            "<strong>now and the scheduled time</strong>."
          );
        }).end()
        .find("[type='submit']").click(function() { $(this).closest("form").submit(); }).end()
        .find("form").bind("submit", function(e) {
          e.preventDefault();

          var date = parse_date($(".b4g-reschedule-date", $popup).val());
          var condition;
          if(hasReturnCondition) { condition = $(".b4g-return-condition", $popup).val(); }
          if(hasSendCondition) {
            condition = $(".b4g-send-ifnoreply input", $popup).attr("checked");
          }

          if(!date) { alert("Please enter in a valid date."); return; }

          callback({ "date": date, "condition": condition });
        }).end()
        .find(".b4g-reschedule-cancel").click(function() { $popup.remove(); }).end()
      ;
      bind_datepicker($popup.find(".b4g-reschedule-date"));

      if(hasReturnCondition && "OC".indexOf(data["condition"]) > -1) {
        $(".b4g-return-condition", $popup)
          .append('<option value="O">Only if not opened</option>')
          .append('<option value="C">Only if not clicked</option>')
        ;
      }

      if(hasReturnCondition) { $(".b4g-return-condition", $popup).val(data["condition"]); }
      if(hasSendCondition) {
        $(".b4g-send-ifnoreply input", $popup).attr("checked", data["is-conditional"]);
      }

      show_popup($popup, $anchor, { left: 1 });

      return $popup;
    }
    function refresh_message_ui(messageId) {
      var messageIds = _inlineManageData["message-ids"];
      messageIds[messageId]["last-updated"] = Date.now();
      update_ui_with_inline_manage(messageIds);
    }
    function show_inline_manage_error(response, defMsg) {
      var msg = response.responseText || response.error || response;
      if($.type(msg) !== "string") {
        msg = defMsg || "Sorry, there was an error. We can't save your update. Try again later.";
      }

      alert(msg);
    }
    function reschedule_boomerang(url, type, elem) {
      var data = $(elem).closest(".b4g-inline-part").data("manage-data");
      var messageId = data["hex-gmail-id"];

      var timeProp, condProp;
      if(type === "send") { timeProp = "send-time"; condProp = "is-conditional"; }
      else if(type === "return") { timeProp = "return-time"; condProp = "condition"; }

      var oldCondition = data[condProp];
      var oldTime = data[timeProp];

      var onError = function(response) {
        show_inline_manage_error(response);

        data[condProp] = oldCondition;
        data[timeProp] = oldTime;
        save_manage_data_to_local_storage(_inlineManageData);

        refresh_message_ui(messageId);
      };

      var $anchor = $(elem).closest(".by-button");
      var $popup = show_reschedule_popup(data, $anchor, function(result) {
        data[condProp] = result.condition;
        data[timeProp] = result.date.getTime();
        save_manage_data_to_local_storage(_inlineManageData);

        $(".b4gid-" + data["hex-gmail-id"]).remove();
        update_ui_with_inline_manage(_inlineManageData["message-ids"]);

        call_function_after_logged_in(function() {
          $.ajax({
            type: "post",
            url: "https://b4g.baydin.com" + url,
            data: {
              "id": data.id,
              "offset": result.date.getTime(),
              "condition": result.condition
            },
            xhr: xhr_with_credentials,
            success: function(response) {
              if(!response["success"]) { onError(response); }
            },
            error: onError,
            dataType: "json"
          });
        }, onError);

        $popup.remove();
      });
    }
    function remove_manage_data(url, type, elem, callback) {
      var data = $(elem).closest(".b4g-inline-part").data("manage-data");
      var messageId = data["hex-gmail-id"];

      var messageIds = _inlineManageData["message-ids"];
      var list = messageIds[messageId][type + "s"];
      var idx = list.indexOf(data);
      if(idx > -1) { list.splice(idx, 1); }
      save_manage_data_to_local_storage(_inlineManageData);

      $(".b4gid-" + data["hex-gmail-id"]).remove();
      $(".adn.ads[data-legacy-message-id='" + data["hex-gmail-id"] + "']").find(".a3s").removeClass("b4g-inline-pending-content");
      update_ui_with_inline_manage(messageIds);

      var onError = function(response) {
        show_inline_manage_error(response);

        list.push(data);
        save_manage_data_to_local_storage(_inlineManageData);

        refresh_message_ui(messageId);
      };

      call_function_after_logged_in(function() {
        $.ajax({
          type: "post",
          url: "https://b4g.baydin.com" + url,
          data: { "id": data.id },
          xhr: xhr_with_credentials,
          success: function(response) {
            if(!response["success"]) { onError(response); }

            if(callback) { callback(); }
          },
          error: onError,
          dataType: "json"
        });
      }, onError);
    }
    function cancel_pending_email(url, type, button) {
      $(".by-button-text", button).text("Cancelling...");

      var data = $(button).closest(".b4g-inline-part").data("manage-data");
      var messageId = data["hex-gmail-id"]; 

      var onError = function(response) {
        show_inline_manage_error(response);

        refresh_message_ui(messageId);
      };

      call_function_after_logged_in(function() {
        $.ajax({
          type: "post",
          url: "https://b4g.baydin.com" + url,
          data: { "id": data.id },
          xhr: xhr_with_credentials,
          success: function(response) {
            if(!response["success"]) { onError(response); }

            var messageIds = _inlineManageData["message-ids"];
            var list = messageIds[messageId][type + "s"];
            var idx = list.indexOf(data);
            if(idx > -1) { list.splice(idx, 1); }
            save_manage_data_to_local_storage(_inlineManageData);

            window.location.reload();
          },
          error: onError,
          dataType: "json"
        });
      }, onError);
    }
    function show_reschedule_recurring_dialog(recur) {
      var $dialog = show_recurring_dialog(function() {
        var oriRecur = $.extend({}, recur); // Copying recur object;
        var messageId = recur["hex-gmail-id"];

        var start = Date.parse(
          $("#start_date_input").val() + " " + $("#start_time_input").val()
        );
        if(!start || start < new Date()) { alert("Invalid start date"); return; }

        var frequency = get_frequency();
        var interval = $('#num_interval').val();

        var utc_weekday;
        var setPosition = null;
        if ($('#frequency').val() == "monthweek") {
          setPosition = $("#set_position").val();
          utc_weekday = get_weekday();
        } else {
          utc_weekday = get_utc_weekday(start);
        }
        if(!utc_weekday) { alert("You must select a day of the week."); return; }

        var num_occurences = "None", end = "None";
        if($("#radio_num_occurences").attr("checked")) {
          num_occurences = $("#num_occurences").val();
          end = calculate_end_date(start, interval, frequency, utc_weekday, num_occurences);
        } else if($("#radio_end_date").attr("checked")) {
          end = Date.parse($("#end_date").val() + " " + $("#start_time_input").val());

          if(end == null) { alert("Invalid end date"); return; }
          end = end.getTime();
        }

        var onError = function(response) {
          show_inline_manage_error(response);

          $.extend(recur, oriRecur);
          save_manage_data_to_local_storage(_inlineManageData);

          refresh_message_ui(messageId);
        };

        call_function_after_logged_in(function() {
          var data = {
              "id": recur.id,
              "frequency": frequency,
              "interval": interval,
              "utc_weekday": utc_weekday,
              "start": start.getTime(),
              "end": end,
              "num_occurences": num_occurences,
              "tz": jstz.determine().name(),
          };
          if (setPosition) {
            data["setPosition"] = setPosition;
          }
          $.ajax({
            type: "post",
            url: "https://b4g.baydin.com/inline-manage/reschedule-recurring",
            data: data,
            xhr: xhr_with_credentials,
            success: function(response) {
              if(!response["success"]) { onError(response); return; }

              recur["next-send"] = response["next-send"];
              recur["end"] = response["end"];

              var messageIds = _inlineManageData["message-ids"];
              messageIds[messageId]["last-updated"] = Date.now();
              update_ui_with_inline_manage(messageIds);
            },
            error: onError,
            dataType: "json"
          });
        }, onError);

        recur.frequency = [ "YEARLY", "MONTHLY", "WEEKLY", "DAILY" ].indexOf(frequency);
        recur.interval = interval | 0;
        recur.setPosition = setPosition;
        recur.start = start.getTime();
        recur.end = (end === "None" ? undefined : end);
        recur.weekdays = $.parseJSON(utc_weekday.replace("(", "[").replace(")", "]"));
        save_manage_data_to_local_storage(_inlineManageData);

        recur["next-send"] = NaN;

        refresh_message_ui(messageId);

        $dialog.remove();
      });

      $("#num_interval", $dialog).val(recur.interval);

      var setPosition = recur.setPosition;

      $("#frequency", $dialog).val(_freqs[recur.frequency]);
      if (setPosition != null) {
        $("#set_position", $dialog).val(setPosition);
        $("#frequency", $dialog).val("monthweek");
      }

      var nextDate = new Date(recur["next-send"]);
      $("#start_date_input", $dialog).val(nextDate.toString("M/d/yyyy"));
      $("#start_time_input", $dialog).val(nextDate.toString("h:mm tt"));

      if (recur.end) {
        $("#end_date", $dialog).val((new Date(recur.end)).toString("M/d/yyyy"));
        $("#radio_end_date", $dialog).attr("checked", true);
      }
      else {
        $("#radio_no_end", $dialog).attr('checked', true);
      }

      var $dayChecks = $("input.day_cb", $dialog);
      var days = adjust_days_to_local_time(recur.weekdays, new Date(recur.start));
      days.forEach(function(day) {
        $dayChecks.filter('[value=' + day + ']').attr('checked', true);
        $("#set_position_day").val(day);
      });
      $("#frequency", $dialog).change();
      $dayChecks.change(); // Updates feedback text
    }
    function calculate_end_date(start, interval, freq, weekdays, number) {
      function convert_day_num_to_our_language (day) {
        if (day === 0) { return 6; }
        else { return day-1; }
      }

      var end = "None";
      var date = new Date(start.getTime());
      if (freq === "DAILY") {
        for (var i=0; i < number; i++) {
          date.add(interval).days();
        }
        end = date.getTime();
      }
      else if (freq === "WEEKLY") {
        var count = 0;
        var days = weekdays.replace(/[()]/g, "").split(",");

        while (count < number) {
          var dayNum = convert_day_num_to_our_language(date.getDay()).toString();
          if (days.indexOf(dayNum) !== -1) {
            count++;
          }
          date.add(1).days();
        }

        end = date.getTime();
      }
      else if (freq === "MONTHLY") {
        for (var j=0; j < number; j++) {
          date.add(interval).months();
        }
        end = date.getTime();
      }   
      else if (freq === "YEARLY") {
        for (var k=0; k < number; k++) {
          date.add(interval).years();
        }
        end = date.getTime();
      }
      return end;
    }
    function skip_next_recurring(recur) {
      var messageId = recur["hex-gmail-id"];
      var oriNextSend = recur["next-send"];

      recur["next-send"] = NaN;
      refresh_message_ui(messageId);

      var onError = function(response) {
        show_inline_manage_error(response);

        recur["next-send"] = oriNextSend;
        refresh_message_ui(messageId);
      };

      call_function_after_logged_in(function() {
        $.ajax({
          type: "post",
          url: "https://b4g.baydin.com/inline-manage/reschedule-skip-next",
          data: { "id": recur.id },
          xhr: xhr_with_credentials,
          success: function(data) {
            if(!data["success"]) { onError(); return; }

            recur["next-send"] = data["next-send"];
            refresh_message_ui(messageId);
            save_manage_data_to_local_storage(_inlineManageData);
          },
          error: onError,
          dataType: "json"
        });
      }, onError);
    }
    function init_button_click_delegates($container) {
      $container.delegate(".b4g-inline-notes button", "click", function(e) {
        var rtn = $(this).closest(".b4g-inline-notes").data("manage-data");
        show_edit_notes_popup(rtn, $(this), $container);
      });

      $container
        .delegate(".b4g-inline-return .b4g-inline-reschedule", "click", function() {
          reschedule_boomerang("/inline-manage/reschedule-return-later", "return", this);
        })
        .delegate(".b4g-inline-send .b4g-inline-reschedule", "click", function() {
          reschedule_boomerang("/inline-manage/reschedule-send-later", "send", this);
        })
      ;

      $container
        .delegate(".b4g-inline-return .b4g-inline-returnnow", "click", function() {
          remove_manage_data("/inline-manage/return-now", "return", this);
        })
        .delegate(".b4g-inline-return .b4g-inline-noreturn", "click", function() {
          remove_manage_data("/inline-manage/return-never", "return", this);
        })
        .delegate(".b4g-inline-send .b4g-inline-sendnow", "click", function() {
          remove_manage_data("/inline-manage/send-now", "send", this);
        })
        .delegate(".b4g-inline-send .b4g-inline-nosend", "click", function() {
          cancel_pending_email("/inline-manage/send-never", "send", this);
        })
      ;

      // Recurring UI
      $container
        .delegate(".b4g-inline-recurring .b4g-inline-reschedule", "click", function() {
          var recur = $(this).closest(".b4g-inline-part").data("manage-data");
          show_reschedule_recurring_dialog(recur);
        })
        .delegate(".b4g-inline-recurring .b4g-inline-skip", "click", function() {
          var recur = $(this).closest(".b4g-inline-part").data("manage-data");
          var tmpl = _templates["recurring-skip-next-confirmation"];
          var $dialog = $(replace_tokens(tmpl, {
            "pretty-skip-date": new Date(recur["next-send"]).toString("MMM dd yyyy")
          }));

          $dialog
            .find(".b4g-cancel").click(function() { $dialog.remove(); }).end()
            .find(".by-button-secondary").click(function() {
              skip_next_recurring(recur);
              $dialog.remove();
            }).end()
            .dialog({
              modal: true,
              closeOnEscape: true,
              width: 400,
              dialogClass: "b4g-no-title"
            })
          ;

        })
        .delegate(".b4g-inline-recurring .b4g-inline-cancel", "click", function() {
          var $this = $(this);
          var tmpl = _templates["recurring-cancel-confirmation"];
          var $dialog = $(tmpl);

          $dialog
            .find(".b4g-cancel").click(function() { $dialog.remove(); }).end()
            .find(".by-button-secondary").click(function() {
              cancel_pending_email("/inline-manage/recurring-cancel", "recurring", $this);
              $dialog.remove();
            }).end()
            .dialog({
              modal: true,
              closeOnEscape: true,
              width: 400,
              dialogClass: "b4g-no-title"
            })
          ;
        })
      ;
    }

    function insert_manage_ui_container_if_necessary(data, lastUpdated) {
      var SAME_SENT_TIME_BUFFER = 15 * 60 * 1000;

      var b4gId = data["hex-gmail-id"];
      var $container = $(".b4g-inline-manage.b4gid-" + b4gId + ".date-" + lastUpdated);

      if($container.length > 0) { // return the existing container if it exists
        return $container;
      }
      else {
        $(".b4g-inline-manage.b4gid-" + b4gId).remove();

        var tmpl = _templates["container"];
        $container = $(replace_tokens(tmpl, {
          "b4g-id": b4gId,
          "last-updated": lastUpdated
        }));

        // .m + hex-encoded-gmail-id are kindly added by gmail to email content containers
        var $msgbody = $(".adn.ads[data-legacy-message-id='" + b4gId + "']").find(".a3s").first();
        $msgbody
          .removeClass("b4g-inline-pending-content")
          .before($container)
        ;
        // exclude Old UI with Updated DOM configuration
        if (which_gmail() === NEW_GMAIL) {
          $msgbody.addClass("b4g-inline-manage-message-width-new-ui");
        }

        return $container;
      }
    }

    function insert_manage_ui(type, data, lastUpdated) {
      var $container = insert_manage_ui_container_if_necessary(data, lastUpdated);

      var $ui = $container.children(".b4g-inline-" + type);
      if($ui.length > 0) { return $ui; }

      var tmpl = _templates[type];
      $ui = $(replace_tokens(tmpl, {
        "data": data,
        "type": type,
        "last-updated": lastUpdated
      })).data("manage-data", data);

      $container.children(".b4g-inline-placeholder-" + type).replaceWith($ui);

      return $ui;
    }
    function insert_notes_ui(rtn, $container) {
      var tmpl = _templates["notes"];
      var $notes = $(replace_tokens(tmpl, rtn)).data("manage-data", rtn);

      $container
        .children(".b4g-inline-placeholder-notes")
        .replaceWith($notes)
      ;
    }
    function insert_returns_ui(returns, lastUpdated) {
      returns.forEach(function(rtn) {
        var rtnDate = new Date(rtn["return-time"]);

        // don't display anything if the return date is in the past (it has already been processed by cron)
        if (rtnDate < new Date()){
          return;
        }

        rtn["pretty-return-time"] = rtnDate.toString("ddd, MMM d, yyyy h:mm tt");
        rtn["pretty-conidition"] = _prettyConditionals[rtn["condition"] || "N"];

        var $rtn = insert_manage_ui("return", rtn, lastUpdated);

        if(rtn.notes) { insert_notes_ui(rtn, $rtn.closest(".b4g-inline-manage")); }
      });
    }

    function make_content_editable(formattedGmailId, type) {
      // type is either "recurring" or "sendlater"
      var $content = $(".adn.ads[data-legacy-message-id='" + formattedGmailId + "']").find(".a3s").first();

      if($content.hasClass("b4g-inline-pending-content")) { return; }

      $content
        .addClass("b4g-inline-pending-content")
        .removeClass("adM") // Show edit area if the message is empty
        .closest(".adn").find(".g3").hide() // Hide sent date
      ;

      if($content.has(".b4g-inline-edit-message").length > 0) { return; }

      var $edit = $(_templates["edit-email-button"]);
      var editWindow;
      $edit.find("button").click(function popup_edit(e) { // poor man's disable
        e.preventDefault();

        // If the edit flow is already in progress, focus that window
        if (editWindow) {
          editWindow.focus();
        }
        else {
          call_function_after_logged_in(function() {
            var url = "https://b4g.baydin.com/editmessage";
            var editUrl = url + "/" + type + "/" + formattedGmailId;
            editWindow = window.open(editUrl, "_blank");

            function checkEditWindow() {
                if (!editWindow || editWindow.closed) {
                  // When the edit flow is completed, reset inline manage
                  // and redirect to the Boomerang-Outbox
                  inline_manage.expire_cache();
                  editWindow = null;
                  clearInterval(timer);
                  window.location.hash = "#label/Boomerang-Outbox";
                  click_gmail_refresh_button();
                }
            }

            // in order to handle Safari's default pop up blocker, we need to have the user initiate
            // the window-opening action. This logic is based off of our current auth behavior
            var timer;
            if (browser_name === "Safari" || browser_name === "Old Safari" || !editWindow) {
              var overlay = $(SAFARI_EDIT_OVERLAY);
              $("body").append(overlay);
              $('#safari-boomerang').click(function() {
                editWindow = window.open(editUrl, "_blank");
                overlay.remove();
                timer = setInterval(checkEditWindow, 500);
              });
              $('#safari-dialog-close').click(function() {
                overlay.remove();
              });
            } else {
              timer = setInterval(checkEditWindow, 500);
            }
          });
        }
      });

      $content.append($edit);
    }
    function insert_sends_ui(sends, lastUpdated) {
      sends.forEach(function(send) {
        var sendDate = new Date(send["send-time"]);

        // don't display anything if the sent date is in the past (it has already been processed by cron)
        if (sendDate < new Date()){
          return;
        }

        send["pretty-send-time"] = sendDate.toString("ddd, MMM d, yyyy h:mm tt");
        send["pretty-conidition"] = (send["is-conditional"] ? "if no reply" : "");

        insert_manage_ui("send", send, lastUpdated);
        make_content_editable(send["hex-gmail-id"], "sendlater");
      });
    }

    function adjust_days_to_local_time(days, time) {
      if (
        time.getUTCDay() > time.getDay() ||
        (time.getUTCDay() === 0 && time.getDay() === 6)
      ) { // Move days back one. Note, +6 in mod 7 is the same as -1 but avoids negative numbers
        return days.map(function(day) { return (day + 6) % 7; });
      } else if (
        time.getUTCDay() < time.getDay() ||
        (time.getUTCDay() === 6 && time.getDay() === 0)
      ) { // Move days forward one
        return days.map(function(day) { return (day + 1) % 7; });
      }

      return days;
    }
    function get_pretty_recur_time(recur) {
      var text = "Every ";

      if(recur.interval <= 1) { text += _freqs[recur.frequency]; }
      else { text += recur.interval + " " + _freqs[recur.frequency] + "s"; }

      var days = recur.weekdays;
      if(days.length >= 7) { return text; }

      var startDate = new Date(recur.start);
      // Edge case: adjust the days to local time UNLESS the message is an nth-week-of-the-month message
      var isMonthWeekMessage = (recur.frequency == 1) && (recur.setPosition != null);

      if (!isMonthWeekMessage) {
        days = adjust_days_to_local_time(days, startDate);
      }

      switch (String(recur.setPosition)) {
        case "-1":
          text += " last ";
          break;
        case "1":
          text += " first ";
          break;
        case "2":
          text += " second ";
          break;
        case "3":
          text += " third ";
          break;
        case "4":
          text += " fourth ";
          break;
      }

      var _weekdays = [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" ];
      text += " " + days.map(function(day) { return _weekdays[day]; }).join(", ");

      return text;
    }
    function insert_recurrings_ui(recurrings, lastUpdated) {
      recurrings.forEach(function(recur) {
        var startDate = new Date(recur["start"]);
        var nextDate = new Date(recur["next-send"]);
        var endDate = recur["end"] && new Date(recur["end"]);

        recur["pretty-recurring-time"] = get_pretty_recur_time(recur);
        recur["pretty-start-time"] = startDate.toString("MMM d, yyyy");
        recur["pretty-next-time"] = (
          isFinite(nextDate) ? nextDate.toString("MMM d, yyyy") : "???"
        );
        recur["pretty-end-time"] = (endDate ? endDate.toString("MMM d, yyyy") : "Never");

        insert_manage_ui("recurring", recur, lastUpdated);
        make_content_editable(recur["hex-gmail-id"], "recurring");
      });
    }
    function insert_tracking_ui(tracking, lastUpdated) {
      tracking.forEach(function(track) {
        var openData = track["open-data"];

        // TODO: This seems to be the cause of the 'Dec 31' bugs when the input is null
        var first = new Date(openData["first-open"]);
        var last = new Date(openData["last-open"]);

        openData["pretty-first-time"] = first.toString("MMM d aroun\\d h:mm tt");
        openData["pretty-last-time"] = last.toString("MMM d aroun\\d h:mm tt");

        track["total-link-clicks"] = 0;
        track["link-click-content"] = track["links-data"].map(function(link) {
          track["total-link-clicks"] += link.clicks;

          // TODO: This seems to be the cause of the 'Dec 31' bugs when the input is null
          var first = new Date(link["first-click"]);
          var last = new Date(link["last-click"]);
          link["pretty-first-time"] = first.toString("MMM d aroun\\d h:mm tt");
          link["pretty-last-time"] = last.toString("MMM d aroun\\d h:mm tt");

          var tmpl = _templates["link-tracking"];
          return replace_tokens(tmpl, link);
        }).join("");

        var $ui = insert_manage_ui("tracking", track, lastUpdated);

        $ui
          .children(".b4g-inline-tracking-opens")
            .toggleClass("b4g-tracking-unopen", openData.opens <= 0)
          .end()
          .children(".b4g-inline-tracking-clicks")
            .toggleClass("b4g-tracking-unclick", track["total-link-clicks"] <= 0)
        ;
      });
    }

    function troubleshoot(callbacks) {
      load_manage_data_from_local_storage(function(data) {
        callbacks.local(null, data);
      });

      force_manage_data_update(function(err, data) {
        var callback = callbacks.server;

        if(err) { return callback(err.status + " -- " + err.error); }
        if(!data) { return callback("No inline-manage data received."); }
        if(!data.success) { return callback(data.error); }

        save_message_ids(data["message-ids"]);

        return callback(null, "OK");
      });
    }

    return {
      is_enabled: function() { return _inlineManageData && _inlineManageData["enabled"]; },
      init: init_inline_manage,
      expire_cache: expire_cache,
      enable: enable_inline_manage,
      troubleshoot: troubleshoot
    };
  })(); // Close inline manage code



function generate_inline_manage_troubleshoot($dialog) {
  var $ui = $("<div id='b4g-inline-troubleshoot'>" +
    "<h4>Inline manage:</h4>" +
    "<ul>" +
      "<li>Is enabled: <b class='b4g-inline-enabled'></b></li>" +
      "<li>Local data last updated: <br><b class='b4g-inline-lastupdated'></b></li>" +
      "<li>Number inline-manage threads: <b class='b4g-inline-threadscount'></b></li>" +
      "<li>Is server data accessible: <b class='b4g-inline-serverdata'></b></li>" +
    "</ul>" +
  "</div>");
  $dialog
    .css("height", "auto")
    .find("#b4g-inline-troubleshoot-holder").append($ui)
  ;

  var set_text = function(selector, text, color) {
    $(selector, $ui).text(text).css("color", color);
  };

  inline_manage.troubleshoot({
    local: function(err, data) {
      var enabled = inline_manage.is_enabled();
      set_text(".b4g-inline-enabled", (enabled ? "Yes" : "No"), (enabled ? "green" : "red"));

      var lastUpdated = new Date(data["last-updated"]);
      var threadCount = Object.keys(data["thread-ids"]).length;
      set_text(".b4g-inline-lastupdated", lastUpdated + "", "blue");
      set_text(".b4g-inline-threadscount", threadCount, "blue");
    },
    server: function(err) {
      if(err) { set_text(".b4g-inline-serverdata", err, "red"); }
      else { set_text(".b4g-inline-serverdata", "Yes", "green"); }
    }
  });
  set_text(".b4g-inline-enabled", "Loading...", "blue");
  set_text(".b4g-inline-lastupdated", "Loading...", "blue");
  set_text(".b4g-inline-threadscount", "Loading...", "blue");
  set_text(".b4g-inline-serverdata", "Loading...", "blue");
}

/**
 * 13. CRM
 */

 
function set_up_crm_help(){
    $(".b4g_settings_bccaddress_question").click(function(){
        var crmSelect = $("#b4g_crm_select").val();
            var crmMessage = "<p style='margin-left:20px;'>Enter the email address that your CRM provides.</p>";
            var crmTitle = "Other";
            switch(crmSelect) {
                case "salesforce":
                    crmTitle = "How to Find the Bcc Address for Salesforce";
                    crmMessage= "<p><strong>How to activate:</strong></p>" +
"<ol>" +
"   <li>Find where it says 'Setup' in the upper right corner and select this option.</li>" +
"   <li>In the left menu bar, select 'Email Administration'. </li>" +
"   <li>Select the 'Email to Salesforce' tab.</li>" +
"   <li>Edit the settings and select the box to activate this feature.</li>" +
"</ol>" +
"<p><strong>How to find your Bcc address:</strong></p>" +
" <ol>" +
"   <li>Find your user name at the upper right corner and select the drop down bar.</li>" +
"   <li>Select 'My Settings'.</li>" +
"   <li>Select the Email tab under 'My Settings'</li>" +
"   <li>Select the 'My Email to Salesforce Tab' (this does not exist until you activate the feature).</li>" +
"   <li>You will see your email to salesforce address highlighted.</li>" +
"</ol>";
                    break;
                case "highrise":
                    crmTitle = "How to Find the Bcc Address for Highrise";
                    crmMessage= "<ol>" +
"   <li>Log into your Highrise account.</li>" +
"   <li>Find 'Account and Settings' and select the drop down bar.</li>" +
"   <li>Select 'My Info' from the drop down list.</li>" +
"   <li>You will see your BCC email address displayed under '<strong>Your Personal Email Dropbox</strong>'.</li>" +
"</ol>";
                    break;
                case "insightly":
                    crmTitle = "How to Find the Bcc Address for Insightly";
                    crmMessage= "<ol>" +
"   <li>Log into your Insightly account.</li>" +
"   <li>Select 'Emails' from the menu bar on the left.</li>" +
"   <li>You will see your BCC email address displayed there.</li>" +
"</ol>";
                    break;
                case "capsule":
                    crmTitle = "How to Find the Bcc Address for Capsule";
                    crmMessage= "<ol>" +
"   <li>Log into your Capsule account.</li>" +
"   <li>Select 'User' and then 'My Preferences' in the Capsule navigation bar.</li>" +
"   <li>You will see your BCC email address under <strong>'Mail Drop Box'</strong>.</li>" +
"</ol>";
                    break;
                case "sugar":
                    crmTitle = "How to Find the Bcc Address for Sugar";
                    crmMessage= "<p><strong>To activate Sugar Email Archiving for your instance, you must be the admin or request your account admin to follow the steps below:</strong></p>" +
"<ol>" +
"   <li>Log into Sugar CRM.</li>" +
"   <li>Navigate to Admin > Email Archiving.</li>" +
"   <li>Read and agree to the privacy agreement.</li>" +
"   <li>Click <strong>'Enable Email Archiving'</strong>.</li>" +
"   <li>Then you will see your BCC address in the field 'Email Archiving Address'.</li>" +
"</ol>";
                    break;
                case "pipedrive":
                    crmTitle = "How to Find the Bcc Address for Pipedrive";
                    crmMessage= "<ol>" +
"   <li>Log into Pipedrive CRM.</li>" +
"   <li>Go to your Personal Settings.</li>" +
"   <li>Select the section named 'Email drop-box'.</li>" +
"   <li>Click the radio button 'Enabled' next to Dropbox status.</li>" +
"   <li>You will find your BCC address in the 'Your dropbox address' field.</li>" +
"   <li>Enter your email address in the box below and click 'Save changes'.</li>" +
"</ol>";
                    break;
                case "zoho":
                    crmTitle = "How to Find the Bcc Address for Zoho";
                    crmMessage= "<p>To activate BCC Dropbox in Zoho:</p>" +
"<ol>" +
"   <li>Log into your Zoho account.</li>" +
"   <li>Click <strong>Setup > Users &amp; Permissions > Profiles</strong>.</li>" +
"   <li>In the <em>Profiles</em> page, click the <strong>Edit</strong> link corresponding to the profile that you want to edit.</li>" +
"   <li>From the list of profiles, select the <strong>BCC Dropbox</strong> check box under <em>General Permissions</em>.</li>" +
"   <li>Click <strong>Save</strong>.</li>" +
"</ol>" +
"<p>The BCC Dropbox email address will be available in Zoho CRM under <strong>Setup > Personal Settings >BCCDropbox.</strong></p>" +
"<p>Note: This feature in Zoho is only available to the users on Professional and Enterprise plans.</p>";
                    break;
                default:
                    break;
            }
        var crmDialog = crmMessage;
        if (crmSelect !== "other"){
            crmDialog = "<div class='dialogdiv'>" + crmDialog + "<p><img style='vertical-align:middle;' src='" + B4G_STATIC_FILES_DIRECTORY + "email.png'/><a id='emailme' style='vertical-align:middle;'>Email me these instructions</a></p>" + "</div>";
        }
        show_dialog(crmDialog, crmTitle, undefined, {width: 500}, "crmhelp");
        $("#emailme").click(function(){
            var url = "https://b4g.baydin.com/mailcruncher/sendcrmreminder?instructions=" + encodeURIComponent(crmMessage) + "&subject=" + crmTitle;
            send_image_request(url, $.noop());
            $(this).replaceWith("<span style='vertical-align:middle;'>Instructions sent!</span>");
        });
    });
}


/**
 * 14. Respondable
 */

function show_respondable_dialog(message, buttons, opts, dialogClass) {
  var $dialog = show_dialog(message, "", buttons, opts, dialogClass);
  var $parent = $dialog.parent();
  $(".b4g-ui-dialog-titlebar", $parent).remove();
  $parent.addClass("em-dialog")
         .prepend($("<div/>").addClass("em-close").html("&#215;"));

  return $dialog;
}


function show_consent_dialog(success_callback, cancel_callback) {
    var consentDialog = "<h1>Respondable Advanced Features</h1>" +
        "<p>These features use machine learning techniques to provide rich analysis of the messages you write. Pro and premium Boomerang users can see the effects of the following parameters on the quality of their messages.</p>" +
        "<h2>Positivity</h2>" +
        "<p>Positivity is a measurement of how positive (words like \"wonderful\") or negative (\"terrible\") the tone of your message is.</p>" +
        "<h2>Politeness</h2>" +
        "<p>Indicators of politeness include attempts to minimize or apologize for imposition and using language that reflects gratitude.</p>" +
        "<h2>Subjectivity</h2>" +
        "<p>Subjectivity is a measure of the ratio of opinions to factual statements in your message.</p>" +
        "<div class='em-dialog-inset'>" +
          "<strong>If you enable these features, Boomerang will securely send data about your messages to our servers for analysis. After the analysis is complete, your data is discarded. For more information about our data practices, please visit <a href='https://help.boomeranggmail.com/category/226-respondable' target='_blank'>our FAQ</a>.</strong>" +
          "<input type='checkbox' class='' id='respondable_consent_checkbox' style='vertical-align: middle;'>" +
          "<label style='vertical-align: middle;' for='respondable_consent_checkbox'>I consent to send my data to Boomerang's servers for analysis.</label>" +
        "</div>";

    var $dialog = show_respondable_dialog(consentDialog,
        {
            "Enable": {
                text: "Enable",
                "class": "b4g-button red",
                click: function() {
                    var checked = $(this).find("#respondable_consent_checkbox").is(":checked");
                    if (checked) {
                        $(this).dialog("destroy");
                        track_event(["respondable", "consent", "accepted"]);
                        success_callback();
                    }
                    else {
                        alert("Please check the checkbox before clicking Enable");
                    }
                }
            },
            "Cancel": {
                text: "Cancel",
                "class": "b4g-button grey cancelConsent",
                click: function() {
                    $(this).dialog("destroy");
                    track_event(["respondable", "consent", "declined"]);
                    if (cancel_callback) {
                        cancel_callback();
                    }
                }
            },
        }, {}, "respondable-consent"
    ).parent();
  fix_all_dialog_links(".em-dialog a");

  var $enableButton = $dialog.find(".b4g-button.red");
  $enableButton.attr("disabled", true);
  $("#respondable_consent_checkbox", $dialog).change(function() {
    $enableButton.attr("disabled", !this.checked);
  });
  $dialog.find(".em-close").click(function(){
    $dialog.find(".cancelConsent").click();
  });
}

function show_non_english_respondable_dialog(turn_off_callback, try_anyway_callback) {
    var consentDialog = "<p>Respondable only supports English at the present time</p>" +
        "<p>It looks like you're using Gmail in a different language.</p>";

    var $dialog = show_respondable_dialog(consentDialog,
        {
            "Turn Off": {
                text: "Turn off Respondable",
                "class": "b4g-button red",
                click: function() {
                    $(this).dialog("destroy");
                    turn_off_callback();
                }
            },
            "Try It Anyway": {
                text: "Try it anyway!",
                "class": "b4g-button grey",
                click: function() {
                    $(this).dialog("destroy");
                    try_anyway_callback();
                }
            },
        }, {}, "respondable-non-english"
    );
    var $parent = $dialog.parent();
    $parent.css("width", "400px");
    $(".b4g-ui-dialog-titlebar", $parent).remove();
}

function get_respondable_preferences() {
    var DEFAULT_PREFERENCES = {"machineLearningEnabled": false, "enabled": true, "hasConsented": false, "hasSeenFTUE": false};
    var preferencesString = read_from_html5_storage("b4g_respondable-" + get_gmail_user());
    var preferences;
    if (preferencesString == null) {
        preferences = DEFAULT_PREFERENCES;
    }
    else {
        try {
            preferences = JSON.parse(preferencesString);
        }
        catch (e) {
            console.log("Unexpected error in get_respondable_preferences");
            console.log(preferencesString);
            preferences = DEFAULT_PREFERENCES;
        }
    }
    return preferences;
}

function respondable_is_enabled() {
    var preferences = get_respondable_preferences();
    return preferences["enabled"];
}
function premium_respondable_is_enabled() {
    var preferences = get_respondable_preferences();
    return preferences["machineLearningEnabled"];
}
function is_on_premium_respondable_plan() {
    var userPlan = get_cached_plan();
    return is_premium_respondable_plan(userPlan);
}
function advanced_respondable_should_be_activated() {
    return is_on_premium_respondable_plan() && premium_respondable_is_enabled() && has_consented_to_advanced_respondable();
}
function has_seen_respondable_ftue() {
    var preferences = get_respondable_preferences();
    return preferences["hasSeenFTUE"];
}
function has_consented_to_advanced_respondable() {
    var preferences = get_respondable_preferences();
    return preferences["hasConsented"];
}

// Respondable

var EmailMeter = (function() {
    var EMAIL_METER_CLASS = "email-meter"; // used to indicate of a compose window has already been handled by us
    var $activeComposeContainer = null;
    var $webworkerComposeContainer = null;
    var ignoreEmailEvents = false;
    var MINIMUM_WORD_COUNT = 7;
    var boomerangEmailMeterWorker;

    // Set up a Web Worker to do all these calculations off the UI thread

    // TODO: Set this up to kill the worker if things run way too long
    // I think the way to do it is to set a timeout before posting message that kills and restarts the worker after 10 seconds or so
    // Then, pass the ID of the timeout to the worker, and on the onMessage handler clear the timeout 
    // Creating workers each time we need to do the work ran Chrome out of memory. 
    window.URL = window.URL || window.webkitURL;

    var blob;
    try {
        var response = BoomerangEmailMeterWorkerFunction.toString() + "self.onmessage=function(e){postMessage(BoomerangEmailMeterWorkerFunction().calculate_email_readability_metrics(e.data));}";
        //var response = "self.onmessage=function(e){postMessage(e.data);}";
        blob = new Blob([response], {type: 'application/javascript'});
    } catch (e) {
    // TODO: If they're on an old browser, this won't work. Should fall back gracefully
    }
    if (
        (BrowserDetect.browser === "Chrome" && BrowserDetect.version >= 59) ||
        (BrowserDetect.browser === "Edge") ||
        (BrowserDetect.browser === "Opera") ||
        (BrowserDetect.browser === "Safari") ||
        (BrowserDetect.browser === "Firefox" && window.B4G_FIREFOX_HAS_RESPONDABLE_EXTENSION_WEB_WORKER)
      ) {
      // blobs are being blocked by Chrome's interpretation of Content Security Policy's script-src
      // https://github.com/w3c/webappsec-csp/issues/146
      // So we must use a background page.
      // Message-passing: Content script to web page
      window.addEventListener("message", function(e) {
        if (e.data.type && (e.data.type == "B4G_RESPONDABLE_OUTPUT")) {
          if(!ignoreEmailEvents) {
            handle_respondable_metrics(e.data.metrics);
          }
        }
      });
    }
    else {
      boomerangEmailMeterWorker = new Worker(URL.createObjectURL(blob));
      boomerangEmailMeterWorker.onmessage = function(e) {
          if(!ignoreEmailEvents) {
            handle_respondable_metrics(e.data);
          }
      }
    }

    var handle_respondable_metrics = function(emailMeterCalculations) {
      var emailMeterGauge = $webworkerComposeContainer.data("emailMeterGauge");
      var respondableGrade = $webworkerComposeContainer.data("respondableGrade");

      if(is_email_meter_shown()) {
        var sliderWidgets = $webworkerComposeContainer.data("sliderWidgets");

        var isBlank = !emailMeterCalculations["wordCount"];
        var isTooShort = emailMeterCalculations["wordCount"] < 7;
        emailMeterCalculations = _format_basic_scores(emailMeterCalculations, isTooShort);

        sliderWidgets["subjectLength"].update((get_subject($webworkerComposeContainer).match(/\S+/g) || []).length);
        sliderWidgets["fleschKincaidGradeLevel"].update(emailMeterCalculations["fleschKincaidGradeLevel"]);
        sliderWidgets["questionCount"].update(emailMeterCalculations["questionCount"]);
        sliderWidgets["wordCount"].update(emailMeterCalculations["wordCount"]);

        var $expandedView = $webworkerComposeContainer.data("$expandedView");
      }

      // Update final grade from web worker only if they are on pro-trial/basic/personal which don't have a server component
      if (!advanced_respondable_should_be_activated() || hasAdvancedRespondableError) {
          var meterValue = _map_non_premium_raw_score_to_meter_value(emailMeterCalculations["respondableScore"]);
          if (emailMeterGauge) {
              emailMeterGauge.update(meterValue);
          }
          if (respondableGrade) {
              respondableGrade.update(isBlank ? -1 : meterValue);
          }
      }
      $webworkerComposeContainer = null;
    }

    var toggle_premium_sliders_enabled = function(sliders, enable) {
      ["politeness", "emailSentiment", "subjectivity"].forEach(function(key) {
        sliders[key].updateOptions({
          enabled: enable,
          clickEventsEnabled: enable
        });
      });
    }

    var get_transformed_respondable_subject = function($composeContainer) {
      var subject = get_subject($composeContainer);
      // Special case if this is a reply
      // TODO: Use the ideal subject length if it's a reply? Is is three words?
      // Should we give is-a-reply to Respondable server as a Boolean instead?
      var isAReply = is_a_reply($composeContainer);
      if (isAReply) {
          subject = "A reply subject";
      }
      return subject;
    }

    // TODO: refactor; preferably shouldn't be global
    var hasAdvancedRespondableError = false;
    var get_and_use_premium_respondable_scores = function($composeContainer, composeBodyText) {
        var sliderWidgets = $composeContainer.data("sliderWidgets");
        var $expandedView = $composeContainer.data("$expandedView");
        var myRequestTimestamp = new Date().valueOf();

        var handle_premium_respondable_error = function() {
          hasAdvancedRespondableError = true;
          toggle_premium_sliders_enabled(sliderWidgets, false);

          var $errorMessage = $expandedView.find(".em-error-msg");
          if(!$errorMessage.length) {
            $expandedView.find(".email-meters-container")
              .append($("<div/>").addClass("em-error-msg").html("Temporarily unavailable."));
          }
        }
        var clear_premium_respondable_error = function() {
          hasAdvancedRespondableError = false;
          toggle_premium_sliders_enabled(sliderWidgets, true);
          $expandedView.find(".em-error-msg").remove();
        }

        $.ajax({
            url: "https://b4g.baydin.com/mailcruncher/respondablescore",
            data: {"text": composeBodyText, "subject": get_transformed_respondable_subject($composeContainer)},
            type: "POST",
            xhr: xhr_with_credentials,
            success: function (data) {
                if(ignoreEmailEvents) return;

                var status = data["status"];
                if (status == "success") {
                    clear_premium_respondable_error();
                    // ignore old requests if there were newer ones
                    var currentRequestTimestamp = $composeContainer.data("respondableTimestamp");
                    if (currentRequestTimestamp != null && currentRequestTimestamp > myRequestTimestamp) {
                        return;
                    }
                    else{
                        $composeContainer.data("respondableTimestamp", myRequestTimestamp);
                        var isBlank = !data.metrics.wordCount;
                        var isTooShort = data.metrics.wordCount < 7;
                        var metrics = _format_premium_scores(data["metrics"], isTooShort);
                        var emailMeterGauge = $composeContainer.data("emailMeterGauge");
                        var respondableGrade = $composeContainer.data("respondableGrade");

                        var meterValue = _map_premium_raw_score_to_meter_value(metrics.score);

                        emailMeterGauge.update(meterValue);
                        respondableGrade.update(isBlank ? -1 : meterValue);

                        sliderWidgets["politeness"].update(metrics.politeness);
                        sliderWidgets["emailSentiment"].update(metrics.emailSentiment);
                        sliderWidgets["subjectivity"].update(metrics.subjectivity);
                    }
                }
                else if (status == "error" && data["message"] == "not authorized") {
                    // The user is no longer signed into django due to multi-sign-in. Clear Respondable preferences in order to default to basic Respondable
                    localStorage.removeItem("b4g_respondable-" + get_gmail_user());
                }
                else if (status == "error" && data["message"] == "downgraded") {
                    // The user has downgraded from a premium plan. We need to resync our preferences.
                    sync_preferences_with_server();
                } else {
                    handle_premium_respondable_error();
                }
            },
            error: function () {
                handle_premium_respondable_error();
            }
        });
}

    /**
    * Converts respondable score in range [0,1] to [0, 7]
    */
    var _map_non_premium_raw_score_to_meter_value = function(score) {
        var boundaries = [.2, .28, .34, .365, .421, .54, .65, 1];
        return boundaries.findIndex(function(boundary) {
            return score < boundary;
        });
    }

    var _map_premium_raw_score_to_meter_value = function(score) {
        var boundaries = [0.2, .272, .3, .352, .41, .49, .62, 1];
        return boundaries.findIndex(function(boundary) {
            return score < boundary;
        });
    }

    /**
     * Converts respondable meter value in range [0,7] to respondable grade
     * Invalid value => 0
     * Value in range [0,7] => [1, 4]
     */
    var _map_respondable_meter_to_grade = function(respondableScore) {
      if(respondableScore >= 0 || respondableScore <= 7) {
        return Math.floor(respondableScore / 2) + 1;
      }
      return 0;
    }

    var _format_basic_scores = function(metrics, revertToNeutral) {
      if(revertToNeutral) {
        metrics.fleschKincaidGradeLevel = "not enough data";
      } else {
        metrics.fleschKincaidGradeLevel = Math.floor(metrics.fleschKincaidGradeLevel*10)/10;
      }
      return metrics;
    }

    var _format_premium_scores = function(metrics, revertToNeutral) {
      if(revertToNeutral) {
        metrics.politeness = metrics.subjectivity = metrics.emailSentiment = "not enough data";
      } else {
        metrics.politeness = Math.floor(metrics["politeness"] * 1000) / 1000;
        metrics.subjectivity = Math.floor(metrics["subjectivity"] * 1000) / 1000;
        metrics.emailSentiment = Math.floor(metrics["sentiment"] * 100) / 100;
      }
      return metrics;
    }

    var get_gmail_language = function() {
        if (!is_pop_out_window()) {
            var language = $("html", document).attr("lang");
            if(language === "en" || language == null) {
                return "English-US";
            }
            else if(language === "en-GB") {
                return "English-UK";
            }
            else {
                return "Other";
            }
        }
        else {
            // there is no "lang" attribute in pop-out compose, so let's grab the Send button text and do our best
            var sendButtonText = $(".aoO").text();
            if (sendButtonText === "Send") {
                return "English";
            }
            else {
                return "Other";
            }
        }
    }
    var watch_for_new_compose_containers = function() {
        setInterval(set_up_compose_containers, 1000);
        setInterval(monitor_active_compose_window, 1000);
    }
    var set_up_compose_containers = function() {
        if (respondable_is_enabled()) {
            var $composeContainers = get_new_compose_containers();
                $composeContainers.each(function() {
                var $this = $(this);
                set_up_compose_container($this);
            });
        }
    }
    var set_up_compose_container = function($composeContainer) {
        // Return early if Gmail or Send Later is still loading
        var composeBody = get_compose_body($composeContainer);
        if (composeBody.length == 0 || $composeContainer.find('.sendLaterTable').length == 0) {
            return;
        }
        $composeContainer.addClass(EMAIL_METER_CLASS);

        observe_compose_container_for_changes($composeContainer);
        insert_toggle_button_into_compose_container($composeContainer);
        adjust_respondable_hover_tooltip($composeContainer);
    }
    var observe_compose_container_for_changes = function($composeContainer) {
        // Triggers an "EMAIL_METER_EVENT" event whenever the compose window changes
        var composeBody = get_compose_body($composeContainer);
        var isAReply = is_a_reply($composeContainer);
        if (!isAReply) {
            $composeContainer.find("input[name='subjectbox']").bind("keyup paste", function() {
                $composeContainer.trigger("EMAIL_METER_EVENT")
            });
        }
        new MutationObserver(function(mutations) {
          $composeContainer.trigger("EMAIL_METER_EVENT")
        }).observe(composeBody[0], {childList: true, characterData: true, subtree: true});
    }
    // Forkie event constants
    var FORKIE_SHOW_STRING = 'Shown';
    var FORKIE_SNOOZE_STRING = 'Snoozed';
    var FORKIE_DISMISS_STRING = "Dont show again";
    var FORKIE_CONVERSION_MEET = "Conversion meet btn";
    var FORKIE_CONVERSION_SUGGEST_TIMES = "Conversion suggest times";
    var FORKIE_CONVERSION_FREE_BUSY = "Conversion share free busy";
    var FORKIE_CONVERSION_BOOKABLE = "Conversion bookable schedule";
    var FORKIE_CONVERSION_SCHEDULING_MEETING_TOOLTIP = "Conversion scheduling a meeting tooltip";
    var FORKIE_CONVERSION_MEET_SUGGEST_TIMES = "Conversion meet suggest times";
    var FORKIE_CONVERSION_MEET_FREE_BUSY = "Conversion meet share free busy";
    var FORKIE_CONVERSION_MEET_BOOKABLE = "Conversion meet bookable schedule";
    var FORKIE_FINAL_TOOLTIP_DISMISS = "Final tooltip dismissed";
    var FORKIE_FINAL_TOOLTIP_MEET_CLICKED = "Final tooltip meet clicked";
    var FORKIE_FINAL_TOOLTIP_SUGGEST_TIMES_CLICKED = "Final tooltip suggest times clicked";
    var FORKIE_FINAL_TOOLTIP_FREE_BUSY_CLICKED = "Final tooltip share free busy clicked";
    var FORKIE_FINAL_TOOLTIP_BOOKABLE_CLICKED = "Final tooltip bookable clicked";
    var isEligibleForForkieEventTrack = function($composeContainer) {
      // Returns true if the event should be counted in the forkie A/B test
      // We only are interested if we are in a new draft composer widget that is not popout
      return is_dialog($composeContainer) && !is_pop_out_window($composeContainer);
    }
    var FORKIE_TOOLTIP_STRING = 'tool_tip'; // For "control" forkie that uses the tooltip
    var FORKIE_SIDEBAR_STRING = 'sidebar';  // For "conversation" forkie that uses the sidebar on the right side of the composer
    var FORKIE_BUTTON_STRING = 'button'; // For "toolbar" forkie that shows up above the send button
    var determineForkieVariant = function() {
      // Returns either 'tool_tip', 'sidebar' or 'button'

      var guser = get_gmail_user().toLowerCase();

      // Hardcoded users: Joe gets tool_tip (control), Cappy gets sidebar, Sarah gets button
      if (guser === 'joe@baydin.com') {
        return FORKIE_TOOLTIP_STRING;
      } else if (guser === 'cappy@baydin.com') {
        return FORKIE_SIDEBAR_STRING;
      } else if (guser === 'sarah@baydin.com') {
        return FORKIE_BUTTON_STRING;
      }

      // Calculate sum of char values in guser
      var charSum = 0;
      for (var i = 0; i < guser.length; i++) {
        var currentCharCode = guser.charCodeAt(i);
        if (currentCharCode) charSum += currentCharCode;
      }
      var mod = charSum % 3;

      if (mod === 0) {
        return FORKIE_SIDEBAR_STRING;
      } else if (mod === 1) {
        return FORKIE_BUTTON_STRING;
      } else {
        return FORKIE_TOOLTIP_STRING;
      }
    }
    var checkIfForkieIsDismissed = function() {
      var resultPromise = new Promise(function(resolve, reject) {
        // Resolving means forkie has been dismissed/snoozed and will not be seen
        // Rejecting will cause forkie to be shown

        // First, let's check local storage for a timestamp forkie is supposed to be snoozed until
        var forkieWakeTime = read_from_html5_storage('b4g_forkie_snoozed_until_' + get_gmail_user());
        if (forkieWakeTime) {
          var forkieWakeDate = new Date(forkieWakeTime);
          if (new Date() < forkieWakeDate) resolve('true');
        }

        // Next, check local storage and local variable for forkie dismissal
        if (read_from_html5_storage('b4g_forkie_dismissed_' + get_gmail_user()) === "true" || forkieIsDismissed) {
          forkieIsDismissed = true;
          resolve('true');
        }

        $.ajax({
          method: "GET",
          url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
          data: {
            "guser": get_gmail_user(),
          },
          xhr: xhr_with_credentials,
          success: function(response) {
            if (response.status === "success") {
              // Update local storage states for all announcements and FTUEs
              updateAnnouncementAndFTUEStates(response);
              if (response.hasDismissedForkie && response.hasDismissedForkie === true) {
                resolve('true');
              } else {
                reject('false');
              }

            } else if (response.showCurrentAnnouncementOrFTUE === true) {
              // The user does not exist in the database.  Show forkie.
              reject('false');
            }
          },
          error: function(response) {
            reject('false');
          }

        });

      });

      return resultPromise;
    }
    var insert_toggle_button_into_compose_container = function($composeContainer) {
        var isDialog = is_dialog($composeContainer);
        var isPopOut = is_pop_out_window();
        var isListView = is_threaded_view($composeContainer);
        var isEditMode = is_user_in_edit_mode();
        var emailMeterGauge = $composeContainer.data("emailMeterGauge");
        if(!emailMeterGauge) {
          var sendBar = _get_send_bar($composeContainer);
          var questionMarkImgUrl = B4G_STATIC_FILES_DIRECTORY + "respondable/respondable-questionmark.png";
          var emailMeterClasses = which_gmail() === NEW_GMAIL ? "em-email-meter-gauge gm-respondable" : "em-email-meter-gauge";
          var emailMeterDiv = $("<div class='" + emailMeterClasses + "'></div>")
            .append($("<h1/>").html("<span><img src='" + questionMarkImgUrl + "' alt='Learn more' class='em-info'><strong>Boomerang</strong> Respondable</span>"))

          // Adjust respondable meter styles
          if(isEditMode) {
              emailMeterDiv.css("position", "static");
          }
          else if (which_gmail() === NEW_GMAIL && isListView) {
            // we don't need a bottom offset in the New Gmail UI
            // 4/29/19 - we don't need a right offset anymore
            emailMeterDiv.css("bottom", "unset");
          }
          else if (which_gmail() === NEW_GMAIL) {
            // if we're not in list view, we don't need the right offset
            emailMeterDiv.css("bottom", "unset");
          }
          else if (isListView) {
              // Move respondable meter into the Send Later row. It might be better
              // to add it directly to the div, but it looks like .sendLaterTable
              // doesn't always exist at this point.
              var OFFSET = 4;
              emailMeterDiv.css("bottom", -1 * sendBar.height() + OFFSET);
          }
          else {
              emailMeterDiv.css("bottom", "5px");
          }

          // Adjust respondable meter container styles
          if(which_gmail() === NEW_GMAIL || is_user_in_edit_mode()) {
            var $customCell = $("td.respondable-cell", sendBar);
            if(!$customCell.length) {
              $customCell = $("<td class='gU Up respondable-cell'></td>");
              var $savedTextContainer = $(".OoRYyc", $composeContainer);
              if ($savedTextContainer.length) {
                $savedTextContainer.after($customCell);
              } else {
                $savedTextContainer = $('.sendLaterTable', $composeContainer);
                $savedTextContainer.append($customCell);
              }
            }
            $customCell.append(emailMeterDiv);
          } else {
            sendBar.prepend(emailMeterDiv);
          }

          emailMeterDiv.click(function(){
              toggle_the_active_compose_container($composeContainer);
          });
          var emailMeterGauge = new EMMeterWidget({
            context: $composeContainer,
            parentSelector: ".em-email-meter-gauge",
            currentValue: 0,
            height: 8
          });
          var is_about_scheduling = function(text) {
            var keywords = ['schedul', 'meet', 'call', 'coffee',
                'lunch', 'dinner', 'drink', 'phone', 'skype', 'zoom', 'breakfast'];
            var text_lower = text.toLowerCase();
            for (var x = 0; x < keywords.length; x++) {
                var keyword = keywords[x];
                if (text_lower.indexOf(keyword) > -1) {
                    return keyword
                }
            }
            return false;
        }
          $composeContainer.bind("EMAIL_METER_EVENT", function(e) {
              var $this = $(this);

              delay_function(function() {
                if($webworkerComposeContainer || ignoreEmailEvents) {
                  return;
                }

                initialize_b4g_slider_widgets($this);

                // Select the compose text & strip out the signature.
                // (Leaves the "-- " intact, but this should be ignored by email meter.)
                var composeBody = get_compose_body($this)
                    .clone()
                    .find("div[data-smartmail='gmail_signature']").remove()
                    .end();
                // Also delete quoted text (there can be multiple divs due to the Quote selected text Gmail Lab )
                composeBody.find("div.gmail_quote").remove();
                // Remove Smart Compose (machine-learning writing predictions)
                composeBody.find("span.XjviVd").remove();

                var composeBodyText = get_text_from_compose_body(composeBody);
                var subject = get_transformed_respondable_subject($composeContainer);
                if (boomerangEmailMeterWorker) {
                  boomerangEmailMeterWorker.postMessage([composeBodyText, subject]);
                }
                else {
                  // Message-passing: Web page to content-script
                  window.postMessage({ type: "B4G_RESPONDABLE_INPUT", composeBodyText: composeBodyText, subject: subject}, "*");
                }

                var userPlan = get_cached_plan();
                if (advanced_respondable_should_be_activated()) {
                    get_and_use_premium_respondable_scores($this, composeBodyText);
                }

                if (can_use_bookable_schedule() && is_about_scheduling(composeBodyText) && !forkieShownThisSession) {
                  var resultPromise = checkIfForkieIsDismissed();

                  var displayForkieVariantIfNecessary = function() {

                    if (!$composeContainer.hasClass("B4G_FEATURE")) {
                      $composeContainer.addClass("B4G_FEATURE");

                      var forkieVariant = determineForkieVariant();

                      var keyword = is_about_scheduling(composeBodyText);

                      var $holder = $composeContainer.find(".b4g-bcal-features-button-holder");
                      var $meetBtn = $holder.find('.b4g-bcal-features-button');

                      function track_forkie_event(eventTitle) {
                        if (isEligibleForForkieEventTrack($composeContainer)) {
                          var eventName = 'Forkie_'+forkieVariant;
                          track_event([eventName, eventTitle, keyword]);
                        }
                      }

                      function set_forkie_snooze_time() {
                        // Set a wake time for forkie 3 days from now.  Forkie won't reappear until then.
                        var wakeTime = new Date();
                        wakeTime.setHours(wakeTime.getHours() + 72);
                        write_to_html5_storage("b4g_forkie_snoozed_until_" + get_gmail_user(), wakeTime.toString());
                      }

                      function hide_forkie_dismissal_tooltip() {
                        $('.b4c-forkie-final-tooltip').remove();
                        $meetBtn.removeClass('b4c-meet-btn-pulse-border');

                        // Restore hover toolitp to Meet btn
                        $meetBtn.attr("data-tooltip", "Boomerang Meeting Scheduling");
                      }

                      function show_forkie_dismissal_tooltip() {
                        // Used by conversation and toolbar forkie variants to show a final prompt after "Don't show again" is clicked

                        var $finalForkieTooltipDiv = $(`
                          <div role='tooltip' class='b4c-forkie-final-tooltip'>
                            <p>
                              Boomerang meeting scheduling features will be right here whenever you need them!
                            </p>
                          </div>
                        `);

                        $holder.append($finalForkieTooltipDiv);
                        $meetBtn.addClass('b4c-meet-btn-pulse-border');

                        setTimeout($finalForkieTooltipDiv.position({of:$holder, my: "center bottom", at: "right top", offset: "0 -12"}));

                        // Disable Meet btn hover tooltip while dismissal tooltip is showing
                        $meetBtn.removeAttr("data-tooltip");

                        $finalForkieTooltipDiv.one('click', (e) => {
                          hide_forkie_dismissal_tooltip();
                          track_forkie_event(FORKIE_FINAL_TOOLTIP_DISMISS);
                        });
                        $meetBtn.one('click', (e) => {
                          hide_forkie_dismissal_tooltip();
                          track_forkie_event(FORKIE_FINAL_TOOLTIP_MEET_CLICKED);
                        });

                        stop_tracking_post_forkie_scheduling_feature_clicks();
                        initialize_tracking_post_dismissal_tooltip_scheduling_feature_clicks();
                      }

                      // Higher level of compose container, used to listen for clicks in scheduling features menu even after forkie has been dismissed
                      var $entireComposeContainer = $composeContainer.closest(".nH.Hd[role='dialog']");

                      // Logic for tracking scheduling feature clicks in the meet menu after the user has seen the forkie dismissal tooltip
                      function entire_compose_container_post_dismissal_tooltip_event_tracking_click_handler(e) {
                        var $clickTarget = $(e.target);
                        var $clickTargetAndParents = $clickTarget.parents().andSelf()
                        if ($clickTargetAndParents.filter(".bcal_menu_option").length > 0) {
                          // User has clicked a BCal features menu option
                          if ($clickTargetAndParents.filter("#bcal_menu_suggest_times_row").length > 0) {
                            // Suggest times clicked
                            track_forkie_event(FORKIE_FINAL_TOOLTIP_SUGGEST_TIMES_CLICKED);
                            stop_tracking_post_dismissal_tooltip_scheduling_feature_clicks();
                          } else if ($clickTargetAndParents.filter("#bcal_menu_share_free_busy_row").length > 0) {
                            // Share Free/Busy clicked
                            track_forkie_event(FORKIE_FINAL_TOOLTIP_FREE_BUSY_CLICKED);
                            stop_tracking_post_dismissal_tooltip_scheduling_feature_clicks();
                          } else if ($clickTargetAndParents.filter("#bcal_menu_bookable_calendar_event_row").length > 0) {
                            // Bookable clicked
                            track_forkie_event(FORKIE_FINAL_TOOLTIP_BOOKABLE_CLICKED);
                            stop_tracking_post_dismissal_tooltip_scheduling_feature_clicks();
                          }
                        }
                      }
                      function stop_tracking_post_dismissal_tooltip_scheduling_feature_clicks() {
                        $entireComposeContainer.unbind('click', entire_compose_container_post_dismissal_tooltip_event_tracking_click_handler);
                      }
                      function initialize_tracking_post_dismissal_tooltip_scheduling_feature_clicks() {
                        $entireComposeContainer.click(entire_compose_container_post_dismissal_tooltip_event_tracking_click_handler);
                      }

                      // Logic for tracking scheduling feature clicks in the meet menu after the user has seen forkie
                      var needToTrackMeetButtonClick = true;
                      function entire_compose_container_post_forkie_event_tracking_click_handler(e) {
                        var $clickTarget = $(e.target);
                        var $clickTargetAndParents = $clickTarget.parents().andSelf();
                        if ($clickTargetAndParents.filter(".bcal_menu_option").length > 0) {
                          // User has clicked a BCal features menu option
                          if ($clickTargetAndParents.filter("#bcal_menu_suggest_times_row").length > 0) {
                            // Suggest times clicked
                            track_forkie_event(FORKIE_CONVERSION_MEET_SUGGEST_TIMES);
                            stop_tracking_post_forkie_scheduling_feature_clicks();
                          } else if ($clickTargetAndParents.filter("#bcal_menu_share_free_busy_row").length > 0) {
                            // Share Free/Busy clicked
                            track_forkie_event(FORKIE_CONVERSION_MEET_FREE_BUSY);
                            stop_tracking_post_forkie_scheduling_feature_clicks();
                          } else if ($clickTargetAndParents.filter("#bcal_menu_bookable_calendar_event_row").length > 0) {
                            // Bookable clicked
                            track_forkie_event(FORKIE_CONVERSION_MEET_BOOKABLE);
                            stop_tracking_post_forkie_scheduling_feature_clicks();
                          }
                        } else if ($clickTargetAndParents.filter('.b4c-conversation-tooltip, .b4c-toolbar-tooltip, .b4c-suggested-times-BC-tooltip').length > 0) {
                          // Catch click events for other elements in forkie before they bubble up to the meet button.
                        } else if ($clickTargetAndParents.filter('.b4g-bcal-features-button-holder').length > 0 && needToTrackMeetButtonClick) {
                          track_forkie_event(FORKIE_CONVERSION_MEET);
                          needToTrackMeetButtonClick = false;
                        }

                      }
                      function stop_tracking_post_forkie_scheduling_feature_clicks() {
                        $entireComposeContainer.unbind('click', entire_compose_container_post_forkie_event_tracking_click_handler);
                      }
                      function initialize_tracking_post_forkie_scheduling_feature_clicks() {
                        $entireComposeContainer.click(entire_compose_container_post_forkie_event_tracking_click_handler);
                      }

                      function show_conversation_forkie() {
                        var $conversation_div = $(`
                          <div role='tooltip' class='b4c-conversation-tooltip'>
                            <img class="b4g-conversation-logo" src='https://b4g.baydin.com/site_media/calendar/img/conversation-forkie/boomerang.svg'/>
                            <div class="b4g-conversation-txt">
                              <p class='b4g-first-p'>
                                It looks like you're scheduling a meeting.
                              </p>
                              <p class='b4g-last-p'>
                                Boomerang can help:
                              </p>
                            </div>

                            <div class="b4g-conversation-option b4g-conversation-bookable">
                              <div class="b4g-conversation-option-icon"></div>
                              <div class="b4g-conversation-option-txt">
                                Set your availability and let them book a time
                              </div>
                            </div>

                            <div class="b4g-conversation-option b4g-conversation-suggest-times">
                              <div class="b4g-conversation-option-icon"></div>
                              <div class="b4g-conversation-option-txt">
                                Send specific times and let them choose one
                              </div>
                            </div>

                            <div class="b4g-conversation-option b4g-conversation-free-busy">
                              <div class="b4g-conversation-option-icon"></div>
                              <div class="b4g-conversation-option-txt">
                                Share when I'm free and let them propose a time
                              </div>
                            </div>

                            <div class="b4g-conversation-option b4g-conversation-exit">
                              <div class="b4g-conversation-option-icon"></div>
                              <div class="b4g-conversation-option-txt">
                                I don't want help
                              </div>
                            </div>

                          </div>
                        `);

                        var adjust_editable_area_for_conversation_forkie = function($composeContainer, showingTooltip) {
                          var CONVERSATION_FORKIE_TEXT_AREA_PADDING = 5;
                          var $textArea = $composeContainer.find(".Am.editable"),
                              $textAreaParent = $textArea.parent(),
                              $forkieTooltip = $(".b4c-conversation-tooltip");

                          if(showingTooltip) {
                            var maxWidth = $textAreaParent.width();
                            $textArea.css("width", maxWidth - $forkieTooltip.width() - CONVERSATION_FORKIE_TEXT_AREA_PADDING);
                          } else {
                            $textArea.css("width", "100%");
                          }
                        }

                        var hide_conversation_forkie = function() {
                          $conversation_div.animate({'opacity':0}, 1000);
                          setTimeout(function() {$conversation_div.remove();}, 1500);
                          setTimeout(() => {
                            adjust_editable_area_for_conversation_forkie($composeContainer, false);
                          });
                        };

                        var show_conversation_forkie_dismissal_menu = function() {
                          var $dismissal_menu = $(`
                            <div class='b4c-conversation-forkie-dismissal-menu'>
                              <div class="b4c-conversation-forkie-dismissal-menu-item b4c-conversation-forkie-remind">
                                <div class="b4g-conversation-forkie-dismissal-menu-item-txt">Remind me later</div>
                              </div>
                              <div class="b4c-conversation-forkie-dismissal-menu-item b4c-conversation-forkie-begone">
                                <div class="b4g-conversation-forkie-dismissal-menu-item-txt">Don't show this again</div>
                              </div>
                            </div>
                          `);

                          $conversation_div.append($dismissal_menu);

                          // Close dismissal menu on outside click:
                          $(frameDoc).click(function close_conversation_forkie_dismissal_menu_on_outside_click(e){
                            var target = get_target(e);
                            if ($(target).parents().andSelf()
                              .filter(".b4c-conversation-forkie-dismissal-menu, .b4g-conversation-exit").length === 0)
                            {
                              remove_conversation_forkie_dismissal_menu();
                              $(frameDoc).unbind('click', close_conversation_forkie_dismissal_menu_on_outside_click);
                            }
                          });
                        }

                        var remove_conversation_forkie_dismissal_menu = function() {
                          $('.b4c-conversation-forkie-dismissal-menu').remove();
                        }

                        var process_scheduling_btn_click_from_open_conversation_forkie = function() {
                          hide_conversation_forkie();
                          set_forkie_snooze_time();
                          // Unbind this handler
                          $meetBtn.unbind('click', process_scheduling_btn_click_from_open_conversation_forkie);
                        }

                        $conversation_div.click(function(e) {
                          var $target = $(e.target);
                          var $targetAndParents = $target.parents().andSelf();

                          if ($targetAndParents.hasClass('b4g-conversation-exit')) {
                            // X button pressed

                            if ($('.b4c-conversation-forkie-dismissal-menu').length > 0) {
                              // Dismiss the dismissal menu if it exists already
                              remove_conversation_forkie_dismissal_menu();
                              // GA event: BC forkie x menu closed
                              // track_forkie_event('BC Forkie x menu closed');

                            } else {
                              // show menu
                              show_conversation_forkie_dismissal_menu();
                              // GA event: BC forkie x menu opened
                              // track_forkie_event('BC Forkie x menu opened');
                            }

                          } else if ($targetAndParents.hasClass('b4c-conversation-forkie-remind')) {
                            // Remind btn clicked
                            hide_conversation_forkie();
                            set_forkie_snooze_time();
                            // GA event: BC forkie snoozed
                            track_forkie_event(FORKIE_SNOOZE_STRING);
                          } else if ($targetAndParents.hasClass('b4c-conversation-forkie-begone')) {
                            // Begone btn clicked
                            hide_conversation_forkie();
                            write_to_html5_storage('b4g_forkie_dismissed_' + get_gmail_user(), "true");
                            forkieIsDismissed = true;
                            mark_forkie_as_dismissed();
                            track_forkie_event(FORKIE_DISMISS_STRING);
                            show_forkie_dismissal_tooltip();
                          } else {
                            // Button for opening feature was clicked

                            // Range-fetching code copied from compose_dialog_toggle_bcal_features_menu
                            // Grab the current caret location/selection so we know where to append calendar content into the email later if necessary:
                            var $composeContainer = get_compose_container($target);
                            var $composeTextBody = get_compose_text_body($composeContainer);
                            $composeTextBody.focus();
                            var selection = document.getSelection();
                            var range;
                            if (selection === null || !$.contains($composeContainer, $(selection.anchorNode))) {
                              // We either didn't get a selection or the selection wasn't in the compose container.
                              // This is not expected to happen - since we focused on the $composeTextBody we should get the selection of the correct compose container.
                              // Fallback behavior - we'll insert content at the end of the current email:
                            } else {
                              range = selection.getRangeAt(0);
                            }

                            $composeTextBody.blur();

                            if ($targetAndParents.hasClass('b4g-conversation-suggest-times')) {
                              // Suggest times clicked

                              call_function_after_calendar_login(function() {
                                var suggestTimesWindow = display_suggest_times_screen($composeTextBody, range);

                                // Check if window was blocked: https://thewebdev.info/2022/04/28/how-to-detect-if-a-browser-is-blocking-a-popup-with-javascript/
                                // If window was blocked, open the meet menu
                                if (!suggestTimesWindow || suggestTimesWindow.closed || typeof suggestTimesWindow.closed == "undefined") {
                                  highlightingSuggestTimesFromForkie = true;
                                  $meetBtn.click();
                                }
                                // TODO: any handling for case where user declines to login/oauth?
                              }, false, null, false, false, false);

                              hide_conversation_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks();
                              track_forkie_event(FORKIE_CONVERSION_SUGGEST_TIMES);
                            } else if ($targetAndParents.hasClass('b4g-conversation-free-busy')) {
                              // Share Free/Busy clicked
                                // Set Share Free/Busy to auto open
                              $meetBtn.addClass('b4g-opening-share-free-busy-from-forkie');
                              $meetBtn.click();

                              hide_conversation_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks()
                              track_forkie_event(FORKIE_CONVERSION_FREE_BUSY);
                            } else if ($targetAndParents.hasClass('b4g-conversation-bookable')) {
                              // Bookable clicked

                              var guser = get_gmail_user();
                              var data = {"guser": guser};
                              data["includecsrf"] = "True";
                              $.ajax({
                                  url: "https://b4g.baydin.com/mailcruncher/checklogin2",
                                  data: data,
                                  type: "GET",
                                  xhr: xhr_with_credentials,
                                  success: function (data) {
                                      var status = data["status"];
                                      if (status == "success") {
                                        // Open meet menu and immediately auto-click bookable option
                                        highlightingBookableFromForkie = true;
                                        $meetBtn.addClass('b4g-opening-bookable-from-forkie');
                                        $meetBtn.click();
                                      } else {
                                        // Sign in with calendar permissions, then open meet menu and highlight bookable
                                        highlightingBookableFromForkie = true;
                                        $meetBtn.click();
                                      }
                                  },
                              });

                              hide_conversation_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks();
                              track_forkie_event(FORKIE_CONVERSION_BOOKABLE);
                            }
                          }
                        });

                        var $conversationContainer = $composeContainer.closest(".aaZ");
                        $conversationContainer.append($conversation_div);

                        setTimeout(() => {
                          adjust_editable_area_for_conversation_forkie($composeContainer, true)
                        });

                        // Track clicks on btn while forkie is showing
                        $meetBtn.click(process_scheduling_btn_click_from_open_conversation_forkie);

                        // Track clicks on scheduling feature buttons in meet menu
                        initialize_tracking_post_forkie_scheduling_feature_clicks();
                      }

                      function show_toolbar_forkie() {
                        var $toolbar_div = $(`
                          <div role='tooltip' class='b4c-toolbar-tooltip'>
                            <div class='b4c-toolbar-expansion-toggle b4c-clickable'>
                              <div class='b4c-toolbar-logo'>
                                <img src='https://b4g.baydin.com/site_media/calendar/img/toolbar-forkie/boomerang.svg'>
                              </div>
                              <div class='b4c-toolbar-title'>
                                <span class='b4c-toolbar-title-inner'>Schedule a meeting</span>
                              </div>
                            </div>

                            <div class='b4c-toolbar-features-section'>
                              <div class='b4c-toolbar-feature b4c-toolbar-suggest-times b4c-clickable'>
                                <div class='b4c-toolbar-feature-icon'>
                                  <img src='https://b4g.baydin.com/site_media/calendar/img/toolbar-forkie/btn_SuggestTimes.svg'>
                                </div>
                                <div class='b4c-toolbar-feature-text'>
                                  Suggest Times
                                </div>
                              </div>

                              <div class='b4c-toolbar-feature b4c-toolbar-free-busy b4c-clickable'>
                                <div class='b4c-toolbar-feature-icon'>
                                  <img src='https://b4g.baydin.com/site_media/calendar/img/toolbar-forkie/ico_ShareFreeBusy.svg'>
                                </div>
                                <div class='b4c-toolbar-feature-text'>
                                  Share Free/Busy
                                </div>
                              </div>

                              <div class='b4c-toolbar-feature b4c-toolbar-bookable b4c-clickable'>
                                <div class='b4c-toolbar-feature-icon'>
                                  <img src='https://b4g.baydin.com/site_media/calendar/img/toolbar-forkie/ico_BookableSchedule.svg'>
                                </div>
                                <div class='b4c-toolbar-feature-text'>
                                  Bookable Schedule
                                </div>
                              </div>
                            </div>

                            <div class='b4c-toolbar-x-btn b4c-clickable'>
                              <img src='https://b4g.baydin.com/site_media/calendar/img/toolbar-forkie/x-close.svg'>
                            </div>

                          </div>
                        `);

                        var toolbarAdjustmentInterval;

                        var adjust_editable_area_for_toolbar_forkie = function($composeContainer, showingToolbar) {
                          var TOOLBAR_BASE_HEIGHT_CONSTANT = 604;
                          var EXTRA_PADDING_FOR_FORMATTING_BAR = 88;
                          var $textArea = $composeContainer.find(".Am.editable"),
                              $textAreaParent = $textArea.parent(),
                              $forkieTooltip = $(".b4c-toolbar-tooltip");

                          var $expandedComposer = $textAreaParent.closest('.aoP.aoC.bvf');
                          var isExpandedComposer = $expandedComposer.length > 0;

                          if (showingToolbar) {
                            // Find formatting button and determine if it is active or not
                            var $formattingButton = $composeContainer.find('.oc.gU div[role="button"]');
                            if ($formattingButton.length > 0 && $formattingButton.attr('aria-expanded') === "true") {
                              // Formatting toolbar is showing
                              $forkieTooltip.addClass('b4c-show-above-format-bar');

                              if (isExpandedComposer) {
                                var expandedComposerHeight = $expandedComposer.outerHeight();
                                $textAreaParent.css("height", `${expandedComposerHeight - 384}px`);
                              } else {
                                $textAreaParent.css("height", TOOLBAR_BASE_HEIGHT_CONSTANT - EXTRA_PADDING_FOR_FORMATTING_BAR);
                              }
                            } else {
                              // Formatting bar is hidden
                              $forkieTooltip.removeClass('b4c-show-above-format-bar');

                              if (isExpandedComposer) {
                                var expandedComposerHeight = $expandedComposer.outerHeight();
                                $textAreaParent.css("height", `${expandedComposerHeight - 306}px`);
                              } else {
                                $textAreaParent.css("height", TOOLBAR_BASE_HEIGHT_CONSTANT);
                              }
                            }
                            $forkieTooltip.toggleClass('b4c-forkie-in-expanded-compose', isExpandedComposer);
                          } else {
                            $textAreaParent.css("height", "100%");
                          }
                        }

                        var hide_toolbar_forkie = function() {
                          $toolbar_div.animate({'opacity':0}, 1000);
                          setTimeout(function() {$toolbar_div.remove();}, 1500);
                          clearInterval(toolbarAdjustmentInterval);
                          setTimeout(() => {
                            adjust_editable_area_for_toolbar_forkie($composeContainer, false);
                          });
                        };

                        var show_toolbar_forkie_dismissal_menu = function() {
                          var $dismissal_menu = $(`
                            <div class='b4c-toolbar-dismissal-menu'>
                              <div class="b4c-toolbar-dismissal-menu-item b4c-toolbar-remind">
                                <div class="b4g-toolbar-dismissal-menu-item-txt">Remind me later</div>
                              </div>
                              <div class="b4c-toolbar-dismissal-menu-item b4c-toolbar-begone">
                                <div class="b4g-toolbar-dismissal-menu-item-txt">Don't show this again</div>
                              </div>
                            </div>
                          `);

                          $toolbar_div.append($dismissal_menu);

                          // Close dismissal menu on outside click:
                          $(frameDoc).click(function close_toolbar_forkie_dismissal_menu_on_outside_click(e){
                            var target = get_target(e);
                            if ($(target).parents().andSelf().filter(".b4c-toolbar-dismissal-menu, .b4c-toolbar-x-btn").length === 0)
                            {
                              remove_toolbar_forkie_dismissal_menu();
                              $(frameDoc).unbind('click', close_toolbar_forkie_dismissal_menu_on_outside_click);
                            }
                          });
                        }

                        var remove_toolbar_forkie_dismissal_menu = function() {
                          $('.b4c-toolbar-dismissal-menu').remove();
                        }

                        var process_scheduling_btn_click_from_open_toolbar_forkie = function() {
                          hide_toolbar_forkie();
                          set_forkie_snooze_time();
                          // Unbind this handler
                          $meetBtn.unbind('click', process_scheduling_btn_click_from_open_toolbar_forkie);
                        }

                        $toolbar_div.click(function(e) {
                          var $target = $(e.target);
                          var $targetAndParents = $target.parents().andSelf();

                          if ($targetAndParents.hasClass('b4c-toolbar-expansion-toggle')) {
                            $toolbar_div.toggleClass('b4c-toolbar-expanded');
                          } else if ($targetAndParents.hasClass('b4c-toolbar-x-btn')) {
                            // X button pressed

                            if ($('.b4c-toolbar-dismissal-menu').length > 0) {
                              // Dismiss the dismissal menu if it exists already
                              remove_toolbar_forkie_dismissal_menu();
                              // GA event: BC forkie x menu closed
                              // track_forkie_event('BC Forkie x menu closed');

                            } else {
                              // show menu
                              show_toolbar_forkie_dismissal_menu();
                              // GA event: BC forkie x menu opened
                              // track_forkie_event('BC Forkie x menu opened');
                            }

                          } else if ($targetAndParents.hasClass('b4c-toolbar-remind')) {
                            // Remind btn clicked
                            hide_toolbar_forkie();
                            set_forkie_snooze_time();
                            // GA event: toolbar forkie snoozed
                            track_forkie_event(FORKIE_SNOOZE_STRING);
                          } else if ($targetAndParents.hasClass('b4c-toolbar-begone')) {
                            // Begone btn clicked
                            hide_toolbar_forkie();
                            write_to_html5_storage('b4g_forkie_dismissed_' + get_gmail_user(), "true");
                            forkieIsDismissed = true;
                            mark_forkie_as_dismissed();
                            track_forkie_event(FORKIE_DISMISS_STRING);
                            show_forkie_dismissal_tooltip();
                          } else {
                            // Button for opening feature was clicked

                            // Range-fetching code copied from compose_dialog_toggle_bcal_features_menu
                            // Grab the current caret location/selection so we know where to append calendar content into the email later if necessary:
                            var $composeContainer = get_compose_container($target);
                            var $composeTextBody = get_compose_text_body($composeContainer);
                            $composeTextBody.focus();
                            var selection = document.getSelection();
                            var range;
                            if (selection === null || !$.contains($composeContainer, $(selection.anchorNode))) {
                              // We either didn't get a selection or the selection wasn't in the compose container.
                              // This is not expected to happen - since we focused on the $composeTextBody we should get the selection of the correct compose container.
                              // Fallback behavior - we'll insert content at the end of the current email:
                            } else {
                              range = selection.getRangeAt(0);
                            }

                            $composeTextBody.blur();

                            // Duplicated logic from conversation forkie:
                            if ($targetAndParents.hasClass('b4c-toolbar-suggest-times')) {
                              // Suggest times clicked

                              call_function_after_calendar_login(function() {
                                var suggestTimesWindow = display_suggest_times_screen($composeTextBody, range);

                                // Check if window was blocked: https://thewebdev.info/2022/04/28/how-to-detect-if-a-browser-is-blocking-a-popup-with-javascript/
                                // If window was blocked, open the meet menu
                                if (!suggestTimesWindow || suggestTimesWindow.closed || typeof suggestTimesWindow.closed == "undefined") {
                                  highlightingSuggestTimesFromForkie = true;
                                  $meetBtn.click();
                                }
                                // TODO: any handling for case where user declines to login/oauth?
                              }, false, null, false, false, false);

                              hide_toolbar_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks();
                              track_forkie_event(FORKIE_CONVERSION_SUGGEST_TIMES);
                            } else if ($targetAndParents.hasClass('b4c-toolbar-free-busy')) {
                              // Share Free/Busy clicked
                                // Set Share Free/Busy to auto open
                              $meetBtn.addClass('b4g-opening-share-free-busy-from-forkie');
                              $meetBtn.click();

                              hide_toolbar_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks();
                              track_forkie_event(FORKIE_CONVERSION_FREE_BUSY);
                            } else if ($targetAndParents.hasClass('b4c-toolbar-bookable')) {
                              // Bookable clicked

                              var guser = get_gmail_user();
                              var data = {"guser": guser};
                              data["includecsrf"] = "True";
                              $.ajax({
                                  url: "https://b4g.baydin.com/mailcruncher/checklogin2",
                                  data: data,
                                  type: "GET",
                                  xhr: xhr_with_credentials,
                                  success: function (data) {
                                      var status = data["status"];
                                      if (status == "success") {
                                        // Open meet menu and immediately auto-click bookable option
                                        highlightingBookableFromForkie = true;
                                        $meetBtn.addClass('b4g-opening-bookable-from-forkie');
                                        $meetBtn.click();
                                      } else {
                                        // Sign in with calendar permissions, then open meet menu and highlight bookable
                                        highlightingBookableFromForkie = true;
                                        $meetBtn.click();
                                      }
                                  },
                              });

                              hide_toolbar_forkie();
                              set_forkie_snooze_time();

                              stop_tracking_post_forkie_scheduling_feature_clicks();
                              track_forkie_event(FORKIE_CONVERSION_BOOKABLE);
                            }

                          }

                        });

                        var $conversationContainer = $composeContainer.closest(".aaZ");
                        $conversationContainer.append($toolbar_div);

                        setTimeout(() => {
                          toolbarAdjustmentInterval = setInterval(() => {
                            adjust_editable_area_for_toolbar_forkie($composeContainer, true);
                            if($toolbar_div.parents('html').length === 0) {
                              // If composer is closed (draft deleted or sent, etc.) without forkie dismissal first, remove the interval
                              clearInterval(toolbarAdjustmentInterval)
                            }
                          }, 1000);
                          adjust_editable_area_for_toolbar_forkie($composeContainer, true);  // Instantly make the first adjustment
                        });

                        // Track clicks on btn while forkie is showing
                        // Handler is unbound in process_scheduling_btn_click_from_open_toolbar_forkie
                        $meetBtn.click(process_scheduling_btn_click_from_open_toolbar_forkie);

                        // Track clicks on scheduling feature buttons in meet menu
                        initialize_tracking_post_forkie_scheduling_feature_clicks();
                      }

                      function show_business_casual_forkie() {
                        var $tooltip_div = $(`
                          <div role='tooltip' class='b4c-suggested-times-BC-tooltip'>
                            <img class="b4g-BC-logo" src='https://b4g.baydin.com/site_media/calendar/img/forkie/casual_boomerang.png' srcset='https://b4g.baydin.com/site_media/calendar/img/forkie/casual_boomerang@2x.png 2x'/>
                            <div class="b4g-BC-txt">Scheduling a meeting?</div>
                            <img class="b4g-BC-x" src='https://b4g.baydin.com/site_media/calendar/img/forkie/meet_close@2x.png'/>
                          </div>
                        `);

                        var hide_business_casual_discovery_tooltip = function(keepPulseBorder) {
                          $tooltip_div.animate({'opacity':0}, 1000);
                          setTimeout(function() {$tooltip_div.remove();}, 1500);
                          if (!keepPulseBorder) {
                            $meetBtn.removeClass('b4c-meet-btn-pulse-border');
                          }
                          // Restore hover toolitp to Meet btn
                          $meetBtn.attr("data-tooltip", "Boomerang Meeting Scheduling");
                        };

                        var show_business_casual_forkie_dismissal_menu = function() {
                          var $dismissal_menu = $(`
                            <div class='b4c-BC-dismissal-menu'>
                              <div class="b4c-BC-dismissal-menu-item b4c-BC-remind">
                                <div class="b4g-BC-dismissal-menu-item-txt">Remind me later</div>
                              </div>
                              <div class="b4c-BC-dismissal-menu-item b4c-BC-begone">
                                <div class="b4g-BC-dismissal-menu-item-txt">Don't show this again</div>
                              </div>
                            </div>
                          `);

                          $tooltip_div.append($dismissal_menu);

                          // Close dismissal menu on outside click:
                          $(frameDoc).click(function close_BC_forkie_dismissal_menu_on_outside_click(e){
                            var target = get_target(e);
                            if ($(target).parents().andSelf().filter(".b4c-BC-dismissal-menu, .b4g-BC-x").length === 0)
                            {
                              remove_business_casual_forkie_dismissal_menu();
                              $(frameDoc).unbind('click', close_BC_forkie_dismissal_menu_on_outside_click);
                            }
                          });
                        }

                        var remove_business_casual_forkie_dismissal_menu = function() {
                          $('.b4c-BC-dismissal-menu').remove();
                        }

                        var process_scheduling_btn_click_from_open_bc_forkie = function() {
                          hide_business_casual_discovery_tooltip();
                          set_forkie_snooze_time();
                          // Unbind this handler
                          $meetBtn.unbind('click', process_scheduling_btn_click_from_open_bc_forkie);
                        }

                        $tooltip_div.click(function(e) {
                          var $target = $(e.target);
                          if ($target.hasClass('b4g-BC-x')) {
                            // X button pressed

                            if ($('.b4c-BC-dismissal-menu').length > 0) {
                              // Dismiss the dismissal menu if it exists already
                              remove_business_casual_forkie_dismissal_menu();
                              // GA event: BC forkie x menu closed
                              // track_forkie_event('BC Forkie x menu closed');

                            } else {
                              // show menu
                              show_business_casual_forkie_dismissal_menu();
                              // GA event: BC forkie x menu opened
                              // track_forkie_event('BC Forkie x menu opened');
                            }
                          } else if ($target.hasClass('b4c-BC-remind')) {
                            // Remind btn clicked
                            hide_business_casual_discovery_tooltip();
                            set_forkie_snooze_time();
                            // GA event: forkie snoozed
                            track_forkie_event(FORKIE_SNOOZE_STRING);
                          } else if ($target.hasClass('b4c-BC-begone')) {
                            // Begone btn clicked
                            hide_business_casual_discovery_tooltip();
                            write_to_html5_storage('b4g_forkie_dismissed_' + get_gmail_user(), "true");
                            forkieIsDismissed = true;
                            mark_forkie_as_dismissed();
                            // GA event: BC forkie dismissed permanently
                            track_forkie_event(FORKIE_DISMISS_STRING);
                          } else {
                            // Show scheduling features
                            hide_business_casual_discovery_tooltip(true);  // True keeps the pulse border
                            needToTrackMeetButtonClick = false; // Prevent counting the automated meet button click
                            $composeContainer.find('.b4g-bcal-features-button').click();
                            setTimeout(function() {
                              // Remove pulse border after delay
                              $meetBtn.removeClass('b4c-meet-btn-pulse-border');
                            }, 6000);
                            set_forkie_snooze_time();
                            // GA event: BC forkie BCal opened; label is trigger phrase
                            track_forkie_event(FORKIE_CONVERSION_SCHEDULING_MEETING_TOOLTIP);
                          }
                        });


                        var $holder = $composeContainer.find(".b4g-bcal-features-button-holder");
                        $holder.prepend($tooltip_div);
                        $tooltip_div.position({of:$meetBtn, my: "center bottom", at: "center top", offset: "0 -10"});
                        $tooltip_div.animate({'opacity':1}, 300);
                        $meetBtn.addClass('b4c-meet-btn-pulse-border');
                        // Track clicks on btn after forkie shown
                        $meetBtn.click(process_scheduling_btn_click_from_open_bc_forkie);
                        initialize_tracking_post_forkie_scheduling_feature_clicks();
                        // Disable Meet btn hover tooltip while forkie is showing
                        $meetBtn.removeAttr("data-tooltip");

                      }

                      if (is_email_meter_shown()) {
                        hide_email_meter();
                      }

                      if (forkieVariant === FORKIE_SIDEBAR_STRING) {
                        if (isEligibleForForkieEventTrack($composeContainer)) show_conversation_forkie();
                      } else if (forkieVariant === FORKIE_BUTTON_STRING) {
                        if (isEligibleForForkieEventTrack($composeContainer)) show_toolbar_forkie();
                      } else {
                        show_business_casual_forkie();
                      }

                      // GA event: forkie shown
                      track_forkie_event(FORKIE_SHOW_STRING);

                      forkieShownThisSession = true;

                    }

                  }

                  resultPromise.then(function (result) {
                    // Forkie has been dismissed, so do nothing. Local storage values have been updated
                  }, function(rejection) {
                    // Forkie has not beem dismissed, so we can display forkie
                    displayForkieVariantIfNecessary();
                  });

                }
                $webworkerComposeContainer = $this;
              }, 500);
          });
          $composeContainer.trigger("EMAIL_METER_EVENT");
          $composeContainer.data("emailMeterGauge", emailMeterGauge);
        }

        $composeContainer.find(".em-email-meter-gauge");

        autoActivateRespondableFTUEIfNecessary($composeContainer);
    }
    var mark_forkie_as_dismissed = function() {
      $.ajax({
        url: "https://b4g.baydin.com/mailcruncher/markforkieasdismissed",
        type: "POST",
        data: {},
        xhr: xhr_with_credentials,
      });
    }
    var autoActivateRespondableFTUEIfNecessary = function($composeContainer) {
      // We want to show a Respondable announcement tooltip that can open the Respondable FTUE if the following conditions are true:
      //   The user hasn't seen the Respondable announcement tooltip yet. (this value lives in local storage only)
      //   The user hasn't seen the Respondable FTUE yet. (value checked from local storage, which is updated upon a call to /checklogin2)
      //   The user has seen the read receipt announcement tooltip already. (checked from local storage)
      //   The user wasn't shown a read receipt or respondable announcement tooltip during this instance of the bookmarklet script (e.g. they've reloaded Gmail since automatically being shown either of these announcements)
      //   A 1-in-20 chance succeeds

      if (read_from_html5_storage("b4g-has-seen-respondable-announcement") === "true") { return; }

      if (has_seen_respondable_ftue()) {
        // If we've seen the FTUE already, we can mark the announcement as seen
        write_to_html5_storage("b4g-has-seen-respondable-announcement", true);
        return;
      }

      if (read_from_html5_storage("b4g-has-seen-click-open-tracking-announcement") !== "true") { return; }

      if (trackingAnnouncementShownDuringThisSession === true  ||
        respondableAnnouncementShownDuringThisSession === true) { return; }

      // Edge case for if /hasseentrackingannouncement request is pending:
      if (show_click_open_tracking_announcement.requestInFlight === true) { return; }

      var randomNumberBetweenZeroAndTwenty = Math.random() * 20;
      if (randomNumberBetweenZeroAndTwenty > 1) {
        return;
      }

      var guser = get_gmail_user();

      if (guser) {

        // If we get to here, we want to show the Respondable announcement tooltip and then auto-open the FTUE if needed:
        // Note: specificallyCheckedValue is the specific announcement/ftue we are concerned with checking now (an optional param)
        // If the user hasn't seen the specified announcement/ftue, the server will let us know but will also update the stored value so that the user won't see the announcement/ftue again
        $.ajax({
          method: "GET",
          url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
          data: {
            "guser": get_gmail_user(),
            "specificallyCheckedValue": "hasSeenRespondableAnnouncementTooltip",
          },
          xhr: xhr_with_credentials,
          success: function(response) {
            if (response.status === "success") {
              if (response.hasSeenRespondableAnnouncementTooltip === false) {
                display_respondable_ftue_tooltip($composeContainer);
                track_event(["respondable", "announcement-tooltip", "displayed-for-signed-in-user"]);
                // Now that we've displayed the tooltip, update the response value
                // before we pass it to updateAnnouncementAndFTUEStates
                response.hasSeenRespondableAnnouncementTooltip = true;
              }
              // Update local storage states for all announcements and FTUEs
              updateAnnouncementAndFTUEStates(response);

            } else if (response.showCurrentAnnouncementOrFTUE === true) {
              // The user does not exist in the database.  Show the Respondable tooltip anyway.
              display_respondable_ftue_tooltip($composeContainer);
              track_event(["respondable", "announcement-tooltip", "displayed-for-signed-out-user"]);
            }
          }

        });
      }
    }
    var display_respondable_ftue_tooltip = function($composeContainer) {
      var autoActivateRespondableFTUE = function($composeContainer) {
        call_function_after_logged_in(function() {
          $activeComposeContainer = $composeContainer;
          show_respondable_ftue($composeContainer);
        });
      }

      var respondableAnnouncementContent =
      '<div id="b4g-respondable-announcement">' +
        '<div id="b4g-respondable-announcement-close-btn"><img src="' + B4G_STATIC_FILES_DIRECTORY + 'delete.png"></div>' +
        '<h3>Did you know?</h3>' +
        '<p>Respondable can help you write better emails with actionable, real-time advice powered by artificial intelligence.</p>' +
      '</div>';

      var $currentEmailMeter = $(".em-email-meter-gauge", $composeContainer);
      var offset = $currentEmailMeter.offset()

      show_FTUE_tooltip({
        bottom: $("body").height() - offset.top + 2,
        right: $("body").width() - (offset.left + $currentEmailMeter.outerWidth() / 2) - 24,
        content: $(respondableAnnouncementContent),
        close: function() { autoActivateRespondableFTUE($composeContainer); },
        button: "Learn More"
      });

      $('#b4g-respondable-announcement-close-btn').click(function(e){
        e.preventDefault();
        $('#b4g-respondable-announcement').closest('.b4g-tooltip-ftue').remove();
      });

      respondableAnnouncementShownDuringThisSession = true;
      write_to_html5_storage("b4g-has-seen-respondable-announcement", true);
    }
    var toggle_email_meter = function() {
        if (is_email_meter_shown()) {
            hide_email_meter();
        }
        else {
            var planBeforeLogin = get_cached_plan();
            var advancedPreferencesBeforeLogin = advanced_respondable_should_be_activated();
            call_function_after_logged_in(function() {
                if (!has_seen_respondable_ftue()){
                    show_respondable_ftue($activeComposeContainer);
                }
                else {
                    show_email_meter();

                    // Edge case: if the user has upgraded/downgraded since we've initialized our slider widgets,
                    // OR if this is the browser's first time using Boomerang (no cache), we need to reset the enabled status of the widgets
                    var planAfterLogin = get_cached_plan();
                    var advancedPreferencesAfterLogin = advanced_respondable_should_be_activated();
                    if (planBeforeLogin != planAfterLogin || advancedPreferencesBeforeLogin != advancedPreferencesAfterLogin) {
                        reenable_slider_widgets_after_plan_change($activeComposeContainer);
                    }
                }
            }.bind(this));
        }
    }
    var show_respondable_ftue = function($composeContainer) {
        if ($composeContainer.data("hasSeenFtueThisSession")) {
            return; // workaround for double-clicks accidentally showing multiple FTUEs. TODO: figure out better solution for authenticated respondable clicks in the general case
        }
        else {
            $composeContainer.data("hasSeenFtueThisSession", true);
        }

        // TODO: Probably a good candidate to use Javascript promises for readability
        // 0. Mark FTUE as seen
        // 1. Non-english instructions
        // 2. FTUE flow
        // 3. Consent screen (if necessary)
        // 4. Finally... display Respondable

        var initialFtueValues = {
          sliders: {
            subjectLength: 1,
            wordCount: 140,
            fleschKincaidGradeLevel: 9,
            questionCount: 1,
            emailSentiment: .15,
            politeness: 75,
            subjectivity: .35
          },
          grade: 4, // likely
          score: 4
        };

        function mark_respondable_as_seen() {
            $.ajax({
                url: "https://b4g.baydin.com/mailcruncher/respondableftueseen",
                type: "POST",
                xhr: xhr_with_credentials,
            });
        }
        function non_english_flow(try_anyway_callback) {
            show_non_english_respondable_dialog(turn_off_respondable, try_anyway_callback);
        }

        function ftue_flow(callback) {
            ignoreEmailEvents = true;
            var defaultButtons = [
              { text: "Skip", action: "skip" },
              { text: "Next", action: "next", "class": "em-btn-primary" }
            ];
            var previousOptions = {};

            // ensure needed elements have been initialized
            initialize_b4g_slider_widgets($composeContainer);
            var $expandedView = get_expanded_view($composeContainer);
            $expandedView.addClass("em-ftue");
            var $upgradeLink = $expandedView.find(".em-upgrade-link");

            var isPopOut = is_pop_out_window($composeContainer);
            var isPopIn = is_pop_in_window();
            var isThreadView = is_threaded_view($composeContainer);
            var emailMeterGauge = $composeContainer.data("emailMeterGauge");
            var respondableGrade = $composeContainer.data("respondableGrade");
            var sliders = $composeContainer.data("sliderWidgets");
            var ftue = new RespondableFTUE({
              steps: [{
                title: "Meet Respondable!",
                description: "Respondable helps you write better emails with actionable, real-time advice powered by artificial intelligence.",
                "class": "em-ftue-welcome",
                buttons: [
                  { text: "Skip", action: "skip" },
                  { text: "Learn More", action: "next", "class": "em-btn-primary" },
                  { text: "Disable Respondable", action: "disable", "class": "em-btn-aside" }
                ],
                beforeShow: function() {
                  show_email_meter();

                  $expandedView.get(0).scrollIntoView();
                  $upgradeLink.hide();
                  $expandedView.find(".em-error-msg").remove();

                  $.each(initialFtueValues.sliders, function(attribute, value) {
                    // TODO: Should probably also save the previous values
                    previousOptions[attribute] = { enabled: sliders[attribute].enabled, locked: sliders[attribute].locked};
                    sliders[attribute].updateOptions({
                      clickEventsEnabled: false,
                      enabled: true,
                      locked: false
                    });
                    sliders[attribute].update(value);
                  });
                  respondableGrade.update(initialFtueValues.grade);
                  emailMeterGauge.update(initialFtueValues.score);

                  // The email meter is on a different layering context, so
                  // we need to clone it to create the highlighting effect.
                  var $originalGauge = emailMeterGauge.$el.closest(".em-email-meter-gauge");
                  if (which_gmail() === NEW_GMAIL) {
                    var $emailMeterClone = $originalGauge.clone();
                    $emailMeterClone.addClass("em-ftue-gauge");
                    $emailMeterClone.addClass("em-ftue-gauge-new-ui");
                    $emailMeterClone.addClass("em-ftue");
                  } else {
                    var $emailMeterClone = $originalGauge.clone().addClass("em-ftue-gauge").css({"z-index": 10, "position": "absolute"});
                  }
                  var $cloneContainer = $composeContainer;
                  if (which_gmail()===NEW_GMAIL && isThreadView) {
                    $emailMeterClone.addClass("em-thread-view-new-ui");

                  } else if (which_gmail()===NEW_GMAIL && isPopOut) {
                    $emailMeterClone.css({"bottom": "5px", "right": "22px"});
                    $cloneContainer = $("body");

                  } else if (which_gmail()===NEW_GMAIL && isPopIn) {
                    $emailMeterClone.addClass("em-popin-view-new-ui");
                  } else {
                    // Old Gmail behavior
                    if(isThreadView || isPopOut) {
                      $emailMeterClone.css("bottom", 5);
                      if(!isThreadView) {
                        $cloneContainer = $("body");
                      }
                    }
                  }
                  $emailMeterClone.appendTo($cloneContainer);
                }
              },
              {
                description: "Get an instant prediction of how likely your message is to get a response, backed by machine learning trained on millions of messages.",
                buttons: defaultButtons,
                "class": "ftue-highlight-grade",
                beforeShow: function() { $expandedView.addClass("ftue-highlight-grade") },
                beforeHide: function() { $expandedView.removeClass("ftue-highlight-grade") },
                pointerType: "arrow",
                $target: respondableGrade.$el.closest(".em-grade-container")
              },
              {
                description: "As you write, see how each parameter contributes to the effectiveness of your email.",
                buttons: defaultButtons,
                "class": "ftue-highlight-meters",
                beforeShow: function() { $expandedView.addClass("ftue-highlight-meters") },
                beforeHide: function() { $expandedView.removeClass("ftue-highlight-meters") },
                pointerType: "bracket",
                $target: $expandedView.find(".email-meters").first()
              },
              {
                description: "Get an explanation and advice on how to improve each parameter by clicking on the number.",
                buttons: defaultButtons,
                "class": "ftue-highlight-one-meter",
                beforeShow: function() {
                  $expandedView.addClass("ftue-highlight-one-meter")
                  sliders["fleschKincaidGradeLevel"].$el.bind("click.ftue", ftue.next.bind(ftue));
                },
                beforeHide: function() {
                  $expandedView.removeClass("ftue-highlight-one-meter");
                  sliders["fleschKincaidGradeLevel"].$el.unbind("click.ftue");
                },
                pointerType: "arrow",
                $target: sliders["fleschKincaidGradeLevel"].$el
              },
              {
                /* hacky way to get the button text to display below the dialog */
                description: "<div style='width: 382px; height: 348px; margin-left: -10px;'></div>",
                buttons: [{ text: "Got it!", action: "next", "class": "em-btn-primary" }],
                "class": "ftue-dialog",
                beforeShow: function() {
                  sliders["fleschKincaidGradeLevel"].openDialogWindow(ftue.next.bind(ftue));
                  ftue.$overlay.css("z-index", 200);
                },
                beforeHide: function() {
                  sliders["fleschKincaidGradeLevel"].removeDialogWindow();
                  ftue.$overlay.css("z-index", 5);
                }
              },
              {
                description: "If you're on a Pro or Premium plan, you'll get access to these advanced machine learning features.",
                buttons: [{text: "Done", action: "next", "class": "em-btn-primary"}],
                "class": "ftue-highlight-premium",
                beforeShow: function() {
                  $expandedView.addClass("ftue-highlight-premium")
                  $expandedView.find(".email-meter-display-inner").get(0).scrollTop = 1000; // scroll to bottom; number is arbitrary
                },
                beforeHide: function() { $expandedView.removeClass("ftue-highlight-premium") },
                pointerType: "bracket",
                $target: $expandedView.find(".email-meters.em-locked")
              }],
              $container: isThreadView || isPopOut ? $("body") : $composeContainer.parent(),
              // for positioning text and pointers. TODO: Shouldn't be needed?
              $positioningContext: isThreadView || isPopOut ? $("body") : $composeContainer.closest(".nH.Hd"),
              cleanup: function() {
                ignoreEmailEvents = false;
                $upgradeLink.show();
                $.each(sliders, function(attribute, $slider) {
                  emailMeterGauge.update(0);
                  $slider.update(0);
                  $slider.updateOptions({
                    clickEventsEnabled: true,
                    enabled: previousOptions[attribute].enabled,
                    locked: previousOptions[attribute].locked
                  });
                });
                hide_email_meter($composeContainer);

                $(".em-ftue-gauge").remove();
                $expandedView.removeClass("em-ftue");
              },
              completedCallback: callback,
              disabledCallback: turn_off_respondable,
            });
            ftue.start();
        }

        var needToShowNonEnglish = get_gmail_language() == "Other";
        var needToShowConsentScreen = !has_consented_to_advanced_respondable() && is_on_premium_respondable_plan();

        mark_respondable_as_seen();
        if (needToShowNonEnglish) {
            non_english_flow(function() {
                ftue_flow(function() {
                    if (needToShowConsentScreen) {
                        consent_screen_flow(function() {
                            show_email_meter();
                            reenable_slider_widgets_after_plan_change($activeComposeContainer);
                        });
                    }
                    else {
                        show_email_meter();
                        reenable_slider_widgets_after_plan_change($activeComposeContainer);
                    }
                });
            });
        }
        else {
            ftue_flow(function() {
                if (needToShowConsentScreen) {
                        consent_screen_flow(function() {
                            show_email_meter();
                            reenable_slider_widgets_after_plan_change($activeComposeContainer);
                        });
                }
                else {
                    show_email_meter();
                    reenable_slider_widgets_after_plan_change($activeComposeContainer);
                }
            });
        }
    }

    function consent_screen_flow(callback) {
        show_consent_dialog(function() {
            $.ajax({
                type: "post",
                url: "https://b4g.baydin.com/mailcruncher/respondableconsent",
                xhr: xhr_with_credentials,
                success: function(data) {
                    var status = data["status"];
                    var message = data["message"];
                    if (status == "error") {
                        show_dialog(message);
                    }
                    sync_preferences_with_server(function(){
                        callback();
                    })
                }
            });
        }, function() {
            callback();
        });
    }

    var reenable_slider_widgets_after_plan_change = function($composeContainer) {
        var advancedWidgetsEnabled = advanced_respondable_should_be_activated();
        var advancedWidgetsLocked = !advanced_respondable_should_be_activated() && !is_on_premium_respondable_plan();
        var sliderWidgets = $composeContainer.data("sliderWidgets");
        var expandedView = $composeContainer.data("$expandedView");
        sliderWidgets.emailSentiment.updateOptions({"enabled": advancedWidgetsEnabled, "locked": advancedWidgetsLocked});
        sliderWidgets.politeness.updateOptions({"enabled": advancedWidgetsEnabled, "locked": advancedWidgetsLocked});
        sliderWidgets.subjectivity.updateOptions({"enabled": advancedWidgetsEnabled, "locked": advancedWidgetsLocked});
        expandedView.find(".em-upgrade-link").toggle(!advancedWidgetsEnabled);
        $composeContainer.trigger("EMAIL_METER_EVENT");
    }

    var toggle_the_active_compose_container = function($composeContainer) {
        $activeComposeContainer = $composeContainer;
        toggle_email_meter();
    }

    var render_slider_widgets = function($composeContainer) {
      var sliderWidgets = $composeContainer.data("sliderWidgets") || {};
      Object.keys(sliderWidgets).forEach(function(name) {
        sliderWidgets[name].render();
      }, this);
    }

    var initialize_b4g_slider_widgets = function($composeContainer) {
      // Initialize elements
      get_expanded_view($composeContainer);

      var existingSliderWidgets = $composeContainer.data("sliderWidgets");
      if(existingSliderWidgets && !$.isEmptyObject(existingSliderWidgets)) {
        return;
      }

      var $dialogContainer = is_a_reply($composeContainer) ? $("body") : $composeContainer.parent();
      var sliderWidgets = initialize_slider_widgets({}, {
        context: $composeContainer.data("$expandedView"),
        $dialogContainer: $dialogContainer,
        isReply: is_a_reply($composeContainer),
        plan: get_cached_plan(),
        showPremiumSliders: true
      });

      $composeContainer.data("sliderWidgets", sliderWidgets);
    }

    var get_word_count_options = function(wordCount, prevWordCount) {
      var MAX_SLIDER_VALUE = 2050;
      var breakpoints = {
        BAD_LOWER: 8,
        OK_LOWER: 30,
        GOOD_LOWER: 50,
        BEST: 250,
        GOOD_UPPER: 1250,
        OK_UPPER: 2000
      }
      var initOptimalRange = [50, 250];

      var maxValue = Math.floor(Math.max(255, Math.min(MAX_SLIDER_VALUE, wordCount + 125)));
      var minValue = Math.floor(Math.max(0, Math.min(1800, wordCount - 125)) - Math.max(0, Math.floor(wordCount / 20)));
      var remainder = maxValue - minValue;
      var codingRanges;
      if(wordCount > 1250) {
        var badRange = Math.max(5, maxValue - breakpoints.OK_UPPER);
        var bestRange = Math.max(20, breakpoints.GOOD_UPPER - minValue - 1);
        var okRange = Math.floor(remainder - bestRange - badRange);
        codingRanges = [0, 0, 0, 0, bestRange, 0, 0, okRange, badRange];
      } else {
        var minOKRange = 10;
        var badLower = Math.max(breakpoints.BAD_LOWER - minValue, 0);
        var okLower = Math.max(breakpoints.OK_LOWER - badLower - minValue, 0);
        var goodLower = Math.max(breakpoints.GOOD_LOWER - okLower - badLower - minValue, 0);
        var best = Math.max(breakpoints.BEST - goodLower - okLower - badLower - minValue, 20);
        var badUpper = maxValue > 1250 ? Math.floor(wordCount / 50) : 0;

        remainder -= badLower + okLower + goodLower + best + badUpper;

        var goodUpper = Math.max(Math.min(breakpoints.GOOD_UPPER - minValue, remainder), 0);
        var okUpper =remainder - goodUpper;

        var bestLow, bestHigh;
        if(wordCount < breakpoints.BEST) {
          bestLow = best - 10;
          bestHigh = 10;
        } else {
          bestLow = bestHigh = best / 2;
        }
        codingRanges = [badLower, okLower, goodLower, bestLow, bestHigh, goodUpper, 0, okUpper, 0];
      }

      var maxOptimalRange = codingRanges.slice(4).reduce(function(a,b) { return a+b }) + minValue;
      var optimalRangeMax = breakpoints.BEST;
      if(minValue + 40 > breakpoints.BEST) {
        // use an artificial optimal range if the minValue + threshold > the real optimal range
        optimalRangeMax = wordCount < breakpoints.GOOD_UPPER ? minValue + 40 : minValue + 10;
      }

      var values =  {
        minValue: minValue,
        maxValue: maxValue,
        codings: [{ range: codingRanges[0], ordinal: SLIDER_ORDINAL.BAD },
          { range: codingRanges[1], ordinal: SLIDER_ORDINAL.OK },
          { range: codingRanges[2], ordinal: SLIDER_ORDINAL.GOOD },
          { range: codingRanges[3], ordinal: SLIDER_ORDINAL.BEST },
          { range: codingRanges[4], ordinal: SLIDER_ORDINAL.BEST },
          { range: codingRanges[5], ordinal: SLIDER_ORDINAL.GOOD },
          { range: codingRanges[6], ordinal: SLIDER_ORDINAL.OK },
          { range: codingRanges[7], ordinal: SLIDER_ORDINAL.OK },
          { range: codingRanges[8], ordinal: SLIDER_ORDINAL.BAD }],
        optimalRanges: [[breakpoints.GOOD_LOWER, optimalRangeMax]]
      };
      return values;
    }

    var SLIDER_ORDINAL = {
      BAD: 0,
      OK: 1,
      GOOD: 2,
      BEST: 3
    };

    /**
     * Initialize slider widgets with appropriate values.
     * @param {object} sliderWidgets Object to be populated with initialized widgets
     * @param {JQuery} [options.context] The element that represents the currect context
     * @param {JQuery} options.$dialogContainer Parent element of the dialog
     * @param {boolean} options.isReply
     * @param {String} options.plan
     * @param {String} options.showPremiumSliders
     */
     var initialize_slider_widgets = function(sliderWidgets, options) {
       sliderWidgets = sliderWidgets || {};
       var context = options.context || $("body");
       var baseDialogOptions = { $dialogContainer: options.$dialogContainer, description: "" };
       var userPlan = options.plan;
       var isReply = !!options.isReply;

       var wordCountOptions = get_word_count_options(0, 0);

       // display different dialog text if this message is a reply
       var subjectDialogOptions = {
         description: "Make sure you include a subject in your email if you want to get a response! Messages without subjects only receive responses 14% of the time. But don't get too wordy: emails are increasingly opened on mobile devices, where long subjects get cut off, so <strong>3-7 word subject lines are most effective.</strong>",
         prescriptionMap: function() { return "This is a reply message." }
       };

       if(!isReply) {
         $.extend(subjectDialogOptions, {
           prescriptionMap: function(value) {
             if(value > 7)  return "Consider shortening your subject line.";
             if(value >= 2) return "None. Your subject line is a good length.";
             if(value > 0)  return "Consider a longer subject line.";
             return "You should include a subject line.";
           }
         })
       } else {
         $.extend(subjectDialogOptions, {
           dialogClass: "em-is-reply",
           subtitle: "Since you don't control the subject length of this message, it's not applicable."
         })
       }

       sliderWidgets["subjectLength"] = sliderWidgets["subjectLength"] || new EMSliderWidget({
         name: "Subject Length",
         minValue: 0,
         maxValue: 12.1,
         optimalRanges: [[2,6]],
         codings: [{ range: 1, ordinal: SLIDER_ORDINAL.BAD },
           { range: 1, ordinal: SLIDER_ORDINAL.OK },
           { range: 5, ordinal: SLIDER_ORDINAL.BEST },
           { range: 1, ordinal: SLIDER_ORDINAL.GOOD },
           { range: 4, ordinal: SLIDER_ORDINAL.OK },
           { range: 0, ordinal: SLIDER_ORDINAL.BAD }
         ],
         dialogOptions: $.extend({}, baseDialogOptions, subjectDialogOptions),
         context: context,
         parentSelector: ".email_meter_subject"
       });
       sliderWidgets["subjectLength"].$el.toggleClass("em-is-reply", isReply);

       sliderWidgets["wordCount"] = sliderWidgets["wordCount"] || new EMSliderWidget({
         name: "Word Count",
         codings: wordCountOptions.codings,
         optimalRanges: wordCountOptions.optimalRanges,
         transformOptimalRangeLabel: function(label) { return "50-250" },
         minValue: 0,
         maxValue: wordCountOptions.maxValue,
         beforeUpdate: function(value, prevValue, slider) {
           var options = {};
           options.dialogOptions = {
             dialogClass: value < 200 ? "low-word-count-dialog" : ""
           }

           if(value > 125 || prevValue > 125) {
             slider.updateOptions($.extend(options, get_word_count_options(value, prevValue)));
           }
         },
         dialogOptions: $.extend({}, baseDialogOptions, {
           description: "If you want a response, <strong>aim for a message length of 50-125 words</strong>. It's hard to politely make a request, express urgency, and open/close an email in less than 50 words. Going over 125 words only has a tiny impact on your response rate, but as you approach a Tolstoy novel (1500 or more words), response rates drop off.",
           prescriptionMap: function(value) {
             if(value > 2000) return "This email is very long. Consider breaking it up.";
             if(value > 250)  return "Message length is OK. Shorter might be better.";
             if(value > 50)   return "None. Your message is a good length.";
             if(value > 0)    return "Consider writing a longer message.";
             return "This email is blank!";
           },
           dialogClass: "word-count-dialog"
         }),
         context: context,
         parentSelector: ".email_meter_word_count"
       });
       sliderWidgets["questionCount"] = sliderWidgets["questionCount"] || new EMSliderWidget({
         name: "Question Count",
         minValue: 0,
         maxValue: 20.1,
         optimalRanges: [[1, 5]],
         codings: [{ range: 1, ordinal: SLIDER_ORDINAL.BAD },
           { range: 2, ordinal: SLIDER_ORDINAL.BEST },
           { range: 1, ordinal: SLIDER_ORDINAL.BEST },
           { range: 4, ordinal: SLIDER_ORDINAL.GOOD },
           { range: 12, ordinal: SLIDER_ORDINAL.OK },
           { range: 0, ordinal: SLIDER_ORDINAL.BAD }],
         dialogOptions: $.extend({}, baseDialogOptions, {
           description: "If you want a response to your email, give the recipient a question to answer. <strong>Asking 1-3 questions in your email gives you the best chance</strong> of getting a response. Don't overwhelm your recipient though: <strong>as you ask more (4+) questions, response rates start to decline</strong>.",
           prescriptionMap: function(value) {
             if(value > 5) return "Consider asking less questions, or sending multiple emails.";
             if(value > 0)  return "None. Your email contains an optimal number of questions.";
             return "Consider asking a question.";
           }
         }),
         context: context,
         parentSelector: ".email_meter_question_count"
       });
       sliderWidgets["fleschKincaidGradeLevel"] = sliderWidgets["fleschKincaidGradeLevel"] || new EMSliderWidget({
         name: "Reading Level",
         minValue: -1,
         maxValue: 12.1,
         initialValue: 6,
         optimalRanges: [[1, 7]],
         displayedValueMap: function(value) {
           if(!isFinite(value)) return "--";
           if(value < 1) return "K";
           if(value > 12) return "12+";
           return value;
         },
         codings: [{ range: 1, ordinal: SLIDER_ORDINAL.BAD }, // < 0
           { range: 1, ordinal: SLIDER_ORDINAL.OK },        // [0, 1)
           { range: 5, ordinal: SLIDER_ORDINAL.BEST },        // [1, 6)
           { range: 3, ordinal: SLIDER_ORDINAL.GOOD },      // [6, 9)
           { range: 3, ordinal: SLIDER_ORDINAL.OK },        // [9, 12)
           { range: 0, ordinal: SLIDER_ORDINAL.BAD }],        // >= 12
         dialogOptions: $.extend({}, baseDialogOptions, {
           description: "Reading grade level provides an estimate of how complex your writing is. Surprisingly, <strong>emails written at a 3rd grade reading level</strong> (i.e. emails that could be understood by someone with a 3rd grade education) <strong>are most likely to get a response.</strong> Simpler words and shorter sentences yield a lower reading grade level.",
           prescriptionMap: function(value, slider) {
             if(value === "not enough data") return "The email is not long enough to calculate reading level.";
             if(!isFinite(value)) return "We couldn't calculate grade level for this message.";
             if(value > 7) return "Consider using simpler words and sentences.";
             if(value >= 1)  return "None. Your writing style makes it easy to read and respond.";
             return "Consider using more sophisticated language.";
           }
         }),
         context: context,
         parentSelector: ".email_meter_flesch_kincaid"
       });
       if(options.showPremiumSliders) {
         sliderWidgets["emailSentiment"] = sliderWidgets["emailSentiment"] || new EMSliderWidget({
           name: "Positivity",
           minValue: -100,
           maxValue: 100,
           enabled: advanced_respondable_should_be_activated(),
           locked: !advanced_respondable_should_be_activated() && !is_on_premium_respondable_plan(),
           currentValue: 0,
           optimalRanges: [[-50, -10], [10, 70]],
           transformOptimalRangeLabel: function(label) { return label.replace("&ndash;", " to ") },
           valueMap: function(value) {
             if(!isFinite(value)) return value;
             return Math.round(value * 100);
           },
           codings: [{ range: 25, ordinal: SLIDER_ORDINAL.BAD }, // [-100, -75)
             { range: 10, ordinal: SLIDER_ORDINAL.OK },          // [-75, -65)
             { range: 20, ordinal: SLIDER_ORDINAL.GOOD },        // [-65, -45]
             { range: 20, ordinal: SLIDER_ORDINAL.BEST },        // [-45, -25]
             { range: 20, ordinal: SLIDER_ORDINAL.GOOD },        // [-25, -5]
             { range: 10, ordinal: SLIDER_ORDINAL.OK },          // [-5, 5]
             { range: 15, ordinal: SLIDER_ORDINAL.GOOD },        // [5, 20]
             { range: 25, ordinal: SLIDER_ORDINAL.BEST },        // [20, 45]
             { range: 30, ordinal: SLIDER_ORDINAL.GOOD },        // [45, 75]
             { range: 20, ordinal: SLIDER_ORDINAL.OK },          // [75, 95]
             { range: 5, ordinal: SLIDER_ORDINAL.BAD }],        // [95, 100]
           dialogOptions: $.extend({}, baseDialogOptions, {
             description: "Positivity is a measurement of how positive (words like amazing or wonderful) or negative (words like awful or terrible) your tone is. <strong>The highest response rates come from emails that are slightly positive or slightly negative in tone.</strong> Positivity is calculated via artificial intelligence, so it may not be perfectly accurate - when in doubt, trust your judgment.",
             prescriptionMap: function(value, slider) {
               if(!slider.enabled) return "Upgrade to a Pro or Premium plan<br>to unlock this feature.";
               if(value === "not enough data") return "The email is not long enough to calculate positivity.";
               if(!isFinite(value)) return "We couldn't calculate positivity for this message.";
               if(value > 70)  return "You may sound too positive.";
               if(value > 10)  return "None. Your message has a nicely positive tone.";
               if(value > -10) return "Consider adding some emotion to this message.";
               if(value > -50) return "None. Your tone seems negative, but at an effective level.";
               return "You may sound too negative."
             }
           }),
           context: context,
           parentSelector: ".email_meter_sentiment"
         });
         sliderWidgets["politeness"] = sliderWidgets["politeness"] || new EMSliderWidget({
           name: "Politeness",
           minValue: 0,
           maxValue: 101,
           enabled: advanced_respondable_should_be_activated(),
           locked: !advanced_respondable_should_be_activated() && !is_on_premium_respondable_plan(),
           currentValue: 50,
           optimalRanges: [[40, 100]],
           codings: [
             { range: 10, ordinal: SLIDER_ORDINAL.BAD },
             { range: 20, ordinal: SLIDER_ORDINAL.BAD },
             { range: 20, ordinal: SLIDER_ORDINAL.OK },
             { range: 10, ordinal: SLIDER_ORDINAL.GOOD },
             { range: 20, ordinal: SLIDER_ORDINAL.BEST },
             { range: 0, ordinal: SLIDER_ORDINAL.BEST },
             { range: 10, ordinal: SLIDER_ORDINAL.GOOD },
             { range: 10, ordinal: SLIDER_ORDINAL.OK },
           ],
           dialogOptions: $.extend({}, baseDialogOptions, {
             description: "Indicators of politeness include attempts to minimize or apologize for imposition, or using language that reflects gratitude or positivity. <strong>Emails deemed to be more polite tend to have higher response rates.</strong> Politeness is calculated via artificial intelligence, so the calculation will not always make sense - when in doubt, trust your judgment. ",
             prescriptionMap: function(value, slider) {
               if(!slider.enabled) return "Upgrade to a Pro or Premium plan to unlock this feature.";
               if(value === "not enough data") return "The email is not long enough to calculate politeness.";
               if(!isFinite(value)) return "We couldn't calculate politeness for this message.";
               if(value > 100)  return "You may sound too deferential.";
               if(value > 40)  return "None. Your email sounds appropriately polite.";
               return "You may sound impolite."
             }
           }),
           context: context,
           parentSelector: ".email_meter_politeness"
         });
         sliderWidgets["subjectivity"] = sliderWidgets["subjectivity"] || new EMSliderWidget({
           name: "Subjectivity",
           minValue: 0,
           maxValue: 101,
           enabled: advanced_respondable_should_be_activated(),
           locked: !advanced_respondable_should_be_activated() && !is_on_premium_respondable_plan(),
           currentValue: 50,
           optimalRanges: [[10, 100]],
           codings: [
             { range: 10, ordinal: SLIDER_ORDINAL.BAD },
             { range: 20, ordinal: SLIDER_ORDINAL.GOOD },
             { range: 35, ordinal: SLIDER_ORDINAL.BEST },
             { range: 20, ordinal: SLIDER_ORDINAL.BEST },
             { range: 16, ordinal: SLIDER_ORDINAL.GOOD }
           ],
           dialogOptions: $.extend({}, baseDialogOptions, {
             description: "Subjectivity is a measure of the ratio of opinions to facts in your message. Facts are important, but nothing generates conversation more than opinions. <strong>Sending a subjective email where you take a stance or give an opinion</strong> (that a recipient might affirm or disagree with) <strong>increases response rates</strong> compared to objective emails containing just concrete information.",
             prescriptionMap: function(value, slider) {
               if(!slider.enabled) return "Upgrade to a Pro or Premium plan to unlock this feature.";
               if(value === "not enough data") return "The email is not long enough to calculate subjectivity.";
               if(!isFinite(value)) return "We couldn't calculate subjectivity for this message.";
               if(value > 0.1)  return "None. Your message has a good amount of subjectivity.";
               return "Consider expressing your opinion more forcefully.";
             }
           }),
           valueMap: function(value) {
             if(isFinite(value)) {
               return Math.round(value * 100);
             }
             return value;
           },
           context: context,
           parentSelector: ".email_meter_subjectivity"
         });
       }

       return sliderWidgets;
    }
    var monitor_active_compose_window = function() {
        if ($activeComposeContainer) {
            // Turn off the meter if the compose window is closed
            if ($activeComposeContainer.closest('body').length == 0) {
                hide_email_meter();
                $activeComposeContainer = null;
            }
        }
    }

    /**
     * Create expanded view containing sliders and the overall respondable score.
     */
    var create_slider_elements = function() {
      var attributeClasses = [
        "email_meter_subject", "email_meter_word_count", "email_meter_question_count", "email_meter_flesch_kincaid"
      ];
      var gatedAttributeClasses = ["email_meter_sentiment", "email_meter_politeness", "email_meter_subjectivity"];

      var $slidersHtml = $("<div/>").addClass("email-meters-container");
      var $activeContainer = $("<div/>").addClass("email-meters").appendTo($slidersHtml);
      attributeClasses.forEach(function(className) {
        $activeContainer.append($("<div/>").addClass(className));
      });

      var $gatedContainer = $("<div/>").addClass("email-meters em-locked")
        .append($("<h1/>").text("Advanced Features"))
        .appendTo($slidersHtml);

      gatedAttributeClasses.forEach(function(className) {
        $gatedContainer.append($("<div/>").addClass(className));
      });

      var enableLink = $("<a class='em-upgrade-link'>Enable advanced features</a>");
      if (!is_on_premium_respondable_plan()) {
        enableLink.attr("href", "https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=resopndable&utm_campaign=respondableLink");
        enableLink.text("Upgrade to Unlock");
      }
      else {
        enableLink.click(function() {
            if (!has_consented_to_advanced_respondable()) {
                consent_screen_flow(function() {
                    sync_preferences_with_server(function() {
                        reenable_slider_widgets_after_plan_change($activeComposeContainer);
                    });
                });
            }
            else {
                $.ajax({
                    type: "post",
                    url: "https://b4g.baydin.com/changepreferences",
                    data: {
                      "machineLearningEnabled": "True",
                      "respondableEnabled": "True",
                    },
                    xhr: xhr_with_credentials,
                    success: function(data) {
                        sync_preferences_with_server(function() {
                            reenable_slider_widgets_after_plan_change($activeComposeContainer);
                        });
                    },
                });
            }
        });
      }
      $slidersHtml.append(enableLink);
      enableLink.toggle(!advanced_respondable_should_be_activated());

      return $slidersHtml;
    }

    var get_expanded_view = function($composeContainer) {
      var $expandedView = $composeContainer.data("$expandedView");
      if(!$expandedView) {
        var $expandedView = $(
            "<div class='email-meter-display em-neutral-value'>" +
              "<div class='email-meter-display-inner'>" +
              "<header><h1>Boomerang</h1>" +
                "<h2>Respondable</h2></header>" +
                "<div class='em-grade-container'></div>" +
              "</div>" +
            "</div>");

        var userPlan = get_cached_plan();
        var $sliderHtml = create_slider_elements();

        // add respondable status
        var respondableGrade = new EMRespondableGrade({
          grades: ["Email is blank", "Very unlikely", "Not very likely", "Likely", "Very Likely"],
          context: $composeContainer,
          $parent: $expandedView.find(".em-grade-container"),
          valueMap: _map_respondable_meter_to_grade,
          onUpdate: function(value) {
            $expandedView.toggleClass("em-neutral-value", value === 0);
          }
        });

        $expandedView.find(".email-meter-display-inner").append($sliderHtml);

        $composeContainer.data("respondableGrade", respondableGrade);
        $composeContainer.data("$expandedView", $expandedView);
      }
      return $expandedView;
    }

    var show_email_meter = function() {
        if (browser_name == "Safari") {
          alert("Respondable does not currently work in Safari due to Apple disabling some of the browser features it relies on. We are planning to bring Respondable back in a future update, but it will take some time to re-architect. If you need Respondable in the meantime, please use Boomerang in another browser such as Chrome or Firefox.");
        }

        var $expandedView = get_expanded_view($activeComposeContainer);

        if(!$expandedView.parent().length) { // only append if $sidebar is detached
          var $container;
          if(is_threaded_view($activeComposeContainer)) {
            $container = $activeComposeContainer.closest(".gA.gt");
          } else if(is_pop_out_window()) {
            $container = $("body");
          } else if(is_dialog($activeComposeContainer)) {
            $container = $activeComposeContainer.closest(".aaZ");
          }
          $container.append($expandedView);
          update_expanded_view_position($activeComposeContainer);
        }
        $activeComposeContainer.trigger("EMAIL_METER_EVENT");

        var oldObserver = $activeComposeContainer.data("observer");
        if(oldObserver) {
          oldObserver.disconnect();
        }

        // Update placement when the parent div's 'position' property changes
        var observer = new MutationObserver(function(mutations) {
          update_expanded_view_position.call(this, $activeComposeContainer);
        });
        $activeComposeContainer.data("observer", observer);

        observer.observe($activeComposeContainer.find(".aDj").get(0), {
          attributes: true,
          attributeFilter: ["style"]
        });

        $activeComposeContainer.addClass("em-open");
        initialize_b4g_slider_widgets($activeComposeContainer);
        render_slider_widgets($activeComposeContainer);
        adjust_editable_area($activeComposeContainer);
        adjust_respondable_hover_tooltip($activeComposeContainer);

        // Analytics
        track_event(["respondable", "expanded-view", "show"]);
        $activeComposeContainer.data("showTimeAnalytics", new Date())

        // For inline-replies, clicks outside the compose window will close this menu
        if (!is_dialog($activeComposeContainer)) {
          $(document).one("click", {"$composeContainer": $activeComposeContainer},
              function click_outside_to_close_respondable_handler(e) {
                  var $composeContainer = e.data.$composeContainer;
                  var target = get_target(e);
                  var clickedInsideComposeContainer = $.contains($composeContainer.get(0), target);
                  if (clickedInsideComposeContainer || ignoreEmailEvents) {
                      $(document).one('click', {"$composeContainer": $composeContainer},
                          click_outside_to_close_respondable_handler);
                  }
                  else {
                      hide_email_meter($composeContainer);
                  }
              });
      }

        return $expandedView;
    }
    var update_expanded_view_position = function($composeContainer) {
      var $sendBar = $composeContainer.find(".aDj"),
          $widgetView = $composeContainer.data("$expandedView"),
          $container = $composeContainer.closest(".gA.gt"),
          $gaugeButton = $composeContainer.find(".em-email-meter-gauge"),
          offset = $gaugeButton.offset().top,
          bottomOffset,
          rightOffset = 0;

      // get positioning context
      var $context = $composeContainer.closest(".aSt"); // occurs in full-screen compose
      if($context.length) {
        offset -= $context.offset().top;
      } else {
        $context = $(window);
      }
      if(is_pop_out_window()) {
        if(is_a_reply($composeContainer)) {
          bottomOffset = 45; // approx the height of the send bar
        } else {
          bottomOffset = $context.height() - offset;
        }
      } else if(is_dialog($composeContainer)) {
        bottomOffset = $context.height() - offset;
      } else {
        var position = $sendBar.css("position");

        if(position === "fixed") {
          bottomOffset = parseInt($sendBar.css("bottom"), 10) - 5;
          rightOffset = $context.width() - $sendBar.offset().left - $sendBar.width() + 3;
        } else {
          bottomOffset = $container.offset().top + $container.height() - offset;
          rightOffset = 10;
        }
      }

      $widgetView.css({
        "position": position,
        "bottom": bottomOffset,
        "right": rightOffset
      });

      adjust_editable_area($composeContainer);
    }
    var hide_email_meter = function($composeContainer) {
        $composeContainer = $composeContainer || $activeComposeContainer;
        $($composeContainer.data("$expandedView")).detach();
        $composeContainer.removeClass("em-open");
        adjust_editable_area($composeContainer);
        adjust_respondable_hover_tooltip($composeContainer);

        // Analytics
        var openTime = $composeContainer.data("showTimeAnalytics");
        if (openTime) {
            var closeTime = new Date();
            var secondsBetween = Math.floor((closeTime - openTime)/1000);
            track_event(["respondable", "expanded-view", "hide", secondsBetween]);
        }
        else {
            track_event(["respondable", "expanded-view", "hide"]);
        }
    }
    var is_email_meter_shown = function($composeContainer) {
        $composeContainer = $composeContainer || $activeComposeContainer;
        return $composeContainer && $($composeContainer.data("$expandedView")).parent().length > 0;
    }
    // Gmail UI getters
    var get_new_compose_containers = function() {
        return $(".aoI").not("." + EMAIL_METER_CLASS);
    }
    var get_compose_body = function($composeContainer) {
        return $composeContainer.find(".LW-avf");
    }
    // Note: a duplicate get_subject function is also inside display_suggest_times_screen
    var get_subject = function($composeContainer) {
        if (is_a_reply($composeContainer) && !is_pop_out_window($composeContainer)) {
            return $(".hP").filter(":visible").text();
        }
        else {
            return $composeContainer.find("*[name='subjectbox']").val();
        }
    }
    // Note: a duplicate is_a_reply function is also inside display_suggest_times_screen
    var is_a_reply = function($composeContainer) {
        if (!is_pop_out_window()) {
            // check whether the subject line is hidden
            var $subjectField = $composeContainer.find(".az6");
            return !$subjectField.length || $subjectField.css("display") === "none";
        }
        else {
            // look for existing subject in pop out window
            return $(".hP").length != 0;
        }
    }
    // Gmail UI manipulation
    var move_compose_windows_left = function() {
        $(".dw .no").first().css("margin-right", "240px");
        $(".Am.Al").focus(); //force gmail to resize compose windows
    }
    var move_compose_windows_back = function() {
        $(".dw .no").first().css("margin-right", "auto");
        $(".Am.Al").focus(); // force gmail to resize compose windows
    }
    // Miscellaneous functions
    var get_text_from_compose_body = function($composeBody) {
        // TODO: Make sure this workaround works in Firefox 44 or lower (before innerText was added). It should, but...
        if("innerText" in $composeBody[0])
        {
            return $composeBody[0].innerText;
        }
        else
        {
            var stepone = "<div>" + $composeBody.html() + "</div>";
            var steptwo = $(stepone.replace(/(<(br|div|p|li)\s*\/?\s*>)/gi, '$1{new_line}')).text();
            var stepthree = steptwo.replace(/\{new_line\}/g, '\n');
            return stepthree;
        }
    }
    var adjust_respondable_hover_tooltip = function($composeContainer) {
        var emailMeterDiv = $composeContainer.find(".em-email-meter-gauge");
        if (is_email_meter_shown($composeContainer)) {
            emailMeterDiv.removeAttr("data-tooltip");
        }
        else {
            emailMeterDiv.attr("data-tooltip", "Use artificial intelligence to help\nyou write better emails.");
        }
    }
    var adjust_editable_area = function($composeContainer) {
      var TEXT_AREA_PADDING = 5;
      var $textArea = $composeContainer.find(".Am.editable"),
          $textAreaParent = $textArea.parent(),
          $expandedView = $composeContainer.data("$expandedView");

      if(is_email_meter_shown($composeContainer)) {
        var maxWidth = $textAreaParent.width();
        $textArea.css("width", maxWidth - $expandedView.width() - TEXT_AREA_PADDING);
      } else {
        $textArea.css("width", "100%");
      }
    }

    var WidgetMixin = {
      context: null,
      $parent: null,
      parentSelector: null,
      minValue: 0,
      maxValue: 100,
      currentValue: 0,
      onUpdate: function(value, previousValue, slider) {},
      beforeUpdate: function(value, previousValue, slider) {},
      update: function(newValue) {
        newValue = this.valueMap(newValue);
        if(newValue !== this.currentValue) {
          this.beforeUpdate(newValue, this.currentValue, this);
          this.previousValue = this.currentValue;
          this.currentValue = newValue;
          this.render();
          this.onUpdate(newValue, this.currentValue, this);
        }
      },
      valueMap: function(value) { return value },
      attachToDOM: function() {
        if(!this.$el.parent().length) {
          this._getParent().append(this.$el);
        }
      },
      _getParent: function() {
        if(this.$parent) {
          return this.$parent;
        }

        return $(this.parentSelector, this.context);
      },
    }

    function EMRespondableGrade(options) {
      var defaults = {
        grades: [],
      };
      $.extend(this, WidgetMixin);
      $.extend(this, defaults, options);

      this.currentValue = this.currentValue < this.grades.length ? this.currentValue : 0;
      this.currentGrade = this.grades[this.currentValue];

      this.$el = this._createElement();
      this.render();
    }
    EMRespondableGrade.prototype = {
      CLASS_GRADE_PREFIX: "em-status-",
      render: function() {
        this.attachToDOM();
        this.currentGrade = this.grades[this.currentValue];

        // Remove existing classes
        $.each(this.$container.attr("class").split(" "), function(_, klass) {
          if(klass.startsWith(this.CLASS_GRADE_PREFIX)) {
            this.$container.removeClass(klass);
          }
        }.bind(this));
        this.$container.addClass(this.CLASS_GRADE_PREFIX + this.currentValue);
        this.$mainText.html(this.currentGrade);
      },
      _createElement: function() {
        this.$container = $("<div/>").addClass("em-respondable-grade");
        this.$mainText = $("<strong/>").appendTo(this.$container);
        this.$mainText.html(this.currentGrade);

        $("<span>").html("to receive a response").appendTo(this.$container);

        return this.$container;
      }
    }

    function EMSliderWidget(options) {
      var defaults = {
        name: "",
        gradientColors: ["#E24D00", "#E8A42A", null,"#44c417"], // bad, ok, good, best
        minValue: 0,
        maxValue: 100,
        codings: [],
        previousValue: 0,
        optimalRanges: [], // array of numbers
        transformOptimalRangeLabel: function(oldLabel, i) { return oldLabel },
        //TODO: split into own class?
        dialogOptions: {
          $dialogContainer: $("body"),
          prescriptionMap: function(value, slider) { return ""; },
          title: "",
          subtitle: "",
          description: "desc",
          dialogClass: ""
        },
        clickEventsEnabled: true,
        enabled: true,
        locked: false
      };

      $.extend(this, WidgetMixin);
      $.extend(true, this, defaults, options);

      this.dialogOptions.title = this.dialogOptions.title || this.name;

      this.currentValue = isFinite(this.currentValue) ? this.currentValue : this.minValue;
      if(!this.initialValue) {
        this.initialValue = this.currentValue;
      }

      this.$el = this._createAttributeMeter();
      this.render();
    }

    EMSliderWidget.prototype = {
      INDICATOR_CLASSES: ["em-indicator-size-2", "em-indicator-size-3", "em-indicator-size-4",
                          "em-indicator-color-0", "em-indicator-color-1", "em-indicator-color-2", "em-indicator-color-3"].join(" "),
      render: function() {
        this.attachToDOM();

        this.$el.toggleClass("em-neutral-value", !isFinite(this.currentValue));

        if(!this.enabled) {
          return;
        }

        this.displayedValue = this.displayedValueMap(this.currentValue, this);
        this.workingValue = this.workingValueMap(this.currentValue);
        this._renderIndicator();
      },
      updateOptions: function(options) {
        // copy options in; this assumes any instance variable is valid
        for(var optionName in options) {
          if(this.hasOwnProperty(optionName)) {
            if($.isPlainObject(this[optionName])) {
              $.extend(this[optionName], options[optionName]);
            } else {
              this[optionName] = options[optionName];
            }
          }
        }

        this._updateAttributeMeter();
        this.render();
      },
      // overrideable
      displayedValueMap: function(newValue, slider) {
        if(!isFinite(newValue)) return "--";

        return newValue;
      },
      _createDialogElement: function(options) {
        var $optionalSubtitle = options.subtitle ? $("<p/>").html(options.subtitle) : "";
        return $("<div/>").addClass("em-slider-dialog em-dialog")
          .toggleClass("em-neutral-value", this._isNeutral())
          .toggleClass("em-disabled", !this.enabled)
          .addClass(options.dialogClass || "")
          .append($("<div/>").addClass("em-close").html("&#215;").click(options.removeDialog))
          .append($("<h1/>").html("Recommendation"))
          .append($("<h2/>").html(options.value))
          .append($optionalSubtitle)
          .append(options.$detailMeter)
          .append($("<h1/>").html(options.title))
          .append($("<p/>").html(options.description))
          .append($("<button/>").html("OK").click(options.removeDialog))
      },
      removeDialogWindow: function() {
        if(this.$dialog) this.$dialog.remove();
        if(this.$overlay) this.$overlay.remove();
        this.$dialog = this.$overlay = null;
      },
      openDialogWindow: function(onDialogClosed) {
        onDialogClosed = $.isFunction(onDialogClosed) ? onDialogClosed : $.noop;
        var $container = this.dialogOptions.$dialogContainer;
        this.removeDialogWindow();
        var onClose = function() {
          this.removeDialogWindow();
          onDialogClosed();
        }.bind(this);

        this.$overlay = $("<div/>")
          .addClass("overlay em-overlay")
          .appendTo($container)
          .click(onClose);

        var $detailMeter = this.$meter.clone().addClass("em-detail");

        this.$dialog = this._createDialogElement($.extend({}, this.dialogOptions, {
          value: this.dialogOptions.prescriptionMap(this.currentValue, this),
          removeDialog: onClose,
          $detailMeter: $detailMeter
        })).appendTo($container);

        if(this.enabled) {
          this._drawOptimalRegion(this.$dialog);
          this._offsetIndicator($detailMeter);
        } else {
          this.$dialog.find(".indicator-container").show()
                 .find(".indicator-text").addClass("indicator-link").html("Upgrade to unlock")
                 .click(function() {
                   window.open("https://b4g.baydin.com/subscriptions?utm_source=b4g&utm_medium=resopndable&utm_campaign=respondableLink", "_blank");
                 });
        }
        track_event(["respondable", "detail-view", "click", this.name]);
      },
      // The working value is used to calculate where the indicator should go
      // using _valueToPosition.
      workingValueMap: function(value) {
        if(!isFinite(value)) return this.initialValue;

        return Math.min(Math.max(this.minValue, value), this.maxValue - 0.01);
      },
      _isNeutral: function() {

        return this.$el.hasClass("em-neutral-value") || this.$el.find(".em-neutral-value").length || this.context.hasClass("em-neutral-value");
      },
      _drawOptimalRegion: function($dialog) {
        if(!this.optimalRanges.length) return;

        var $meter = $dialog.find(".em-detail");
        this.optimalRanges.forEach(function(range, i) {
          var minPosition = this._valueToPosition(range[0], $meter),
              width = this._valueToPosition(range[1], $meter) - minPosition;
          $("<div/>").addClass("em-optimal")
            .css({ width: width, left: minPosition})
            .append($("<div/>").addClass("em-optimal-label").html(this.transformOptimalRangeLabel(range[0] + "&ndash;" + range[1], i)))
            .appendTo($meter);
        }.bind(this));
      },
      _renderIndicator: function($meter) {
        this.$indicatorText.html(this.displayedValue);
        this._offsetIndicator();
      },
      _offsetIndicator: function($meter) {
        $meter = $meter || this.$meter;
        var $indicatorContainer = $meter.find(".indicator-container");

        var offset = $indicatorContainer.outerWidth() / 2;
        if(!offset) {
          // TODO: if the width isn't available yet, this is hack to get it.
          // Not optimal - better to find a different way
          var $dummyIndicator = $indicatorContainer.clone().appendTo($("body"));
          offset = $dummyIndicator.outerWidth() / 2;
          $dummyIndicator.remove();
        }

        var distance = this._valueToPosition(this.workingValue, $meter);
        $indicatorContainer.css("left", distance - offset);

        this.indicatorClass = this._getIndicatorClass();
        this.$indicator
          .removeClass(this.INDICATOR_CLASSES)
          .addClass(this.indicatorClass);
      },
      _valueToPosition: function(value, $el) {
        $el = $el || this.$el;
        value = Math.min(Math.max(this.minValue, value), this.maxValue);
        var maxDistance = $el.innerWidth();
        return (value - this.minValue) / this._range * maxDistance;
      },
      _getIndicatorClass: function() {
        var indicatorClass = "";
        var coding = this.codings.find(function(coding) {
          return this.workingValue >= coding.min && this.workingValue < coding.max;
        }.bind(this));

        if(!coding) {
          //console.warn("Could not find coding for value", String(this.currentValue), "(as " + String(this.workingValue) + ") for", this.name);
          coding = this.codings[this.codings.length - 1];
        }

        indicatorClass += "em-indicator-color-" + coding.ordinal;

        return indicatorClass;
      },
      _createTooltip: function() {
        var tooltipText = this.clickEventsEnabled ? "Click to learn more." : "";
        return $("<span />").addClass("em-info").attr("data-tooltip", tooltipText);
      },
      _createAttributeMeter: function() {
        this._calculateRanges();
        var $meterContainer = $("<div/>").addClass("meter-container").toggleClass("em-disabled", !this.enabled);
        $meterContainer.toggleClass("em-upgrade-needed", this.locked);
        var $label = $("<h1/>").html(this.name).appendTo($meterContainer);

        this.$info = this._createTooltip().appendTo($label);
        this.$meter = $("<div/>").addClass("em-meter").appendTo($meterContainer);
        this.$bar = $("<div/>").addClass("meter-background").appendTo(this.$meter);

        this._setBackground();

        this.$indicatorContainer = $("<div/>").addClass("indicator-container").appendTo(this.$meter);
        this.$indicator = $("<div/>")
          .addClass("indicator")
          .appendTo(this.$indicatorContainer);
        this.$indicatorText = $("<span/>").addClass("indicator-text").appendTo(this.$indicator);
        var $indicatorShadow = $("<div/>").addClass("indicator-shadow").appendTo(this.$indicatorContainer);
        this.$indicatorContainer.toggle(this.enabled);

        this.$overlayText = $("<span/>").html("Pro, Premium").appendTo(this.$meter);
        this.$overlayText.toggle(this.locked);

        if(this.clickEventsEnabled) {
          $meterContainer.children().bind("click.slider", this.openDialogWindow.bind(this));
        }

        return $meterContainer;
      },
      _updateAttributeMeter: function() {
        this._calculateRanges();
        this.$el.toggleClass("em-disabled", !this.enabled);
        this.$el.toggleClass("em-upgrade-needed", this.locked);
        this._setBackground();
        this.$indicatorContainer.toggle(this.enabled);
        this.$overlayText.toggle(this.locked);
        this.$info.attr("data-tooltip", this.clickEventsEnabled ? "Click to learn more." : "");
        if(this.clickEventsEnabled) {
          this.$el.children().bind("click.slider", this.openDialogWindow.bind(this));
        } else {
          this.$el.children().unbind("click.slider");
        }
      },
      _getBackgroundValues: function() {
        var values = [];
        var currentPercentage = 0;
        $.each(this.codings, function(_, code) {
          var nextColor = this.gradientColors[code.ordinal];
          if(nextColor) {
            values.push({
              position: currentPercentage,
              color: this.gradientColors[code.ordinal]
            })
          }
          currentPercentage += code.range / this._range * 100;
        }.bind(this));
        return values;
      },
      _setBackground: function() {
        var values = this._getBackgroundValues();
        var cssValue = "linear-gradient(to right";

        $.each(values, function(_, value) {
          cssValue += ", " + value.color + " " + Math.min(100, value.position) + "%";
        });
        cssValue += ")";
        this.$bar.css("background", cssValue);
      },
      _calculateRanges: function() {
        this._range = this.maxValue - this.minValue;

        var sum = this.minValue;
        this.codings.forEach(function(coding) {
          coding.min = sum;
          coding.max = sum = sum + coding.range;
        });
      }
    }

    function EMMeterWidget(options) {
      var defaults = {
        numSegments: 7,
        height: 14,
        currentValue: 0,
        previousValue: 0
      };
      $.extend(this, WidgetMixin);
      $.extend(this, defaults, options);

      this.minValue = 0;
      this.maxValue = this.numSegments;

      this.$el = this._createEmailMeterElement();
      this.render();
    }

    EMMeterWidget.prototype = {
      CLASS_SEGMENT_ON: "em-segment-on",
      CLASS_SCORE_PREFIX: "em-value-",
      render: function() {
        var self = this;
        this.attachToDOM();
        if(this.previousValue === this.currentValue) return;

        // Remove existing classes
        $.each(this.$el.attr("class").split(" "), function(_, klass) {
          if(klass.startsWith(this.CLASS_SCORE_PREFIX)) {
            this.$el.removeClass(klass);
          }
        }.bind(this));

        this.$el.addClass(this.CLASS_SCORE_PREFIX + this.currentValue);
        var $segments = $(this.$el.find(".em-segment"));
        $segments.slice(0, this.currentValue).addClass(this.CLASS_SEGMENT_ON);
        $segments.slice(this.currentValue, this.numSegments).removeClass(this.CLASS_SEGMENT_ON);
      },
      _createEmailMeterElement: function() {
        var $parent = this._getParent();
        var segmentWidth = (100 / this.numSegments) + "%";
        var $meter = $("<div/>")
          .addClass("email-meter-widget")
          .css("height", this.height)
          .css("width", "100%")
          .appendTo($parent);
        var $segments = $("<div/>")
          .addClass("em-segments")
          .css("width", "100%")
          .appendTo($meter);

        for(var i = 0; i < this.numSegments; i++) {
          $segments.append($("<div/>")
            .addClass("em-segment")
            .css({
              "width": segmentWidth,
            }).append($("<div/>"))
          );
        }

        $meter.append($("<div/>").addClass("email-meter-shadow"));
        return $meter;
      }
    }

    function RespondableFTUE(options) {
      var defaults = {
        steps: [
          {
            title: "",
            description: "",
            beforeShow: function() {},
            buttons: [] /* { text: string, class: string, action: "skip"|"next"|function } */
          }
        ],
        $container: $("body"),
        cleanup: function() {},
        completedCallback: function() {},
        disabledCallback: function() {},
        skipButtonClass: "em-skip",
        nextButtonClass: "em-next"
      };
      $.extend(this, defaults, options);

      this.currentStep = 0;
      this.$displayedElement = $();
      this.respondableWasDisabled = false;
    }

    RespondableFTUE.prototype = {
      start: function() {
        this.show(0);
        this.toggleOverlay(true);
      },
      next: function() {
        if(this.currentStep + 1 < this.steps.length) {
          var previousStep = this.steps[this.currentStep];
          if(previousStep && previousStep.beforeHide) {
            previousStep.beforeHide();
          }
          this.show(this.currentStep + 1);
        } else {
          this.close();
        }
      },
      toggleOverlay: function(state) {
        if(state && !this.$overlay) {
          this.$overlay = $("<div/>").addClass("overlay em-overlay-ftue");
          this.$overlay.appendTo(this.$container);
        } else if(!state && this.$overlay) {
          this.$overlay.remove();
          this.$overlay = null;
        }
      },
      show: function(stepNumber) {
        if(stepNumber > this.steps.length) return;
        this.toggleOverlay(true);

        this.currentStep = stepNumber;
        var step = this.steps[stepNumber];
        if(step.beforeShow) {
          step.beforeShow();
        }
        this.$displayedElement.remove();
        this.$displayedElement = this._createElement(step);
        this.$displayedElement.appendTo(this.$container);

        this._transformToPointerType(step.pointerType, this.$displayedElement, step.$target);
      },
      hide: function() {
        this.toggleOverlay(false);
        this.$displayedElement.remove();
        this.$displayedElement = $();
      },
      close: function() {
        this._onClose();
      },
      disable: function() {
        this.respondableWasDisabled = true;
        this._onClose();
      },
      _transformToPointerType: function(pointerType, $el, $target) {
        if(pointerType === "bracket") {
          this._addBracket($target, $el);
        } else if(pointerType === "arrow") {
          this._addArrow($target, $el);
        } else {
          $el.addClass("em-center");
        }
        return $el;
      },
      _addArrow: function($target, $el) {
        $el.addClass("em-pointer-arrow");
        var targetCenterYPosition = $target.offset().top + $target.height() / 2 - this.$positioningContext.offset().top;
        var $arrowContainer = $el.find("p");
        var arrowCenterYPosition = $arrowContainer.offset().top + $arrowContainer.height() / 2 - $el.offset().top;

        $el.css({
          top: targetCenterYPosition - arrowCenterYPosition,
          right: this.$positioningContext.offset().left + this.$positioningContext.width() - $target.offset().left
        });
      },
      _addBracket: function($target, $el) {
        var $bracket = $("<div/>").addClass("em-pointer em-bracket").css({
          height: $target.height(),
        });

        var topPosition = $target.offset().top - this.$positioningContext.offset().top;
        var rightPosition = this.$positioningContext.offset().left + this.$positioningContext.width() - $target.offset().left;
        $el.css({
          top: topPosition,
          right: rightPosition
        }).addClass("em-pointer-bracket").prepend($bracket);
      },
      _createElement: function(step) {
        var $title = step.title ? $("<h1/>").html(step.title) : "";
        var $desc = step.description ? $("<p/>").html(step.description) : "";
        var $buttonBar = this._createButtonBar(step.buttons);
        var $step = $("<div/>").addClass("em-step")
                    .append($title).append($desc).append($buttonBar);
        var $pointer, klass = "";

        var $el = $("<div/>").addClass("em-step-container")
          .addClass(step["class"] || "")
          .append($step);

        return $el;
      },
      _createButtonBar: function(buttons) {
        if(!buttons || !buttons.length) return "";

        var $buttonBar = $("<div/>").addClass("em-button-bar");
        $.each(buttons, function(_, button) {
          var onClick = $.noop;
          if(button.action === "skip") {
            onClick = this.close.bind(this);
          } else if(button.action === "next") {
            onClick = this.next.bind(this);
          } else if(button.action === "disable") {
            onClick = this.disable.bind(this);
          } else if($.isFunction(button.action)) {
            onClick = button.action;
          }

          $buttonBar.append($("<span/>").addClass("em-btn " + (button["class"] || "")).html(button.text).click(onClick));
        }.bind(this));

        return $buttonBar;
      },
      _onClose: function() {
        this.toggleOverlay(false);

        var previousStep = this.steps[this.currentStep];
        if(previousStep && previousStep.beforeHide) {
          previousStep.beforeHide();
        }

        this.$displayedElement.remove();
        this.cleanup();
        if (this.respondableWasDisabled) {
            this.disabledCallback();
            track_event(["respondable", "ftue", "disabled"]);
        }
        else {
            this.completedCallback();
            track_event(["respondable", "ftue", "completed", this.currentStep]);
        }
      }
    }

    // ensures that the callback is only called 500ms after the last call
    // http://stackoverflow.com/questions/2854407/javascript-jquery-window-resize-how-to-fire-after-the-resize-is-completed
    var delay_function = (function() {
        var timer = 0;
        return function(callback, ms) {
            clearTimeout(timer);
            timer = setTimeout(callback, ms);
        };
    })();

    return {
        watch_for_new_compose_containers: watch_for_new_compose_containers,
    };

})(); /* end EmailMeter */

function restart_respondable() {
  // hacky way of clearing current Respondable, used for syncing preferences "in-place" after visiting the settings page
    $(".email-meter-display").remove(); // respondable pop up
    $(".em-email-meter-gauge").remove(); // respondable bar
    var $composeContainers = $(".email-meter");
    $composeContainers.removeData();
    $composeContainers.removeClass("email-meter");
}

function turn_off_respondable() {
    $.ajax({
        type: "post",
        url: "https://b4g.baydin.com/changepreferences",
        data: {
          "respondableEnabled": "False",
        },
        xhr: xhr_with_credentials,
        success: function(data){
            sync_preferences_with_server(restart_respondable);
        },
    });
}

/**
 * 15. Inbox Pause
 */
function prepare_inbox_pause() {
  var disableTimeout = new Date(null); // Dec 31 1969 16:00 PST
  write_to_html5_storage("ibp_sync_timeout_window_" + get_gmail_user(), disableTimeout.toString());
}
function inject_pause_button() {
  var buttonAlreadyExists = $("#ibp-main").length > 0;
  if (inbox_pause_is_disabled()) {
    $('.ibp-ftue-tooltip').remove();
    $("#ibp-main").remove();
    return;
  } else if (buttonAlreadyExists) {
    expand_or_collapse_pause_button();
    return;
  } else if (is_paused()) {
    create_unpause_button();
    expand_or_collapse_pause_button();
    sync_pause_status_then_update_button();
  } else {
    create_pause_button();
    expand_or_collapse_pause_button();
    inject_ibp_ftue_tooltip_if_necessary();
  }
}

function inbox_pause_is_disabled() {
  return read_from_html5_storage("ibp_hide") === "true";
}
function disable_inbox_pause_feature() {
  write_to_html5_storage("ibp_hide", "true");
}
function reenable_inbox_pause_feature() {
  localStorage.removeItem("ibp_hide");
}

function show_already_paused_dialog(nextUnpauseTimeString) {
  $(".dialogdiv").remove();
  var $ibp_dialog = $(
    "<div class='ibp-menu'>" +
      "<div class='ibp-menu-header'>" +
        "Inbox Pause<span class='ibp-menu-header-signature'> by Boomerang</span>" +
        '<span data-tooltip-contained="true" data-tooltip-align="r,l">' +
          "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='ibp-tooltip-icon'>" +
          "<div class='T-ays-a45'>" +
            "<div class='ibp-menu-tooltip'>" + INBOX_PAUSE_GENERAL_TOOLTIP_TEXT + "</div>" +
          "</div>" +
        '</span>' +
      "</div>" +
      "<div class='ibp-menu-divider'></div>" +
      "<div class='ibp-menu-main'>" +
        "<p>Your Inbox has been paused from another computer.</p>" +
        "<p>" + nextUnpauseTimeString + "</p>" +
      "</div>" +
      "<div class='ibp-menu-divider'></div>" +
      "<div class='ibp-menu-footer'>" +
        "<div class='ibp-menu-footer-button-group'>" +
          "<button class='ibp-submit-pause ibp-keep-paused ibp-menu-button'>Keep my Inbox paused</button> " +
          "<button class='ibp-unpause-now by-button ibp-menu-button'>Unpause</button>" +
        "</div>" +
      "</div>" +
    "</div>"
  );

  var $inboxPauseOverlay = $(INBOX_PAUSE_OVERLAY);
  $("body").append($inboxPauseOverlay);
  $("body").append($ibp_dialog);

  $('.ibp-submit-pause').click(function() {
    track_event([ "already paused dialog", "keep paused" ]);
    set_paused_state(true);
    ready_unpause_button();
    hide_inbox_pause_menu();
  });

  $('.ibp-unpause-now').click(function() {
    track_event([ "already paused dialog", "unpause now" ]);
    hide_inbox_pause_menu();
    unpause_inbox();
  });
}
/*
 * Checks if the left side bar in the new UI has changed states
 * If it has, make the appropriate style changes
 */

var EXPANDED_PANEL = 1;
var COLLAPSED_PANEL = 2;

function expand_or_collapse_pause_button() {
  // this function is only available in the New UI
  if (which_gmail() !== NEW_GMAIL) {
    return;
  }
  var PANEL_STATE = 0;
  var $panel = $(SIDE_PANEL_SELECTOR);
  var $pauseButton = $panel.find("#ibp-main");
  // if it's NOT collapsed or if it's being hovered, then it's expanded
  if (!$panel.hasClass("bhZ") || ($panel.hasClass("bhZ") && $panel.hasClass("bym"))) {
    PANEL_STATE = EXPANDED_PANEL;
  } else {
    PANEL_STATE = COLLAPSED_PANEL;
  }
  // determine if our state is different from before, and make the proper changes
  if (PANEL_STATE === EXPANDED_PANEL) {
    $pauseButton.removeClass('ibp-new-ui-panel-expanded');
    $('.ibp-ftue-tooltip').show(); // If applicable, show tutorial tooltip when sidebar is expanded.
  } else if (PANEL_STATE === COLLAPSED_PANEL) {
    $pauseButton.addClass('ibp-new-ui-panel-expanded');

    // If the page loads with the sidebar panel not expanded, our pause button will render with no icon being shown
    // If the width of the pause button changes once we've already initially loaded the button and icon, the issue will be fixed and the icon will display.
    // To do this, we slightly change the width of the button by one pixel and then change it back.
    var $pauseButtonIcon = $pauseButton.find('.ibp-main-button-logo-new-ui');
    var iconWidth = $pauseButtonIcon.width();
    if (iconWidth < 13) {  //  Catch case where icon has no width (width should be 13 when unpaused and 16 when paused)
      $pauseButton.addClass('ibp-main-new-ui-temp-width-toggle');
      setTimeout(function() {
        // Timeout gives the first width adjustment time to apply before we set the proper width of 57
        // This ensures that the button resizes, which is required to make the icon appear.
        $pauseButton.removeClass('ibp-main-new-ui-temp-width-toggle');
      });
    }

    $('.ibp-ftue-tooltip').hide(); // Hide tutorial tooltip if sidebar is not expaned
  }

  // Adjust button height to match the compose button (there are different heights for compact mode Gmail vs. other density settings)
  $pauseButton.toggleClass('ibp-compact-mode', is_gmail_in_compact_mode());
}

/*
 * Checks if Gmail is in compact mode by checking the height of the compose button
 * 
 */
function is_gmail_in_compact_mode() {
  var composeButton = $(".Yh.akV");
  if (composeButton.length == 0) {
    composeButton = $(".T-I.T-I-KE.L3");
  }

  if (composeButton.length == 0) {
    // Give up, can't find compose button.  Assume not compact mode (default Gmail setting)
    return false;
  } else {
    if (composeButton.first().outerHeight() <= 40) {
      return true;
    }
  }
  return false;
}

function check_pause_status_before_displaying_pause_dialog(hasSeenConsentDialog) {
  var url = "https://b4g.baydin.com/inboxpause/checkpaused";
  var guser = get_gmail_user();
  $.ajax({
    url: url,
    data: {"guser": guser},
    type: "GET",
    xhr: xhr_with_credentials,
    success: function(response) {
      create_pause_or_show_already_paused_dialog(response, hasSeenConsentDialog);
    },
    complete: function() {
      enable_pause_button();
    },
  });

  function create_pause_or_show_already_paused_dialog(response, hasSeenConsentDialog) {
    var responseJson = JSON.parse(response);
    if (!responseJson["hasSeenInboxPauseFTUE"]) {
      show_ibp_ftue();
      write_to_html5_storage("hasSeenIBPTutorialTooltip", "yes");
    } else if (!responseJson["enabled"]) {
      track_event([ "inbox pause main button clicked", "user settings auth screen shown" ]);
      show_user_settings_auth_screen(hasSeenConsentDialog);
    } else if (!responseJson["isPaused"]) {
      track_event([ "inbox pause main button clicked", "pause dialog opened" ]);
      show_inbox_pause_menu(responseJson["stickySettings"]);
    } else {
      var nextUnpauseTimeString = "";
      if (responseJson["nextUnpauseTimeString"]) {
        nextUnpauseTimeString = responseJson["nextUnpauseTimeString"];
      }
      track_event([ "inbox pause main button clicked", "already paused dialog opened" ]);
      show_already_paused_dialog(nextUnpauseTimeString);
    }
  }
}
function show_inbox_pause_menu(settings) {

  function _store_unpause_automatically_option(option) {
    // Use the empty string "" to save nothing
    $ibpMenu = get_inbox_pause_menu();
    $ibpMenu.find('.ibp-unpause-automatically-time').data("automaticUnpauseOption", option);
  }

  function _get_unpause_automatically_option() {
    $ibpMenu = get_inbox_pause_menu();
    return $ibpMenu.find('.ibp-unpause-automatically-time').data("automaticUnpauseOption");
  }

  function compose_unpause_automatically_menu(e, owner)
  {
    var ibpAutoUnpauseMenu = document.getElementById("b4g_menu");
    if (ibpAutoUnpauseMenu)
    {
      close_b4g_menu(e, owner);
    } else {
    var divClasses, divStyles;
      if(which_gmail() === NEW_GMAIL) {
        divClasses = "J-M J-M-ayU aka";
        divStyles = "min-width: 245px;";
      } else {
        divClasses = "";
        divStyles = "";
      }

      //Create the menu
      var ibp_auto_unpause_menu = '<ul id="b4g_menu" tabindex="0" class="b4g_menu" style="padding:0px;background:#fff;position:absolute; bottom: 10px; left: 128px;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
                  '<div id="b4g_inner_menu" class="b4g_menu SK AX ' + divClasses + '" style="' + divStyles + '-webkit-user-select: none; font-size:12px;padding:10px 0px 0px 0px;">' +
                    '<li class="b4g-standard-times"></li>' +
                    '<li class="menu-caption" style="padding:7px 11px 4px 11px;">' +
                      'At a specific time:' +
                    '</li>' +
                    '<li class="b4g-menu-option" style="padding: 0 0 7px 11px;">' +
                      '<div style="color: #666; font-style: italic; font-size: 10px; margin-top: 3px;" class="b4g_menu">' +
                        'Examples: "Monday 9am", "Dec 23"' +
                      '</div>' +
                      '<form autocomplete="off">' +
                        '<div style="padding-top:3px; vertical-align: middle;" class="b4g_menu">' +
                          '<input style="margin-left:1px;padding:3px 22px 2px 2px;" class="b4g_menu" type="text" name="time" id="datepicker">' +
                          '<input id="specific-time-submit" type="submit" value="Confirm" style="margin: 0px 7px 5px 9px;font-size:11px;vertical-align:top;" class="b4g_menu by-button by-button-secondary">' +
                        '</div>' +
                        '<div style="color:#969696; margin-left: 1px;">' +
                          '<span id="date-preview" class="b4g_menu" style="color:green;"></span>' +
                        '</div>' +
                      '</form>' +
                    '</li>' +
                  '</div>' +
                '</ul>';

      $(owner).parent().append(ibp_auto_unpause_menu);

      var ibpMenu = get_inbox_pause_menu();
      var ibpAutoUnpauseContainer = $("#b4g_menu", ibpMenu);
      var $dateForm = ibpAutoUnpauseContainer.find("form").first();
      prevent_form_submit($dateForm);
      keyboard_shortcuts.enable_menu_arrow_keys(ibpAutoUnpauseContainer);

      append_customized_default_menu_items($(".b4g-standard-times", ibpMenu));

      // Add additional option Monday morning
      var mondayMorningOption = build_b4g_menu_item('Monday morning', false);
      $(".b4g-menu-option:contains(Tomorrow morning)", ibpMenu).before(mondayMorningOption);


      // Removes the default options of anything after 2 weeks (month, year, etc)
      $(".b4g-menu-option:contains(2 weeks)", ibpMenu).nextAll().each(function() {
        $(this).remove();
      });

      // Replace the default "In X time" with "After X time" - date parser can
      // handle this so no other changes are needed
      $(".b4g_menu_item", ibpMenu).each(function() {
        $(this).text(function () {
          return $(this).text().replace("In", "After"); 
        });
      });

      add_dividers_to_default_menu_items(ibpMenu);

      $(".b4g_menu_item", ibpMenu).click(function() { 
        var offset = $(this).text();
        _store_unpause_automatically_option(offset);

        $(".b4g-ui-datepicker", ibpMenu).css("display", "none");
        $(".b4g_menu", ibpMenu).remove();
        $(".ibp-unpause-automatically-time-text", ibpMenu).text(String(offset));

        // GA event tracking and enabling auto unpause feature if necessary:
        var $autoUnpauseCheckbox = $(".ibp-unpause-automatically-checkbox", ibpMenu);
        if (!$autoUnpauseCheckbox.is(':checked')) {
          track_event([ "inbox pause dialog", "automatic unpause enabled" ]);
        }
        $autoUnpauseCheckbox.attr("checked", "checked");
        track_event([ "inbox pause dialog", "automatic unpause time selected", offset ]);
      });

      add_resolved_time_hover_text($(".b4g_menu_item", ibpMenu),
        BOOMERANG_MORNING_OFFSET);

      if (last_date_selected == null || last_date_selected < new Date()) {
        the_date = Date.today().addDays(2).addHours(8);
      } else {
        the_date = last_date_selected;
      }

      var strDate = the_date.toString("M/d/yyyy h:mm tt");
      var inputBox = $("#datepicker", ibpMenu);
      inputBox.val(strDate);
      inputBox.keyup(function () {
        var input = $(this).val();
        update_date_preview(input);
      });
      inputBox.focus(function () {
        var input = $(this).val();
        update_date_preview(input);
      });

      $("input#specific-time-submit", ibpMenu).click(function(e) {
        var offset = Date.parse(the_date);
        if (offset == null) {
          show_dialog("Unable to read specified time. Please try again.");
        } else if (offset < new Date()) {
          show_dialog("The time you entered is in the past. We can only unpause your Inbox in the future.");
        } else {
          var unpauseDate = caption_to_return_time(offset, BOOMERANG_MORNING_OFFSET);
          last_date_selected = unpauseDate;
          $(".ibp-unpause-automatically-time", ibpMenu).data("unpauseDate", unpauseDate);

          $(".b4g-ui-datepicker", ibpMenu).css("display", "none");
          $(".b4g_menu", ibpMenu).remove();
          $(".ibp-unpause-automatically-time-text", ibpMenu).html("<span class='by-text'>on </span>" + offset.toString("ddd MMM d yyyy h:mm tt"));

          // GA tracking, enable auto unpause if needed, and clear the stored auto unpause option
          var $autoUnpauseCheckbox = $(".ibp-unpause-automatically-checkbox");
          if (!$autoUnpauseCheckbox.is(':checked')) {
            track_event([ "inbox pause dialog", "automatic unpause enabled" ]);
          }
          $autoUnpauseCheckbox.attr("checked", "checked");
          _store_unpause_automatically_option("");
          track_event([ "inbox pause dialog", "automatic unpause time selected", "manual" ]);
        }
      });

      $(document).bind('click', {owner: owner}, b4g_menu_frameDoc_click_handler);
      bind_datepicker(inputBox);

      // Move datepicker button into the input text field
      $(".b4g-ui-datepicker-trigger", ibpMenu).css("cursor", "pointer");
      $(".b4g-ui-datepicker-trigger", ibpMenu).css("margin-left", "-21px");
      $(".b4g-ui-datepicker-trigger", ibpMenu).css("margin-top", "-2px");
      $(".b4g-ui-datepicker-trigger", ibpMenu).hover(function () {
        $(this).css("box-shadow", "0px 0px 3px #aaa");
      }, function () {
        $(this).css("box-shadow", "none");
      });

      // Prevent Gmail from making the textbox unselectable
      inputBox.mousedown(function(event){
        event.stopImmediatePropagation();
      });
      inputBox.css("-moz-user-select","text");

      inputBox.parents().each(function(){ $(this).css("-moz-user-select","text"); });

      // Focus input box for immediate typing
      inputBox.focus();
      inputBox.select();
      $('span#date-preview.b4g_menu',ibpMenu).text("");

    }
  }

  function create_pause() {
    var $pauseDialog = get_inbox_pause_menu();

    var url = "https://b4g.baydin.com/inboxpause/createpauseweb";
    var guser = get_gmail_user();
    var autoresponse = $pauseDialog.find('.ibp-autoresponder-checkbox').is(':checked');
    var hidelabel = $pauseDialog.find('.ibp-hide-label-checkbox').is(':checked');
    var subject = $pauseDialog.find('.ibp-autoresponder-subject').val();
    var body = $pauseDialog.find('.ibp-autoresponder-body').html();
    var addViralHook = $pauseDialog.find('.ibp-viral-hook').first().is(':visible');
    var periodicUnpauseEnabled = $pauseDialog.find('.ibp-periodic-unpause-checkbox').is(':checked');
    var deliveryExceptionEnabled = $pauseDialog.find(".ibp-delivery-exceptions-checkbox").is(':checked');
    var deliveryExceptionAddresses = $pauseDialog.find("#ibp-delivery-exceptions-addresses").val();
    var deliveryExceptionToAddresses = $pauseDialog.find("#ibp-delivery-exceptions-to-addresses").val();
    var deliveryExceptionDomains = $pauseDialog.find("#ibp-delivery-exceptions-domains").val();
    var deliveryExceptionWords = $pauseDialog.find("#ibp-delivery-exceptions-words").val();
    var automaticUnpauseTime = $pauseDialog.find('.ibp-unpause-automatically-checkbox').is(':checked') ?
            $pauseDialog.find('.ibp-unpause-automatically-time').data().unpauseDate.valueOf() : "None";
    var automaticUnpauseOption = _get_unpause_automatically_option();

    var encodedSubject = encodeURIComponent(subject);
    var encodedBody = encodeURIComponent(body);
    var encodedDeliveryExceptionAddresses = encodeURIComponent(deliveryExceptionAddresses);
    var encodedDeliveryExceptionToAddresses = encodeURIComponent(deliveryExceptionToAddresses);
    var encodedDeliveryExceptionDomains = encodeURIComponent(deliveryExceptionDomains);
    var encodedDeliveryExceptionWords = encodeURIComponent(deliveryExceptionWords);

    $.ajax({
      url: url,
      data: {
        "guser": guser,
        "timezone": jstz.determine().name(),
        "autoresponse": autoresponse,
        "hidelabel": hidelabel,
        "subject": encodedSubject,
        "body": encodedBody,
        "addViralHook": addViralHook,
        "periodicUnpauseEnabled": periodicUnpauseEnabled,
        "deliveryExceptionEnabled": deliveryExceptionEnabled,
        "deliveryExceptionAddresses": encodedDeliveryExceptionAddresses,
        "deliveryExceptionToAddresses": encodedDeliveryExceptionToAddresses,
        "deliveryExceptionDomains": encodedDeliveryExceptionDomains,
        "deliveryExceptionWords": encodedDeliveryExceptionWords,
        "automaticUnpauseTime": automaticUnpauseTime,
        "automaticUnpauseOption": automaticUnpauseOption,
      },
      type: "POST",
      dataType: 'json',
      xhr: xhr_with_credentials,
      success: function(response) {
        var status = response["status"];

        if (status === "error") {
          handle_inbox_pause_error_response(response);
        } else {
          _on_create_pause_success(response);
        }
      },
      error: function(xhr) {
        // 403 and 500 errors will execute this block
        handle_inbox_pause_error_response({"errorCode": xhr.status});
      },
      complete: function() {
        // Reset the IBP menu Pause button
        $pauseDialog.find(".ibp-submit-pause-text").text("Pause");
        var $pauseMenuButton = $pauseDialog.find('.ibp-submit-pause');
        $pauseMenuButton.removeAttr("disabled");
        $pauseMenuButton.removeClass("ibp-main-button-show-spinner-hide-logo");

      }
    });

    function _on_create_pause_success(response) {
      // Check if the hide label box is checked
      // If yes, save the setting to localStorage and hide the label
      if ($('#ibp_hide_label').is(':checked')) {
        var user = get_gmail_user();
        write_to_html5_storage('inbox_pause_hide_label_' + user, "checked='yes'");
      }
      // If no, save the setting to localStorage
      else {
        write_to_html5_storage('inbox_pause_hide_label_' + user, "");
      }
      set_paused_state(true);
      set_ibp_sync_timeout();

      if ($('.ibp-periodic-unpause-checkbox').is(':checked')) {
        handle_periodic_delivery();
      } else {
        ready_unpause_button();
        hide_inbox_pause_menu();
      }
    }
  }
  function _populate_menu_settings(settings) {
    // settings is a JSON that contains the user's sticky settings from the server.
    // the settings JSON is expected to have all of the fields as referenced below
    var $ibpMenu = get_inbox_pause_menu();
    if (settings["hideLabel"]) {
      $ibpMenu.find(".ibp-hide-label-checkbox").attr("checked", "checked");
    }

    if (settings["autoresponderEnabled"]) {
      $ibpMenu.find(".ibp-autoresponder-checkbox").attr("checked", "checked");
    }

    if (settings["autoresponderSubject"].length > 0) {
      $ibpMenu.find(".ibp-autoresponder-subject").val(settings["autoresponderSubject"]);
    }

    if (settings["autoresponderBody"].length > 0) {
      $ibpMenu.find(".ibp-autoresponder-body")[0].innerHTML = (settings["autoresponderBody"]);
    }

    if (settings["deliveryExceptionAddresses"].length > 0) {
      $ibpMenu.find("#ibp-delivery-exceptions-addresses").val(settings["deliveryExceptionAddresses"]);
    }
    
    if (settings["deliveryExceptionToAddresses"].length > 0) {
      $ibpMenu.find("#ibp-delivery-exceptions-to-addresses").val(settings["deliveryExceptionToAddresses"]);
    }

    if (settings["deliveryExceptionDomains"].length > 0) {
      $ibpMenu.find("#ibp-delivery-exceptions-domains").val(settings["deliveryExceptionDomains"]);
    }

    if (settings["deliveryExceptionWords"].length > 0) {
      $ibpMenu.find("#ibp-delivery-exceptions-words").val(settings["deliveryExceptionWords"]);
    }

    if (settings["weekdaysOnly"]) {
      $ibpMenu.find(".ibp-periodic-weekdays-only").attr("checked", "checked");
    }

    if (settings["automaticUnpauseEnabled"]) {
        $ibpMenu.find(".ibp-unpause-automatically-checkbox").attr("checked", "checked");
    }

    if (settings["automaticUnpauseOption"] && settings["automaticUnpauseOption"].length > 0) {
        $ibpMenu.find('.ibp-unpause-automatically-time-text').text(settings["automaticUnpauseOption"]);
        $ibpMenu.find('.ibp-unpause-automatically-time').data("automaticUnpauseOption", settings["automaticUnpauseOption"]);
    } else {
        var offset = $ibpMenu.find('.ibp-unpause-automatically-time-text').text();
        _store_unpause_automatically_option(offset);
    }

    var times = JSON.parse(settings["periodicUnpauseTimes"]);
    if (times.length > 0) {
      $.each(times.sort(), function(index, time) {
        _append_new_periodic_unpause_input(new Date(time));
      });
    } else {
      // Set up 3 randomized periodic unpause times at 8am, 1pm, 5pm
      _append_new_periodic_unpause_input(_get_valid_periodic_unpause_time(8));
      _append_new_periodic_unpause_input(_get_valid_periodic_unpause_time(13));
      _append_new_periodic_unpause_input(_get_valid_periodic_unpause_time(16));
    }

    function _restore_pro_level_settings_toggle_states() {
      if (settings["deliveryExceptionEnabled"]) {
        $ibpMenu.find(".ibp-delivery-exceptions-checkbox").attr("checked", "checked");
      }

      if (settings["periodicUnpauseEnabled"]) {
        $ibpMenu.find(".ibp-periodic-unpause-checkbox").attr("checked", "checked");
      }
    }

    continue_if_on_pro_plan(_restore_pro_level_settings_toggle_states, function(){});
  }
  function _set_up_checkbox_toggles() {
    var analyticsCategory = "inbox pause dialog";

    var autoresponderEnabledGA = [ analyticsCategory, "autoresponder enabled" ];
    var autoresponderDisabledGA = [ analyticsCategory, "autoresponder disabled" ];
    var periodicUnpauseEnabledGA = [ analyticsCategory, "periodic unpause enabled" ];
    var periodicUnpauseDisabledGA = [ analyticsCategory, "periodic unpause disabled" ];
    var deliveryExceptionsEnabledGA = [ analyticsCategory, "delivery exceptions enabled" ];
    var deliveryExceptionsDisabledGA = [ analyticsCategory, "delivery exceptions disabled" ];

    _control_input_display($(".ibp-autoresponder-checkbox"), $(".ibp-autoresponder-input"), autoresponderEnabledGA, autoresponderDisabledGA);
    _control_input_display($(".ibp-periodic-unpause-checkbox"), $(".ibp-periodic-unpause-input"), periodicUnpauseEnabledGA, periodicUnpauseDisabledGA);
    _control_input_display($(".ibp-delivery-exceptions-checkbox"), $(".ibp-delivery-exceptions-input"), deliveryExceptionsEnabledGA, deliveryExceptionsDisabledGA);
  }
  function _control_input_display($checkbox, $input, enabledAnalytics, disabledAnalytics) {
    // set initial state
    if ($checkbox.is(":checked")) {
      $input.slideDown();
    } else {
      $input.slideUp();
    }

    $checkbox.bind('change', function() {
      if ($checkbox.is(":checked")) {
        $input.slideDown();
        track_event(enabledAnalytics);
      } else {
        $input.slideUp();
        track_event(disabledAnalytics);
      }
    });
  }
  function _get_valid_periodic_unpause_time(optionalHour) {
    // Return a valid periodic time that doesn't conflict with any of the existing times.
    var unpauseTimes = [];
    $('.ibp-periodic-unpause-time').each(function() {
      var rawTime = $(this).children().first().val() + " " + $(this).children().find(':selected').val();
      var parsedTime = Date.parse(rawTime);
      if (parsedTime) {
        unpauseTimes.push(parsedTime);
      }
    });
    var HOURS_IN_A_DAY = 24;
    var MINUTE_CHOICES_IN_AN_HOUR = 12; // every 5 minute interval: 00, 05, 10, 15, ...
    var MINUTE_INTERVAL = 5;
    var UNPAUSE_MINUTES_RANGE_LIMIT = 15;
    var newDate;
    do {
      validPeriodicTime = true;
      var randomHour = optionalHour ? optionalHour : Math.floor(Math.random() * HOURS_IN_A_DAY);
      var randomMinute = Math.floor(Math.random() * MINUTE_CHOICES_IN_AN_HOUR) * MINUTE_INTERVAL;

      newDate = Date.today().addHours(randomHour).addMinutes(randomMinute);
      for (var i = 0; i < unpauseTimes.length; i++) {
        var timeToCompare = unpauseTimes[i];
        if (timeToCompare.isBefore(newDate.clone().addMinutes(UNPAUSE_MINUTES_RANGE_LIMIT)) && 
          timeToCompare.isAfter(newDate.clone().addMinutes(-UNPAUSE_MINUTES_RANGE_LIMIT))) {
          validPeriodicTime = false;
        }
      }
    } while (!validPeriodicTime);
    return newDate;
  }
  function _append_new_periodic_unpause_input(optionalDate) {
    // appends the inputted date to the periodic unpause list
    // if no input, this function will create a blank input and focus it
    var numInputs = $('.ibp-periodic-unpause-time').length;
    if (numInputs < 10) {
      var $addTimeButton = $('.ibp-periodic-unpause-add');
      var $newPeriodicInput =
        $("<li class='ibp-periodic-unpause-time'>" +
          "<input type='text'>" +
          "<div class='VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji ibp-periodic-unpause-am-pm-select-container'>" +
            "<select class='G-asx ibp-periodic-unpause-am-pm-select'>" +
              "<option value='AM'>AM</option>" +
              "<option value='PM'>PM</option>" +
            "</select>" +
          "</div>" +
          "<span class='ibp-remove-periodic-button'>" +
          "<img src='" + B4G_STATIC_FILES_DIRECTORY + "removesignature.png' class='ibp-remove-periodic-button-image'>" +
          "</span>" +
        "</li>");
      $addTimeButton.before($newPeriodicInput);

      if (optionalDate) {
        var hhmmDate = optionalDate.toString("h:mm");
        var amPm = optionalDate.toString("tt");
        $newPeriodicInput.find('input').val(hhmmDate);
        $newPeriodicInput.find('option[value="' + amPm + '"]').attr("selected", "selected");
      } else {
        $newPeriodicInput.find('input').focus();
      }

      $newPeriodicInput.find('.ibp-remove-periodic-button').click(function(e) {
        $newPeriodicInput.remove();
        if ($addTimeButton.is(":hidden") && numInputs < 10) {
          $addTimeButton.show();
        }
        e.stopPropagation();
      });
    }
  }
  function _set_up_periodic_unpause_functions() {
    $(".ibp-periodic-unpause-add").click(function() {
      _append_new_periodic_unpause_input();

      if ($('.ibp-periodic-unpause-time').length >= 10) {
        $(this).hide();
      }
    });
  }
  function _validate_potential_unpause_times() {
    // Returns False if the range between any two times of 
    // .ibp-periodic-unpause-input is within UNPAUSE_MINUTES_RANGE_LIMIT, 
    // or if any of the times are poorly formed (e.g. "11:62pm")
    // Returns True otherwise.

    var UNPAUSE_MINUTES_RANGE_LIMIT = 15;
    var unpauseTimes = [];
    var allValidTimes = true;
    $('.ibp-periodic-unpause-time').each(function() {
      var rawTime = $(this).children().first().val() + " " + $(this).children().find(':selected').val();
      if(!extractTime(rawTime)) {
        allValidTimes = false;
        return false;
      }
      var parsedTime = Date.parse(rawTime);
      unpauseTimes.push(parsedTime);
    });
    if (!allValidTimes) {
      return false;
    }

    unpauseTimes.sort();

    if (unpauseTimes.length == 0) {
      return false;
    }

    for (var i = 0; i < unpauseTimes.length - 1; i++) {
      var currentUnpauseTime = unpauseTimes[i].clone();
      var nextUnpauseTime = unpauseTimes[i+1].clone();
      currentUnpauseTime.addMinutes(UNPAUSE_MINUTES_RANGE_LIMIT);
      if (currentUnpauseTime.isAfter(nextUnpauseTime)) {
        return false;
      }
    }

    // check for wraparound edge case, like 12:00am and 11:59pm
    var lastUnpauseTime = unpauseTimes[unpauseTimes.length - 1].clone();
    var firstUnpauseTimeFastForwarded = unpauseTimes[0].clone().addDays(1);
    lastUnpauseTime.addMinutes(UNPAUSE_MINUTES_RANGE_LIMIT);
    if (lastUnpauseTime.isAfter(firstUnpauseTimeFastForwarded)) {
      return false;
    }
    return true;
  }

  var $pauseButton = $('#ibp-main');
  if (which_gmail()===NEW_GMAIL) {
    var $pauseMenu = create_new_pause_menu();
  } else {
    var $pauseMenu = create_old_pause_menu();
  }

  var $inboxPauseOverlay = $(INBOX_PAUSE_OVERLAY);
  $("body").append($inboxPauseOverlay);
  $("body").append($pauseMenu);

  _populate_menu_settings(settings);

  _set_up_checkbox_toggles();
  _set_up_periodic_unpause_functions();

  // set up GA event tracking for "Hide label" and "Automatic unpause" toggles
  var $autoUnpauseToggle = $pauseMenu.find('#ibp-unpause-automatically-checkbox');
  $autoUnpauseToggle.bind('change', function() {
    if ($autoUnpauseToggle.is(":checked")) {
        track_event([ "inbox pause dialog", "automatic unpause enabled" ]);
      } else {
        track_event([ "inbox pause dialog", "automatic unpause disabled" ]);
      }
  });
  var $hideLabelToggle = $pauseMenu.find('#ibp-hide-label-checkbox');
  $hideLabelToggle.bind('change', function() {
    if ($hideLabelToggle.is(":checked")) {
        track_event([ "inbox pause dialog", "hide label enabled" ]);
      } else {
        track_event([ "inbox pause dialog", "hide label disabled" ]);
      }
  });

  $('.ibp-menu-cancel').click(function() {
    track_event([ "inbox pause dialog", "cancel button clicked" ]);
    hide_inbox_pause_menu();
  });

  $('.ibp-submit-pause').click(function() {
    $(this).attr("disabled", "disabled");
    // Update the time to be the most current offset, in case they keep the menu open for a long time
    if ($('.ibp-unpause-automatically-checkbox').is(':checked')) {
      var offset = $('.ibp-unpause-automatically-time-text').text();
      var unpauseDate = caption_to_return_time(offset, BOOMERANG_MORNING_OFFSET);
      $(".ibp-unpause-automatically-time").data("unpauseDate", unpauseDate); 
    }
    if ($('.ibp-periodic-unpause-checkbox').is(':checked') && !_validate_potential_unpause_times()) {
      show_dialog("Please choose valid times that are more than 15 minutes apart.");
      $(this).removeAttr("disabled");
      track_event([ "inbox pause dialog", "pause button clicked", "invalid periodic unpauses" ]);
    } else {
      $(this).find(".ibp-submit-pause-text").text("");
      $(this).addClass('ibp-main-button-show-spinner-hide-logo');
      track_event([ "inbox pause dialog", "pause button clicked", "pause created" ]);
      create_pause();
    }
  });

  $(".ibp-auto-unpause-picker").click(function(e){
    compose_unpause_automatically_menu(e, this);
  });

  function setup_IBP_menu_personal_level_features() {
    // Allow removal of viral hook
    function hide_viral_hook() {
      var $container = $('.ibp-autoresponder-body-container').first();
      var $hook = $container.find('.ibp-viral-hook').first();
      var $bodyInput = $container.find('.ibp-autoresponder-body').first();
      $hook.hide();
      $bodyInput.height($container.height());
    }
    if (settings["addViralHook"]) {
      // Enable the viral hook close button
      var $hookCloseButton = $('.ibp-viral-hook-close-button').first();
      $hookCloseButton.click(hide_viral_hook);

      // Apply :hover styling to the viral hook close button
      var $closeButtonImage = $hookCloseButton.find('.ibp-viral-hook-close-button-image').first();
      $closeButtonImage.addClass('ibp-can-remove-hook');

    } else {
      // Automatically remove viral hook
      hide_viral_hook();
    }
  }

  function disable_IBP_menu_personal_level_features() {
    // Apply tooltip to the viral hook close button
    var $hookCloseButton = $('.ibp-viral-hook-close-button').first();
    var $hookTooltipContent = (
      "Please <a href='http://www.boomeranggmail.com/subscriptions.html?utm_source=ip-paywall&utm_medium=signature-removal'>upgrade to any paid plan</a> to\nremove this signature."
    );

    function display_viral_hook_close_tooltip () {
      var $hookCloseTooltip = $(
        '<div class="T-ays ibp-viral-hook-tooltip-element" role="tooltip">' +
          '<div class="T-ays-W095bf">' +
            '<div class="ibp-menu-tooltip ibp-viral-hook-close-tooltip">' + $hookTooltipContent + '</div>' +
          '</div>' +
          '<div class="T-ays-hFsbo T-ays-atG ibp-viral-hook-tooltip-arrow">' +
            '<div class="T-ays-atD"></div>' +
            '<div class="T-ays-atC"></div>' +
          '</div>' +
        '</div>'
      );
      $hookCloseButton.after($hookCloseTooltip);

      var $ibpMenu = get_inbox_pause_menu();
      var $closeHookImage = $('.ibp-viral-hook-close-button-image').first();
      var $tooltipArrow = $('.ibp-viral-hook-tooltip-arrow').first().find('.T-ays-atC').first();
      
      // Position tooltip vertically:
      // A top setting of 0 puts the tooltip at the top of the IBP menu, so we must place the tooltip to the offset of the close button image minus the IBP menu's vertical offset
      // The outerHeight / 2 values fine tune the positioning of the tooltip, so that the arrow points to the middle of the button
      var tooltipTopPosition = $closeHookImage.offset().top - $ibpMenu.offset().top + ($tooltipArrow.outerHeight() / 2) + ($closeHookImage.outerHeight() / 2);
      $hookCloseTooltip.css("top", tooltipTopPosition);

      // Position tooltip horizontally:
      // A top setting of 0 puts the tooltip at the left edge of the IBP menu, so we have to place the tooltip by taking the left offset of the close button minus the IBP menu's horizontal offset
      // The transform value centers the tooltip so that the tooltip's arrow is aligned with the close button
      var tooltipLeftPosition = $closeHookImage.offset().left - $ibpMenu.offset().left;
      $hookCloseTooltip.css("left", tooltipLeftPosition);
      var horizontalTranslation = ($hookCloseTooltip.outerWidth() / 2) - ($closeHookImage.outerWidth() / 2);
      $hookCloseTooltip.css("transform", "translateX(-"+horizontalTranslation+"px)");

      $(document).click(function removeTooltip(e){
        var target = get_target(e);
        if ($(target).parents().andSelf().filter(".ibp-viral-hook-tooltip-element, .ibp-viral-hook-close-button").length === 0) {
          $hookCloseTooltip.remove();
          $(document).unbind('click', removeTooltip);
        }
      });
    }
    
    $hookCloseButton.click(display_viral_hook_close_tooltip);

  }

  function disable_IBP_menu_pro_level_features() {
    var $menu = get_inbox_pause_menu();

    // Add a link to upgrade to pro/premium under the delivery exceptions and periodic unpauses
    var $deliveryExceptionsPaywallUpgradeLink = $(
      "<div class='ibp-paywall-link-container'>" +
        "<a href='http://www.boomeranggmail.com/subscriptions.html?utm_source=ip-paywall&utm_medium=delivery-exceptions' class='ibp-paywall-link'>Upgrade to the Pro or Premium plan to enable this feature.</a>" +
      "</div>"
    );
    var $deliveryExceptions = $menu.find('.ibp-menu-item-delivery-exceptions-body').first();
    $deliveryExceptions.append($deliveryExceptionsPaywallUpgradeLink);
    var $periodicUnpausePaywallUpgradeLink = $(
      "<div class='ibp-paywall-link-container'>" +
        "<a href='http://www.boomeranggmail.com/subscriptions.html?utm_source=ip-paywall&utm_medium=periodic-unpause' class='ibp-paywall-link'>Upgrade to the Pro or Premium plan to enable this feature.</a>" +
      "</div>"
    );
    var $periodicUnpause = $menu.find('.ibp-periodic-unpause-body').first();
    $periodicUnpause.append($periodicUnpausePaywallUpgradeLink);

    // Apply disabled styling to the delivery exceptions and periodic unpauses switches
    var $deliveryExceptionsSwitch = $deliveryExceptions.parent().find('.b4g-toggle-slider').first();
    var $periodicUnpauseSwitch = $periodicUnpause.parent().find('.b4g-toggle-slider').first();
    var $disabledSwitches = $deliveryExceptionsSwitch.add($periodicUnpauseSwitch);
    $disabledSwitches.addClass('b4g-toggle-slider-disabled');

    // Disable checkboxes of paywalled features
    var $deliveryExceptionsCheckbox = $menu.find('.ibp-delivery-exceptions-checkbox').first();
    var $periodicUnpauseCheckbox = $menu.find('.ibp-periodic-unpause-checkbox').first();
    var $disabledCheckboxes = $deliveryExceptionsCheckbox.add($periodicUnpauseCheckbox);
    $disabledCheckboxes.attr("disabled", "disabled");
  }

  continue_if_on_personal_plan(setup_IBP_menu_personal_level_features, disable_IBP_menu_personal_level_features);
  continue_if_on_pro_plan($.noop, disable_IBP_menu_pro_level_features);

}

function create_old_pause_menu() {
  var SAMPLE_AUTORESPONDER_TEXT = "Thanks for emailing! I paused my Inbox, so I won't see your email for a while. If this is urgent, please contact me another way!";
  var HIDE_LABEL_TOOLTIP_TEXT = "While your Inbox is paused, all new\nincoming emails get moved to a\ntemporary label. We can hide the\ntemporary label from being\ndisplayed in your label list so you\ndon't get tempted to go check it.";
  var urgentEmailPlaceHolderArray = get_gmail_user().split("@");  // take user's email and add '+urgent' to it
  var urgentEmailPlaceHolder = urgentEmailPlaceHolderArray[0] + "+urgent@" + urgentEmailPlaceHolderArray[1];
  return $(
    "<div class='ibp-menu'>" +
      "<div class='ibp-menu-header'>" +
        "Inbox Pause<span class='ibp-menu-header-signature'> by Boomerang</span>" +
        '<span data-tooltip-contained="true" data-tooltip-align="r,l">' +
          "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='ibp-tooltip-icon'>" +
          "<div class='T-ays-a45'>" +
            "<div class='ibp-menu-tooltip'>" + INBOX_PAUSE_GENERAL_TOOLTIP_TEXT + "</div>" +
          "</div>" +
        '</span>' +
      "</div>" +
      "<div class='ibp-menu-divider'></div>" +
      "<div class='ibp-menu-main'>" +
        "<div class='ibp-menu-main-left'>" +

          "<div class='ibp-menu-item'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-autoresponder-checkbox' class='ibp-autoresponder-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body'>" +
              "<label for='ibp-autoresponder-checkbox' class='ibp-menu-item-body-title'>Turn on Auto-Responder</label>" +
              "<div class='ibp-menu-item-body-detail ibp-autoresponder-input'>" +
                "<li>" +
                  "<strong>Subject: </strong><input type='text' class='ibp-autoresponder-subject' value='My Inbox is Paused'>" +
                "</li>" +
                "<li>" +
                  "<div class='ibp-autoresponder-body-container'>" +
                    "<div class='ibp-autoresponder-body' contenteditable='true'>" + SAMPLE_AUTORESPONDER_TEXT + "</div>" +
                    "<div class='ibp-viral-hook'>" +
                      "<div>--</div>" +
                      "<span class='ibp-viral-hook-close-button'><img src='" + B4G_STATIC_FILES_DIRECTORY + "removesignature.png' class='ibp-viral-hook-close-button-image'></span>" +
                      "<div>Want to pause your Inbox too?</div>" +
                      "<div><strong>Learn more at <a target='_blank' href='http://inboxpause.com'>inboxpause.com</a></strong></div>" +
                    "</div>" +
                  "</div>" +
                "</li>" +
              "</div>" +
            "</div>" +
          "</div>" +

          "<div class='ibp-menu-item'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-delivery-exceptions-checkbox' class='ibp-delivery-exceptions-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body ibp-menu-item-delivery-exceptions-body'>" +
              "<label for='ibp-delivery-exceptions-checkbox' class='ibp-menu-item-body-title'>Delivery exceptions</label>" +
              "<div class='ibp-menu-item-body-detail ibp-delivery-exceptions-input'>" +
                "<li>" +
                  "While paused, continue delivering messages" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "from addresses: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-addresses' class='ibp-delivery-exceptions-textarea' placeholder='john@example.com, sara@example.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or addressed to: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-to-addresses' class='ibp-delivery-exceptions-textarea' placeholder='" + urgentEmailPlaceHolder + ", work@company.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or from domains: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-domains' class='ibp-delivery-exceptions-textarea'  placeholder='example.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or with words: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-words' class='ibp-delivery-exceptions-textarea' placeholder='urgent'></textarea>" +
                "</li>" +
              "</div>" +
            "</div>" +
          "</div>" +

        "</div>" +

        "<div class='ibp-menu-main-right'>" +

          "<div class='ibp-menu-item'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-hide-label-checkbox' class='ibp-hide-label-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body'>" +
              "<label for='ibp-hide-label-checkbox' class='ibp-menu-item-body-title'>Hide label</label>" +
              "<span data-tooltip-contained='true' data-tooltip-align='r,l'>" +
                "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='ibp-tooltip-icon'>" +
                "<div class='T-ays-a45'>" +
                  "<div class='ibp-menu-tooltip'>" + HIDE_LABEL_TOOLTIP_TEXT + "</div>" +
                "</div>" +
              "</span>" +
            "</div>" +
          "</div>" +

          "<div class='ibp-menu-item'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-periodic-unpause-checkbox' class='ibp-periodic-unpause-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body ibp-periodic-unpause-body'>" +
              "<label for='ibp-periodic-unpause-checkbox' class='ibp-menu-item-body-title'>Bring messages into Inbox on a schedule</label>" +
              "<div class='ibp-menu-item-body-detail ibp-periodic-unpause-input'>" +
                "<label for='ibp-periodic-weekdays-only-checkbox'>" +
                "<input class='ibp-periodic-weekdays-only' type='checkbox' id='ibp-periodic-weekdays-only-checkbox'>" +
                "<span> Weekdays only</span>" +
                "</label>" +
                "<button class='ibp-menu-button ibp-periodic-unpause-add by-button'>Add Time</button>" +
              "</div>" +
            "</div>" +
          "</div>" +
        "</div>" +

      "</div>" +
      "<div class='ibp-menu-divider'></div>" +
      "<div class='ibp-menu-footer'>" +
        "<div class='ibp-menu-footer-option'>" +

          "<label class='b4g-toggle-switch'>" +
            "<input type='checkbox' id='ibp-unpause-automatically-checkbox' class='ibp-unpause-automatically-checkbox'>" +
            "<div class='b4g-toggle-slider'></div>" +
          "</label>" +
          "<div class='ibp-menu-item-body ibp-unpause-automatically'>" +
            "<label for='ibp-unpause-automatically-checkbox' class='ibp-menu-item-body-title'>Unpause automatically</label>" +

            '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 ibp-auto-unpause-picker"' +
              ' style="padding: 1px 2px; font-weight: normal; font-size: 12px; height: 18px; border: 1px solid #EEEEEE; border-radius: 0px;' +
              ' background-color: #ffffff; background-image: none; color: #000; margin-left: 5px;">' +

              '<div class="ibp-unpause-automatically-time" aria-haspopup="true" style="line-height: 20px;" role="button" tabindex="0">' +
                '<span class="ibp-unpause-automatically-time-text conditional-caption-text" style="margin-left: 2px; text-transform: none;">After 2 hours</span>' +
                '<div class="VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji">' +
                '<div class="conditional-caption-arrow G-asx T-I-J3 J-J5-Ji ibp-auto-unpause-caption-arrow" style="margin-left: 15px; margin-right: 5px;">&nbsp;</div>' +
                '</div>' +
              '</div>' +
            '</div>' +

          "</div>" +

        "</div>" +
        "<div class='ibp-menu-footer-button-group'>" +
          "<button class='ibp-submit-pause ibp-menu-button'>" +
            "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_spinner.gif'>" +
            "<span class='ibp-submit-pause-text'>Pause</span>" +
          "</button> " +
          "<button class='ibp-menu-cancel by-button ibp-menu-button'>Cancel</button>" +
        "</div>" +
      "</div>" +
    "</div>"
  );
}

function create_new_pause_menu() {
  var SAMPLE_AUTORESPONDER_TEXT = "Thanks for emailing! I paused my Inbox, so I won't see your email for a while. If this is urgent, please contact me another way!";
  var HIDE_LABEL_TOOLTIP_TEXT = "While your Inbox is paused, all new\nincoming emails get moved to a\ntemporary label. We can hide the\ntemporary label from being\ndisplayed in your label list so you\ndon't get tempted to go check it.";
  var urgentEmailPlaceHolderArray = get_gmail_user().split("@");  // take user's email and add '+urgent' to it
  var urgentEmailPlaceHolder = urgentEmailPlaceHolderArray[0] + "+urgent@" + urgentEmailPlaceHolderArray[1];
  return $(
    "<div class='ibp-menu-new-ui'>" +
      "<div class='ibp-menu-header-new-ui'>" +
        "Inbox Pause<span class='ibp-menu-header-signature-new-ui'> by Boomerang</span>" +
        '<span data-tooltip-contained="true" data-tooltip-align="r,l">' +
          "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='ibp-tooltip-icon'>" +
          "<div class='T-ays-a45'>" +
            "<div class='ibp-menu-tooltip'>" + INBOX_PAUSE_GENERAL_TOOLTIP_TEXT + "</div>" +
          "</div>" +
        '</span>' +
      "</div>" +
      "<div class='ibp-menu-main-new-ui'>" +
        "<div class='ibp-menu-main-left'>" +

          "<div class='ibp-menu-item-new-ui'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-autoresponder-checkbox' class='ibp-autoresponder-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body'>" +
              "<label for='ibp-autoresponder-checkbox' class='ibp-menu-item-body-title'>Turn on Auto-Responder</label>" +
              "<div class='ibp-menu-item-body-detail ibp-autoresponder-input'>" +
                "<li>" +
                  "<strong>Subject: </strong><input type='text' class='ibp-autoresponder-subject' value='My Inbox is Paused'>" +
                "</li>" +
                "<li>" +
                  "<div class='ibp-autoresponder-body-container'>" +
                    "<div class='ibp-autoresponder-body' contenteditable='true'>" + SAMPLE_AUTORESPONDER_TEXT + "</div>" +
                    "<div class='ibp-viral-hook'>" +
                      "<div>--</div>" +
                      "<span class='ibp-viral-hook-close-button'><img src='" + B4G_STATIC_FILES_DIRECTORY + "removesignature.png' class='ibp-viral-hook-close-button-image'></span>" +
                      "<div>Want to pause your Inbox too?</div>" +
                      "<div><strong>Get Boomerang at <a target='_blank' href='http://boomeranggmail.com'>boomeranggmail.com</a></strong></div>" +
                    "</div>" +
                  "</div>" +
                "</li>" +
              "</div>" +
            "</div>" +
          "</div>" +

          "<div class='ibp-menu-item-new-ui'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-delivery-exceptions-checkbox' class='ibp-delivery-exceptions-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body ibp-menu-item-delivery-exceptions-body'>" +
              "<label for='ibp-delivery-exceptions-checkbox' class='ibp-menu-item-body-title'>Delivery exceptions</label>" +
              "<div class='ibp-menu-item-body-detail ibp-delivery-exceptions-input'>" +
                "<li>" +
                  "While paused, continue delivering messages" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "from addresses: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-addresses' class='ibp-delivery-exceptions-textarea' placeholder='john@example.com, sara@example.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or addressed to: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-to-addresses' class='ibp-delivery-exceptions-textarea' placeholder='" + urgentEmailPlaceHolder + ", work@company.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or from domains: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-domains' class='ibp-delivery-exceptions-textarea'  placeholder='example.com'></textarea>" +
                "</li>" +
                "<li class='ibp-delivery-exceptions-item'>" +
                  "or with words: " +
                  "<textarea type='text' id='ibp-delivery-exceptions-words' class='ibp-delivery-exceptions-textarea' placeholder='urgent'></textarea>" +
                "</li>" +
              "</div>" +
            "</div>" +
          "</div>" +

        "</div>" +

        "<div class='ibp-menu-main-right'>" +

          "<div class='ibp-menu-item-new-ui'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-hide-label-checkbox' class='ibp-hide-label-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body'>" +
              "<label for='ibp-hide-label-checkbox' class='ibp-menu-item-body-title'>Hide label</label>" +
              "<span data-tooltip-contained='true' data-tooltip-align='r,l'>" +
                "<img src='" + B4G_STATIC_FILES_DIRECTORY + "questionmark.png' class='ibp-tooltip-icon'>" +
                "<div class='T-ays-a45'>" +
                  "<div class='ibp-menu-tooltip'>" + HIDE_LABEL_TOOLTIP_TEXT + "</div>" +
                "</div>" +
              "</span>" +
            "</div>" +
          "</div>" +

          "<div class='ibp-menu-item-new-ui'>" +
            "<label class='b4g-toggle-switch'>" +
              "<input type='checkbox' id='ibp-periodic-unpause-checkbox' class='ibp-periodic-unpause-checkbox'>" +
              "<div class='b4g-toggle-slider'></div>" +
            "</label>" +
            "<div class='ibp-menu-item-body ibp-periodic-unpause-body'>" +
              "<label for='ibp-periodic-unpause-checkbox' class='ibp-menu-item-body-title'>Bring messages into Inbox on a schedule</label>" +
              "<div class='ibp-menu-item-body-detail ibp-periodic-unpause-input'>" +
                "<label for='ibp-periodic-weekdays-only-checkbox'>" +
                "<input class='ibp-periodic-weekdays-only' type='checkbox' id='ibp-periodic-weekdays-only-checkbox'>" +
                "<span> Weekdays only</span>" +
                "</label>" +
                "<button class='ibp-menu-button ibp-periodic-unpause-add by-button'>Add Time</button>" +
              "</div>" +
            "</div>" +
          "</div>" +
        "</div>" +

      "</div>" +
      "<div class='ibp-menu-divider'></div>" +
      "<div class='ibp-menu-footer'>" +
        "<div class='ibp-menu-footer-option'>" +

          "<label class='b4g-toggle-switch'>" +
            "<input type='checkbox' id='ibp-unpause-automatically-checkbox' class='ibp-unpause-automatically-checkbox'>" +
            "<div class='b4g-toggle-slider'></div>" +
          "</label>" +
          "<div class='ibp-menu-item-body ibp-unpause-automatically'>" +
            "<label for='ibp-unpause-automatically-checkbox' class='ibp-menu-item-body-title'>Unpause automatically</label>" +

            '<div class="T-I J-J5-Ji Bq lX T-I-ax7 L3 ibp-auto-unpause-picker"' +
              ' style="padding: 1px 2px; font-weight: normal; font-size: 12px; height: 18px; border: 1px solid #EEEEEE; border-radius: 0px;' +
              ' background-color: #ffffff; background-image: none; color: #000; margin-left: 5px;">' +

              '<div class="ibp-unpause-automatically-time" aria-haspopup="true" style="line-height: 20px;" role="button" tabindex="0">' +
                '<span class="ibp-unpause-automatically-time-text conditional-caption-text" style="margin-left: 2px; text-transform: none;">After 2 hours</span>' +
                '<div class="VP5otc-d2fWKd tk3N6e-I-J3 J-J5-Ji">' +
                '<div class="conditional-caption-arrow G-asx T-I-J3 J-J5-Ji ibp-auto-unpause-caption-arrow" style="margin-left: 15px; margin-right: 5px;">&nbsp;</div>' +
                '</div>' +
              '</div>' +
            '</div>' +

          "</div>" +

        "</div>" +
        "<div class='ibp-menu-footer-button-group'>" +
          "<button class='ibp-submit-pause ibp-submit-pause-new-ui ibp-menu-button-new-ui'>" +
            "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_spinner.gif'>" +
            "<span class='ibp-submit-pause-text'>Pause</span>" +
          "</button> " +
          "<button class='ibp-menu-cancel by-button ibp-menu-button-new-ui'>Cancel</button>" +
        "</div>" +
      "</div>" +
    "</div>"
  );
}

function hide_inbox_pause_menu() {
  var $pauseMenu = get_inbox_pause_menu();
  $pauseMenu.remove();
  $(".ibp-overlay").remove();
}

function get_inbox_pause_menu() {
  var $ibpMenu;
  if (which_gmail() === NEW_GMAIL) {
    $ibpMenu = $('.ibp-menu-new-ui').first();
    if ($ibpMenu.length === 0) {
      $ibpMenu = $('.ibp-menu').first();
    }
  } else {
    $ibpMenu = $('.ibp-menu').first();
  }
  return $ibpMenu;
}

function handle_periodic_delivery() {
  var times = [];
  $('.ibp-periodic-unpause-time').each(function() {
    var rawTime = $(this).children().first().val() + " " + $(this).children().find(':selected').val();
    var parsedTime = Date.parse(rawTime).valueOf();
    times.push(parsedTime);
  });
  var guser = get_gmail_user();
  var weekdaysOnly = $('.ibp-periodic-weekdays-only').is(":checked");
  var url = "https://b4g.baydin.com/inboxpause/schedulerecurringunpauseweb"
  $.ajax({
    url: url,
    data: {
      "guser": guser,
      "weekdaysOnly": weekdaysOnly,
      "times": JSON.stringify(times),
    },
    type: "POST",
    dataType: 'json',
    xhr: xhr_with_credentials,
    success: function(response) {
      var status = response["status"];
      
      if (status === "error") {
        handle_inbox_pause_error_response(response);
      } else {
        ready_unpause_button();
        hide_inbox_pause_menu();
      }
    },
  });
}
function unpause_inbox() {
  function check_pause_status_before_unpausing() {
    var $pauseButton = $('#ibp-main');
    var $pauseButtonText = $pauseButton.find('#ibp-main-text');
    $pauseButtonText.text("");
    $pauseButton.addClass('ibp-main-button-show-spinner-hide-logo');
    var url = "https://b4g.baydin.com/inboxpause/checkpaused";
    var guser = get_gmail_user();

    $.ajax({
      url: url,
      data: {
        "guser": guser,
      },
      type: "GET",
      dataType: 'json',
      xhr: xhr_with_credentials,
      success: function(response) {
        unpause_after_getting_pause_status(response);
      },
      error: function(xhr) {
        handle_inbox_pause_error_response({"errorCode": xhr.status});
      },
    });
  }
  function unpause_after_getting_pause_status(response) {
    if (!response['isPaused']) {
      set_paused_state(false);
      click_gmail_refresh_button();
      reload_pause_button();
    } else {
      var url = "https://b4g.baydin.com/inboxpause/cleanupweb";
      var guser = get_gmail_user();

      $.ajax({
        url: url,
        data: {
          "guser": guser,
        },
        type: "POST",
        dataType: 'json',
        xhr: xhr_with_credentials,
        success: function(response) {
          if(response["status"] == "error") {
            handle_inbox_pause_error_response(response);
          } else {
            check_task();
          }
        },
        error: function(xhr) {
          handle_inbox_pause_error_response({"errorCode": xhr.status});
        },
      });
    }
  }
  function check_task() {
    var url = "https://b4g.baydin.com/inboxpause/checktask";
    var guser = get_gmail_user();

    $.ajax({
      url: url,
      data: {
        "guser": guser,
      },
      type: "GET",
      dataType: 'json',
      xhr: xhr_with_credentials,
      success: function(response) {
        clean_up_or_check_again(response);
      },
    });
  }
  function clean_up_or_check_again(response) {
    if(response["status"] == "error") {
      handle_inbox_pause_error_response(response);
    } else {
      haveNotShownDialogYet = show_or_update_dialog(response["current"], response["total"], response["imapEnabled"], haveNotShownDialogYet);
      handle_worker_status(response["taskStatus"], clean_up, check_task);
    }
  }
  function clean_up() {
    set_paused_state(false);
    $(".ibp-inboxpauseprogress").remove();
    // refresh the inbox to visually return all the messages to the inbox
    click_gmail_refresh_button();
    reload_pause_button();
  }
  function show_or_update_dialog(current, total, imapEnabled, haveNotShownDialogYet) {
    var shouldShowDialog = current > -1 && total >= 100 && !imapEnabled;

    if (shouldShowDialog && haveNotShownDialogYet) {
      show_progress_dialog(current, total);
      haveNotShownDialogYet = false;
    }
    else if (shouldShowDialog) {
      update_progress_dialog(current, total);
    }
    return haveNotShownDialogYet;
  }
  function failure_handler() {
    handle_inbox_pause_error_response({
      "errorCode": "GenericUnpauseError",
      "errorMessage": "Sorry, something went wrong while unpausing your inbox. <b>Please try again.</b></br></br> If you continue to encounter this error, please visit <a style='word-break: break-all;' href='https://help.boomeranggmail.com/article/309-cant-unpause-inbox'>our FAQ page</a> for help.",
    });
  }
  function handle_worker_status(status, finish_handler, check_task_handler) {
    switch (status) {
      case "SUCCESS":
        finish_handler();
        break;
      case "FAILURE":
        failure_handler();
        break;
      default:
        setTimeout(function() {
          check_task_handler(""); // this input does not matter
        }, 2000);
        break;
    }
  }

  var haveNotShownDialogYet = true;

  remove_vacation_bar();

  check_pause_status_before_unpausing();
}
/**
 * 15a. Selector/Helper Functions
 */
function get_mail_dropdowns() {
  var mailDropdowns = get_buttons_by_text("Mail").add(get_buttons_by_text("Gmail"));
  if (mailDropdowns.length === 0) {
    mailDropdowns = $(".akh[role=button]");
  }
  return mailDropdowns;
}
function is_paused() {
  var storageKey = "is_it_paused" + get_gmail_user();
  var paused_state = read_from_html5_storage(storageKey);
  return paused_state == "true"; //false, null -- returns false
}
function create_unpause_button() {
  if (which_gmail() === NEW_GMAIL) {
    create_unpause_button_new_ui();
    return;
  }

  var mailButton = get_mail_dropdowns();
  var $pauseButton = $(
    "<button id='ibp-main' class='ibp-main-button ibp-menu-button'>" +
      "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_spinner.gif'>" +
      "<img class='ibp-main-button-logo' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_boomerang.png'>" +
      "<span id='ibp-main-text'>Unpause</span>" +
    "</button>"
  );
  $pauseButton.unbind("click");

  override_vacation_bar(null, null);

  $pauseButton.click(function() {
    disable_pause_button();
    track_event([ "inbox pause main button clicked", "unpause" ]);
    call_function_after_inbox_pause_login(unpause_inbox, enable_pause_button);
  });
  mailButton.after($pauseButton);
}
function create_pause_button() {
  if (which_gmail() === NEW_GMAIL) {
    create_pause_button_new_ui();
    return;
  }

  var mailButton = get_mail_dropdowns();
  var $pauseButton = $(
    "<button id='ibp-main' class='ibp-main-button ibp-menu-button'>" +
      "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_spinner.gif'>" +
      "<img class='ibp-main-button-logo' src='" + B4G_STATIC_FILES_DIRECTORY + "b4g_ibp_boomerang.png'>" +
      "<span id='ibp-main-text'>Pause</span>" +
    "</button>"
  );
  $pauseButton.unbind("click");
  $pauseButton.click(function() {
    disable_pause_button();
    call_function_after_inbox_pause_login(check_pause_status_before_displaying_pause_dialog, enable_pause_button);
  });
  mailButton.after($pauseButton);
}
function create_unpause_button_new_ui() {
  var $pauseButton = $(
    "<button id='ibp-main' class='ibp-main-new-ui'>" +
      "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "IP_Loading.gif'>" +
      "<img class='ibp-main-button-logo-new-ui ibp-main-button-logo-new-ui-play' src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/IP-Play.svg'>" +
      "<span id='ibp-main-text' class='ibp-main-text-new-ui ibp-main-text-new-ui-unpause-margin'>Unpause Inbox</span>" +
    "</button>"
  );
  $pauseButton.unbind("click");

  override_vacation_bar(null, null);

  $pauseButton.click(function() {
    disable_pause_button();
    track_event([ "inbox pause main button clicked", "unpause" ]);
    call_function_after_inbox_pause_login(unpause_inbox, enable_pause_button);
  });
  var $composeButton = get_gmail_compose_button();
  if ($composeButton.length > 0) {
    $composeButton.after($pauseButton);
  } else {
    var $mailLabelContainer = get_mail_text_container();
    $mailLabelContainer.prepend($pauseButton);
  }
}
function create_pause_button_new_ui() {
  var $pauseButton = $(
    "<button id='ibp-main' class='ibp-main-new-ui' data-tooltip-contained='true' data-tooltip-align='b,r'>" +
      "<img class='ibp-main-button-spinner' src='" + B4G_STATIC_FILES_DIRECTORY + "IP_Loading.gif'>" +
      "<img class='ibp-main-button-logo-new-ui' src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/IP-Pause.svg'>" +
      "<span id='ibp-main-text' class='ibp-main-text-new-ui ibp-main-text-new-ui-pause-margin'>Pause Inbox</span>" +
      "<div class='T-ays-a45'>Stop new email from coming into your Inbox</div>" +
    "</button>"
  );
  $pauseButton.unbind("click");
  $pauseButton.click(function() {
    disable_pause_button();
    call_function_after_inbox_pause_login(check_pause_status_before_displaying_pause_dialog, enable_pause_button);
  });
  var $composeButton = get_gmail_compose_button();
  if ($composeButton.length > 0) {
    $composeButton.after($pauseButton);
  } else {
    var $mailLabelContainer = get_mail_text_container();
    $mailLabelContainer.prepend($pauseButton);
  }

}
function override_vacation_bar(check, times) {
  var content = "<div class='ibp_notification_bar'>Your Inbox is currently paused. Please visit your <a href='#inbox' style='padding:0px;'>Inbox</a> and click the <strong>Unpause Inbox</strong> button to see what's waiting for you.</div>"

  if (times != null && check != null && times.length > 0 && check == "checked='yes'") {
    var scheduledTimes = milliseconds_to_date_objects(times).sort();
    var current = new Date();
    var displayTime = scheduledTimes[0];
    for (var i =1; i < scheduledTimes.length; i++) {
      if (scheduledTimes[i].getHours() > current.getHours()) {
        displayTime = scheduledTimes[i];
        break;
      } else if (scheduledTimes[i].getHours() == current.getHours() && scheduledTimes[i].getMinutes() > current.getMinutes()) {
        displayTime = scheduledTimes[i];
        break;
      }
    }

    // Update the next time by checking every minute.
    function update_banner() {
      var current = new Date();
      displayTime = scheduledTimes[0];
      for (var i =1; i < scheduledTimes.length; i++) {
        if (scheduledTimes[i].getHours() > current.getHours()) {
          displayTime = scheduledTimes[i];
          break;
        } else if (scheduledTimes[i].getHours() == current.getHours() && scheduledTimes[i].getMinutes() > current.getMinutes()) {
          displayTime = scheduledTimes[i];
          break;
        }
      }

      var displayTimeString = displayTime.toLocaleTimeString('en-US').split(":");
      displayTimeString = displayTimeString[0] + ":" + displayTimeString[1] + " " + displayTimeString[2].split(" ")[1];
      $('.ibp_notification_display_time').text(displayTimeString);
    }
    setInterval(update_banner, 60000);

    // Format date without seconds
    var displayTimeString = displayTime.toLocaleTimeString('en-US').split(":");
    displayTimeString = displayTimeString[0] + ":" + displayTimeString[1] + " " + displayTimeString[2].split(" ")[1];

    content = "<div class='ibp_notification_bar'>Your inbox is currently paused. Messages will next arrive at <strong class='ibp_notification_display_time'>" + displayTimeString + "</strong>. To unpause now, visit your <a href='#inbox'>Inbox</a> and click the blue <strong>UNPAUSE</strong> button.</div>";
  }

  var ibp_notification_bar = $(content);
  $(".w-MH").remove();
  if ($('.ibp_notification_bar').length == 0 ) {
    $(".aiw").find('.nH').first().show().append(ibp_notification_bar);
  }
}
function set_paused_state(paused_state) {
  var storageKey = "is_it_paused" + get_gmail_user();
  write_to_html5_storage(storageKey, paused_state);
}
function enable_pause_button() {
  $('#ibp-main').removeAttr("disabled");
}
function disable_pause_button() {
  $('#ibp-main').attr("disabled", "disabled");
}
function ready_unpause_button() {
  var $pauseButton = $("#ibp-main");
  $pauseButton.removeClass('ibp-main-button-show-spinner-hide-logo');
  $pauseButton.unbind('click');
  enable_pause_button();
  $pauseButton.click(function() {
    disable_pause_button();
    track_event([ "inbox pause main button clicked", "unpause" ]);
    call_function_after_inbox_pause_login(unpause_inbox, enable_pause_button);
  });
  var $pauseButtonText = $pauseButton.find("#ibp-main-text");
  // change icon image if in new gmail
  var newButtonText = "Unpause";
  if (which_gmail() === NEW_GMAIL) {
    $pauseButton.find(".ibp-main-button-logo-new-ui").attr('src', B4G_STATIC_FILES_DIRECTORY + "new-ui/IP-Play.svg");
    newButtonText = "Unpause Inbox";
    $pauseButtonText.addClass("ibp-main-text-new-ui-unpause-margin");
    $pauseButtonText.removeClass("ibp-main-text-new-ui-pause-margin");
  }
  $pauseButtonText.text(newButtonText);
  override_vacation_bar(null, null);
}
function remove_vacation_bar() {
  $('.ibp_notification_bar').remove();
}
function reload_pause_button() {
  var $pauseButton = $("#ibp-main");
  $pauseButton.removeClass('ibp-main-button-show-spinner-hide-logo');
  $pauseButton.unbind('click');
  enable_pause_button();
  $pauseButton.click(function(){
    disable_pause_button();
    call_function_after_inbox_pause_login(check_pause_status_before_displaying_pause_dialog, enable_pause_button);
  });
  var $pauseButtonText = $pauseButton.find("#ibp-main-text");
  // change icon image if in new gmail
  var newButtonText = "Pause";
  if (which_gmail() === NEW_GMAIL) {
    $pauseButton.find(".ibp-main-button-logo-new-ui").attr('src', B4G_STATIC_FILES_DIRECTORY + "new-ui/IP-Pause.svg");
    newButtonText = "Pause Inbox";
    $pauseButtonText.addClass("ibp-main-text-new-ui-pause-margin");
    $pauseButtonText.removeClass("ibp-main-text-new-ui-unpause-margin");
  }
  $pauseButtonText.text(newButtonText);
}
function show_progress_dialog(current, total) {
  $(".ibp-inboxpauseprogress").remove();
  $('.ibp_dialogdiv').dialog('close');

  var message = "<p id='ibp_moving_messages_text'>Moving messages back to Inbox : </br>" + current + " of " + total + "</p>";

  var dialog = "<div class='ibp-inboxpauseprogress'>" +
    "<div class='ibp-inboxpauseprogress-message'>" + message +
    "<img height='32' width='32' src='" + B4G_STATIC_FILES_DIRECTORY + "b4gloading.gif'></div>";

  $("body").append($(dialog));
  $(".ibp-inboxpauseprogress").dialog({
    modal: true,
    resizable: false,
    open: function(event, ui) {
      // since the title bar is the previous element when creating a dialog, and we don't want to show that, we hide it here
      $(this).prev().hide();
    }
  });
}
function update_progress_dialog(current, total) {
  var message = 'Moving messages back to Inbox : </br>' + current + ' of ' + total;
  $("#ibp_moving_messages_text").html(message);
}

/**
 * Controls the behavior of an error response
 * @param {Object}  response - the error response
 * @param {string}  response.errorCode - the error code
 * @param {string=} response.errorMessage - optional error message
 * @param {string=} response.nextUnpauseTimeString - optional next time that the user's inbox will be unpaused
 */
function handle_inbox_pause_error_response(response) {
  function _remove_pause_menu_and_overlay() {
    var $ibpMenu = get_inbox_pause_menu();
    $ibpMenu.remove();
    $('.ibp-overlay').remove();
  }
  function _set_correct_paused_state() {
    if (is_paused()) {
      ready_unpause_button();
    } else {
      load_unpaused_state();
    }
  }
  var errorCode = response["errorCode"];
  var errorMessage = response["errorMessage"];
  switch (errorCode) {
    case 403:
      show_dialog("Something unexpected occurred. Please refresh Gmail and try again.");
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "inbox pause 403"]);
      break;
    case 500:
      show_dialog("Something unexpected occurred. Please refresh Gmail and try again.");
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "inbox pause 500"]);
      break;
    case "AlreadyPaused":
      // user is already paused, ask how user wants to proceed
      hide_inbox_pause_menu();
      var nextUnpauseTimeString = "";
      if (response["nextUnpauseTimeString"]) {
        nextUnpauseTimeString = response["nextUnpauseTimeString"];
      }
      show_already_paused_dialog(nextUnpauseTimeString);
      break;
    case "AlreadyScheduled":
      // error silently
      // the user attempted to schedule periodic unpauses multiple times for one pause
      // (probably because multiple requests went through)
      track_event(["inbox pause error", "already scheduled error"]);
      break;
    case "FilterExists":
      show_dialog(errorMessage);
      track_event(["inbox pause error", "filter already exists error"]);
      break;
    case "GenericPeriodicUnpauseError":
      show_dialog(errorMessage);
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "generic periodic unpause error"]);
      break;
    case "GenericUnpauseError":
      // because this is thrown in the check_task loop, we'll need to remove the progress indicator
      $(".ibp-inboxpauseprogress").remove();
      click_gmail_refresh_button();
      show_dialog(errorMessage);
      _set_correct_paused_state();
      track_event(["inbox pause error", "generic unpause error"]);
      break;
    case "GmailAPI403Error":
      show_dialog(errorMessage);
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "settings api insufficient permissions"]);
      break;
    case "GmailAPI500Error":
      show_dialog(errorMessage);
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "settings api backend error"]);
      break;
    case "IncorrectPlan":
      // error silently
      // the user attempted to do something they do not have permission to do
      track_event(["inbox pause error", "incorrect plan error"]);
      break;
    case "InvalidPeriodicUnpauseTimes":
      show_dialog(errorMessage);
      _remove_pause_menu_and_overlay();
      _set_correct_paused_state();
      track_event(["inbox pause error", "invalid periodic times error"]);
      break;
    case "NoPauseFound":
      // user attempted to create a periodic unpause while unpaused
      // should never get to this state
      load_unpaused_state();
      track_event(["inbox pause error", "no pause found error"]);
      break;
    case "TooManyFilters":
      show_dialog(errorMessage);
      track_event(["inbox pause error", "too many filters error"]);
      break;
    case "TooManyPeriodicUnpauses":
      show_dialog(errorMessage);
      track_event(["inbox pause error", "too many periodic unpauses error"]);
      break;
    default:
      show_dialog("Something unexpected occurred. Please refresh Gmail and try again.");
      break;
  }
}
/*
 * 15b. Date Helper Functions
 */
function milliseconds_to_date_objects(array) {
  var result = [];
  var dst = b4c_is_daylight_saving_time(new Date());
  for (var i = 0; i < array.length; i++) {
    var date = new Date(0);
    date.setMilliseconds(array[i]);
    date.addHours(( dst ? 1 : 0 ));
    result.push(date);
  }
  return result;
}
function b4c_is_daylight_saving_time(myDate) {
  return(myDate.hasDaylightSavingTime()&&myDate.getTimezoneOffset()===Date.today().set({month:6,day:1}).getTimezoneOffset());
}
/*
 * 15c. Settings Auth
 */
function show_user_settings_auth_screen(hasSeenConsentDialog) {
  var oauthWindow;
  var addSettingsOauthUrl = "https://b4g.baydin.com/inboxpause/addsettingsoauth?guser=" + get_gmail_user();
  if (hasSeenConsentDialog) {
    show_grant_permissions_dialog();
  } else {
    oauthWindow = window.open(addSettingsOauthUrl, "_blank");
    disable_pause_button();
    var checkOauthWindowInterval = setInterval(function(){
      if ((!oauthWindow&& browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
        clearInterval(checkOauthWindowInterval);
        enable_pause_button();
        call_function_after_logged_in(function() {
          check_pause_status_before_displaying_pause_dialog(true);
        })
      }
    }, 300);
  }
}
function show_grant_permissions_dialog() {
  var oauthWindow;
  var addSettingsOauthUrl = "https://b4g.baydin.com/inboxpause/addsettingsoauth?guser=" + get_gmail_user();
  var message = "<p>The Inbox Pause feature requires an additional Settings permission to create filters. <strong>Without this permission, Inbox Pause will not work.</strong> If you would like to use this feature, please grant permission.</p>";
  var $dialog = show_dialog(message, "Inbox Pause",
      {
        "Enable": {
          text: "Grant Permission",
          "class": "b4g-button red",
          click: function() {
            // TODO: check for existing oauthWindow
            oauthWindow = window.open(addSettingsOauthUrl);
            var self = this;
            var checkOauthWindowInterval = setInterval(function(){
              if ((!oauthWindow&& browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
                $(self).dialog("destroy");
                clearInterval(checkOauthWindowInterval);
                call_function_after_logged_in(function(){
                  check_pause_status_before_displaying_pause_dialog(true);
                })
              }
            }, 300);
          }
        },
        "Cancel": {
          text: "Cancel",
          "class": "b4g-button grey cancelConsent",
          click: function() {
            $(this).dialog("destroy");
          }
        },
      }, {width: 500}, "inbox-pause-consent"
    );
  $(".inbox-pause-consent").css("margin", "20px");
}

/**
 * 15d. Pause Sync Logic
 */
function sync_pause_status_then_update_button() {
  if (is_ibp_sync_timeout_active()) {
    return;
  }
  set_ibp_sync_timeout();
  sync_pause_status_with_gmail();
}

function is_ibp_sync_timeout_active() {
  var now = new Date();
  var timeoutWindow = new Date(read_from_html5_storage("ibp_sync_timeout_window_" + get_gmail_user()));
  return now < timeoutWindow;
}

function set_ibp_sync_timeout() {
  // set 1 hour timeout for syncing pause states
  var nextTimeout = new Date();
  nextTimeout.setHours(nextTimeout.getHours() + 1);
  write_to_html5_storage("ibp_sync_timeout_window_" + get_gmail_user(), nextTimeout.toString());
}

function sync_pause_status_with_gmail() {
  function get_gmail_ik_variable() {
    var guser = get_gmail_user();
    var ikIndex = 0;
    for (var i in GLOBALS) {
      if (GLOBALS[i] == guser && ikIndex == 0) {
        ikIndex = i - 1;
      }
    }
    return GLOBALS[ikIndex];
  }
  function get_gmail_at_variable() {
    var atStartIndex = document.cookie.indexOf("GMAIL_AT=") + 9;
    var atEndIndex = document.cookie.indexOf(";",document.cookie.indexOf("GMAIL_AT"));
    var at = document.cookie.substring(atStartIndex, atEndIndex);
    return at;
  }
  function get_multi_signin_base_url() {
    var loc = String(document.location);
    var endpoint = loc.indexOf("?") + 1;
    if (endpoint > 0) {
      var url = loc.substr(0,loc.indexOf("?") + 1);
    }
    else {
      endpoint = loc.lastIndexOf("/");
      var url = loc.substring(0, endpoint) + "?";
    }
    return url;
  }
  function confirm_ibp_paused_label_exists() {
    // if the label does not exist, then we have a mismatch and we are in an unexpected state. 
    // We'll need to get the truth from our server to place the user in the correct state
    // Otherwise do nothing since we are already in the correct state (paused)
    // NOTE: we use "none" as our filter ID in this request, as it is technically a delete request and we don't want to remove any filters
    var ik = get_gmail_ik_variable();
    var at = get_gmail_at_variable();
    var filterUrl = get_multi_signin_base_url();
    filterUrl += "ik=" + ik;
    filterUrl += "&at=" + at;
    filterUrl += "&view=up&act=df&pcd=1&mb=0&rt=c";
    var filterData = "tfi=" + "none" + "&";
    $.post(filterUrl, filterData, function(gmailResponse) {
      var filterStart = gmailResponse.indexOf('["fi",');
      var filterEnd = gmailResponse.indexOf('["ua",');
      var filterCode = gmailResponse.substring(filterStart, filterEnd);
      var labelStartIndex = filterCode.search("Inbox-Paused-");
      if (labelStartIndex == -1) {
        sync_pause_status_with_server();
      }
    });
  }
  confirm_ibp_paused_label_exists();
}

function sync_pause_status_with_server() {
  // If the server says that the user is not paused, then we were out of sync
  // in that case, we will need to put the client in the correct state (unpaused).
  // Otherwise do nothing since we are already in the correct state (paused)
  var url = "https://b4g.baydin.com/inboxpause/checkpaused";
  var guser = get_gmail_user();
  $.ajax({
    url: url,
    data: {"guser": guser},
    type: "GET",
    xhr: xhr_with_credentials,
    success: function(response) {
      var responseJson = JSON.parse(response);
      if (!responseJson["isPaused"]) {
        load_unpaused_state();
      }
    },
    error: function() {
      // 403 Unauthenticated errors will execute this block:
      // If an error is encountered, trust localstorage's state.
      // Do nothing since we are already in the correct state (paused)
    }
  });
}

function load_unpaused_state() {
  set_paused_state(false);
  remove_vacation_bar();
  reload_pause_button();
}

/**
 * 16. BCal Features
 */

// Whitelisting code:
function can_use_bcal() {
  return true;
}
function can_use_bookable_schedule() {
  return true;
}

 // Calendar Login: standard login, plus calendars permission if they are a brand-new b4g user
// Also gets latest Calendar settings
var CalendarLoginInProgress = false;
var SAW_INCREMENTAL_BCAL_OAUTH_FLOW = false;
var SAW_OAUTH_FLOW_AS_NEW_USER = false;
var calFTUEAlreadySeen = false; // Marked true if user sees cal FTUE before they are actually logged in, so we don't double-show it
var CalendarSettings = {};
// "settings": {
//     "calendars": 
//            "calendarId": calendar.calendarId,
//             "title": calendar.name,
//             "color": calendar.color,
//             "permission": calendar.permission,
//             "isSynced": calendar.isSynced,
//         }),
//     "start_of_week": start_of_week,
//     "date_format": date_format,
//     "time_format": time_format,
//     "meeting_duration": meeting_duration,
//     "include_timezone": include_timezone,
// },
// "status": "success" | "not_enabled",
// "hasSeenCalendarFTUE": true,
// "hasSeenBookableAnnouncement": true,
// "timezones": true,
var forkieShownThisSession = false;
var forkieIsDismissed = false;
function call_function_after_calendar_login(function_to_call, on_auth_failure, $composeContainer, triggerFTUE, fromAddEvent, fromSettings, fromOverlay) {
  if (CalendarLoginInProgress) { // stop multiple-clicks
    return;
  }
  CalendarLoginInProgress = true;
  call_function_after_logged_in(function(){
    CalendarLoginInProgress = false;
    if (CalendarSettings["status"] == "not_enabled") {
      if (on_auth_failure) {
        on_auth_failure();
      }
      show_grant_calendar_permissions_dialog(function(){
        if (triggerFTUE) {
          $(".b4g-bcal-features-button").click();
        } else if (fromAddEvent) {
          $("#b4g-bcal-create-event-magic-btn").click();
        } else if (fromSettings) {
          call_function_after_calendar_login(show_calendar_settings_dialog, false, null, false, false, true);
        } else if (fromOverlay) {
          $(".b4g_magic_overlay_toggle").first().click();
        } else {
          show_calendar_settings_dialog();
          track_event([ "bcal", "show-settings-from-ftue" ]);
        }
      });
    } else if (!CalendarSettings["hasSeenCalendarFTUE"] && triggerFTUE && !calFTUEAlreadySeen && !GimmeBetaActivated) {
      if (SAW_INCREMENTAL_BCAL_OAUTH_FLOW) {
        track_event([ "oauth-flow", "bcal-incremental-success"]);
        SAW_INCREMENTAL_BCAL_OAUTH_FLOW = false;
      }
      if ($composeContainer && $composeContainer.hasClass('b4g-prevent-bcal-ftue')) {
        // Special case: don't show the BCal FTUE in the same composer that has already shown a Bookable Announcement
        return;
      }
      show_calendar_ftue($composeContainer);
    } else { // Successful fetch, store settings in memory and continue

      if (SAW_INCREMENTAL_BCAL_OAUTH_FLOW) {
        track_event([ "oauth-flow", "bcal-incremental-success"]);
        SAW_INCREMENTAL_BCAL_OAUTH_FLOW = false;
      }
      function_to_call();
    }
  }, on_auth_failure, false, false, true, triggerFTUE);
}

var SCHEDULING_FTUE_OVERLAY = "<div class='b4g-scheduling-ftue-overlay' style='background: #666666; opacity: 0.50; filter:alpha(opacity=50);position:absolute; left:0px; top:0px; width:100%; height:100%; z-index:1000;'></div>";
// Overlay template that FTUE screens will go inside
var SCHEDULING_FTUE_MODAL =
  `
    <div class="b4g-scheduling-features-ftue-modal">
      <div class="b4g-scheduling-features-ftue-modal-top-bar">
        <img class="b4g-logo" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/boomerang_logo-white.svg">
        <img class="b4g-x-btn" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/close.svg">
      </div>

      <div class="b4g-scheduling-features-ftue-screen-content b4g-scheduling-ftue-1">
        <div class="b4g-scheduling-features-ftue-screen-title-row">
          <div class="b4g-title"><strong>New!</strong> Schedule meetings right from your inbox, without all the back and forth.</div>
        </div>

        <div class="b4g-feature-section">
          <img class="b4g-feature-img" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/overview-mlc.svg">
          <div class="b4g-feature-txt-row">
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Insert Boomerang's Magic Live Calendar</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Your availability updates in real time</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Meetings are scheduled hassle-free</div>
            </div>
          </div>
        </div>

        <div class="b4g-list-area">
          <div class="b4g-check-rows-container">
            <div class="b4g-check-row">
              <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
              <div class="b4g-check-txt">Get <strong>23% more meetings</strong> on the calendar than sending a scheduling link</div>
            </div>
            <div class="b4g-check-row">
              <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
              <div class="b4g-check-txt">Automatically prevent conflicts and double-booking, even on multiple calendars</div>
            </div>
            <div class="b4g-check-row">
              <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
              <div class="b4g-check-txt">Allow recipients to overlay their calendars, right inside their email</div>
            </div>
            <div class="b4g-check-row">
              <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
              <div class="b4g-check-txt">Get <strong>2 hours every week</strong> of your life back</div>
            </div>
          </div>
        </div>

        <div class="b4g-scheduling-ftue-nav-area">
          <div class="b4g-continue-btn"><div>Learn how</div></div>
          <div class="b4g-skip-btn">Skip</div>
        </div>

      </div>




      <div class="b4g-scheduling-features-ftue-screen-content b4g-scheduling-ftue-2 hidden">
        <div class="b4g-scheduling-features-ftue-screen-title-row">
          <div class="b4g-title">Schedule 5 or more meetings a month? Set up a <strong>Bookable Schedule</strong>!</div>
        </div>

        <div class="b4g-feature-section">
          <img class="b4g-feature-img" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/overview-bookable_schedule.svg">
          <div class="b4g-feature-txt-row">
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Create a schedule</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Share it with anyone</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">It's that easy!</div>
            </div>
          </div>
        </div>

        <div class="b4g-list-vid-row">

          <div class="b4g-list-area">
            <div class="list-area-title">Bookable Schedule is like a scheduling link, built into email</div>
            <div class="b4g-check-rows-container">
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Setup takes just five minutes, each new meeting takes only two clicks</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Embed Magic Live Calendar into an email, a website, or include as a link</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt"><strong>Personalize</strong> on a per-meeting basis including <strong>dual timezone support</strong></div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Fully integrated with Zoom or Google Meet </div>
              </div>
            </div>
          </div>

          <div class="b4g-vid-area">
            <div class="b4g-vid-txt">See how it works:</div>
            <div class="b4g-vid-thumbnail-wrap" data-vid-url="https://vimeo.com/693319863" data-ga-label="bookable">
              <img class="b4g-vid-thumbnail" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/video_thumb-bookable_schedule.png">
            </div>
          </div>
        </div>

        <div class="b4g-scheduling-ftue-nav-area">
          <div class="b4g-continue-btn"><div>Next: Suggest Times</div></div>
          <div class="b4g-progress-img-wrap"><img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/progress-2.svg"></div>
        </div>

      </div>



      <div class="b4g-scheduling-features-ftue-screen-content b4g-scheduling-ftue-3 hidden">
        <div class="b4g-scheduling-features-ftue-screen-title-row">
          <div class="b4g-title">Need to schedule a custom one-off meeting? Use <strong>Suggest Times</strong>!</div>
        </div>

        <div class="b4g-feature-section">
          <img class="b4g-feature-img" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/overview-suggest_times.svg">
          <div class="b4g-feature-txt-row">
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Offer times to meet</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Let your guest choose</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Meeting confirmed!</div>
            </div>
          </div>
        </div>

        <div class="b4g-list-vid-row">

          <div class="b4g-list-area">
            <div class="list-area-title">Suggest Times gives you completely customizable meeting scheduling</div>
            <div class="b4g-check-rows-container">
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Pick the times you want to offer for this specific meeting</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Automatically prevent double-booking, or allow your guest to book anyway</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Reserve/hold all the time slots you offered until the meeting is booked</div>
              </div>
            </div>
          </div>

          <div class="b4g-vid-area">
            <div class="b4g-vid-txt">See how it works:</div>
            <div class="b4g-vid-thumbnail-wrap" data-vid-url="https://vimeo.com/601348521" data-ga-label="suggest-times">
              <img class="b4g-vid-thumbnail" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/video_thumb-suggest_times.png">
            </div>
          </div>
        </div>

        <div class="b4g-scheduling-ftue-nav-area">
          <div class="b4g-continue-btn"><div>Next: Share Free/Busy</div></div>
          <div class="b4g-progress-img-wrap"><img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/progress-3.svg"></div>
        </div>

      </div>




      <div class="b4g-scheduling-features-ftue-screen-content b4g-scheduling-ftue-4 hidden">
        <div class="b4g-scheduling-features-ftue-screen-title-row">
          <div class="b4g-title">Want a simple way to share your availability? Try <strong>Share Free/Busy!</strong></div>
        </div>

        <div class="b4g-feature-section">
          <img class="b4g-feature-img" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/overview-share_free_busy.svg">
          <div class="b4g-feature-txt-row">
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Share your real-time availability</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Guests can overlay their calendar</div>
            </div>
            <div class="b4g-feature-txt-wrap">
              <div class="b4g-feature-txt">Find a time to meet!</div>
            </div>
          </div>
        </div>

        <div class="b4g-list-vid-row">

          <div class="b4g-list-area">
            <div class="list-area-title">Share Free/Busy lets you share a live view of your free/busy status</div>
            <div class="b4g-check-rows-container">
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Automatically updates every time the email is opened</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Syncs with multiple calendars</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Share your free/busy status with people outside your domain</div>
              </div>
              <div class="b4g-check-row">
                <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
                <div class="b4g-check-txt">Choose any time frame you want to share</div>
              </div>
            </div>
          </div>

          <div class="b4g-vid-area">
            <div class="b4g-vid-txt">See how it works:</div>
            <div class="b4g-vid-thumbnail-wrap" data-vid-url="https://vimeo.com/601347252" data-ga-label="share-free-busy">
              <img class="b4g-vid-thumbnail" src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/video_thumb-share_free_busy.png">
            </div>
          </div>
        </div>

        <div class="b4g-scheduling-ftue-nav-area">
          <div class="b4g-continue-btn b4g-see-email-features-CTA"><div>Next: Email features</div></div>
          <div class="b4g-continue-btn b4g-skip-email-features-CTA"><div>Start scheduling meetings</div></div>
          <div class="b4g-progress-img-wrap b4g-see-email-features-CTA"><img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/progress-4.svg"></div>
          <div class="b4g-progress-img-wrap b4g-skip-email-features-CTA"><img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/progress_100.svg"></div>
        </div>

      </div>





      <div class="b4g-scheduling-features-ftue-screen-content b4g-scheduling-ftue-5 hidden">
        <div class="b4g-scheduling-features-ftue-screen-title-row">
          <div class="b4g-title"><strong>But wait, there's more!</strong> Boomerang comes with the following goodies, too:</div>
        </div>

        <div class="b4g-email-feature-grid">
          <div class="b4g-email-feature-grid-row">
            <div class="b4g-email-feature-box" data-page-url="https://www.boomeranggmail.com/l/email-follow-up-reminders.html" data-ga-label="email-follow-up-reminders">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/response_tracking.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Follow-up reminders</div>
              </div>
            </div>

            <div class="b4g-email-feature-box" data-page-url="http://inboxpause.com/" data-ga-label="inbox-pause">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/inbox_pause.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Pause your inbox</div>
              </div>
            </div>

            <div class="b4g-email-feature-box" data-page-url="https://www.boomeranggmail.com/l/read-receipt-gmail.html" data-ga-label="read-receipts">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/read_receipts.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Request read receipts</div>
              </div>
            </div>
          </div>

          <div class="b4g-email-feature-grid-row">
            <div class="b4g-email-feature-box" data-page-url="https://www.boomeranggmail.com/l/schedule-recurring-email.html" data-ga-label="recurring-emails">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/recurring_messages.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Send recurring emails</div>
              </div>
            </div>

            <div class="b4g-email-feature-box" data-page-url="https://www.boomeranggmail.com/respondable/" data-ga-label="respondable">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/respondable.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Write better emails</div>
              </div>
            </div>

            <div class="b4g-email-feature-box" data-page-url="https://www.boomeranggmail.com/l/how-to-schedule-emails.html" data-ga-label="schedule-emails">
              <div class="b4g-email-feature-link-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/ico_newwindow.svg">
              </div>
              <div class="b4g-email-feature-main-icon-wrap">
                <img src="https://b4g.baydin.com/site_media/bookmarklet/scheduling-ftue/send_later.svg">
              </div>
              <div class="b4g-email-feature-text">
                <div>Schedule emails</div>
              </div>
            </div>
          </div>

        </div>

        <div class="b4g-scheduling-ftue-nav-area">
          <div class="b4g-continue-btn b4g-final-btn"><div><strong>Start scheduling meetings</strong></div></div>
          <div class="b4g-take-a-tour-btn">Learn more about our other features</div>
        </div>

      </div>

    </div>
  `;
function show_calendar_ftue($composeContainer) {
  if ($composeContainer == null) {
    return;
  }

  var is_a_reply = function($composeContainer) {
    if (!is_pop_out_window() && $composeContainer) {
      // check whether the subject line is hidden
      var $subjectField = $composeContainer.find(".az6");
      return !$subjectField.length || $subjectField.css("display") === "none";
    }
    else {
      // look for existing subject in pop out window
      return $(".hP").length != 0;
    }
  }
  var isAReply = is_a_reply($composeContainer);

  var $schedulingFTUEOverlay = $(SCHEDULING_FTUE_OVERLAY);

  var $schedulingFTUEModal = $(SCHEDULING_FTUE_MODAL);

  $("body").append($schedulingFTUEOverlay);
  $("body").append($schedulingFTUEModal);

  track_event([ "bcal", "ftue-step-one-show" ]);

  var hasSeenB4GTutorial = read_from_html5_storage("hasSeenB4GTutorial");
  var guser = get_gmail_user();
  if (hasSeenB4GTutorial && hasSeenB4GTutorial == "yes") {
    $('.b4g-scheduling-features-ftue-modal').addClass('b4g-has-seen-main-ftue');
  } else if (hasSeenB4GTutorial == null && guser) {
    $.ajax({
      method: "GET",
      url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
      data: {
        "guser": guser,
      },
      xhr: xhr_with_credentials,
      success: function(response) {
        if (response.status === "success") {
          if (response.hasSeenTutorial === true) {
            $('.b4g-scheduling-features-ftue-modal').addClass('b4g-has-seen-main-ftue');
          }
          // Update local storage states for all announcements and FTUEs
          updateAnnouncementAndFTUEStates(response);

        }
      }

    });

  }

  function quitFTUE() {
    $('.b4g-scheduling-ftue-overlay, .b4g-scheduling-features-ftue-modal').remove();

    // Supress the main FTUE for a week
    var wakeTime = new Date();
    wakeTime.setHours(wakeTime.getHours() + 168);
    write_to_html5_storage("b4g_main_ftue_snoozed_until_" + get_gmail_user(), wakeTime.toString());

    calFTUEAlreadySeen = true;
  }

  function advanceToScreen2() {
    $('.b4g-scheduling-ftue-1').remove();
    $('.b4g-scheduling-ftue-2').removeClass('hidden');
    track_event([ "bcal", "ftue-step-two-show" ]);
  }

  function advanceToScreen3() {
    $('.b4g-scheduling-ftue-2').remove();
    $('.b4g-scheduling-ftue-3').removeClass('hidden');
    track_event([ "bcal", "ftue-step-three-show" ]);
  }

  function advanceToScreen4() {
    $('.b4g-scheduling-ftue-3').remove();
    $('.b4g-scheduling-ftue-4').removeClass('hidden');
    if ($('.b4g-scheduling-features-ftue-modal').hasClass('b4g-has-seen-main-ftue')) {
      track_event([ "bcal", "ftue-step-four-show", "showing-start-scheduling-btn" ]);
    } else {
      track_event([ "bcal", "ftue-step-four-show", "showing-email-feature-btn" ]);
    }
  }

  function advanceToScreen5() {
    $('.b4g-scheduling-ftue-4').remove();
    $('.b4g-scheduling-ftue-5').removeClass('hidden');
    track_event([ "bcal", "ftue-step-five-show" ]);
  }

  function checkCalLoginAndShowSettingsDialog() {
    call_function_after_logged_in(function() {
      show_calendar_settings_dialog(true, $composeContainer)
    }, $.noop, false, true, true, false);
  }

  function completeFtue(e) {
    e.preventDefault();
    e.stopPropagation();
    quitFTUE();
    checkCalLoginAndShowSettingsDialog();
    track_event([ "bcal", "ftue-completed" ]);
  }

  $('.b4g-scheduling-features-ftue-modal .b4g-skip-btn, .b4g-scheduling-features-ftue-modal .b4g-x-btn').click(function() {
    quitFTUE();
    checkCalLoginAndShowSettingsDialog();
    track_event([ "bcal", "ftue-closed" ]);
  });

  $('.b4g-scheduling-ftue-1 .b4g-continue-btn').click(advanceToScreen2);
  $('.b4g-scheduling-ftue-2 .b4g-continue-btn').click(advanceToScreen3);
  $('.b4g-scheduling-ftue-3 .b4g-continue-btn').click(advanceToScreen4);
  $('.b4g-scheduling-ftue-4 .b4g-continue-btn.b4g-see-email-features-CTA').click(advanceToScreen5);
  $('.b4g-scheduling-ftue-4 .b4g-continue-btn.b4g-skip-email-features-CTA').click(completeFtue);
  $('.b4g-scheduling-ftue-5 .b4g-continue-btn').click(completeFtue);

  $('.b4g-scheduling-features-ftue-modal .b4g-vid-thumbnail-wrap').click(function() {
    window.open($(this).attr('data-vid-url'), "_blank");
    track_event([ "bcal", "ftue-video-clicked", $(this).attr('data-ga-label') ]);
  });

  $('.b4g-scheduling-features-ftue-modal .b4g-email-feature-box').click(function() {
    window.open($(this).attr('data-page-url'), "_blank");
    track_event([ "bcal", "ftue-email-feature-pg-open", $(this).attr('data-ga-label') ]);
  });

  $('.b4g-scheduling-features-ftue-modal .b4g-take-a-tour-btn').click(function() {
    quitFTUE();
    show_welcome_dialog(1);
    track_event([ "bcal", "ftue-main-ftue-opened-with-link" ]);
  });
}

function show_grant_calendar_permissions_dialog(success_callback) {
  var oauthWindow;
  var addCalendarOauthUrl = "https://b4g.baydin.com/calendar/addcalendaroauth?guser=" + get_gmail_user();
  var message = "<div>Boomerang's scheduling features require access to your Google Calendar and Google Contacts.</div>" +
      '<div>' +
          '<img style="float:left;" height="32" width="32" src="https://b4g.baydin.com/site_media/img/ico_GCal.png">' +
          '<div style="margin: 13px 0px 0px 50px;position: relative;top: 3px;">' +
              '<div style="font-weight:bold;">We ask for the ability to read, edit, and delete calendar events in order to do things like:</div>' +
              '<ul style="position: relative;left: -14px;margin-top: 10px;">' +
                  '<li style="margin: 5px 0px;">Show you a preview of how a detected event will fit in your schedule</li>' +
                  '<li style="margin: 5px 0px;">Find your free/busy status so we can embed it into an email for you</li>' +
                  '<li style="margin: 5px 0px;">Delete calendar events if you use the “appointment hold” feature</li>' +
              '</ul>' +
          '</div>' +
      '</div>' +
      '<div>' +
          '<img style="float:left;" height="32" width="32" src="https://b4g.baydin.com/site_media/img/ico_GContacts.png">' +
          '<div style="margin: 13px 0px 0px 50px;position: relative;top: 3px;">' +
              '<div style="font-weight:bold;">We ask for the ability to read contact information so we can do things like:</div>' +
              '<ul style="position: relative;left: -14px;margin-top: 10px;">' +
                  '<li style="margin: 5px 0px;">Autocomplete email addresses and names in calendar events you are creating</li>' +
                  '<li style="margin: 5px 0px;">Autocomplete email addresses when editing a scheduled message</li>' +
              '</ul>' +
          '</div>' +
      '</div>';

  // skip first showing in testing group
  if (!SAW_INCREMENTAL_BCAL_OAUTH_FLOW && browser_name !== "Safari") {
    track_event([ "oauth-flow", "bcal-incremental-first-direct-to-flow"]);
    SAW_INCREMENTAL_BCAL_OAUTH_FLOW = true;
    oauthWindow = window.open(addCalendarOauthUrl);
    var self = this;
    var checkOauthWindowInterval = setInterval(function(){
      if ((!oauthWindow&& browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
        $(self).dialog("destroy");
        clearInterval(checkOauthWindowInterval);
        if (success_callback) {
          success_callback();
        }
      }
    }, 300);
    return;
  }

  SAW_INCREMENTAL_BCAL_OAUTH_FLOW = true;

  track_event([ "oauth-flow", "bcal-incremental-show"]);
  var $dialog = show_dialog(message, "Boomerang for Gmail",
      {
        "Enable": {
          text: "Connect your Calendar",
          "class": "b4g-button blue",
          click: function() {
            track_event([ "oauth-flow", "bcal-incremental-enable"]);
            // TODO: check for existing oauthWindow
            oauthWindow = window.open(addCalendarOauthUrl);
            var self = this;
            var checkOauthWindowInterval = setInterval(function(){
              if ((!oauthWindow&& browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
                $(self).dialog("destroy");
                clearInterval(checkOauthWindowInterval);
                if (success_callback) {
                  success_callback();
                }
              }
            }, 300);
          }
        },
        "Cancel": {
          text: "No, thanks",
          "class": "b4g-button grey cancelConsent",
          click: function() {
            track_event([ "oauth-flow", "bcal-incremental-cancel"]);
            $(this).dialog("destroy");
          }
        },
      }, {width: 500}, "boomerang-calendar-consent"
    );
    $(".boomerang-calendar-consent").css("margin", "20px");
    $(".b4g-ui-dialog-buttonset").css("float", "right");
}

// These boolean variables are true if the user clicked the corresponding menu option in the thread view BCal menu
// When these options are clicked, we open a new reply, trigger a click on the BCal features menu, and then will automatically select the correct feature after permissions/FTUE flows are done. 
var openingShowFtueImmediately = false;
var openingSuggestTimesFromThreadViewMenu = false;
var openingShareFreeBusyFromThreadViewMenu = false;
var openingBookableFromThreadViewMenu = false;
//  Highlight from forkie variables
var highlightingSuggestTimesFromForkie = false;
var highlightingBookableFromForkie = false;

var isDisplayingBookableAnnouncement = false; // Only set to true if the Bookable announcement is being displayed
var isDisplayingBookableAnnouncementModal = false; // Only set to true if a Bookable announcement modal is being displayed
var ensureBookableWizardOpen = false; // Only set to true if the user clicked the CTA on the bookable announcement modal and the user must see the wizard regardless of schedule count
var autoOpenMeetMenu = false; // Only set to true if the user clicks a download button in the bookable email - we'll want to auto-click the meet menu as soon as it is added to the next composer
function compose_dialog_toggle_bcal_features_menu(e, owner, isAReply) {
  track_event([ "bcal", "toggle features menu" ]);
  var frameDoc = get_frame();
  var target;
  if (e) {
    target = e.target;
  } else {
    target = owner;
  }

  var $BCalFeaturesMenu = $("#bcal_features_menu").not('.bcal-thread-view-features-menu');
  var menuCount = $BCalFeaturesMenu.length;
  close_bcal_features_menu();
  if (menuCount > 0) {
  } else {
    // Grab the current caret location/selection so we know where to append calendar content into the email later if necessary:
    var $composeContainer = get_compose_container($(target));
    var $composeTextBody = get_compose_text_body($composeContainer);
    $composeTextBody.focus();
    var selection = document.getSelection();
    var range;
    if (selection === null || !$.contains($composeContainer, $(selection.anchorNode))) {
      // We either didn't get a selection or the selection wasn't in the compose container.
      // This is not expected to happen - since we focused on the $composeTextBody we should get the selection of the correct compose container.
      // Fallback behavior - we'll insert content at the end of the current email:
      // TODO: this case: what should we do if anything? if we couldn't focus on the $composeTextBody we shouldn't be able to here as well
    } else {
      range = selection.getRangeAt(0);
    }

    $composeTextBody.blur();

    //Create the menu
    var bCalButtonTopPosition, bCalButtonLeftPosition;
    var leftValForComposeWidgetMenu = 208;
    if ($composeContainer.hasClass('b4g-narrow-sm')) {
      leftValForComposeWidgetMenu = 208;
    }
    if (e) {
       try {
        bCalButtonTopPosition = (!isAReply) ? 0 : ($(e.currentTarget).position().top - 180);
        bCalButtonLeftPosition = (!isAReply) ? $(e.currentTarget).position().left - leftValForComposeWidgetMenu : ($(e.currentTarget).position().left -131)
       } catch (e) {
        var insertionPoint = $composeContainer.find(".b4g-bcal-features-button");
        bCalButtonTopPosition = (!isAReply) ? 0 : (insertionPoint.position().top - 180);
        bCalButtonLeftPosition = (!isAReply) ? insertionPoint.position().left - leftValForComposeWidgetMenu : (insertionPoint.position().left -131)
      }
    } else {
      // This case should run when in a reply
      bCalButtonTopPosition = (!isAReply) ? 0 : ($(owner).position().top - 233);
      bCalButtonLeftPosition = (!isAReply) ? $(owner).position().left - leftValForComposeWidgetMenu : ($(owner).position().left - 224)
    }

    if (!can_use_bookable_schedule()) {
      bCalButtonTopPosition += 52;
    }
    bCalButtonTopPosition -= 52; // Group Poll
    // Create the BCal features menu:
    var bcal_features_menu =
      '<ul id="bcal_features_menu" tabindex="0" style="padding:0px;position:absolute;top:'+ bCalButtonTopPosition +'px;left:'+bCalButtonLeftPosition+'px;background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 130px;min-height:auto;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
        '<div class="bcal_features_menu bcal_features_menu_with_labels J-M">' +
          '<li id="bcal_menu_suggest_times_row" class="bcal_menu_option">' +
            '<div>' +
            '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -548.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_SuggestTimes" transform="translate(0.000000, 4.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)" id="Group-17"><rect id="Rectangle" fill="#F2F2F2" opacity="0" x="0" y="0" width="24" height="24" rx="4"></rect><path d="M4,13 C6.209139,13 8,14.0311545 8,15 L8,15 L8,17.5 C8,17.7761424 7.77614237,18 7.5,18 L0.5,18 C0.223857625,18 3.38176876e-17,17.7761424 0,17.5 L0,15 L0.00633204822,14.8995972 C0.124005013,13.9612665 1.86703821,13 4,13 Z M4.2,6 C5.7463973,6 7,7.2536027 7,8.8 L7,9.2 C7,10.7463973 5.7463973,12 4.2,12 L3.8,12 C2.2536027,12 1,10.7463973 1,9.2 L1,8.8 C1,7.2536027 2.2536027,6 3.8,6 L4.2,6 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><path d="M12,8 L16,12 L12,16 L11.999,12.999 L8,13 L8,11 L11.999,10.999 L12,8 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><path d="M20,13 C22.209139,13 24,14.0311545 24,15 L24,15 L24,17.5 C24,17.7761424 23.7761424,18 23.5,18 L16.5,18 C16.2238576,18 16,17.7761424 16,17.5 L16,15 L16.006332,14.8995972 C16.124005,13.9612665 17.8670382,13 20,13 Z M20.2,6 C21.7463973,6 23,7.2536027 23,8.8 L23,9.2 C23,10.7463973 21.7463973,12 20.2,12 L19.8,12 C18.2536027,12 17,10.7463973 17,9.2 L17,8.8 C17,7.2536027 18.2536027,6 19.8,6 L20.2,6 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero" opacity="0.6"></path></g></g></g></g></g></svg>' + 
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Suggest Times</a>' +
              '<div>Schedule an ad-hoc meeting with someone</div>' +
            '</div>'+
          '</li>' +
          '<li id="bcal_menu_group_poll_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g opacity="0.6"><rect opacity="0.01" width="24" height="24" rx="4" fill="#F2F2F2"/><path fill-rule="evenodd" clip-rule="evenodd" d="M6 10C6 11.1046 5.10457 12 4 12C2.89543 12 2 11.1046 2 10C2 8.89543 2.89543 8 4 8C5.10457 8 6 8.89543 6 10ZM20 12C21.1046 12 22 11.1046 22 10C22 8.89543 21.1046 8 20 8C18.8954 8 18 8.89543 18 10C18 11.1046 18.8954 12 20 12ZM20 13C21.6569 13 23 13.8954 23 15V16C23 16.5523 22.5523 17 22 17H20H18V13.5093C18.5308 13.1926 19.2316 13 20 13ZM6 13.5093C5.46924 13.1926 4.76835 13 4 13C2.34315 13 1 13.8954 1 15V16C1 16.5523 1.44772 17 2 17H4H6V13.5093Z" fill="#222222"/></g><path fill-rule="evenodd" clip-rule="evenodd" d="M12 11C13.6569 11 15 9.65685 15 8C15 6.34315 13.6569 5 12 5C10.3431 5 9 6.34315 9 8C9 9.65685 10.3431 11 12 11ZM12 12C14.7614 12 17 12.8954 17 14V17C17 17.5523 16.5523 18 16 18H8C7.44772 18 7 17.5523 7 17V14C7 12.8954 9.23858 12 12 12Z" fill="#222222"/></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Group Poll</a>' +
              '<div>Let guests vote to find the best meeting time</div>' +
            '</div>'+
          '</li>' +
          '<li id="bcal_menu_share_free_busy_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -584.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_ShareFreeBusy" transform="translate(0.000000, 40.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><g filter="url(#filter-2)" id="Group-15"><g transform="translate(1.000000, 4.000000)"><g id="Group-18" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="14.75" rx="1"></rect><line x1="4.5" y1="0.5" x2="0.5" y2="4.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="2.5" x2="0.5" y2="7.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="5.5" x2="0.5" y2="10.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="8.5" x2="0.5" y2="13.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="11.5" x2="1.5" y2="15.5" id="Path-6" opacity="0.6"></line></g><g id="Group-18" transform="translate(8.000000, 0.000000)" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="6.75" rx="1"></rect><line x1="4.5" y1="0.5" x2="0.5" y2="4.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="2.5" x2="0.5" y2="7.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="5.5" x2="3.5" y2="7.5" id="Path-6" opacity="0.6"></line></g><g id="Group-18" transform="translate(16.000000, 8.000000)" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="6.75" rx="1"></rect><line x1="2.5" y1="0.5" x2="0.5" y2="2.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="0.5" x2="0.5" y2="5.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="3.5" x2="1.5" y2="7.5" id="Path-6" opacity="0.6"></line></g></g></g></g></g></g></g></g></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Share Free/Busy</a>' +
              "<div>Share a live view of when you're busy</div>" +
            '</div>' +
          '</li>' +
          '<li id="bcal_menu_bookable_calendar_event_row" class="bcal_menu_option" style="display:none;">' +
            '<div>' +
            '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -620.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_BookableSchedule" transform="translate(0.000000, 76.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)"><g id="BCalendar"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect></g><path d="M6,4 L6,5 C6,6.1045695 6.8954305,7 8,7 C9.1045695,7 10,6.1045695 10,5 L10,5 L10,4 L14,4 L14,5 C14,6.0543618 14.8158778,6.91816512 15.8507377,6.99451426 L16,7 C17.1045695,7 18,6.1045695 18,5 L18,5 L18,4 L18.9375,4 C20.0203125,4 20.9151989,4.75172749 20.994315,5.77681042 L21,5.92505875 L21,19.0749413 C21,20.1749748 20.071875,21 18.9375,21 L18.9375,21 L5.0625,21 C3.928125,21 3,20.1749748 3,19.0749413 L3,19.0749413 L3,5.92505875 C3,4.82502518 3.928125,4 5.0625,4 L5.0625,4 L6,4 Z M19.5,9.5 L4.5,9.5 L4.5,19.5 L19.5,19.5 L19.5,9.5 Z M8,2 C8.55228475,2 9,2.44771525 9,3 L9,5 C9,5.55228475 8.55228475,6 8,6 C7.44771525,6 7,5.55228475 7,5 L7,3 C7,2.44771525 7.44771525,2 8,2 Z M16,2 C16.5522847,2 17,2.44771525 17,3 L17,5 C17,5.55228475 16.5522847,6 16,6 C15.4477153,6 15,5.55228475 15,5 L15,3 C15,2.44771525 15.4477153,2 16,2 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><polygon id="Path-7" fill="#222222" fill-rule="nonzero" points="15.0875899 11 16.5 12.4142136 11.5012752 17.419321 8.5 14.4142136 9.91241011 13 11.5012746 14.5901068"></polygon></g></g></g></g></g></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Bookable Schedule' +
                '<div class="bcal_bookable_schedule_new_indicator">NEW</div>' +
              '</a>' +
              "<div>Set up once and use it with everyone</div>" +
            '</div>' +
          '</li>' +
          '<li id="bcal_menu_create_event_row" class="bcal_menu_option" style="display:none;">' +
            '<div>' +
              // ico_add.svg
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title></title><g id="Boomerang-UI,-Pickers,-etc" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="B4G-Meet_menu-updated_text" transform="translate(-36.000000, -304.000000)"><g id="menu" transform="translate(24.000000, 134.000000)"><g id="Bookable_row" transform="translate(0.000000, 160.000000)"><g id="BCalendar" transform="translate(12.000000, 10.000000)"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><rect id="Rectangle" stroke="#222222" fill="#222222" transform="translate(12.000000, 12.000000) rotate(-270.000000) translate(-12.000000, -12.000000) " x="11.5" y="5.5" width="1" height="13" rx="0.5"></rect><rect id="Rectangle" stroke="#222222" fill="#222222" transform="translate(12.000000, 12.000000) rotate(-360.000000) translate(-12.000000, -12.000000) " x="11.5" y="5.5" width="1" height="13" rx="0.5"></rect></g></g></g></g></g</svg>' +
            '</div>' +
            '<div>' +
              '<a>Create Event</a>' +
            '</div>' +
          '</li>' +
        '</div>' +
      '</ul>';
      // TODO: once create event feature branch is merged in, reorder all BCal feature menus to have bookable calendar put in the right place

    // Share Free/Busy dialog is included, hidden by default, below.
    var share_free_busy_menu =
      '<ul id="bcal_share_free_busy_menu" tabindex="0" style="padding:0px;position:absolute;left:auto;top:auto;background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 130px;min-height:auto;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
        '<div class="bcal_features_menu J-M">' +
          '<div class="bcal_share_free_busy_dialog">' +
          '<div class="bcal_share_free_busy_title_row">' +
            '<div class="bcal_share_free_busy_title">Share Free/Busy</div>' +
            '<div class="bcal_share_free_busy_preview_link">See how it works <img src="https://b4g.baydin.com/site_media/calendar/img/ico_playvid@2x.png"></div>' +
          '</div>' +
          '<div class="bcal_share_free_busy_explanation_row">' +
            'Insert a Magic Live Calendar showing your real-time availability' +
          '</div>' +
          '<div class="bcal_share_free_busy_day_range_row">' +
            '<div class="bcal_pre_input_icon_container J-Z-I" data-tooltip="Calendar range"><img class="bcal_pre_input_icon" src="https://b4g.baydin.com/site_media/calendar/img/ico_range@2x.png"></div>' +
            '<div class="bcal_share_free_busy_radio_btns">' +
              '<label for="bcal_next_3_days">' +
                '<input type="radio" name="bcal_share_free_busy_date_range" value="next3days" id="bcal_next_3_days" checked>' +
                '<span class="bcal-share-free-busy-range-label">Next 3 days</span>' +
              '</label>' +
              '<label for="bcal_next_5_days">' +
                '<input type="radio" name="bcal_share_free_busy_date_range" value="next5days" id="bcal_next_5_days">' +
                '<span class="bcal-share-free-busy-range-label">Next 5 days</span>' +
              '</label>' +
              '<label for="bcal_next_week">' +
                '<input type="radio" name="bcal_share_free_busy_date_range" value="nextWeek" id="bcal_next_week">' +
                '<span class="bcal-share-free-busy-range-label">Next week</span>' +
              '</label>' +
              '<label for="bcal_custom_range">' +
                '<input type="radio" name="bcal_share_free_busy_date_range" value="customRange" id="bcal_custom_range">' +
                '<span class="bcal-share-free-busy-range-label">Custom...</span>' +
              '</label>' +
            '</div>' +
          '</div>' +
          '<div class="bcal_share_free_busy_checkboxes_row">' +
            '<div class="bcal_share_free_busy_today_container">' +
              '<label for="bcal_include_today_checkbox">' +
                '<div class="bcal_include_today_visible_checkbox"></div>' +
                '<input class="bcal_include_today_checkbox" type="checkbox" id="bcal_include_today_checkbox"/>' +
                'Include today' +
              '</label>' +
            '</div>' +
            '<div class="bcal_share_free_busy_custom_range_link_text_container">' +
              '<span id="bcal_share_free_busy_custom_range_link_text">Select custom range</span>' +
            '</div>' +
            "<input class='bcal_share_free_busy_custom_range_start'>" +
            "<input class='bcal_share_free_busy_custom_range_end'>" +
            '<div class="bcal_share_free_busy_weekends_container">' +
              '<label for="bcal_include_weekend_checkbox">' +
                '<div class="bcal_include_weekends_visible_checkbox"></div>' +
                '<input class="bcal_include_weekend_checkbox" type="checkbox" id="bcal_include_weekend_checkbox"/>' +
                'Include weekends' +
              '</label>' +
            '</div>' +
          '</div>' +
          '<div class="bcal_share_free_busy_times_row">' +
            '<div class="bcal_pre_input_icon_container J-Z-I" data-tooltip="Daily start and end time"><img class="bcal_pre_input_icon" src="https://b4g.baydin.com/site_media/calendar/img/ico_timerange@2x.png"></div>' +
            '<div class="bcal_share_free_busy_times_start_end_section">' +
              '<div class="bcal_share_free_busy_times_start_end_selects">' +
                '<div class="bcal-custom-select" style="width:110px">' +
                  '<select class="bcal_share_free_busy_start_time" name="startTime">' +
                    '<option value="5:00">5:00 AM</option>' +
                    '<option value="5:30">5:30 AM</option>' +
                    '<option value="6:00">6:00 AM</option>' +
                    '<option value="6:30">6:30 AM</option>' +
                    '<option value="7:00">7:00 AM</option>' +
                    '<option value="7:30">7:30 AM</option>' +
                    '<option value="8:00">8:00 AM</option>' +
                    '<option value="8:30">8:30 AM</option>' +
                    '<option value="9:00" selected>9:00 AM</option>' +
                    '<option value="9:30">9:30 AM</option>' +
                    '<option value="10:00">10:00 AM</option>' +
                    '<option value="10:30">10:30 AM</option>' +
                    '<option value="11:00">11:00 AM</option>' +
                    '<option value="11:30">11:30 AM</option>' +
                    '<option value="12:00">12:00 PM</option>' +
                    '<option value="12:30">12:30 PM</option>' +
                    '<option value="13:00">1:00 PM</option>' +
                    '<option value="13:30">1:30 PM</option>' +
                    '<option value="14:00">2:00 PM</option>' +
                    '<option value="14:30">2:30 PM</option>' +
                    '<option value="15:00">3:00 PM</option>' +
                    '<option value="15:30">3:30 PM</option>' +
                    '<option value="16:00">4:00 PM</option>' +
                    '<option value="16:30">4:30 PM</option>' +
                    '<option value="17:00">5:00 PM</option>' +
                    '<option value="17:30">5:30 PM</option>' +
                    '<option value="18:00">6:00 PM</option>' +
                    '<option value="18:30">6:30 PM</option>' +
                    '<option value="19:00">7:00 PM</option>' +
                    '<option value="19:30">7:30 PM</option>' +
                    '<option value="20:00">8:00 PM</option>' +
                    '<option value="20:30">8:30 PM</option>' +
                    '<option value="21:00">9:00 PM</option>' +
                    '<option value="21:30">9:30 PM</option>' +
                    '<option value="22:00">10:00 PM</option>' +
                    '<option value="22:30">10:30 PM</option>' +
                  '</select>' +
                '</div>' +
                '<div class="bcal-times-row-to-div">to</div>' +
                '<div class="bcal-custom-select" style="width:110px">' +
                  '<select class="bcal_share_free_busy_end_time" name="endTime">' +
                    '<option value="9:30">9:30 AM</option>' +
                    '<option value="10:00">10:00 AM</option>' +
                    '<option value="10:30">10:30 AM</option>' +
                    '<option value="11:00">11:00 AM</option>' +
                    '<option value="11:30">11:30 AM</option>' +
                    '<option value="12:00">12:00 PM</option>' +
                    '<option value="12:30">12:30 PM</option>' +
                    '<option value="13:00">1:00 PM</option>' +
                    '<option value="13:30">1:30 PM</option>' +
                    '<option value="14:00">2:00 PM</option>' +
                    '<option value="14:30">2:30 PM</option>' +
                    '<option value="15:00">3:00 PM</option>' +
                    '<option value="15:30">3:30 PM</option>' +
                    '<option value="16:00">4:00 PM</option>' +
                    '<option value="16:30">4:30 PM</option>' +
                    '<option value="17:00" selected>5:00 PM</option>' +
                    '<option value="17:30">5:30 PM</option>' +
                    '<option value="18:00">6:00 PM</option>' +
                    '<option value="18:30">6:30 PM</option>' +
                    '<option value="19:00">7:00 PM</option>' +
                    '<option value="19:30">7:30 PM</option>' +
                    '<option value="20:00">8:00 PM</option>' +
                    '<option value="20:30">8:30 PM</option>' +
                    '<option value="21:00">9:00 PM</option>' +
                    '<option value="21:30">9:30 PM</option>' +
                    '<option value="22:00">10:00 PM</option>' +
                    '<option value="22:30">10:30 PM</option>' +
                    '<option value="23:00">11:00 PM</option>' +
                    '<option value="23:30">11:30 PM</option>' +
                    '<option value="24:00">12:00 AM</option>' +
                  '</select>' +
                '</div>' +
              '</div>' +
            '</div>' +
            '<div class="bcal_share_free_busy_times_timezone_section">' +
              '<div class="bcal_share_free_busy_times_timezone_select">' +
                '<div class="bcal-custom-select" style="width: 110px">' +
                  '<select class="bcal_share_free_busy_time_zone" name="timeZone">' +
                    '<option value="America/Los_Angeles" selected>Pacific</option>' +
                    '<option value="America/Denver">Mountain</option>' +
                    '<option value="America/Chicago">Central</option>' +
                    '<option value="America/New_York">Eastern</option>' +
                    '<option class="more" value="More">More</option>' +
                  '</select>' +
                '</div>' +
              '</div>' +
            '</div>' +
          '</div>' +
          '<div class="bcal_share_calendar_row">' +
            '<div class="bcal_pre_input_icon_container J-Z-I" data-tooltip="Included calendars"><img class="bcal_pre_input_icon" src="https://b4g.baydin.com/site_media/calendar/img/ico_sharefreebusy@2x.png"></div>' +
            '<select class="b4g-syncedCalendarRegion" multiple="multiple" >' +
            '</select>' +
          '</div>' +
          // '<div class="bcal_share_free_busy_checkboxes_row">' +
          //   '<div class="bcal_allow_recipient_book_container">' +
          //     '<label for="bcal_allow_recipient_book_checkbox">' +
          //       '<div class="bcal_allow_recipient_book_visible_checkbox"></div>' +
          //       '<input class="bcal_allow_recipient_book_checkbox" type="checkbox" id="bcal_allow_recipient_book_checkbox"/>' +
          //       'Allow recipients to book any free time' +
          //     '</label>' +
          //   '</div>' +
          // '</div>' +
          '<div class="bcal_share_free_busy_submit_row">' +
            '<div class="bcal_share_free_busy_submit_row_buttons_holder">' +
              '<button class="bcal_share_free_busy_cancel_btn">' +
                '<div><div class="bcal-div-txt-wrapper">Cancel</div></div>' +
              '</button>' +
              '<button class="bcal_share_free_busy_insert_btn">' +
                '<div class="bcal-share-free-busy-insert-div"><div class="bcal-div-txt-wrapper">Insert</div></div>' +
              '</button>' +
            '</div>' +
          '</div>' +
        '</div>' +
      '</div>' +
    '</ul>';

    var bookable_calendar_menu =
      '<ul id="bcal_bookable_calendar_menu" class="bcal_version_2" tabindex="0" style="padding:0px;position:absolute;left:auto;top:auto;background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 130px;min-height:auto;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
        '<div class="bcal_features_menu J-M" style="padding:0px!important">' +
          '<div class="bcal_share_free_busy_dialog">' +

            // list view
            '<div class="bcal_bookable_list_screen" style="margin:0px;">' +
              '<div style="display: flex; flex-direction: row; justify-content: space-between; align-items:center; padding: 16px 16px">' +
                '<div class="" style="color: #222222; font-weight: bold; font-size: 16px;">' +
                  'Bookable Schedules' +
                  '<textarea style="padding: 0px; display: inline-block; opacity:0; height: 1px; width:1px;"class="b4g_clipboard" type="text" placeholder=""></textarea>' +
                '</div>' +
                '<div>' +
                  '<div class="bcal_upper_link bcal_manage_schedules">' +
                      '<img src="https://b4g.baydin.com/site_media/calendar/bookable/kebab.svg">'+
                  '</div>' +
                  '<div class="bcal_bookable_manage_dropdown">' +
                    '<div class="bcal_manage_dropdown_option scheduling_page" style="display:none">' +
                      'Copy link to scheduling page' +
                    '</div>' +
                    '<div class="bcal_manage_dropdown_option manage_page">' +
                      'Manage schedules' +
                    '</div>' +
                    '<div class="bcal_manage_dropdown_option video_walkthrough">' +
                      'See how it works' +
                    '</div>' +
                  '</div>' +
                  '<div class="bcal_upper_link bcal_create_new_schedule" data-tooltip="Create new schedule">' +
                    '<img src="https://b4g.baydin.com/site_media/calendar/bookable/create.svg">'+
                  '</div>' +
                '</div>' +
              '</div>' +
              '<div class="bookable_calendar_selector">' + 
              '</div>' +
            '</div>' +

            // Customize dialog
            '<div class="bcal_customize_expanded" style="display:none;">' +
            '<div>' +
                '<div class="bcal_customize_row">' +
                      'Personalize this invitation' +
                '</div>' +
                '<div class="bcal_existing_title">' +
                '</div>' +
                '<div class="bcal_existing_duration">' +
                '</div>' +
                '<div class="bcal_share_free_busy_cancel_btn">' +
                    '<img src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/close.svg">'+
                '</div>' +
              '</div>' +
              '<div class="bcal_custom_title_row">' +
                '<div class="bcal_custom_title_container">' +
                  '<input class="bcal_custom_title_checkbox" type="checkbox" id="bcal_custom_title_checkbox"/>' +
                  '<div class="bcal_custom_title_header">' +
                    'Custom title' +
                  '</div>' +
                  '<input type="text" id="bcal-custom-title-input" placeholder="Add title"/>' +
                '</div>' +
              '</div>' +
              '<div class="bcal_custom_time_frame_header">' +
                'Custom time frame' +
              '</div>' +
              '<div class="bcal_allow_bookings_range_row" style="margin-top: 7px">' +
                '<div class="bcal_allow_bookings_radio_btns">' +
                  '<label for="bcal_allow_default" class="active">' +
                    '<input type="radio" name="bcal_allow_bookings_date_range" value="default" id="bcal_allow_default" checked>' +
                    '<span class="bcal-allow-bookings-range-label">Default</span>' +
                  '</label>' +
                  '<label for="bcal_allow_next_two_weeks">' +
                    '<input type="radio" name="bcal_allow_bookings_date_range" value="next2weeks" id="bcal_allow_next_two_weeks">' +
                    '<span class="bcal-allow-bookings-range-label">2 weeks</span>' +
                  '</label>' +
                  '<label for="bcal_allow_next_month">' +
                    '<input type="radio" name="bcal_allow_bookings_date_range" value="nextmonth" id="bcal_allow_next_month">' +
                    '<span class="bcal-allow-bookings-range-label">Next month</span>' +
                  '</label>' +
                  '<label for="bcal_allow_custom_range">' +
                    '<input type="radio" name="bcal_allow_bookings_date_range" value="custom" id="bcal_allow_custom_range">' +
                    '<span class="bcal-allow-bookings-range-label">Custom</span>' +
                  '</label>' +
                '</div>' +
              '</div>' +
              '<div class="bcal-allow-bookings-display" style="margin-left: 1px">' +
                '<span class="bcal-allow-bookings-display-header">Allow bookings: </span>' +
                '<span class="bcal-allow-bookings-display-default-text" style="font-weight: 500"> </span>' +
                '<span class="bcal-allow-bookings-display-custom-text" style="display: none;">Select custom range</span>' +
              '</div>' +
              '<div class="bcal_recipient_time_zone_row">' +
                '<div class="bcal_recipient_time_zone_button" style="margin-left: -6px">' +
                  'Add recipient\'s time zone (optional) ' +
                '</div>' +
                '<div class="bcal_recipient_time_zone_container" style="display:none">' +
                  '<div>' +
                    '<div class="bcal_recipient_time_zone_title">' +
                      'Recipient\'s time zone' +
                    '</div>' +
                    '<div class="bcal_recipient_time_zone">' +
                    '</div>' +
                  '</div>' +
                  '<div class="bcal_recipient_time_zone_remove">' +
                    '<img src="https://b4g.baydin.com/site_media/calendar/img/ico_clearfield.svg" style="width:32px;">'+
                  '</div>' +
                '</div>' +
              '</div>' +
              '<div class="bcal_share_free_busy_submit_row" style="margin-top: 10px; margin-bottom: 14px!important">' +
                '<div class="bcal_share_free_busy_submit_row_buttons_holder" style="">' +
                  '<button class="bcal_share_free_busy_insert_link_btn" style="margin-right: 4px; width:100px;">' +
                    '<div style="background: none;"><div class="bcal-div-txt-wrapper" style="font-size: 14px; color: #005DA0">Insert as link</div></div>' +
                  '</button>' +
                  '<button class="bcal_share_free_busy_insert_btn" style="width: 168px">' +
                    '<div class="bcal-share-free-busy-insert-div" style="width: 168px; padding: 2px 2px"><div class="bcal-div-txt-wrapper" style="">Insert with these details</div></div>' +
                  '</button>' +
                '</div>' +
              '</div>' +
            '</div>' +

          '</div>' +
        '</div>' +
      '</ul>';


    $bcal_features_menu = $(bcal_features_menu);
    if (isAReply) {
      $bcal_features_menu.find("#bcal_menu_create_event_row").show();
      $bcal_features_menu.addClass("bcal_is_a_reply");
    } else {
      $bcal_features_menu.css("top", "inherit");
      $bcal_features_menu.css("bottom", "158px");
    }
    if (can_use_bookable_schedule()) {
      $bcal_features_menu.find("#bcal_menu_bookable_calendar_event_row").show();
      if (isAReply) {
      } else{
        $bcal_features_menu.css("top", "inherit");
        $bcal_features_menu.css("bottom", "262px");
      }
    }

    if (highlightingSuggestTimesFromForkie) {
      highlightingSuggestTimesFromForkie = false;
      $bcal_features_menu.find('#bcal_menu_suggest_times_row').addClass('forkie-highlight');
    } else if (highlightingBookableFromForkie) {
      highlightingBookableFromForkie = false;
      $bcal_features_menu.find('#bcal_menu_bookable_calendar_event_row').addClass('forkie-highlight');
    }

    var emailThread = $(".if > .aHU");
    // 2/17/15: some weird z-index and scrolling issues here. Try to attach menu to the thread. If it fails, try the document body.
    if (emailThread.length == 1 && which_gmail() !== NEW_GMAIL){
    } else if(which_gmail() === NEW_GMAIL && !isAReply) {
        emailThread = get_compose_container(owner);
    } else {
      emailThread = $(owner).parent();
    }

    emailThread.append(share_free_busy_menu);
    emailThread.append(bookable_calendar_menu);
    emailThread.append($bcal_features_menu);

    // TODO: need to setup mutation observers to keep menu positioned nicely if the compose view is moved/window is resized

    $composeContainer.find('.b4g-bcal-features-button').addClass('J-Z-I-KO'); // Apply active state styling to BCal features button

    // Click handler setup
    // If we are displaying the bookable announcement:
      // We are opening the BCal menu before making sure the user is logged in
      // We must ensure they are logged in and we have calendar permissions as soon as they click on a BCal feature
    // If we are displaying a bookable announcement modal:
      // We are opening the BCal menu AND THEN opening the bookable schedule menu option
      // We know that the user has already been logged in and granted calendar permissions
    // Otherwise:
      // We know the user is already logged in with BCal permissions, so we'll immediately open a BCal feature when it is clicked
    // In ALL cases:
      // We want the BCal menu to close on outside click

    // Close menu on outside click:
    $(frameDoc).mousedown(function closeBCalFeaturesMenuOnOutsideClick(e){
      var target = get_target(e);
      if ($(target).parents().andSelf().filter(".gm-boomerang-bcal-button-thread, #bcal_features_menu, #bcal_share_free_busy_menu, #bcal_bookable_calendar_menu, .b4g-bcal-features-button-holder, " +
        ".b4g-bcal-calendar-multiselect, .b4c-share-free-busy-video-overlay, .b4gShareFreeBusyVideoModal, .b4c-share-free-busy-custom-range-overlay, .b4g-custom-time-range-dialog, " +
        ".b4g-ui-datepicker-calendar, .b4g-ui-corner-all").length === 0)
      {
        if ($(".b4g-timezone-dialog").length > 0) {
          // Timezone dialog is open
          return;
        }
        if ($(".b4g-bookable-announcement:visible").length > 0) {
          // announcement is open
          return;
        }
        if ($(".b4c-share-free-busy-custom-range-overlay").length > 0 && $(e.target).hasClass('b4g-bcal-allowed')) {
          // Custom share free/busy time range dialog is opened
          // Edge case: user tried to click and drag, clicking within the dialog and releasing the mouse outside of it.  We don't want to close the free/busy dialog.
          return;
        }
        close_bcal_features_menu();
        $(frameDoc).unbind('click', closeBCalFeaturesMenuOnOutsideClick);
      }
    });

    if (isDisplayingBookableAnnouncement) {
      // Hook up click handlers for menu options.  We must ensure login with calendar permissions
      $('#bcal_menu_suggest_times_row', frameDoc).click(function() {
        close_bcal_features_menu();
        close_bookable_announcement_tooltip($composeContainer, 'suggest times option');
        call_function_after_calendar_login(function() {
          display_suggest_times_screen(target, range);
        }, false, null, false, false, false);
        track_event([ "bcal", "display-suggest-times" ]);
      });
      $('#bcal_menu_share_free_busy_row', frameDoc).click(function() {
        close_bookable_announcement_tooltip($composeContainer, 'free busy option');
        call_function_after_calendar_login(function() {
          display_share_free_busy_screen(target, range);
        }, false, null, false, false, false);
        track_event([ "bcal", "display-share-free-busy" ]);
      });
      $('#bcal_menu_group_poll_row', frameDoc).click(function() {
        close_bcal_features_menu();
        close_bookable_announcement_tooltip($composeContainer, 'group poll option');
        // call_function_after_calendar_login(function() {
        //   display_plan_group_event_screen();
        // }, false, null, false, false, false);
        display_group_poll_interest();
        track_event([ "bcal", "display-dummy-group-poll" ]);
      });
      $('#bcal_menu_bookable_calendar_event_row', frameDoc).click(function() {
        close_bookable_announcement_tooltip($composeContainer, 'bookable option');
        call_function_after_calendar_login(function() {
          display_bookable_calendar(target, range);
        }, false, null, false, false, false);
        track_event([ "bcal", "display-bookable" ]);
      });
      $('#bcal_menu_create_event_row', frameDoc).click(function() {
        close_bcal_features_menu();
        var gmailId = $(".adn.ads[data-message-id]").last().attr("data-message-id").replace("#", "");
        // The button needs the gmailId for as an attribute for display_magic_create_event_dialog
        $(this).attr("b4g-source-gmail-id", gmailId);
        close_bookable_announcement_tooltip($composeContainer, 'create event option');
        call_function_after_calendar_login(function() {
          display_magic_create_event_dialog($(this), true);
        }, false, null, false, false, false);
        track_event([ "bcal", "create-event-from-reply" ]);
      });

      isDisplayingBookableAnnouncement = false;

    } else {
      // Hook up click handlers for menu options
      $('#bcal_menu_suggest_times_row', frameDoc).click(function() {
        close_bcal_features_menu();
        display_suggest_times_screen(target, range);
        track_event([ "bcal", "display-suggest-times" ]);
      });
      $('#bcal_menu_share_free_busy_row', frameDoc).click(function() {
        display_share_free_busy_screen(target, range);
        track_event([ "bcal", "display-share-free-busy" ]);
      });
      $('#bcal_menu_group_poll_row', frameDoc).click(function() {
        close_bcal_features_menu();
        // display_plan_group_event_screen();
        display_group_poll_interest();
        track_event([ "bcal", "display-dummy-group-poll" ]);
      });
      $('#bcal_menu_bookable_calendar_event_row', frameDoc).click(function() {
        display_bookable_calendar(target, range);
        track_event([ "bcal", "display-bookable" ]);
      });
      $('#bcal_menu_create_event_row', frameDoc).click(function() {
        close_bcal_features_menu();
        var gmailId = $(".adn.ads[data-message-id]").last().attr("data-message-id").replace("#", "");
        // The button needs the gmailId for as an attribute for display_magic_create_event_dialog
        $(this).attr("b4g-source-gmail-id", gmailId);
        display_magic_create_event_dialog($(this), true);
        track_event([ "bcal", "create-event-from-reply" ]);
      });

      if (isDisplayingBookableAnnouncementModal) {
        ensureBookableWizardOpen = true;  // Ensures wizard will show
        display_bookable_calendar(target, range);
        track_event([ "bcal", "display-bookable" ]);
        isDisplayingBookableAnnouncementModal = false;
      }
    }



    function resetAutoOpenVariables() {
      openingSuggestTimesFromThreadViewMenu = false;
      openingShareFreeBusyFromThreadViewMenu = false;
      openingBookableFromThreadViewMenu = false;
      $composeContainer.find('.b4g-bcal-features-button').removeClass('b4g-opening-share-free-busy-from-thread-view');
      $composeContainer.find('.b4g-bcal-features-button').removeClass('b4g-opening-suggest-times-from-thread-view');
      $composeContainer.find('.b4g-bcal-features-button').removeClass('b4g-opening-bookable-from-thread-view');

      // Forkie-related
      $composeContainer.find('.b4g-bcal-features-button').removeClass('b4g-opening-share-free-busy-from-forkie');
      $composeContainer.find('.b4g-bcal-features-button').removeClass('b4g-opening-bookable-from-forkie');
    }

    if ($composeContainer.find('.b4g-bcal-features-button').hasClass('b4g-opening-suggest-times-from-thread-view')) {
      // Auto open suggest times from thread view or after clicking the suggest times row from conversation forkie
      resetAutoOpenVariables();
      display_suggest_times_screen(target, range);
      close_bcal_features_menu();
    } else if ($composeContainer.find('.b4g-bcal-features-button').hasClass('b4g-opening-share-free-busy-from-thread-view') ||
      $composeContainer.find('.b4g-bcal-features-button').hasClass('b4g-opening-share-free-busy-from-forkie')) {
      resetAutoOpenVariables();
      console.log('showing free busy dialog now:')
      display_share_free_busy_screen(target, range);
    } else if ($composeContainer.find('.b4g-bcal-features-button').hasClass('b4g-opening-bookable-from-thread-view') ||
      $composeContainer.find('.b4g-bcal-features-button').hasClass('b4g-opening-bookable-from-forkie')) {
      resetAutoOpenVariables();
      display_bookable_calendar(target, range);
    }

    track_event([ "bcal", "meet menu opened" ]);
  }

  $composeContainer.trigger({
    type: "bookableCalendarDisplayed"
  });
}

// Toggle function for thread view BCal button
function thread_view_toggle_bcal_features_menu(e, $threadBCalBtn) {
  track_event([ "bcal", "toggle features menu" ]);
  var frameDoc = get_frame();
  var target = e.target;

  var $threadViewBCalFeaturesMenu = $("#bcal_features_menu.bcal-thread-view-features-menu");
  var menuCount = $threadViewBCalFeaturesMenu.length;
  close_bcal_features_menu();
  if (menuCount > 0) {
  } else {
    // If the b4g menu is already open, close it so it won't block the BCal features menu
    close_b4g_menu();

    var bCalButtonLeftPosition = $threadBCalBtn.offset().left;

    // TODO: fix positioning of this menu (B4G-2712)
    var $panel = $(".nH.oy8Mbf.nn");
    var sidebarPanelIsExpanded = false;
    // if it's NOT collapsed or if it's being hovered, then it's expanded
    if (!$panel.hasClass("bhZ") || ($panel.hasClass("bhZ") && $panel.hasClass("bym"))) {
      sidebarPanelIsExpanded = true;
    }

    if (sidebarPanelIsExpanded) {
      // Sidebar is expanded
      bCalButtonLeftPosition -= 391;
    } else {
      // Sidebar is collapsed
      bCalButtonLeftPosition -= 207;
    }

    // Create the BCal features menu:
    var bcal_features_menu =
      '<ul id="bcal_features_menu" class="bcal-thread-view-features-menu" tabindex="0" style="padding:0px;position:absolute;left:'+bCalButtonLeftPosition+'px;top:30px;background-color: rgb(255, 255, 255); -webkit-user-select: none; min-width: 130px;min-height:auto;" role="menu" aria-haspopup="true" aria-activedescendant="">' +
        '<div class="bcal_features_menu bcal_features_menu_with_labels J-M" style="border-radius: 4px;">' +
          '<li id="bcal_menu_suggest_times_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -548.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_SuggestTimes" transform="translate(0.000000, 4.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)" id="Group-17"><rect id="Rectangle" fill="#F2F2F2" opacity="0" x="0" y="0" width="24" height="24" rx="4"></rect><path d="M4,13 C6.209139,13 8,14.0311545 8,15 L8,15 L8,17.5 C8,17.7761424 7.77614237,18 7.5,18 L0.5,18 C0.223857625,18 3.38176876e-17,17.7761424 0,17.5 L0,15 L0.00633204822,14.8995972 C0.124005013,13.9612665 1.86703821,13 4,13 Z M4.2,6 C5.7463973,6 7,7.2536027 7,8.8 L7,9.2 C7,10.7463973 5.7463973,12 4.2,12 L3.8,12 C2.2536027,12 1,10.7463973 1,9.2 L1,8.8 C1,7.2536027 2.2536027,6 3.8,6 L4.2,6 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><path d="M12,8 L16,12 L12,16 L11.999,12.999 L8,13 L8,11 L11.999,10.999 L12,8 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><path d="M20,13 C22.209139,13 24,14.0311545 24,15 L24,15 L24,17.5 C24,17.7761424 23.7761424,18 23.5,18 L16.5,18 C16.2238576,18 16,17.7761424 16,17.5 L16,15 L16.006332,14.8995972 C16.124005,13.9612665 17.8670382,13 20,13 Z M20.2,6 C21.7463973,6 23,7.2536027 23,8.8 L23,9.2 C23,10.7463973 21.7463973,12 20.2,12 L19.8,12 C18.2536027,12 17,10.7463973 17,9.2 L17,8.8 C17,7.2536027 18.2536027,6 19.8,6 L20.2,6 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero" opacity="0.6"></path></g></g></g></g></g></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Suggest Times</a>' +
              '<div>Schedule an ad-hoc meeting with someone</div>' +
            '</div>'+
          '</li>' +
            '<li id="bcal_menu_group_poll_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g opacity="0.6"><rect opacity="0.01" width="24" height="24" rx="4" fill="#F2F2F2"/><path fill-rule="evenodd" clip-rule="evenodd" d="M6 10C6 11.1046 5.10457 12 4 12C2.89543 12 2 11.1046 2 10C2 8.89543 2.89543 8 4 8C5.10457 8 6 8.89543 6 10ZM20 12C21.1046 12 22 11.1046 22 10C22 8.89543 21.1046 8 20 8C18.8954 8 18 8.89543 18 10C18 11.1046 18.8954 12 20 12ZM20 13C21.6569 13 23 13.8954 23 15V16C23 16.5523 22.5523 17 22 17H20H18V13.5093C18.5308 13.1926 19.2316 13 20 13ZM6 13.5093C5.46924 13.1926 4.76835 13 4 13C2.34315 13 1 13.8954 1 15V16C1 16.5523 1.44772 17 2 17H4H6V13.5093Z" fill="#222222"/></g><path fill-rule="evenodd" clip-rule="evenodd" d="M12 11C13.6569 11 15 9.65685 15 8C15 6.34315 13.6569 5 12 5C10.3431 5 9 6.34315 9 8C9 9.65685 10.3431 11 12 11ZM12 12C14.7614 12 17 12.8954 17 14V17C17 17.5523 16.5523 18 16 18H8C7.44772 18 7 17.5523 7 17V14C7 12.8954 9.23858 12 12 12Z" fill="#222222"/></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Group Poll</a>' +
              '<div>Let guests vote to find the best meeting time</div>' +
            '</div>'+
          '</li>' +
          '<li id="bcal_menu_share_free_busy_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -584.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_ShareFreeBusy" transform="translate(0.000000, 40.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><g filter="url(#filter-2)" id="Group-15"><g transform="translate(1.000000, 4.000000)"><g id="Group-18" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="14.75" rx="1"></rect><line x1="4.5" y1="0.5" x2="0.5" y2="4.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="2.5" x2="0.5" y2="7.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="5.5" x2="0.5" y2="10.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="8.5" x2="0.5" y2="13.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="11.5" x2="1.5" y2="15.5" id="Path-6" opacity="0.6"></line></g><g id="Group-18" transform="translate(8.000000, 0.000000)" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="6.75" rx="1"></rect><line x1="4.5" y1="0.5" x2="0.5" y2="4.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="2.5" x2="0.5" y2="7.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="5.5" x2="3.5" y2="7.5" id="Path-6" opacity="0.6"></line></g><g id="Group-18" transform="translate(16.000000, 8.000000)" stroke="#222222"><rect id="Rectangle" stroke-width="1.25" x="0.625" y="0.625" width="4.75" height="6.75" rx="1"></rect><line x1="2.5" y1="0.5" x2="0.5" y2="2.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="0.5" x2="0.5" y2="5.5" id="Path-6" opacity="0.6"></line><line x1="5.5" y1="3.5" x2="1.5" y2="7.5" id="Path-6" opacity="0.6"></line></g></g></g></g></g></g></g></g></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
              '<a>Share Free/Busy</a>' +
              "<div>Share a live view of when you're busy</div>" +
            '</div>' +
          '</li>' +
          '<li id="bcal_menu_bookable_calendar_event_row" class="bcal_menu_option">' +
            '<div>' +
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Bookable---Wizard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Bookable-menu-customize_v3" transform="translate(-188.000000, -620.000000)"><g id="Group-4" transform="translate(180.000000, 538.000000)"><g id="ico_BookableSchedule" transform="translate(0.000000, 76.000000)" filter="url(#filter-1)"><g transform="translate(8.000000, 6.000000)"><g id="BCalendar"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect></g><path d="M6,4 L6,5 C6,6.1045695 6.8954305,7 8,7 C9.1045695,7 10,6.1045695 10,5 L10,5 L10,4 L14,4 L14,5 C14,6.0543618 14.8158778,6.91816512 15.8507377,6.99451426 L16,7 C17.1045695,7 18,6.1045695 18,5 L18,5 L18,4 L18.9375,4 C20.0203125,4 20.9151989,4.75172749 20.994315,5.77681042 L21,5.92505875 L21,19.0749413 C21,20.1749748 20.071875,21 18.9375,21 L18.9375,21 L5.0625,21 C3.928125,21 3,20.1749748 3,19.0749413 L3,19.0749413 L3,5.92505875 C3,4.82502518 3.928125,4 5.0625,4 L5.0625,4 L6,4 Z M19.5,9.5 L4.5,9.5 L4.5,19.5 L19.5,19.5 L19.5,9.5 Z M8,2 C8.55228475,2 9,2.44771525 9,3 L9,5 C9,5.55228475 8.55228475,6 8,6 C7.44771525,6 7,5.55228475 7,5 L7,3 C7,2.44771525 7.44771525,2 8,2 Z M16,2 C16.5522847,2 17,2.44771525 17,3 L17,5 C17,5.55228475 16.5522847,6 16,6 C15.4477153,6 15,5.55228475 15,5 L15,3 C15,2.44771525 15.4477153,2 16,2 Z" id="Combined-Shape" fill="#222222" fill-rule="nonzero"></path><polygon id="Path-7" fill="#222222" fill-rule="nonzero" points="15.0875899 11 16.5 12.4142136 11.5012752 17.419321 8.5 14.4142136 9.91241011 13 11.5012746 14.5901068"></polygon></g></g></g></g></g></svg>' +
            '</div>' +
            '<div class="bcal_menu_option_text_col">' +
            '<a>Bookable Schedule' +
              '<div class="bcal_bookable_schedule_new_indicator">NEW</div>' +
            '</a>' +
            "<div>Set up once and use it with everyone</div>" +
            '</div>' +
          '</li>' +
          '<li id="bcal_menu_create_event_row" class="bcal_menu_option" style="display:none;">' +
            '<div>' +
              // ico_add.svg
              '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title></title><g id="Boomerang-UI,-Pickers,-etc" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="B4G-Meet_menu-updated_text" transform="translate(-36.000000, -304.000000)"><g id="menu" transform="translate(24.000000, 134.000000)"><g id="Bookable_row" transform="translate(0.000000, 160.000000)"><g id="BCalendar" transform="translate(12.000000, 10.000000)"><rect id="Rectangle" x="0" y="0" width="24" height="24"></rect><rect id="Rectangle" stroke="#222222" fill="#222222" transform="translate(12.000000, 12.000000) rotate(-270.000000) translate(-12.000000, -12.000000) " x="11.5" y="5.5" width="1" height="13" rx="0.5"></rect><rect id="Rectangle" stroke="#222222" fill="#222222" transform="translate(12.000000, 12.000000) rotate(-360.000000) translate(-12.000000, -12.000000) " x="11.5" y="5.5" width="1" height="13" rx="0.5"></rect></g></g></g></g></g</svg>' +
            '</div>' +
            '<div>' +
              '<a>Create Event</a>' +
            '</div>' +
          '</li>' +
        '</div>' +
      '</ul>';

    $bcal_features_menu = $(bcal_features_menu);
    $bcal_features_menu.find("#bcal_menu_create_event_row").show();
    $bcal_features_menu.addClass("bcal_is_a_reply");  // TODO: can we omit this?

    $threadBCalBtn.after($bcal_features_menu);

    // Close menu on outside click:
    $(frameDoc).click(function closeBCalFeaturesMenuOnOutsideClick(e){
      var target = get_target(e);
      if ($(target).parents().andSelf().filter(".gm-boomerang-bcal-button-thread, #bcal_features_menu.bcal-thread-view-features-menu, #bcal_share_free_busy_menu, #bcal_bookable_calendar_menu, .b4g-bcal-features-button-holder, " +
        ".b4g-bcal-calendar-multiselect, .b4c-share-free-busy-video-overlay, .b4gShareFreeBusyVideoModal, .b4c-share-free-busy-custom-range-overlay, .b4g-custom-time-range-dialog, " +
        ".b4g-ui-datepicker-calendar, .b4g-ui-corner-all").length === 0)
      {
        if ($(".b4g-timezone-dialog").length > 0) {
          // Timezone dialog is open
          return;
        }
        if ($(".b4c-share-free-busy-custom-range-overlay").length > 0 && $(e.target).hasClass('b4g-bcal-allowed')) {
          // Custom share free/busy time range dialog is opened
          // Edge case: user tried to click and drag, clicking within the dialog and releasing the mouse outside of it.  We don't want to close the free/busy dialog.
          return;
        }
        close_bcal_features_menu();
        $(frameDoc).unbind('click', closeBCalFeaturesMenuOnOutsideClick);
      }
    });

    // Hook up click handlers for menu options
    $('#bcal_menu_suggest_times_row', frameDoc).click(function() {
      close_bcal_features_menu();

      // Handle the same way as when "suggest other times" is clicked in the create event dialog
      var replyButtons =$(".ams.bkH").last();
      if (replyButtons.length > 0) {
        replyButtons[0].click();
      }

      close_bcal_features_menu();
      openingSuggestTimesFromThreadViewMenu = true;

      track_event([ "bcal", "display-suggest-times" ]);
    });
    $('#bcal_menu_group_poll_row', frameDoc).click(function(e) {
      close_bcal_features_menu();
      display_group_poll_interest();
      track_event([ "bcal", "display-dummy-group-poll" ]);
    });
    $('#bcal_menu_bookable_calendar_event_row', frameDoc).click(function(e) {
      // Open a new draft and open the Bookable Schedule menu for it
      var replyButtons =$(".ams.bkH").last();
      if (replyButtons.length > 0) {
        replyButtons[0].click();
      }

      close_bcal_features_menu();
      openingBookableFromThreadViewMenu = true;

      track_event([ "bcal", "display-bookable" ]);
    });
    $('#bcal_menu_share_free_busy_row', frameDoc).click(function(e) {
      // Open a new draft and open the share free/busy menu for it
      var replyButtons =$(".ams.bkH").last();
      if (replyButtons.length > 0) {
        replyButtons[0].click();
      }

      close_bcal_features_menu();
      openingShareFreeBusyFromThreadViewMenu = true;

      track_event([ "bcal", "display-share-free-busy" ]);
    });
    $('#bcal_menu_create_event_row', frameDoc).click(function() {

      close_bcal_features_menu();
      var gmailId = $(".adn.ads[data-message-id]").last().attr("data-message-id").replace("#", "");
      // The button needs the gmailId for as an attribute for display_magic_create_event_dialog
      $(this).attr("b4g-source-gmail-id", gmailId);
      display_magic_create_event_dialog($(this), true);
      track_event([ "bcal", "create-event-from-thread" ]);
    });

    track_event([ "bcal", "meet menu opened" ]);
  }
}

function close_bcal_features_menu() {
  $("#bcal_features_menu, #bcal_share_free_busy_menu, #bcal_bookable_calendar_menu").remove();
  $('.b4g-bcal-features-button').removeClass('J-Z-I-KO');
}

var SEEN_BOOKABLE_CREATE_FLOW = false;
var BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = false;

function display_bookable_calendar(target, range) {
  track_event([ "bcal", "bookable-calendar-menu-open-2" ]);
  var composeContainer = get_compose_container($(target));

  var $calFeaturesBtn = composeContainer.find('.b4g-bcal-features-button');
  var $calFeaturesMenu = composeContainer.find('#bcal_features_menu');
  var $bookableCalendarMenu = composeContainer.find('#bcal_bookable_calendar_menu');
  $calFeaturesMenu.addClass('bcal_share_free_busy_visible');

  if (is_a_reply(composeContainer)) {
    $bookableCalendarMenu.addClass('bcal_is_a_reply');
  }

  var $bookableSelector = $bookableCalendarMenu.find(".bookable_calendar_selector");

  function closeBookablePreviewVideoModalOnEvent(e){
    var eventType = e.type;
    if (eventType === 'click') {
      var target = get_target(e);
      if ($(target).parents().andSelf().filter(".b4gBookableVideoModal, .video_walkthrough").length === 0) {
        removeBookablePreviewVideoModal();
      }
    } else if (eventType === 'keydown' && e.keyCode === 27) {
      removeBookablePreviewVideoModal();
      e.stopPropagation();  // Don't close the Gmail compose widget
    }
  };
  var removeBookablePreviewVideoModal = function() {
    $('.b4c-share-free-busy-video-overlay, .b4gBookableVideoModal').remove();
    // Unbind listeners
    $(document).unbind('click', closeBookablePreviewVideoModalOnEvent);
    $(document).unbind('keydown', closeBookablePreviewVideoModalOnEvent);
  }
  var showBookablePreviewVideoModal = function () {
    // Make sure we don't have any existing modal and event listeners
    removeBookablePreviewVideoModal();

    var $bookableVideoOverlay = $(SHARE_FREE_BUSY_VIDEO_OVERLAY);
    var $bookableVideoOverlayInnerHTML = $(
      "<div class='b4gBookableVideoModal' tabindex='-1'>" +
        '<iframe width="560" height="315" src="https://www.youtube.com/embed/s1dtn0QZDWo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' +
      "</div>"
    );
    $("body").append($bookableVideoOverlay);
    $("body").append($bookableVideoOverlayInnerHTML)

    // Setup close on outside click behavior
    $(frameDoc).click(closeBookablePreviewVideoModalOnEvent);
    $(frameDoc).keydown(closeBookablePreviewVideoModalOnEvent);

    $('.b4gBookableVideoModal').focus().click();  // Hack: Focus on modal so pressing escape won't close the composer
  };

  $bookableCalendarMenu.find(".bcal_create_new_schedule").click(function() {
      $(".bcal_share_free_busy_dialog").html("Managing Schedules...");
      close_bcal_features_menu();
      var newScheduleWindow = open_safari_safe_create_bookable_schedule_flow(composeContainer);
      newScheduleWindow.document.write("Loading Bookable Schedule...");
      var url = "https://b4g.baydin.com/bookablecalendar/createnewbookablecalendar";
      $.ajax({
        type: "POST",
        url: url,
        data: {},
        xhr: xhr_with_credentials,
        success: function(response) {
          close_bcal_features_menu();
          var bookableId = response.url;
          newScheduleWindow.location.href = "https://b4g.baydin.com/bookablecalendar/getbookablecalendarsettings?create=1&bookableCalendarId=" + bookableId;
        }
      });
      track_event([ "bcal", "bookable-calendar-create-new-clicked-2" ]);
  });

  $bookableCalendarMenu.find(".bcal_manage_schedules").click(function() {
    track_event([ "bcal", "bookable-calendar-kebab-clicked-2" ]);
    if(!$(".bcal_bookable_manage_dropdown").is(":visible")) {
      $(".bcal_bookable_manage_dropdown").show();
       $(frameDoc).click(function closeBookableDropdownOnOutsideClick(e){
         var target = get_target(e);
         if ($(target).parents().andSelf().filter(".bcal_manage_schedules, .bcal_bookable_manage_dropdown").length === 0) {
           $(".bcal_bookable_manage_dropdown").hide();
          $(frameDoc).unbind('click', closeBookableDropdownOnOutsideClick);
         }
      });
    } else {
      $(".bcal_bookable_manage_dropdown").hide();
    }
  });
  $bookableCalendarMenu.find(".bcal_manage_dropdown_option.scheduling_page").click(function() {
      var $clipboard = $bookableCalendarMenu.find(".b4g_clipboard");
      var url = $(this).data("hubLink");
      $clipboard.val(url);
      $clipboard.select();
      document.execCommand("copy");
      $(".bcal_bookable_manage_dropdown").hide();
      track_event([ "bcal", "bookable-calendar-copy-scheduling-link-clicked-2" ]);
  });
  $bookableCalendarMenu.find(".bcal_manage_dropdown_option.manage_page").click(function() {
      close_bcal_features_menu();
      var bookableCalendarUrl = BOOMERANG_URL + "bookableschedulesfromgmail?guser=" + encodeURIComponent(get_gmail_user());
      window.open(bookableCalendarUrl, "_blank");
      track_event([ "bcal", "bookable-calendar-manage-schedules-clicked-2" ]);
  });
  $bookableCalendarMenu.find(".bcal_manage_dropdown_option.video_walkthrough").click(function() {
    $(".bcal_bookable_manage_dropdown").hide();
    showBookablePreviewVideoModal();
    track_event([ "bcal", "bookable-calendar-video-walkthrough-clicked-2" ]);
});
  
  var $timezoneButton = $bookableCalendarMenu.find(".bcal_recipient_time_zone_button");
  var $timezoneContainer =  $bookableCalendarMenu.find(".bcal_recipient_time_zone_container");
  $timezoneButton.click(function(){
    track_event([ "bcal", "bookable-calendar-customize-timezone-click-2" ]);
    display_timezone_dialog(function(timezoneId, timezoneName, timezoneAbbr){
      track_event([ "bcal", "bookable-calendar-customize-timezone-chosen-2" ]);
      $timezoneButton.hide();
      $timezoneContainer.find(".bcal_recipient_time_zone").text(timezoneName + " (" + timezoneAbbr + ")" );
      $timezoneContainer.data("timezone", timezoneId);
      $timezoneContainer.show();
    }, $.noop, "Add recipient's time zone");

    var $selectedCalendar = $bookableSelector.find(".selected");
    var timezoneId = $selectedCalendar.data("timezone");
    var timezone = "UTC";
    for (var i = 0; i < CalendarSettings["timezones"].length; i++) {
      if (timezoneId == CalendarSettings["timezones"][i]["id"]) {
        timezone = CalendarSettings["timezones"][i]["displayName"] + " (" + CalendarSettings["timezones"][i]["abbr"] + ")";
        break;
      }
    }

    $(".b4g-ui-dialog-titlebar")
      .css({"height": "40px", "font-weight": "700"})
      .append($("<div style='font-size: 12px; margin-top: 5px; font-weight: 400'>" +
        "Schedule time zone: " + "<span style='font-weight: 500'>" + timezone + "</span>" +
      " </div>"));
  })
  var $timezoneCancel = $bookableCalendarMenu.find(".bcal_recipient_time_zone_remove");
  $timezoneCancel.click(function(e){
    e.stopPropagation();
    track_event([ "bcal", "bookable-calendar-customize-timezone-cancel-2" ]);
    $timezoneButton.show();
    $timezoneContainer.data("timezone", null);
    $timezoneContainer.hide();
  })
  var $rangeButtons = $bookableCalendarMenu.find(".bcal_allow_bookings_radio_btns");
  $rangeButtons.find("input[name='bcal_allow_bookings_date_range']").change(function(){
    var $clickedButton = $(this);
    var value = $clickedButton.val();
    $bookableCalendarMenu.find('.bcal_allow_bookings_radio_btns label').removeClass('active');
    $(this).closest('label').addClass('active');

    if (value == "custom") {
      track_event([ "bcal", "bookable-calendar-customize-range-custom-2" ]);
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-default-text").hide();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").show();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").text("Select custom range");
    } else if (value == "next2weeks") {
      track_event([ "bcal", "bookable-calendar-customize-range-2-weeks-2" ]);
      var start = new Date().toString("MMM d")
      var end = new Date().addWeeks(2).toString("MMM d");
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-default-text").hide();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").show();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").text(start + " - " + end);
    } else if (value == "nextmonth") {
      track_event([ "bcal", "bookable-calendar-customize-range-next-month-2" ]);
      var start = new Date().toString("MMM d")
      var end = new Date().addMonths(1).toString("MMM d");
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-default-text").hide();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").show();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").text(start + " - " + end);
    } else {
      track_event([ "bcal", "bookable-calendar-customize-range-default-2" ]);
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-default-text").show();
      $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").hide();
    }

    if (value != "custom") {
      // Remember last selected non-custom range so we can revert to it if the user clicks "custom" and then clicks "cancel" in the custom range dialog
      var dateRangeSelection = $bookableCalendarMenu.find("input[name='bcal_allow_bookings_date_range']:checked").val();
      $bookableCalendarMenu.attr('data-last-selected-non-custom-range', dateRangeSelection);
    }
  });
  // Remember last selected non-custom range so we can revert to it if the user clicks "custom" and then clicks "cancel" in the custom range dialog
  var dateRangeSelection = $bookableCalendarMenu.find("input[name='bcal_allow_bookings_date_range']:checked").val();
  $bookableCalendarMenu.attr('data-last-selected-non-custom-range', dateRangeSelection);

  $rangeButtons.find("input#bcal_allow_custom_range").click(function(){
    showBookableCustomRangeOverlay($bookableCalendarMenu);
  })

  var $customRangeText = $bookableCalendarMenu.find(".bcal-allow-bookings-display-default-text, .bcal-allow-bookings-display-custom-text");
  $customRangeText.click(function() {
    $bookableCalendarMenu.find("input#bcal_allow_custom_range").click();
  })

  $('.bcal_share_free_busy_cancel_btn', $bookableCalendarMenu).click(function(e) {
    track_event([ "bcal", "bookable-calendar-custom-cancel-2" ]);
    $bookableCalendarMenu.find(".bcal_bookable_list_screen").show();
    $bookableCalendarMenu.find(".bcal_customize_expanded").hide();

    // reset customize menu
    $bookableCalendarMenu.find('input[name="bcal_allow_bookings_date_range"][value="default"]').click();
    $bookableCalendarMenu.find(".bcal_recipient_time_zone_remove").click();
    $bookableCalendarMenu.removeClass("customized_expanded");
    $bookableCalendarMenu.find("#bcal_custom_title_checkbox").removeAttr("checked").change();
  });

  $(".bcal_share_free_busy_insert_link_btn", $bookableCalendarMenu).click(function(e) {
    track_event([ "bcal", "bookable-calendar-submit-2" ]);
    track_event([ "bcal", "bookable-calendar-submit-custom-insertion-link-only-2" ]);
    var isMagic = false;
    insert_bookable_calendar_content_into_email($bookableCalendarMenu, range, isMagic, composeContainer);
  });

  $('.bcal_share_free_busy_insert_btn', $bookableCalendarMenu).click(function(e) {
    track_event([ "bcal", "bookable-calendar-submit-2" ]);
    track_event([ "bcal", "bookable-calendar-submit-custom-insertion-mlc-2" ]);
    var isMagic = true;
    insert_bookable_calendar_content_into_email($bookableCalendarMenu, range, isMagic, composeContainer);
  });

  var GET_BOOKABLE_CALENDAR_SETTINGS_URL = "https://b4g.baydin.com/bookablecalendar/getallbookablecalendarsettingsfromgmail";
  function get_bookable_calendar_information(callback) {
    $.ajax({
      type: "get",
      url: GET_BOOKABLE_CALENDAR_SETTINGS_URL,
      xhr: xhr_with_credentials,
      success: function(data) { 
        callback(data);
      },
      dataType: "json",
    });
  } 
  $bookableSelector.empty();
  get_bookable_calendar_information(function(data){
    var calendarAlphabeticalSortFunction = function(el1, el2) {
      if (el1.title.toLowerCase() < el2.title.toLowerCase()) {
        return -1;
      } else {
        return 1;
      }
    }
    var hubEnabled = data["hubEnabled"];
    var calendars = data["calendars"].filter(function(calendar){
      return calendar.active;
    }).sort(calendarAlphabeticalSortFunction);
    if (calendars.length == 0 || ensureBookableWizardOpen) {
      if (SEEN_BOOKABLE_CREATE_FLOW && BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK) {
        SEEN_BOOKABLE_CREATE_FLOW = false;
        BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = false;
        close_bcal_features_menu();
        return;
      }

      if (browser_name === "Safari" || browser_name === "Old Safari") {
        $bookableCalendarMenu.addClass('bcal_share_free_busy_visible');
        $bookableCalendarMenu.addClass('bcal_bookable_safari_case');

        $(".bcal_share_free_busy_dialog .bcal_bookable_list_screen").append(
          '<button class="bcal_bookable_schedule_safari_create_btn">' +
            '<div class="bcal-bookable-schedule-safari-create-div"><div class="bcal-div-txt-wrapper">Create a new schedule</div></div>' +
          '</button>'
        );

        $(".bcal_share_free_busy_dialog .bcal_bookable_schedule_safari_create_btn").click(function(e) {
          var newScheduleWindow = open_safari_safe_create_bookable_schedule_flow(composeContainer);
          newScheduleWindow.document.write("Loading Bookable Schedule...");
          var url = "https://b4g.baydin.com/bookablecalendar/createnewbookablecalendar";
          $.ajax({
            type: "POST",
            url: url,
            data: {},
            xhr: xhr_with_credentials,
            success: function(response) {
              var bookableId = response.url;
              newScheduleWindow.location.href = "https://b4g.baydin.com/bookablecalendar/getbookablecalendarsettings?create=1&bookableCalendarId=" + bookableId;
              SEEN_BOOKABLE_CREATE_FLOW = true;
              close_bcal_features_menu();
            }
          });
        });
      } else {
        $(".bcal_share_free_busy_dialog").html("Creating New Schedule...");
        var url = "https://b4g.baydin.com/bookablecalendar/createnewbookablecalendar";
        $.ajax({
          type: "POST",
          url: url,
          data: {},
          xhr: xhr_with_credentials,
          success: function(response) {
            var bookableId = response.url;
            var newBookableWindow = open_create_bookable_schedule_flow(bookableId, composeContainer);
            SEEN_BOOKABLE_CREATE_FLOW = true;
            close_bcal_features_menu();
          }
        });
      }
      ensureBookableWizardOpen = false;
      return;
    }

    // We have existing calendars. Set these variables to false in case they were true before:
    SEEN_BOOKABLE_CREATE_FLOW = false;
    BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = false;
    highlightingBookableFromForkie = false;


    function determine_duration_string(durationAttrVal, isActive) {
      var durationValueString = '';
      if (durationAttrVal === 15) {
        durationValueString = '15 minutes';
      } else if (durationAttrVal === 30) {
        durationValueString = '30 minutes';
      } else if (durationAttrVal === 45) {
        durationValueString = '45 minutes';
      } else if (durationAttrVal === 60) {
        durationValueString = '1 hour';
      } else if (durationAttrVal === 90) {
        durationValueString = '90 minutes';
      } else if (durationAttrVal === 120) {
        durationValueString = '2 hours';
      } else {
        durationValueString = durationAttrVal.toString() + ' minutes';
      }
      if (!isActive) {
        durationValueString += " (Paused)"
      }
      return durationValueString;
    }

    var bookableCalendarIds = new Set();
    calendars.forEach(function(calendar) {
      var $option = $('<div class="bookable-list-entry">' +
          '<div class="bookable-list-entry-main">' +
            '<div>' +
              '<div class="bcal-title""></div>' +
              '<div class="bcal-duration"></div>' +
            '</div>' +
            '<div style="display: flex; flex-direction: row;">' +
              '<div class="bcal_insert_cal_button bcal_share_free_busy_insert_btn">' +
                '<div class="bcal-div-txt-wrapper">Insert</div>' +
              '</div>' +
              '<div class="bcal_bookable_list_arrow_up"></div>' +
              '<div class="bcal_bookable_list_arrow_down"><img style="" src="https://b4g.baydin.com/site_media/calendar/bookable/dropdown.svg"></div>' +
            '</div>' +
          '</div>' +
          '<div class="bookable-list-entry-expanded">' +
            '<div class="bcal_copy_cal_button bookable_list_button bcal-tooltip-copied-container">' +
              'Copy link' + 
              '<div class="bcal-tooltip-copied">' +
                'Link copied' +
              '</div>' +
            '</div>' +

            '<div class="bcal_personalize_cal_button bookable_list_button">' +
              "Personalize Invitation" +
            '</div>' +

            '<div class="bcal_edit_cal_button bookable_list_button">' +
              "Edit schedule" +
            '</div>' +
          '</div>' +
        "</div>")
      $option.find(".bcal-title").text(calendar.title.trim());
      $option.find(".bcal-duration").text(determine_duration_string(calendar.duration, calendar.active));
      $option.data("bookableId", calendar.bookableId);
      $option.attr("data-is-active", calendar.active);
      if (!calendar.active) {
        $option.addClass("paused");
      }
      $option.attr("data-duration", calendar.duration);
      $option.attr("data-startend", calendar.prettyStartEnd);
      $option.data("url", calendar.url);
      $option.data("timezone", calendar.timezone);
      $option.data("title", calendar.title.trim())
      $option.find(".bcal_insert_cal_button").click(function(e){
          e.stopPropagation();
          track_event([ "bcal", "bookable-calendar-insert-from-list-2" ]);
          //select this calendar and insert
          $bookableCalendarMenu.find(".bookable-list-entry").removeClass("selected");
          $(this).closest(".bookable-list-entry").addClass("selected");
          var isMagic = true;
          insert_bookable_calendar_content_into_email($bookableCalendarMenu, range, isMagic, composeContainer);
      });
      $option.find(".bcal_personalize_cal_button").click(function(e){
          e.stopPropagation();
          track_event([ "bcal", "bookable-calendar-customize-2" ]);
          $bookableCalendarMenu.find(".bcal_bookable_list_screen").hide();
          $bookableCalendarMenu.find(".bcal_customize_expanded").show();
          $bookableCalendarMenu.addClass("customized_expanded");
          $bookableCalendarMenu.find("#bcal_custom_title_checkbox").attr("checked", "checked");

          var $selectedCalendar = $(this).closest(".bookable-list-entry");
          var startEnd = $selectedCalendar.data("startend");
          var title = $selectedCalendar.data("title");
          var duration = $selectedCalendar.attr("data-duration");
          var $bookableMenu = composeContainer.find('#bcal_bookable_calendar_menu');
          $bookableMenu.find(".bcal-allow-bookings-display-default-text").text(startEnd);
          $bookableMenu.find("#bcal-custom-title-input").val(title);
          $bookableMenu.find("#bcal-custom-title-input").focus().select();
          $bookableMenu.find(".bcal_existing_duration").text(determine_duration_string(calendar.duration, calendar.active));
          $bookableMenu.find(".bcal_existing_title").text(title);
      });
      $option.find(".bcal_copy_cal_button").click(function(e){
        e.stopPropagation();
        var $self = $(this);
        setTimeout(function() {
          $self.find(".bcal-tooltip-copied").show();
        }, 50);
        setTimeout(function() {
          $self.find(".bcal-tooltip-copied").hide();
        }, 2000);

        var $clipboard = $bookableCalendarMenu.find(".b4g_clipboard");
        var url = $self.closest(".bookable-list-entry").data("url");
        $clipboard.val(url);
        $clipboard.select();
        document.execCommand("copy");
        track_event([ "bcal", "bookable-calendar-copy-link-clicked-2" ]);
      });
      $option.find(".bcal_edit_cal_button").click(function(e){
        e.stopPropagation();
        var $self = $(this);
        var bookableId = $self.closest(".bookable-list-entry").data("bookableId");
        open_edit_bookable_schedule_flow(bookableId, composeContainer);
        close_bcal_features_menu();
        e.stopPropagation();
        track_event([ "bcal", "bookable-calendar-edit-schedule-clicked-2" ]);
      });
      $option.click(function(e){
        $bookableCalendarMenu.find(".bookable-list-entry").removeClass("selected");
        $(this).addClass("selected");
        track_event([ "bcal", "bookable-calendar-edit-schedule-expanded-2" ]);
      });
      $bookableSelector.append($option);
      bookableCalendarIds.add(calendar.bookableId);
    });

    // If we have a last used bookable schedule id in local storage, pre-select that option:
    var lastUsedBookableId = read_from_html5_storage("b4g_last_used_bookable_schedule-" + get_gmail_user());
    if (lastUsedBookableId && bookableCalendarIds.has(lastUsedBookableId)) {
      $bookableSelector.find("div").each(function(){
        var $this = $(this);
        if ($this.data("bookableId") == lastUsedBookableId) {
          $this.addClass("selected");
        }
      });
    }
    // Make sure one is always selected
    if ($bookableSelector.find(".selected").length == 0) {
      $bookableSelector.find("div").first().addClass("selected");
    }
    $bookableCalendarMenu.addClass('bcal_share_free_busy_visible');

    if(hubEnabled) {
      $bookableCalendarMenu.find(".bcal_manage_dropdown_option.scheduling_page").data("hubLink", data["hubLink"]).show();
    }

    $bookableCalendarMenu.css('bottom', '40px !important');
    $bookableCalendarMenu.find(".bcal_features_menu").css("bottom", "0px");

    if (!is_a_reply(composeContainer)) {
      $bookableCalendarMenu.position({of: $calFeaturesBtn, my: "right", at: "right", collision: "none"});
      $bookableCalendarMenu.css('right', 'unset');
    }

    // Make sure selected is visible in the scroll bar
    var selectedItem = $(".bookable-list-entry.selected");
    selectedItem.get(0).scrollIntoView(false)
  });
  // Track open of Bookable Schedule if necessary for bookable annoncement tooltip A/B test
  track_bookable_click_after_tooltip_view_if_necessary();
}
function open_create_bookable_schedule_flow(bookableId, composeContainer){
  var windowUrl = "https://b4g.baydin.com/bookablecalendar/getbookablecalendarsettings?create=1&bookableCalendarId=" + bookableId;
  var dialogWidth = 1024;
  var dialogHeight = 876;

  var top = 0;
  var left = 0;
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }
  var createBookableWindow = window.open(windowUrl, "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);
  var checkForNavigateAway = setInterval(function() {
      if (!createBookableWindow || createBookableWindow.closed) {
        composeContainer.one("bookableCalendarDisplayed", function() {
          BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = true;
          $('#bcal_menu_bookable_calendar_event_row').click();
        });
        composeContainer.find(".b4g-bcal-features-button").click();
        clearInterval(checkForNavigateAway);
      }
  }, 200);

  return createBookableWindow;
}
function open_edit_bookable_schedule_flow(bookableId, composeContainer){
  var windowUrl = "https://b4g.baydin.com/bookablecalendar/getbookablecalendarsettings?bookableCalendarId=" + bookableId;
  var dialogWidth = 1024;
  var dialogHeight = 876;

  var top = 0;
  var left = 0;
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }
  var editBookableWindow = window.open(windowUrl, "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);
  var checkForNavigateAway = setInterval(function() {
      if (!editBookableWindow || editBookableWindow.closed) {
        composeContainer.find(".b4g-bcal-features-button").click();
        setTimeout(function() {
          $('#bcal_menu_bookable_calendar_event_row').click();
        }, 200);
        clearInterval(checkForNavigateAway);
      }
  }, 200)
}
function open_safari_safe_create_bookable_schedule_flow(composeContainer, openedFromAnnounceModal){
  // Opens filler page with "Loading Bookable Schedule..." text.
  // Once new schedule has been created, this window will be redirect to the new schedule's edit page.
  var dialogWidth = 1024;
  var dialogHeight = 876;

  var top = 0;
  var left = 0;
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }
  var createBookableWindow = window.open("", "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);
  if (openedFromAnnounceModal) {
    var checkForNavigateAway = setInterval(function() {
      if (!createBookableWindow || createBookableWindow.closed) {
        composeContainer.one("bookableCalendarDisplayed", function() {
          BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = true;
          $('#bcal_menu_bookable_calendar_event_row').click();
        });
        composeContainer.find(".b4g-bcal-features-button").click();
        clearInterval(checkForNavigateAway);
      }
    }, 200)
  } else {
    var checkForNavigateAway = setInterval(function() {
        if (!createBookableWindow || createBookableWindow.closed) {
          composeContainer.one("bookableCalendarDisplayed", function() {
            BOOKABLE_CALENDAR_OPENED_BY_AUTOMATED_CLICK = true;
            $('#bcal_menu_bookable_calendar_event_row').click();
          });
          composeContainer.find(".b4g-bcal-features-button").click();
          clearInterval(checkForNavigateAway);
        }
    }, 200)
  }
  return createBookableWindow;
}

function insert_bookable_calendar_content_into_email($bookableCalendarMenu, range, isMagic, composeContainer) {
  // Input is the clicked calendar features menu as a jQuery object

  // First, disable insert button to avoid duplicate requests
  $bookableCalendarMenu.find("button.bcal_share_free_busy_insert_btn").attr("disabled", "disabled");

  var $bookableSelector = $bookableCalendarMenu.find(".bookable_calendar_selector");

  var $selectedCalendar = $bookableSelector.find(".selected");
  var bookableId = $selectedCalendar.data("bookableId");
  var bookableUrl = $selectedCalendar.data("url");

  var draftId = composeContainer.find("*[name='draft']").first().val();
  if (draftId) {
    draftId = draftId.replace("#", "");
  }
  var data = {
    "bookableCalendarId": bookableId,
    "draftId": draftId,
    "isCustomInsertion": true,
  }
  var $timezoneContainer =  $bookableCalendarMenu.find(".bcal_recipient_time_zone_container");
  var secondaryTimezone = $timezoneContainer.data("timezone");
  if (secondaryTimezone) {
    data["secondaryTimezone"] = secondaryTimezone;
  }
  if ($bookableCalendarMenu.find("#bcal_custom_title_checkbox").is(":checked")) {
    data["title"] = $bookableCalendarMenu.find("#bcal-custom-title-input").val();
  }
  var customRange = $("input[name='bcal_allow_bookings_date_range']:checked").val();
  if (customRange == "default") {
  } else if (customRange == "next2weeks") {
    var start = new Date().clearTime();
    var end = new Date().addWeeks(2).clearTime();
    data["customStart"] = Math.floor(start.getTime()/1000);
    data["customEnd"] = Math.floor(end.getTime()/1000);
  } else if (customRange == "nextmonth") {
    var start = new Date().clearTime();
    var end = new Date().addMonths(1).clearTime();
    data["customStart"] = Math.floor(start.getTime()/1000);
    data["customEnd"] = Math.floor(end.getTime()/1000);
  } else {

    var start = Date.parse($bookableCalendarMenu.data("customstart"));
    var end = Date.parse($bookableCalendarMenu.data("customend"));
    data["customStart"] = Math.floor(start.getTime()/1000);
    data["customEnd"] = Math.floor(end.getTime()/1000);
  }

  var browserTimezone = jstz.determine().name();
  if (browserTimezone == 'Etc/Unknown') {
    browserTimezone = "UTC";
  }
  data["browserTimezone"] = browserTimezone;
  $timezoneContainer.data("timezone", "");

  if (isMagic) {
    call_function_after_logged_in(function(){
      $.ajax({
        type: "get",
        url: "https://b4g.baydin.com/bookablecalendar/getbookablecalendarimagefromgmail",
        data: data,
        xhr: xhr_with_credentials,
        success: function(response) {
          var $bookableHTML = $(response.html);
          var $insertedHtml = $('<div>');
          $insertedHtml.append($bookableHTML);
          var $space = $('<div><br></div>');
          $insertedHtml.append($space);
          var newNode = document.createRange().createContextualFragment($insertedHtml[0].outerHTML);
          range.insertNode(newNode);
          close_bcal_features_menu();
          var imgSrc = $insertedHtml.find('img').attr('src');
          var $image = $("img[src='" + imgSrc + "']");
          $image.each(simulate_click)
          var height = $image.height();
          var width = $image.width();
          $("#original-resize-image").each(simulate_click)
          $("#original-resize-image").click();
          var $resizedimage = $("img[src='" + imgSrc + "']");
          $resizedimage.attr("height", height)
          $resizedimage.attr("width", width)

          var $composeContainer = $(composeContainer);
          if (!$composeContainer.hasClass("b4g_click_calendar_book")) {
            $composeContainer.addClass("b4g_click_calendar_book");
            $composeContainer.click(function(e){
              var $clickedTarget = $(e.target);
              if ($clickedTarget.is("area")) {
                var href = $clickedTarget.attr("href");
                if (href && href.startsWith("https://b4g.baydin.com/bookablecalendar") || href.startsWith("https://meet.boomerangapp.com") || href.startsWith("https://www.boomerangapp.com/scheduling/") || href.startsWith("https://www.boomeranggmail.com/scheduling/") || href.startsWith("https://www.boomeranggmail.com/meeting-scheduling/")) {
                  e.preventDefault();
                  window.open(href, "_blank");
                  // Get out of Gmail's img resize dialog
                  $composeContainer.each(simulate_click);
                }
              }
              if ($clickedTarget.is("img")) {
                var src = $clickedTarget.attr("src");
                if (src && src.startsWith("https://b4g.baydin.com/bookablecalendar")) {
                  e.preventDefault();
                  var href = src.replace(/b4g\.baydin\.com\/bookablecalendar\/i\/\d+/, "meet.boomerangapp.com")
                  window.open(href, "_blank");
                  // Get out of Gmail's img resize dialog
                  setTimeout(function(){
                    $composeContainer.each(simulate_click);
                  }, 100);
                }
              }
            })
          }

          var $newSelection = $composeContainer.find("table[name='b4g-bcal-table']").closest('div');
          var selection = window.getSelection();
          var newRange = document.createRange();
          newRange.setStartBefore($newSelection.first()[0]);
          newRange.setEndAfter($newSelection.last()[0]);
          selection.removeAllRanges();
          selection.addRange(newRange);
          selection.collapseToEnd();
          track_event([ "bcal", "bookable-calendar-mlc-inserted" ]);
          show_dialog_for_deleting_quoted_text_if_necessary($composeContainer);
        },
        error: function(response) {
          $bookableCalendarMenu.find("button.bcal_share_free_busy_insert_btn").removeAttr("disabled");
        },
        complete: function() {
        },
        dataType: "json"
      });
    });
  } else {
    data["linkOnly"] = "true";
    call_function_after_logged_in(function(){
      $.ajax({
        type: "get",
        url: "https://b4g.baydin.com/bookablecalendar/getbookablecalendarimagefromgmail",
        data: data,
        xhr: xhr_with_credentials,
        success: function(response) {
          var $bookableHTML = $(response.html);
          var $insertedHtml = $("<div></div>");
          $insertedHtml.append($bookableHTML);
          var newNode = document.createRange().createContextualFragment($insertedHtml[0].outerHTML);
          range.insertNode(newNode);
          close_bcal_features_menu();
          track_event([ "bcal", "bookable-calendar-link-inserted" ]);
        },
        error: function(response) {
          $bookableCalendarMenu.find("button.bcal_share_free_busy_insert_btn").removeAttr("disabled");
        },
        complete: function() {
        },
        dataType: "json"
      });
    });
  }

  // Store the inserted bookable schedule's id in local storage so it will be pre-selected in the dropdown menu next time
  write_to_html5_storage("b4g_last_used_bookable_schedule-" + get_gmail_user(), bookableId);
}


// Returns suggest times dialog window so we can check if the dialog was blocked or not
function display_suggest_times_screen(target, range) {
  var suggestTimesPageURL = "https://b4g.baydin.com/calendar/suggesttimespage";

  var dialogWidth = 1260;
  var dialogHeight = 825;

  var top = 0;
  var left = 0;
  // Dimension setting code taken from unauthenticated_flow function for auth dialog (but with increas):
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }


  // Setup URL params:
  var suggestTimesWindowOpenTimestamp = Date.now();  // Used to make sure we only act on messages from correct dialog
  // TODO: check with product, do we only want to autofill to field? doing just that for now
  var composeContainer = get_compose_container($(target));
  var to = extract_email_addresses_from_pillboxes(composeContainer)["to"];
  if (!to) {
    to = extract_email_addresses_from_field("to", composeContainer);
  }

  // TODO: check with product, how do we want to autofill subject for replies in threads? reference: see respondable's get_transformed_respondable_subject
    // We want to keep to field for now, but we should address multi-recipient case (breaks now)
  // Note: a duplicate get_subject function is also inside EmailMeter
  var get_subject = function($composeContainer) {
    if (is_a_reply($composeContainer) && !is_pop_out_window($composeContainer)) {
      return $(".hP").filter(":visible").text();
    }
    else {
      return $composeContainer.find("*[name='subjectbox']").val();
    }
  }
  // Note: a duplicate is_a_reply function is also inside display_suggest_times_screen
  var is_a_reply = function($composeContainer) {
    if (!is_pop_out_window()) {
      // check whether the subject line is hidden
      var $subjectField = $composeContainer.find(".az6");
      return !$subjectField.length || $subjectField.css("display") === "none";
    }
    else {
      // look for existing subject in pop out window
      return $(".hP").length != 0;
    }
  }
  var subject = get_subject($(composeContainer));

  var suggestTimesWindow = window.open(suggestTimesPageURL +
      '?openTimestamp=' + suggestTimesWindowOpenTimestamp +
      '&recipients=' + encodeURIComponent(to) +
      '&subject=' + encodeURIComponent(subject), "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);

  // logic to close the Suggest Times pop-up if this draft is moved away or discarded
  $(composeContainer).addClass("b4g-" + suggestTimesWindowOpenTimestamp);
  var myCheckDraftInterval = setInterval(function(){
    var draftExists = $(".b4g-" + suggestTimesWindowOpenTimestamp).length > 0;
    if (!draftExists) {
      clearInterval(myCheckDraftInterval);
      suggestTimesWindow.close()
    }
  }, 1000);


  var handleSuggestTimesWindowEvent = function(event) {
    if (event.origin != 'https://b4g.baydin.com') {
      // Reject messages from unexpected domains
      return;
    }

    if (event.data.suggestTimesWindowOpenTimestamp !== suggestTimesWindowOpenTimestamp) {
      // Reject messages from other suggest times dialogs that may be open
      return
    }

    var data = event.data;
    if (data.status === "success") {
      // Suggest times creation was successful
      suggestTimesWindow.close();
      insert_suggest_times_content_into_email(data, range)

      var $composeContainer = $(composeContainer);
      if (!$composeContainer.hasClass("b4g_click_calendar_suggest")) {
        $composeContainer.addClass("b4g_click_calendar_suggest");
        $composeContainer.click(function(e){
          var $clickedTarget = $(e.target);
          if ($clickedTarget.is("area")) {
            var href = $clickedTarget.attr("href");
            if (href && href.startsWith("https://b4g.baydin.com/calendar") || href.startsWith("https://www.boomerangapp.com/scheduling/") || href.startsWith("https://www.boomeranggmail.com/scheduling/")|| href.startsWith("https://www.boomeranggmail.com/meeting-scheduling/")) {
              e.preventDefault();
              window.open(href, "_blank");
              // Get out of Gmail's img resize dialog
              $composeContainer.each(simulate_click);
            }
          }
          if ($clickedTarget.is("img")) {
            var src = $clickedTarget.attr("src");
            if (src && src.startsWith("https://b4g.baydin.com/calendar/confirmtimeimage")) {
              e.preventDefault();
              src = src.replace("confirmtimeimage", "confirmtimeclick")
              window.open(src, "_blank");
              // Get out of Gmail's img resize dialog
              setTimeout(function(){
                $composeContainer.each(simulate_click);
              }, 100);
            }
          }
        })
      }

      var $to = $(".anm[name='to'] .agP.aFw, .anm[name='to'] .agP.aFx");
      if ($to.length == 0) { // old path
        $to = $composeContainer.find("*[name='to']");
        if ($to.val().trim() == "") {
          $to.val(data["recipient"]);
        }
      } else {
        var existingTo = extract_email_addresses_from_pillboxes($composeContainer)["to"];
        if ($to.val().trim() == "" && existingTo.indexOf(data["recipient"]) == -1) {
          $to.val(data["recipient"]);
        }
      }
      var $subjectbox = $composeContainer.find("*[name='subjectbox']");
      if ($subjectbox.val().trim() == "") {
        $subjectbox.val(data["title"]);
      }
      window.removeEventListener("message", handleSuggestTimesWindowEvent);
    } else {
      // TODO: what do we do here? alerting for now
      alert('There was an issue with Suggest Times')
    }
  }

  window.addEventListener("message", handleSuggestTimesWindowEvent);

  return suggestTimesWindow;
}

function insert_suggest_times_content_into_email(responseData, range) {
  // Insert the HTML into the composer
  var confirmEventUrl = responseData.confirmEventUrl;
  var confirmEventImage = responseData.confirmEventImage;
  var mapHtml = responseData.mapHtml;
  var tableHtml = responseData.tableHtml;
  var explanationHtml = responseData.explanationHtml;

  var insertedHtml = $('<div>');

  insertedHtml.append(explanationHtml);

  var map = $(mapHtml);
  insertedHtml.append(map);

  var table = $(tableHtml);
  insertedHtml.append(table);

  var $space = $('<div><br></div>');
  insertedHtml.append($space);

  var newNode = document.createRange().createContextualFragment(insertedHtml[0].outerHTML);
  range.insertNode(newNode);

  close_bcal_features_menu();
  var $image = $("img[src='" + confirmEventImage + "']");
  $image.each(simulate_click)
  var height = $image.height();
  var width = $image.width();
  $("#original-resize-image").each(simulate_click)
  $("#original-resize-image").click();
  var $resizedimage = $("img[src='" + confirmEventImage + "']");
  $resizedimage.attr("height", height)
  $resizedimage.attr("width", width)

  var $composeContainer = get_compose_container(range.commonAncestorContainer);
  var $newSelection = $composeContainer.find("table[name='b4g-bcal-table'], table[name='b4g-suggest-times-table']").closest('div');
  var selection = window.getSelection();
  var newRange = document.createRange();
  newRange.setStartBefore($newSelection.first()[0]);
  newRange.setEndAfter($newSelection.last()[0]);
  selection.removeAllRanges();
  selection.addRange(newRange);
  selection.collapseToEnd();

  $composeTextBody = get_compose_text_body($composeContainer)
  setTimeout(function() {
    $composeTextBody.focus()
  });
  show_dialog_for_deleting_quoted_text_if_necessary($composeContainer);
}


function display_share_free_busy_screen(target, range) {
  track_event([ "bcal", "share-free-busy-dialog" ]);
  var composeContainer = get_compose_container($(target));
  var timezones = CalendarSettings["timezones"];

  var $calFeaturesBtn = composeContainer.find('.b4g-bcal-features-button');
  var $calFeaturesMenu = composeContainer.find('#bcal_features_menu');
  var $shareFreeBusyMenu = composeContainer.find('#bcal_share_free_busy_menu');
  // TODO: placing the menu this way may not reliable in all sizes of compose windows
    // if setting up the mutation observers to watch menu alignments doesn't fix, we need to insert a new menu like we did for the cal features one
  $calFeaturesMenu.addClass('bcal_share_free_busy_visible');

  if (is_a_reply(composeContainer)) {
    $shareFreeBusyMenu.addClass('bcal_is_a_reply');
  }

  $shareFreeBusyMenu.addClass('bcal_share_free_busy_visible');

  var calendars = CalendarSettings["settings"]["calendars"];
  var $syncedCalendarSelect = $shareFreeBusyMenu.find(".b4g-syncedCalendarRegion");
  $syncedCalendarSelect.empty();
  for (var i = 0; i < calendars.length; i++) {
    var calendar = calendars[i];
    var $option = $("<option></option>");
    $option.text(calendar.title);
    $option.attr("name", calendar.calendarId);
    $option.attr("value", calendar.calendarId);
    $option.attr("title", calendar.calendarId);
    $option.attr("data-cal-color", calendar.color);
    $option.attr("data-cal-is-default", calendar.isDefault);
    if (calendar.isSynced) {
      $option.attr('selected', 'selected');
    }
    $syncedCalendarSelect.append($option);
  }

  function update_multiselect_calendar_checkbox_states() {
    // Update checked/unchecked state for multiselect dropdown
    $('.b4g-ui-multiselect-checkboxes label').each(function(idx, el) {
      var $el = $(el);
      if ($el.find('input[type="checkbox"]').is(":checked")) {
        $el.addClass('checked');
      } else {
        $el.removeClass('checked');
      }
    });
  }

  // Initialize multiselect widget
  var $syncedCalendarRegion = $(".b4g-syncedCalendarRegion", composeContainer).first();
  var calendarOrderCompareFunction = function($el1, $el2) {
    var firstCalText = $el1.text().toLowerCase();
    var secondCalText = $el2.text().toLowerCase();

    if (firstCalText < secondCalText) {
      return -1;
    } else {
      return 1;
    }
  }
  var refreshMultiselectWidget = function() {
    // Re-order calendar options based on calendar default/checked statuses
    // Divide calendars into 3 sections: default, then checked, then unchecked.  Within each section, keep original calendar order
    var $calendarOptions = $(".b4g-syncedCalendarRegion option", composeContainer);
    var defaultCalendars = [];
    var enabledCalendars = [];
    var disabledCalendars = [];
    $calendarOptions.each(function(idx, el) {
      var $currentEl = $(el);
      var currentIsDefault = $currentEl.attr('data-cal-is-default') === "true";
      var currentIsEnabled = $currentEl.is(':selected');
      if (currentIsDefault) {
        defaultCalendars.push($currentEl);
      } else if (currentIsEnabled) {
        enabledCalendars.push($currentEl);
      } else {
        disabledCalendars.push($currentEl);
      }
    });
    defaultCalendars.sort(calendarOrderCompareFunction);
    enabledCalendars.sort(calendarOrderCompareFunction);
    disabledCalendars.sort(calendarOrderCompareFunction);

    reorderedCalendars = [...defaultCalendars, ...enabledCalendars, ...disabledCalendars];

    // Remove existing elements and add back elements in new order
    $('.b4g-syncedCalendarRegion option', composeContainer).remove();
    reorderedCalendars.forEach(function($selectOption) {
      $('.b4g-syncedCalendarRegion').append($selectOption);
    });

    $(".b4g-syncedCalendarRegion", composeContainer).multiselect('refresh');
    // Add our "Include availability from:" text
    $('ul.b4g-ui-multiselect-checkboxes').each(function(idx, el) {
      var $currentDropdownEl = $(el);
      if ($currentDropdownEl.find('.b4g-include-availability-from-txt').length === 0) {
        $currentDropdownEl.prepend('<li class="b4g-include-availability-from-txt">Include availability from:</li>');
      }
    });
    // Setup colors for each calendar in the dropdown, and add bottom border to last default or checked item, whichever comes last
    var $calendarSelectOptionEls = $syncedCalendarRegion.find('option');
    var $liElToGetBottomBorder;
    $('ul.b4g-ui-multiselect-checkboxes label').each(function(idx, el) {
      var $circleEl = $('<div class="b4g-calendar-dot"></div>');
      var calendarColor = $($calendarSelectOptionEls[idx]).attr('data-cal-color');
      $circleEl.attr('style', 'background:'+calendarColor+'; border-color:'+calendarColor+';');
      var $currentLabel = $(el);
      $circleEl.appendTo($currentLabel);

      var $el = $(el);
      if (idx === 0 || $el.find('input[type="checkbox"]').is(":checked")) {
        $liElToGetBottomBorder = $el.closest('li');
      }
    });
    if ($liElToGetBottomBorder) {
      $liElToGetBottomBorder.css('border-bottom', '1px #DBDCE0 solid');
    }
    // Initialize checkbox states
    update_multiselect_calendar_checkbox_states();
  }
  $syncedCalendarRegion.multiselect({
    'noneSelectedText': 'Please select a calendar',
    'selectedList': 0,
    'selectedText': function(numChecked, numTotal, checkedItems) {
      if(numChecked === 1) {
        return 'Include availability from: ' + $(checkedItems[0]).next().text();
      } else {
        return 'Include availability from: ' + numChecked + ' calendars';
      }
    },
    'header': false,
    'position': {my: 'left bottom', at: 'left top'},
    'menuHeight': 200,
    'menuWidth': 221,
    'classes': 'b4g-bcal-calendar-multiselect',
    beforeopen: function() {
      closeAllCustomSelect();
    },
    close: refreshMultiselectWidget,
  });
  refreshMultiselectWidget();
  $syncedCalendarRegion.bind("multiselectclick", function(event, ui) {
    // Selected status of options doesn't update instantly - we need a delay in order for the update_multiselect_calendar_checkbox_states call to work properly.
    track_event([ "bcal", "choose-calendar-to-show-share-free-busy" ]);
    setTimeout(update_multiselect_calendar_checkbox_states, 100);
  });


  $(".bcal_share_free_busy_time_zone", $shareFreeBusyMenu).change(function(){
    var more_needed = $(this).val() == "More";
    if (more_needed) {
      var yes = function(selectedTimezone, selectedDisplay, selectedAbbr) {
        // create and select the new time zone
        var $timeZoneSelect = $(".bcal_share_free_busy_time_zone");
        $timeZoneSelect.next(".is-selected").text(selectedDisplay);
        var $option = $('<option>');
        $option.attr('value', selectedTimezone);
        $option.text(selectedDisplay);
        $timeZoneSelect.append($option)
        $timeZoneSelect.val(selectedTimezone);
      }
      var cancel = function() {
        // default back to local time zone
        var $timeZoneSelect = $(".bcal_share_free_busy_time_zone");
        var browserTimezone = jstz.determine().name();
        $timeZoneSelect.val(browserTimezone);
        for (var i = 0; i < timezones.length; i++) {
          if (timezones[i]["id"] == browserTimezone) {
            $timeZoneSelect.next(".is-selected").text(timezones[i]["displayName"]);
            break;
          }
        }
      }
      display_timezone_dialog(yes, cancel, "Select a Time Zone");
    }
  })

  // The default timezone is the browser's time zone
  // Add it to the list if it doesn't exist in the standard menu
  var browserTimezone = jstz.determine().name();
  var optionExists = $shareFreeBusyMenu.find(".bcal_share_free_busy_time_zone option[value='" + browserTimezone + "']").length > 0;
  if (optionExists) {
    $shareFreeBusyMenu.find(".bcal_share_free_busy_time_zone").val(browserTimezone);
  } else {
    var $option = $('<option>');
    $option.attr('value', browserTimezone);
    for (var i = 0; i < timezones.length; i++) {
      if (timezones[i]["id"] == browserTimezone) {
        $option.text(timezones[i]["displayName"]);
        break;
      }
    }
    $shareFreeBusyMenu.find(".bcal_share_free_busy_time_zone").prepend($option)
    $shareFreeBusyMenu.find(".bcal_share_free_busy_time_zone").val(browserTimezone);
  }

  // Initialize custom select elements
  $('.bcal-custom-select', $shareFreeBusyMenu).each(function(idx, el) {
    initializeCustomBCalSelectElement($(el));
  });

  $('.bcal_share_free_busy_cancel_btn', $shareFreeBusyMenu).click(function(e) {
    track_event([ "bcal", "share-free-busy-cancel" ]);
    // unbind events before closing
    $(this).unbind("click");
    $('.bcal_share_free_busy_insert_btn', $shareFreeBusyMenu).unbind("click");
    $('.bcal_share_free_busy_time_zone', $shareFreeBusyMenu).unbind("change");
    $(".bcal_share_free_busy_radio_btns input[name='bcal_share_free_busy_date_range']").unbind("change");
    $('.bcal_share_free_busy_preview_link', $shareFreeBusyMenu).unbind("click");
    $('#bcal_share_free_busy_custom_range_link_text').unbind('click');
    $(".bcal_share_free_busy_radio_btns #bcal_custom_range").unbind('click');

    // Remove listeners for calendar multiselect checkboxes
    var $syncedCalendarRegion = $(".b4g-syncedCalendarRegion", $shareFreeBusyMenu)
    $syncedCalendarRegion.unbind("multiselectclick");

    $calFeaturesMenu.removeClass('bcal_share_free_busy_visible');
    $shareFreeBusyMenu.removeClass('bcal_share_free_busy_visible');
  });

  $('.bcal_share_free_busy_insert_btn', $shareFreeBusyMenu).click(function(e) {
    track_event([ "bcal", "share-free-busy-submit" ]);
    insert_free_busy_content_into_email($shareFreeBusyMenu, range, composeContainer);
  });
  $('.bcal_include_weekend_checkbox', $shareFreeBusyMenu).change(function(e) {
    if ($shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').is(':checked')) {
      $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container').addClass('checked');
    } else {
      $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container').removeClass('checked');
      // If it's the weekend and we're unchecking "Include weekends", uncheck "Included Today"
      var currentDate = new Date();
      if ([0,6].includes(currentDate.getDay())) {
        $shareFreeBusyMenu.find('.bcal_include_today_checkbox').attr('checked', false);
        $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container').removeClass('checked');
      }
    }
  });
  $('.bcal_include_today_checkbox', $shareFreeBusyMenu).change(function(e) {
    if ($shareFreeBusyMenu.find('.bcal_include_today_checkbox').is(':checked')) {
      $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container').addClass('checked');
      // If it's the weekend and we're checking "Include today", check "Include weekends"
      var currentDate = new Date();
      if ([0,6].includes(currentDate.getDay())) {
        $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').attr('checked', true);
        $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container').addClass('checked');
      }
    } else {
      $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container').removeClass('checked');
    }
  });
  $('.bcal_allow_recipient_book_checkbox', $shareFreeBusyMenu).change(function(e) {
    track_event([ "bcal", "allow-recipients-to-book-checkbox-clicked" ]);

    show_dialog(
      "The Share Free/Busy instant booking feature is still in development and not quite ready yet.<br><br><strong>Interested in updates and early access?</strong><br> Answer a few short questions to join the wait list – it takes less than a minute!",
      "Thanks for your interest!",
      {
        "Let's go": {
          text: "Let's go",
          "class": "b4g-button",
          click: function() { 
            window.open("https://forms.gle/P6tgivUvz4GCmHcy6", '_blank');
            track_event([ "bcal", "allow-recipients-to-book-google-form-visited" ]);
            $(this).dialog("destroy");
          }
        },
        "No, thanks": {
          text: "No, thanks",
          "class": "b4g-button dialog-gray",
          click: function() {
            track_event([ "bcal", "allow-recipients-to-book-dialog-dismissed" ]);
            $(this).dialog("destroy");
          }
        }
      },
      {
        width: 400,
        dialogClass: "comingSoonDialog"
      }
    );
  });

  function closeShareFreeBusyPreviewVideoModalOnEvent(e){
    var eventType = e.type;
    if (eventType === 'click') {
      var target = get_target(e);
      if ($(target).parents().andSelf().filter(".b4gShareFreeBusyVideoModal, .bcal_share_free_busy_preview_link").length === 0) {
        removeShareFreeBusyPreviewVideoModal();
      }
    } else if (eventType === 'keydown' && e.keyCode === 27) {
      removeShareFreeBusyPreviewVideoModal();
      e.stopPropagation();  // Don't close the Gmail compose widget
    }
  };
  var removeShareFreeBusyPreviewVideoModal = function() {
    $('.b4c-share-free-busy-video-overlay, .b4gShareFreeBusyVideoModal').remove();
    // Unbind listeners
    $(document).unbind('click', closeShareFreeBusyPreviewVideoModalOnEvent);
    $(document).unbind('keydown', closeShareFreeBusyPreviewVideoModalOnEvent);
  }
  var showShareFreeBusyPreviewVideoModal = function () {
    // Make sure we don't have any existing modal and event listeners
    removeShareFreeBusyPreviewVideoModal();

    var $shareFreeBusyVideoOverlay = $(SHARE_FREE_BUSY_VIDEO_OVERLAY);
    // TODO: swap out placeholder video url for real one when video is ready
    var $shareFreeBusyVideoOverlayInnerHTML = $(
      "<div class='b4gShareFreeBusyVideoModal' tabindex='-1'>" +
          '<iframe width="560" height="315" src="https://www.youtube.com/embed/OTUx1Tqw8E8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>' +
      "</div>"
    );
    $("body").append($shareFreeBusyVideoOverlay);
    $("body").append($shareFreeBusyVideoOverlayInnerHTML)

    // Setup close on outside click behavior
    $(frameDoc).click(closeShareFreeBusyPreviewVideoModalOnEvent);
    $(frameDoc).keydown(closeShareFreeBusyPreviewVideoModalOnEvent);

    $('.b4gShareFreeBusyVideoModal').focus().click();  // Hack: Focus on modal so pressing escape won't close the composer
  };
  $('.bcal_share_free_busy_preview_link', $shareFreeBusyMenu).click(showShareFreeBusyPreviewVideoModal);

  $(".bcal_share_free_busy_radio_btns input[name='bcal_share_free_busy_date_range']").change(function() {
    highlight_active_share_free_busy_radio_button_and_update_today_checkbox_state($shareFreeBusyMenu);
    var $clickedButton = $(this);
    if ($clickedButton.val() === 'customRange') {
      $('.bcal_share_free_busy_today_container').hide();
      $('.bcal_share_free_busy_weekends_container').hide();
      $('.bcal_share_free_busy_custom_range_link_text_container').show();
      $('#bcal_share_free_busy_custom_range_link_text').text("Select custom range");
    } else {
      $('.bcal_share_free_busy_today_container').show();
      $('.bcal_share_free_busy_weekends_container').show();
      $('.bcal_share_free_busy_custom_range_link_text_container').hide();

      // Remember last selected non-custom range so we can revert to it if the user clicks "custom" and then clicks "cancel" in the custom range dialog
      var dateRangeSelection = $shareFreeBusyMenu.find("input[name='bcal_share_free_busy_date_range']:checked").val();
      $shareFreeBusyMenu.attr('data-last-selected-non-custom-range', dateRangeSelection);
    }
  });
  $(".bcal_share_free_busy_radio_btns #bcal_custom_range").click(function() {
    showShareFreeBusyCustomRangeOverlay($shareFreeBusyMenu);
  });
  $('#bcal_share_free_busy_custom_range_link_text').click(function() {
    showShareFreeBusyCustomRangeOverlay($shareFreeBusyMenu);
  });
  highlight_active_share_free_busy_radio_button_and_update_today_checkbox_state($shareFreeBusyMenu);

  // Remember last selected non-custom range so we can revert to it if the user clicks "custom" and then clicks "cancel" in the custom range dialog
  var dateRangeSelection = $shareFreeBusyMenu.find("input[name='bcal_share_free_busy_date_range']:checked").val();
  $shareFreeBusyMenu.attr('data-last-selected-non-custom-range', dateRangeSelection);

  if (!is_a_reply(composeContainer)) {
    $shareFreeBusyMenu.css('right', 'unset');
    $shareFreeBusyMenu.position({of: $calFeaturesBtn, my: "right", at: "right", collision: "none"});
  }
}

function calculateDiffBetweenSelectedDays(day1, day2) {
  var msDiff = day2.getTime() - day1.getTime();
  msDiff = Math.abs(msDiff);
  var dayDiff = Math.round(msDiff/(1000*60*60*24) + 1);
  return dayDiff;
}

function checkIfDayDiffTooLarge(date1, date2) {
  var dayDiff = calculateDiffBetweenSelectedDays(date1, date2);
  if (!$('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked')) {
    // If "include weekends" is checked, ignore weekends
    var startDate = new Date(date1.valueOf());
    var originalDayDiff = dayDiff;
    for (var x = 0; x < originalDayDiff; x++) {
      if (startDate.getDay() === 0 || startDate.getDay() === 6) dayDiff--;
      startDate.addDays(1);
    }
  }
  if (dayDiff > 10) return [true, dayDiff];

  return [false, dayDiff];
}

function autofillDateRangeSelectionDates(startDate, endDate) {
  $('.b4g-custom-time-range-datepicker-calendar').datepicker("setDate", startDate);
  $('.b4g-custom-time-range-dialog .ui-state-active').click();
  $('.b4g-custom-time-range-datepicker-calendar').datepicker("setDate", endDate);
  $('.b4g-custom-time-range-dialog .ui-state-active').click();
}

function enableDisableCustomRangeOkBtnIfNeeded() {
  var rawDateStartVal = $('#b4g-custom-time-range-start-datepicker').val();
  var rawDateEndVal = $('#b4g-custom-time-range-end-datepicker').val();
  var dateRangeStart = Date.parse(rawDateStartVal);
  var dateRangeEnd = Date.parse(rawDateEndVal);

  if (dateRangeStart && dateRangeEnd) {
    $('.b4g-custom-time-range-ok-btn').removeClass('disabled').attr('disabled', false);
  } else {
    $('.b4g-custom-time-range-ok-btn').addClass('disabled').attr('disabled', true);
  }
}

function showShareFreeBusyCustomRangeOverlay($shareFreeBusyMenu) {
  var $shareFreeBusyCustomRangeOverlay = $(SHARE_FREE_BUSY_CUSTOM_RANGE_OVERLAY);
  $("body").append($shareFreeBusyCustomRangeOverlay);
  $("body").append(createNewShareFreeBusyCustomRangeDialog());

  var timeFormat = CalendarSettings["settings"]["time_format"];
  var dateFormat = CalendarSettings["settings"]["date_format"];

  // convert moment to date.js
  switch (dateFormat) {
    case "MMM D":
      dateFormat = "MMM d";
      break;
    case "M/D":
      dateFormat = "M/d";
      break;
    case "D MMM":
      dateFormat = "d MMM";
      break;
    case "D/M":
      dateFormat = "d/M";
      break;
  }
  switch (timeFormat) {
    case "h:mm a":
      timeFormat = "h:mm tt";
      break;
    case "H:mm":
      timeFormat = "H:mm";
      break;
  }

  // Setup datepicker
  $('.b4g-custom-time-range-datepicker-calendar').datepicker({
    constrainInput: false,
    dateFormat: 'mm/dd/yy',
    minDate: 0,
    beforeShowDay: function(date) {
      var date1 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-start-datepicker").val());
      var date2 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-end-datepicker").val());
      return [true, date1 && ((date.getTime() == date1.getTime()) || (date2 && date >= date1 && date <= date2)) ? "b4g-dp-highlight" : ""];
    },
    onSelect: function(dateText, inst) {
      var date1 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-start-datepicker").val());
      var date2 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-end-datepicker").val());
      var selectedDate = $.datepicker.parseDate($.datepicker._defaults.dateFormat, dateText);

      if (!date1 || date2) {
        $("#b4g-custom-time-range-start-datepicker").val(dateText);
        $("#b4g-custom-time-range-end-datepicker").val("");
        $(this).datepicker();
      } else if (selectedDate < date1) {
        // Clicked date is before originally selected date
        $("#b4g-custom-time-range-end-datepicker").val($("#b4g-custom-time-range-start-datepicker").val());
        var dayDiffResults = checkIfDayDiffTooLarge(selectedDate, date1);
        var dayDiffTooLarge = dayDiffResults[0];
        var dayDiff = dayDiffResults[1];
        if (dayDiffTooLarge) {
          if (!$('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked')) {
            // If "include weekends" is not checked, ignore weekends
            var newSelectedDate = new Date(date1.valueOf());
            var newDateDiff = 1;
            // Count down until we hit 10 days, excluding weekends
            while (newDateDiff < 10) {
              while (newSelectedDate.getDay() === 0 || newSelectedDate.getDay() === 6) {
                newSelectedDate.addDays(-1);
              }
              newSelectedDate.addDays(-1);
              newDateDiff++;
            }
            dateText = newSelectedDate.toString('MM/dd/yyyy');
          } else {
            var newStartDate = Date.parse(dateText);
            newStartDate.addDays(dayDiff-10);
            dateText = newStartDate.toString('MM/dd/yyyy');
          }
        }
        $("#b4g-custom-time-range-start-datepicker").val(dateText);
        $(this).datepicker();
      } else {
        // Clicked date is after originally selected date
        var dayDiffResults = checkIfDayDiffTooLarge(date1, selectedDate);
        var dayDiffTooLarge = dayDiffResults[0];
        var dayDiff = dayDiffResults[1];
        if (dayDiffTooLarge) {
          if (!$('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked')) {
            // If "include weekends" is not checked, ignore weekends
            var newSelectedDate = new Date(date1.valueOf());
            var newDateDiff = 1;
            // Count up until we hit 10 days, excluding weekends
            while (newDateDiff < 10) {
              while (newSelectedDate.getDay() === 0 || newSelectedDate.getDay() === 6) {
                newSelectedDate.addDays(1);
              }
              newSelectedDate.addDays(1);
              newDateDiff++;
            }
            dateText = newSelectedDate.toString('MM/dd/yyyy');
          } else {
            var newSelectedDate = Date.parse(dateText);
            newSelectedDate.addDays(-1*(dayDiff-10));
            dateText = newSelectedDate.toString('MM/dd/yyyy');
          }
        }
        $("#b4g-custom-time-range-end-datepicker").val(dateText);
        $(this).datepicker();
      }

      enableDisableCustomRangeOkBtnIfNeeded();
    },
  });

  // Determine current date selection if applicable and prefill them
  var existingRangeStart = $shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_start').val();
  var existingRangeEnd = $shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_end').val();
  if (existingRangeStart && existingRangeEnd) {
    autofillDateRangeSelectionDates(existingRangeStart, existingRangeEnd);
  }

  // Hook up buttons
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-clear-btn').click(function() {
    $('#b4g-custom-time-range-start-datepicker, #b4g-custom-time-range-end-datepicker').val('');
    $('.b4g-custom-time-range-datepicker-calendar').datepicker('setDate', null);
    enableDisableCustomRangeOkBtnIfNeeded();
  });
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-cancel-btn').click(function() {
    if ($shareFreeBusyMenu.find('#bcal_share_free_busy_custom_range_link_text').text() === "Select custom range") {
      var previouslySelectedRadioButtonValue = $shareFreeBusyMenu.attr('data-last-selected-non-custom-range');
      $shareFreeBusyMenu.find('input[value="'+ previouslySelectedRadioButtonValue +'"]').click();
    }
    closeShareFreeBusyCustomRangeOverlay();
  });
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-ok-btn').click(function() {

    var rawDateStartVal = $('#b4g-custom-time-range-start-datepicker').val();
    var rawDateEndVal = $('#b4g-custom-time-range-end-datepicker').val();
    var dateRangeStart = Date.parse(rawDateStartVal);
    var dateRangeEnd = Date.parse(rawDateEndVal);
    $shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_start').val(rawDateStartVal);
    $shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_end').val(rawDateEndVal);

    var newDateRangeString = dateRangeStart.toString(dateFormat) + ' - ' + dateRangeEnd.toString(dateFormat + ', yyyy');
    $('#bcal_share_free_busy_custom_range_link_text').text(newDateRangeString);

    var includeTodayEnabled = $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked');
    $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').attr('checked', includeTodayEnabled);
    $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').change(); // manually trigger change event

    closeShareFreeBusyCustomRangeOverlay();
  });

  // Initialize "include weekends" checkbox and hook up click handler
  var includeTodayEnabled = $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').is(':checked');
  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').attr('checked', includeTodayEnabled);
  if (includeTodayEnabled) $('.b4g-custom-time-range-dialog').addClass('b4g-include-weekends-enabled');

  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').change(function(e) {
    if ($('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked')) {
      $('.b4g-custom-time-range-dialog .bcal_custom_time_range_weekends_container').addClass('checked');
      $('.b4g-custom-time-range-dialog').addClass('b4g-include-weekends-enabled');

      // Reduce date range selection to ten days if necessary
      var rawDateStartVal = $('#b4g-custom-time-range-start-datepicker').val();
      var rawDateEndVal = $('#b4g-custom-time-range-end-datepicker').val();
      var dateRangeStart = Date.parse(rawDateStartVal);
      var dateRangeEnd = Date.parse(rawDateEndVal);
      if (dateRangeStart && dateRangeEnd) {
        var dateDiff = calculateDiffBetweenSelectedDays(dateRangeStart, dateRangeEnd);
        if (dateDiff > 10) {
          while (dateDiff > 10) {
            dateRangeEnd.addDays(-1);
            dateDiff = calculateDiffBetweenSelectedDays(dateRangeStart, dateRangeEnd);
          }
          autofillDateRangeSelectionDates(dateRangeStart, dateRangeEnd);
        }
      }
    } else {
      $('.b4g-custom-time-range-dialog .bcal_custom_time_range_weekends_container').removeClass('checked');
      $('.b4g-custom-time-range-dialog').removeClass('b4g-include-weekends-enabled');
    }
  });

  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').change(); // manually trigger change event
}

function closeShareFreeBusyCustomRangeOverlay() {
  // Remove click handlers up buttons
  $('.b4g-custom-time-range-clear-btn, .b4g-custom-time-range-cancel-btn, .b4g-custom-time-range-ok-btn').unbind("click");
  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').unbind('change');

  $('.b4g-custom-time-range-dialog').remove();
  $('.b4c-share-free-busy-custom-range-overlay').remove();

}

function createNewShareFreeBusyCustomRangeDialog() {
  return $(
    "<div class='b4g-custom-time-range-dialog share-free-busy-custom-range-dialog'>" +
      "<div class='b4g-custom-time-range-dialog-header'>" +
        "<div class='b4g-custom-time-range-dialog-header-txt'>Select a custom range of up to 10 days</div>"+
      "</div>" +
      "<div class='b4g-custom-time-range-dialog-body'>" +
        "<input id='b4g-custom-time-range-start-datepicker' class='b4g-custom-time-range-datepicker'>" +
        "<input id='b4g-custom-time-range-end-datepicker' class='b4g-custom-time-range-datepicker'>" +
        "<div class='b4g-custom-time-range-datepicker-calendar'></div>"+
      "</div>" +
      '<div class="bcal_custom_time_range_weekends_container">' +
        '<label for="bcal_custom_time_range_include_weekend_checkbox">' +
          '<div class="bcal_custom_time_range_include_weekends_visible_checkbox"></div>' +
          '<input class="bcal_custom_time_range_include_weekend_checkbox" type="checkbox" id="bcal_custom_time_range_include_weekend_checkbox"/>' +
          'Include weekends' +
        '</label>' +
      '</div>' +
      "<div class='b4g-custom-time-range-dialog-footer'>" +
        '<div class="b4g-custom-time-range-btn-wrapper">' +
          '<button class="b4g-custom-time-range-clear-btn">' +
            '<div><div class="bcal-div-txt-wrapper">Clear</div></div>' +
          '</button>' +
        '</div>' +
          '<div class="b4g-custom-time-range-btn-wrapper">' +
          '<button class="b4g-custom-time-range-cancel-btn">' +
            '<div><div class="bcal-div-txt-wrapper">Cancel</div></div>' +
          '</button>' +
        '</div>' +
          '<div class="b4g-custom-time-range-btn-wrapper">' +
          '<button class="b4g-custom-time-range-ok-btn disabled" disabled>' +
            '<div><div class="bcal-div-txt-wrapper">OK</div></div>' +
          '</button>' +
        '</div>' +
      "</div>" +
    "</div>"
  );
}

function showBookableCustomRangeOverlay($bookableCalendarMenu) {
  var $shareFreeBusyCustomRangeOverlay = $(SHARE_FREE_BUSY_CUSTOM_RANGE_OVERLAY);
  $("body").append($shareFreeBusyCustomRangeOverlay);
  $("body").append(createNewShareFreeBusyCustomRangeDialog()
      .find(".bcal_custom_time_range_weekends_container")
        .remove()
      .end()
      .find('.b4g-custom-time-range-dialog-header-txt')
        .text("Select a range to allow bookings")
      .end()
      .removeClass('share-free-busy-custom-range-dialog')
  );

  var timeFormat = CalendarSettings["settings"]["time_format"];
  var dateFormat = CalendarSettings["settings"]["date_format"];

  // convert moment to date.js
  switch (dateFormat) {
    case "MMM D":
      dateFormat = "MMM d";
      break;
    case "M/D":
      dateFormat = "M/d";
      break;
    case "D MMM":
      dateFormat = "d MMM";
      break;
    case "D/M":
      dateFormat = "d/M";
      break;
  }
  switch (timeFormat) {
    case "h:mm a":
      timeFormat = "h:mm tt";
      break;
    case "H:mm":
      timeFormat = "H:mm";
      break;
  }

  // Setup datepicker
  $('.b4g-custom-time-range-datepicker-calendar').datepicker({
    constrainInput: false,
    dateFormat: 'mm/dd/yy',
    minDate: 0,
    beforeShowDay: function(date) {
      var date1 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-start-datepicker").val());
      var date2 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-end-datepicker").val());
      return [true, date1 && ((date.getTime() == date1.getTime()) || (date2 && date >= date1 && date <= date2)) ? "b4g-dp-highlight" : ""];
    },
    onSelect: function(dateText, inst) {
      var date1 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-start-datepicker").val());
      var date2 = $.datepicker.parseDate($.datepicker._defaults.dateFormat, $("#b4g-custom-time-range-end-datepicker").val());
      var selectedDate = $.datepicker.parseDate($.datepicker._defaults.dateFormat, dateText);

      if (!date1 || date2) {
        $("#b4g-custom-time-range-start-datepicker").val(dateText);
        $("#b4g-custom-time-range-end-datepicker").val("");
        $(this).datepicker();
      } else if (selectedDate < date1) {
        $("#b4g-custom-time-range-end-datepicker").val($("#b4g-custom-time-range-start-datepicker").val());
        $("#b4g-custom-time-range-start-datepicker").val(dateText);
        $(this).datepicker();
      } else {
        $("#b4g-custom-time-range-end-datepicker").val(dateText);
        $(this).datepicker();
      }

      enableDisableCustomRangeOkBtnIfNeeded();
    },
  });

  // Hook up buttons
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-clear-btn').click(function() {
    $('#b4g-custom-time-range-start-datepicker, #b4g-custom-time-range-end-datepicker').val('');
    $('.b4g-custom-time-range-datepicker-calendar').datepicker('setDate', null);
    enableDisableCustomRangeOkBtnIfNeeded();
  });
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-cancel-btn').click(function() {
    if ($bookableCalendarMenu.find('.bcal-allow-bookings-display-custom-text').text() === "Select custom range") {
      var previouslySelectedRadioButtonValue = $bookableCalendarMenu.attr('data-last-selected-non-custom-range');
      $bookableCalendarMenu.find('input[value="'+ previouslySelectedRadioButtonValue +'"]').click();
    }
    closeShareFreeBusyCustomRangeOverlay();
  });
  $('.b4g-custom-time-range-dialog .b4g-custom-time-range-ok-btn').click(function() {

    var rawDateStartVal = $('#b4g-custom-time-range-start-datepicker').val();
    var rawDateEndVal = $('#b4g-custom-time-range-end-datepicker').val();
    var dateRangeStart = Date.parse(rawDateStartVal);
    var dateRangeEnd = Date.parse(rawDateEndVal);

    var newDateRangeString = dateRangeStart.toString("MMM d") + ' - ' + dateRangeEnd.toString("MMM d");
    $bookableCalendarMenu.find(".bcal-allow-bookings-display-custom-text").text(newDateRangeString);
    $bookableCalendarMenu.data("customstart", rawDateStartVal);
    $bookableCalendarMenu.data("customend", rawDateEndVal);

    var includeTodayEnabled = $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked');
    $bookableCalendarMenu.find('.bcal_include_weekend_checkbox').attr('checked', includeTodayEnabled);
    $bookableCalendarMenu.find('.bcal_include_weekend_checkbox').change(); // manually trigger change event

    closeShareFreeBusyCustomRangeOverlay();
  });

  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').change(function(e) {
    if ($('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').is(':checked')) {
      $('.b4g-custom-time-range-dialog .bcal_custom_time_range_weekends_container').addClass('checked');
      $('.b4g-custom-time-range-dialog').addClass('b4g-include-weekends-enabled');
    } else {
      $('.b4g-custom-time-range-dialog .bcal_custom_time_range_weekends_container').removeClass('checked');
      $('.b4g-custom-time-range-dialog').removeClass('b4g-include-weekends-enabled');
    }
  });

  $('.b4g-custom-time-range-dialog .bcal_custom_time_range_include_weekend_checkbox').change(); // manually trigger change event
}



function display_timezone_dialog(yes, cancel, title){
    var message = "<div><div class='b4g-timezone-search-container'></div><div id='b4g-timezone-selector'></div></div>";
    var $message = $(message);
    $message.find(".b4g-timezone-search-container").append("<div>" +
          "<img src='https://b4g.baydin.com/site_media/img/manage/search.svg'>" +
          "<input type='text' class='b4g-timezone-search-input' style='' class='' autocomplete='off' placeholder='Filter'>" + 
      "</div>"
    )
    var $selector = $message.find("#b4g-timezone-selector");
    var timezones = CalendarSettings["timezones"];
    // in utc
    var exampleDateValue = new Date().valueOf() + (new Date().getTimezoneOffset() * 1000 * 60);
    var timeFormat = CalendarSettings["settings"]["time_format"];
    //moment to date.js
    switch (timeFormat) {
      case "h:mm a":
        timeFormat = "h:mm tt";
        break;
      case "H:mm":
        timeFormat = "H:mm";
        break;
    }

    for (var i = 0; i < timezones.length; i++) {
      var $timezoneOption = $("" + 
        "<div class='b4g-timezone-option'>" +
          "<div class='b4g-timezone-offset'>" + 
          "</div>" + 
          "<div class='b4g-timezone-text'>" + 
          "</div>" + 
          "<div class='b4g-timezone-example'>" + 
          "</div>" + 
        "</div>");
      var timezoneValue = timezones[i]["id"];
      var timezoneDisplay = timezones[i]["displayName"];
      var timezoneOffset = timezones[i]["utcOffset"];
      var timezoneAbbr = timezones[i]["abbr"];
      var timezoneOffsetMin = timezones[i]["offsetMin"];
      $timezoneOption.attr("b4g-value", timezoneValue);
      $timezoneOption.attr("b4g-display", timezoneDisplay);
      $timezoneOption.attr("b4g-abbr", timezoneAbbr);
      $timezoneOption.attr("title", timezoneDisplay);
      $timezoneOption.find(".b4g-timezone-offset").text("GMT" + timezoneOffset);
      $timezoneOption.find(".b4g-timezone-text").text(timezoneDisplay + " ("  + timezoneAbbr + ")");
      var adjustedDate = new Date(exampleDateValue + (1000 * 60 * timezoneOffsetMin))
      $timezoneOption.find(".b4g-timezone-example").text(adjustedDate.toString(timeFormat));
      $selector.append($timezoneOption);
    }
    
    $(".b4g-timezone-dialog").remove()
    var $dialog = $("<div class='" + "b4g-timezone-dialog" + "' style='display:none;'>"+$message.html()+"</div>");
    $("body").append($dialog);
    $(".b4g-timezone-dialog").dialog({
      width: "400px",
      title: title,
      modal: true,
      closeOnEscape: false,
      draggable: true,
      resizable: false,
    });
    var $timezoneDialog = $(".b4g-timezone-dialog");
    var $title = $timezoneDialog.prev(".b4g-ui-dialog-titlebar").find(".b4g-ui-dialog-title");
    var $button = $("<button>&#10005;</button>");
    $button.css({
      "position": "absolute",
      "cursor": "pointer",
      "right": "10px",
      "background": "#404040",
      "color": "#FFF",
      "opacity": "0.6",
      "border": "none",
    })
    $button.click(function(){
      cancel();
      $(".b4g-timezone-dialog").dialog("destroy");
    });
    $title.after($button);
    $timezoneDialog.find(".b4g-timezone-option").click(function(){
        var selected = $(this);
        yes(selected.attr("b4g-value"), selected.attr("b4g-display"), selected.attr("b4g-abbr"));
        $(".b4g-timezone-dialog").dialog("destroy");
    });
    $timezoneDialog.find(".b4g-timezone-search-input").keyup(function(){
      var query = $(this).val().toLowerCase();
      $(".b4g-timezone-dialog").find(".b4g-timezone-option").each(function(){
        var $option = $(this);
        var text = $option.attr("b4g-value") + " " + $option.attr("b4g-display") + " " + $option.attr("b4g-abbr");
        text = text.replace("_", " ");
        var contained = text.toLowerCase().indexOf(query) >= 0;
        $option.toggle(contained || $option.hasClass("picked"));
      })
    })
}

function determineBookableCalDurationString($option) {
  var durationAttrVal = Number($option.attr('data-duration'));
  var durationValueString = '';
  if (durationAttrVal === 15) {
    durationValueString = '15 minutes';
  } else if (durationAttrVal === 30) {
    durationValueString = '30 minutes';
  } else if (durationAttrVal === 45) {
    durationValueString = '45 minutes';
  } else if (durationAttrVal === 60) {
    durationValueString = '1 hour';
  } else if (durationAttrVal === 90) {
    durationValueString = '90 minutes';
  } else if (durationAttrVal === 120) {
    durationValueString = '2 hours';
  } else {
    durationValueString = durationAttrVal.toString() + ' minutes';
  }
  var activeAttrVal = $option.attr('data-is-active');
  if (activeAttrVal === 'false') {
    durationValueString += " (Paused)"
  }
  return durationValueString;
}

function initializeCustomBCalSelectElement($customSelectEl) {
  if ($customSelectEl.find('.bcal-custom-select-items').length > 0) return; // Don't re-init if we already ran this function for the select element

  // convert display to UK time if necessary
  var timeFormat = CalendarSettings["settings"]["time_format"];
  if (timeFormat == "H:mm") {
    if ($customSelectEl.find("select").hasClass('bcal_share_free_busy_start_time') ||
      $customSelectEl.find("select").hasClass('bcal_share_free_busy_end_time')) {
      $customSelectEl.find("option").each(function(idx, el){
        var $option = $(el);
        var timeInUK = Date.parse($option.text()).toString("H:mm");
        $option.text(timeInUK);
      });
    }
  }

  var $selectEl = $customSelectEl.find('select').first();
  var isBookableScheduleSelector = $selectEl.hasClass('bookable_calendar_selector');

  var $newDiv = $('<div class="is-selected"></div>')
  if (isBookableScheduleSelector) {
    // Special behavior for bookable schedule dropdown
    var $option = $selectEl.find('option:selected');
    var durationValueString = determineBookableCalDurationString($option);
    var $bookableCalendarTitleDiv = $('<div class="bcal_bookable_calendar_dropdown_item_upper_div">' + $option.html() + '</div>');
    var $durationStringDiv = $('<div class="bcal_bookable_calendar_dropdown_item_lower_div">'+durationValueString+'</div>');

    $newDiv.append($bookableCalendarTitleDiv);
    $newDiv.append($durationStringDiv);
  } else {
    // Default case for most custom selects
    $newDiv.append($selectEl.find('option:selected').html());
  }
  $customSelectEl.append($newDiv);


  var $newOptionsList = $('<div class="bcal-custom-select-items bcal-custom-select-hide"></div>');
  var $selectElOptions = $selectEl.find('option');
  $selectElOptions.each(function(idx, el) {
    var $option = $(el);
    var $newCustomOptionDiv = $('<div></div>');

    if (isBookableScheduleSelector && $option.val() !== "BOOKABLE_CALENDAR_CREATE" && $option.val() !== "BOOKABLE_CALENDAR_MANAGE" && $option.val() !== "BOOKABLE_CALENDAR_HUB") {
      // Add HTML specific to the bookable schedule dropdown
      var activeAttrVal = $option.attr('data-is-active');
      if (activeAttrVal === 'false') {
        $newCustomOptionDiv.css('opacity', '.6').css('color', '#444444 !important');
      }
      var durationValueString = determineBookableCalDurationString($option);
      var $bookableCalendarTitleDiv = $('<div class="bcal_bookable_calendar_dropdown_item_upper_div">' + $option.html() + '</div>');
      var $durationStringDiv = $('<div class="bcal_bookable_calendar_dropdown_item_lower_div">'+durationValueString+'</div>');

      $newCustomOptionDiv.append($bookableCalendarTitleDiv);
      $newCustomOptionDiv.append($durationStringDiv);
    } else if(isBookableScheduleSelector && $option.val() === "BOOKABLE_CALENDAR_HUB"){
      var $bookableHubOptionDiv = $('<div class="bcal_bookable_calendar_dropdown_item_hub_div">' + $option.html() + '</div>');
      $newCustomOptionDiv.append($bookableHubOptionDiv);
    } else {
      // Default case for most custom selects:
      $newCustomOptionDiv.html($option.html());
    }

    $newCustomOptionDiv.attr('data-bcal-custom-select-option-val', $option.attr('value'));

    // Setup click handler
    $newCustomOptionDiv.click(function(e) {
      var $target = $(e.target);
      // Adjust target if one of the inner divs for a bookable schedule listing was clicked
      if ($target.hasClass('bcal_bookable_calendar_dropdown_item_upper_div') ||
        $target.hasClass('bcal_bookable_calendar_dropdown_item_lower_div') ||
        $target.hasClass('bcal_bookable_calendar_dropdown_item_hub_div')) {
        $target = $target.parent();
      }
      var $parentCustomSelect = $target.closest('.bcal-custom-select');
      var $currentSelectEl = $parentCustomSelect.find('select');
      var $selectionDisplay = $parentCustomSelect.find('.is-selected');

      $selectionDisplay.html($target.html());  // Update HTML to show new value
      $selectionDisplay.find('.bcal_bookable_dropdown_edit_cal_button').remove();  // Don't include bookable schedule edit buttons
      $parentCustomSelect.find('.bcal-custom-select-items div').removeClass('same-as-selected');
      $target.addClass('same-as-selected');  // Update selected option
      $currentSelectEl.val($target.attr('data-bcal-custom-select-option-val')); // Update value of hidden select element
      $currentSelectEl.change(); // manually trigger change event 

      // Close menu by simulating click on custom select element
      closeAllCustomSelect();

      // If we just selected a start time, update the available end times
      if ($currentSelectEl.hasClass('bcal_share_free_busy_start_time')) {
        // Update available options in the end time select element so that only times after the chosen start time are available
        // If it is valid, preserve the chosen end time option
        var composeContainer = get_compose_container($customSelectEl);
        var $shareFreeBusyMenu = composeContainer.find('#bcal_share_free_busy_menu');

        var $endTimeSelectEl = $shareFreeBusyMenu.find('.bcal_share_free_busy_end_time');
        var currentEndTime;
        if ($endTimeSelectEl.val() === "24:00") {
          currentEndTime = Date.parse("23:00").addHours(1);
        } else {
          currentEndTime = Date.parse($endTimeSelectEl.val());
        }

        var $newSelectElOptions = $(
          '<option value="5:30">5:30 AM</option>' +
          '<option value="6:00">6:00 AM</option>' +
          '<option value="6:30">6:30 AM</option>' +
          '<option value="7:00">7:00 AM</option>' +
          '<option value="7:30">7:30 AM</option>' +
          '<option value="8:00">8:00 AM</option>' +
          '<option value="8:30">8:30 AM</option>' +
          '<option value="9:00">9:00 AM</option>' +
          '<option value="9:30">9:30 AM</option>' +
          '<option value="10:00">10:00 AM</option>' +
          '<option value="10:30">10:30 AM</option>' +
          '<option value="11:00">11:00 AM</option>' +
          '<option value="11:30">11:30 AM</option>' +
          '<option value="12:00">12:00 PM</option>' +
          '<option value="12:30">12:30 PM</option>' +
          '<option value="13:00">1:00 PM</option>' +
          '<option value="13:30">1:30 PM</option>' +
          '<option value="14:00">2:00 PM</option>' +
          '<option value="14:30">2:30 PM</option>' +
          '<option value="15:00">3:00 PM</option>' +
          '<option value="15:30">3:30 PM</option>' +
          '<option value="16:00">4:00 PM</option>' +
          '<option value="16:30">4:30 PM</option>' +
          '<option value="17:00">5:00 PM</option>' +
          '<option value="17:30">5:30 PM</option>' +
          '<option value="18:00">6:00 PM</option>' +
          '<option value="18:30">6:30 PM</option>' +
          '<option value="19:00">7:00 PM</option>' +
          '<option value="19:30">7:30 PM</option>' +
          '<option value="20:00">8:00 PM</option>' +
          '<option value="20:30">8:30 PM</option>' +
          '<option value="21:00">9:00 PM</option>' +
          '<option value="21:30">9:30 PM</option>' +
          '<option value="22:00">10:00 PM</option>' +
          '<option value="22:30">10:30 PM</option>' +
          '<option value="23:00">11:00 PM</option>' +
          '<option value="23:30">11:30 PM</option>' +
          '<option value="24:00">12:00 AM</option>'
        );
        // convert display to UK time if necessary
        var timeFormat = CalendarSettings["settings"]["time_format"];
        if (timeFormat == "H:mm") {
          $newSelectElOptions.find("option").each(function(idx, el){
            var $option = $(el);
            var timeInUK = Date.parse($option.text()).toString("H:mm");
            $option.text(timeInUK);
          });
        }

        $shareFreeBusyMenu.find('.bcal_share_free_busy_end_time option').remove();
        $shareFreeBusyMenu.find('.bcal_share_free_busy_end_time').append($newSelectElOptions);

        $newSelectElOptions = $shareFreeBusyMenu.find('.bcal_share_free_busy_end_time option');

        var newStartTime = Date.parse($shareFreeBusyMenu.find('.bcal_share_free_busy_start_time').val());

        $newSelectElOptions.each(function (idx, option) {
          var $option = $(option);
          var currentOptionVal;
          if ($option.val() === "24:00") {
            currentOptionVal = Date.parse("23:00").addHours(1);
          } else {
            currentOptionVal = Date.parse($option.val());
          }
          // End times must be at least 90 minutes after start time
          // Remove any end time options that are too early
          var newStartTimePlus89 = new Date(newStartTime.valueOf()).addMinutes(89);
          if (!currentOptionVal.isAfter(newStartTimePlus89)) {
            $option.remove();
            return true;
          }

          // If the existing end time option is still valid, select it
          if (currentOptionVal.equals(currentEndTime)) {
            $option.closest('select').val($option.val());
          }
        });

        var hasSelectedEl;
        $newSelectElOptions.each(function (idx, option) {
          if (option.hasAttribute('selected')) {
            hasSelectedEl = true;
          }
        });
        if (!hasSelectedEl) {
          $newSelectElOptions.first('option').attr('selected', 'selected');
        }

        var $currentCustomSelect = $endTimeSelectEl.closest('.bcal-custom-select');
        $currentCustomSelect.find('.bcal-custom-select-items').remove();
        $currentCustomSelect.find('.is-selected').remove();
        initializeCustomBCalSelectElement($currentCustomSelect);
      }
    });

    $newOptionsList.append($newCustomOptionDiv);
  });
  $customSelectEl.append($newOptionsList);

  if (!$customSelectEl.hasClass('bcal-custom-select-open-downwards')) {
    var listHeight = $newOptionsList.height();
    $newOptionsList.css('top', -listHeight)
  }
  $newDiv.click(function(e) {
    e.stopPropagation();
    var $target = $(e.target);
    // Adjust target if one of the inner divs for a bookable schedule listing was clicked
    if ($target.hasClass('bcal_bookable_calendar_dropdown_item_upper_div') ||
    $target.hasClass('bcal_bookable_calendar_dropdown_item_lower_div') ||
    $target.hasClass('bcal_bookable_calendar_dropdown_item_hub_div')) {
      $target = $target.parent();
    }
    closeAllCustomSelect($target);
    $target.next('.bcal-custom-select-items').toggleClass('bcal-custom-select-hide');
    $target.closest('.bcal-custom-select').toggleClass('bcal-custom-select-arrow-active');

    // Setup close on outside click behavior
    $(frameDoc).click(function closeCustomSelectsOnOutsideClick(e){
      var target = get_target(e);
      if ($(target).parents().andSelf().filter(".bcal-custom-select").length === 0) {
        closeAllCustomSelect();
        $(document).unbind('click', closeCustomSelectsOnOutsideClick);
      }
    });
  });
}

function closeAllCustomSelect($targetCustomSelectEl) {
  var $customSelectEls = $('.bcal-custom-select');
  var $customSelectItems = $('.bcal-custom-select .bcal-custom-select-items');

  var $customSelectElToKeepOpened;
  if ($targetCustomSelectEl) $customSelectElToKeepOpened = $targetCustomSelectEl.closest('.bcal-custom-select');

  $customSelectEls.each(function(idx, el) { 
    var $el = $(el);
    if ($customSelectElToKeepOpened && $el.get(0) === $customSelectElToKeepOpened.get(0)) {
      return;
    } else {
      $el.removeClass('bcal-custom-select-arrow-active');
      $el.find('.bcal-custom-select-items').addClass('bcal-custom-select-hide');
    }
  });
}

function display_plan_group_event_screen() {
  var groupEventPageURL = "https://b4g.baydin.com/calendar/groupeventpage";

  var dialogWidth = 1350;
  var dialogHeight = 900;

  var top = 0;
  var left = 0;
  // Dimension setting code taken from unauthenticated_flow function for auth dialog (but with increas):
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }

  var groupEventWindow = window.open(groupEventPageURL, "",
      "width=" + dialogWidth + ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top +
      ",left=" + left);
}

function display_group_poll_interest() {
  show_dialog(
    "The Group Poll feature is still in development and not quite ready yet.<br><br>Join the waitlist now for early access:<br><strong>" + get_gmail_user() + "</strong></div>",
    "Thanks for your interest!",
    {
      "Join waitlist": {
        text: "Join waitlist",
        "class": "b4g-button",
        click: function() { 
          $.ajax({
            url: "https://b4g.baydin.com/joingrouppollinterest",
            data: {"email":get_gmail_user()},
            type: "POST",
            xhr: xhr_with_credentials,
            success: function (data) {
            },
            error: function () {
            }
          });

          track_event([ "bcal", "group-poll-waitlist-joined" ]);
          $(this).dialog("destroy");
          display_group_poll_waitlisted_confirmation();
        }
      },
      "No, thanks": {
        text: "No, thanks",
        "class": "b4g-button dialog-gray",
        click: function() {
          track_event([ "bcal", "group-poll-waitlist-dismissed" ]);
          $(this).dialog("destroy");
        }
      }
    },
    {
      width: 400,
      dialogClass: "comingSoonDialog comingSoonGPDialog"
    }
  );
}

function display_group_poll_waitlisted_confirmation() {
  show_dialog(
    "We'll let you know when we're ready for early access.",
    "You're on the list!",
    {
      "OK": {
        text: "OK",
        "class": "b4g-button b4g-button-waitlisted",
        click: function() { 
          $(this).dialog("destroy");
        }
      }
    },
    {
      width: 400,
      dialogClass: "comingSoonDialog comingSoonGPDialog"
    }
  );
}

function highlight_active_share_free_busy_radio_button_and_update_today_checkbox_state($shareFreeBusyMenu) {
  var $selectedInput = $("input[name='bcal_share_free_busy_date_range']:checked");
  $('.bcal_share_free_busy_radio_btns label').removeClass('active');
  $selectedInput.closest('label').addClass('active');

  if ($selectedInput.val() === "nextWeek") {
    // Uncheck and disable "Include today" checkbox
    $shareFreeBusyMenu.find('.bcal_include_today_checkbox').removeAttr("checked");
    $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container').removeClass('checked');

    $shareFreeBusyMenu.find('.bcal_include_today_checkbox').attr("disabled", "disabled");
    $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container label').addClass('disabled');

    // Enable the "Include weekends" checkbox in case it had been disabled
    $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').removeAttr("disabled");
    $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container label').removeClass('disabled');
  } else {
    // Enable "Include today" checkbox, and check it by default if the current time is before noon on a weekday
    $shareFreeBusyMenu.find('.bcal_include_today_checkbox').removeAttr("disabled");
    $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container label').removeClass('disabled');

    var currentDate = new Date();
    if (currentDate.getHours() < 12 && ![0,6].includes(currentDate.getDay())) {
      $shareFreeBusyMenu.find('.bcal_include_today_checkbox').attr("checked", "checked");
      $shareFreeBusyMenu.find('.bcal_share_free_busy_today_container').addClass('checked');
    }

    // If the current range couldn't include the weekend (taking into account the today checkbox state), uncheck "Include Weekends"
    currentDate = new Date();
    if (!$shareFreeBusyMenu.find('.bcal_include_today_checkbox').is(':checked')) {
      currentDate.addDays(1);  // We'll start checking range for weekend starting from tomorrow
    }
    var daysToCheck = 3;
    if ($selectedInput.val() === 'next5days') daysToCheck = 5; 
    var weekendIncludedInRange = false;
    for (daysToCheck; daysToCheck > 0; daysToCheck--) {
      if ([0,6].includes(currentDate.getDay())) {
        weekendIncludedInRange = true;
        break;
      }
      currentDate.addDays(1);
    }
    if (!weekendIncludedInRange) {
      // Uncheck and disable the "Include weekends" since a weekend could not possibly be part of our range
      $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').removeAttr("checked");
      $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container').removeClass('checked');

      $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').attr("disabled", "disabled");
      $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container label').addClass('disabled');
    } else {
      // Enable the "Include weekends" checkbox in case it had been disabled
      $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').removeAttr("disabled");
      $shareFreeBusyMenu.find('.bcal_share_free_busy_weekends_container label').removeClass('disabled');
    }
  }
}

function insert_free_busy_content_into_email($shareFreeBusyMenu, range, composeContainer) {
  // Input is the clicked calendar features menu as a jQuery object

  // First, disable insert button to avoid duplicate requests
  $shareFreeBusyMenu.find("button.bcal_share_free_busy_insert_btn").attr("disabled", "disabled");


  var syncedCalendarIds = $shareFreeBusyMenu.find(".b4g-syncedCalendarRegion").val() || [];

  var dateRangeSelection = $shareFreeBusyMenu.find("input[name='bcal_share_free_busy_date_range']:checked").val();
  var numDays;
  var isCustomRange = false;
  switch(dateRangeSelection) {
    case 'next3days':
      numDays = 3;
      break;
    case 'next5days':
      numDays = 5;
      break;
    case 'nextWeek':
      numDays = 7;
      break;
    case 'customRange':
      isCustomRange = true;
    default:
      numDays = 3;
      break;
  }

  var includeWeekend = $shareFreeBusyMenu.find('.bcal_include_weekend_checkbox').is(':checked');
  var adjustDateForWeekend = !includeWeekend || numDays === 7;

  var startDate;
  var endDate;

  if (isCustomRange) {
    // Parse localized start and end dates using Date.parse (which parses in the local timezone)
    startDate = Date.parse($shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_start').val());
    endDate = Date.parse($shareFreeBusyMenu.find('.bcal_share_free_busy_custom_range_end').val()).addDays(1);
  } else {
    // Start date
    startDate = Date.today();
    // End date
    endDate = Date.today().addDays(numDays);
    var includeToday = $shareFreeBusyMenu.find('.bcal_include_today_checkbox').is(':checked');
    //For 3 & 5 day availabilities: skip today if the "Include today" checkbox is unchecked
    if ((numDays === 3 || numDays === 5) && !includeToday) {
      startDate.addDays(1);
      endDate.addDays(1);
    }
  
    if (adjustDateForWeekend) {
      if (numDays === 7) {
        // Special behavior for "next week" option: we will display the next full week
        // We'll start on the next Monday (or Sunday if we are including weekends)
        if (includeWeekend === true) {
          // Move the start date forward until it is the next Sunday
          while(startDate.getDay() !== 0) {
            startDate.addDays(1);
            endDate.addDays(1);
          }
        } else {
          // If it is Monday today, skip forward by one day so we'll find the next Monday
          if (startDate.getDay() === 1) {
            startDate.addDays(1);
            endDate.addDays(1);
          }
  
          // Move the start date forward until it is the next Monday
          while(startDate.getDay() !== 1) {
            startDate.addDays(1);
            endDate.addDays(1);
          }
        }
      } else {
        // Behavior for next 3 days and next 5 days options:
        let counter = startDate.clone();
        while (counter <= endDate) {
          if (counter.getDay() === 0 || counter.getDay() === 6) {
            endDate.addDays(1);
          }
          counter.addDays(1);
        }
      }
    }
  }

  var startTime = $shareFreeBusyMenu.find('.bcal_share_free_busy_start_time').val();
  var endTime = $shareFreeBusyMenu.find('.bcal_share_free_busy_end_time').val();
  var timeZone = $shareFreeBusyMenu.find('.bcal_share_free_busy_time_zone').val();

  var url = "https://b4g.baydin.com/calendar/createavailability";
  var data = {
    "startDate": Math.floor(startDate.getTime()/1000),
    "endDate": Math.floor(endDate.getTime()/1000),
    "startTime": startTime,
    "endTime": endTime,
    "includeWeekend": includeWeekend,
    "timeZone": timeZone,
    "syncedCalendarIds": syncedCalendarIds.join(),
  }
  call_function_after_logged_in(function() {
    $.ajax({
      url: url,
      data: data,
      type: "POST",
      xhr: xhr_with_credentials,
      success: function(response) {
        // Insert the HTML into the composer
        var $insertedHtml = $('<div>');

        $insertedHtml.append($(response.explanationHtml));
        $insertedHtml.append($(response.insertedHtml));
        var $space = $('<div><br></div>');
        $insertedHtml.append($space);

        var newNode = document.createRange().createContextualFragment($insertedHtml[0].outerHTML);
        range.insertNode(newNode);

        close_bcal_features_menu();
        var imgSrc = $insertedHtml.find('img').attr('src');
        var $image = $("img[src='" + imgSrc + "']");
        $image.each(simulate_click)
        var height = $image.height();
        var width = $image.width();
        $("#original-resize-image").each(simulate_click)
        $("#original-resize-image").click();
        var $resizedimage = $("img[src='" + imgSrc + "']");
        $resizedimage.attr("height", height)
        $resizedimage.attr("width", width)

        var $composeContainer = $(composeContainer);
        if (!$composeContainer.hasClass("b4g_click_calendar_freebusy")) {
          $composeContainer.addClass("b4g_click_calendar_freebusy");
          $composeContainer.click(function(e){
            var $clickedTarget = $(e.target);
            if ($clickedTarget.is("area")) {
              var href = $clickedTarget.attr("href");
              if (href && href.startsWith("https://b4g.baydin.com/calendar") || href.startsWith("https://www.boomerangapp.com/scheduling/") || href.startsWith("https://www.boomeranggmail.com/scheduling/")|| href.startsWith("https://www.boomeranggmail.com/meeting-scheduling/")) {
                e.preventDefault();
                window.open(href, "_blank");
                // Get out of Gmail's img resize dialog
                $composeContainer.each(simulate_click);
              }
            }
            if ($clickedTarget.is("img")) {
              var src = $clickedTarget.attr("src");
              if (src && src.startsWith("https://b4g.baydin.com/calendar/availabilityimage")) {
                e.preventDefault();
                src = src.replace("availabilityimage", "availabilityimageclick")
                window.open(src, "_blank");
                // Get out of Gmail's img resize dialog
                setTimeout(function(){
                  $composeContainer.each(simulate_click);
                }, 100);
              }
            }
          })
        }

        var $newSelection = $composeContainer.find("table[name='b4g-bcal-table']").closest('div');
        var selection = window.getSelection();
        var newRange = document.createRange();
        newRange.setStartBefore($newSelection.first()[0]);
        newRange.setEndAfter($newSelection.last()[0]);
        selection.removeAllRanges();
        selection.addRange(newRange);
        selection.collapseToEnd();
        show_dialog_for_deleting_quoted_text_if_necessary($composeContainer);
      },
      error: function(response) {
        $shareFreeBusyMenu.find("button.bcal_share_free_busy_insert_btn").removeAttr("disabled");
      }
    });
  });
}

function show_dialog_for_deleting_quoted_text_if_necessary($composeContainer) {
  var quotedText = $composeContainer.find("*[name='uet']").first().val();
  // workaround for Gmail putting this MLC in quoted text
  var needToBreakQuotes = quotedText.indexOf("View in browser") >= 0;
  var size = (new TextEncoder().encode(quotedText)).length;
  if (size >= 40000) { 
    var message = "The length of this email thread may cause your Magic Live Calendar to be clipped in some email clients. Would you like to remove quoted content to prevent this from happening?";
    track_event([ "bcal", "quoted-text-show-dialog" ]);
    var $dialog = show_dialog(message, "Boomerang for Gmail",
        {
          "Enable": {
            text: "Remove quoted text",
            "class": "b4g-button blue",
            click: function() {
              $(this).dialog("destroy");
              $composeContainer.find(".ajT").click();
              $composeContainer.find(".gmail_quote").remove();
              $composeContainer.find(".gmail_quote").remove();
              if (needToBreakQuotes) {
                var $link = $composeContainer.find("table[name='b4g-bcal-table'] a").first();
                $link.text("View in a browser");
              }
              track_event([ "bcal", "quoted-text-remove" ]);
            }
          },
          "Cancel": {
            text: "Leave it alone",
            "class": "b4g-button grey",
            click: function() {
              $(this).dialog("destroy");
              track_event([ "bcal", "quoted-text-ignore" ]);
            }
          },
        }, {width: 500}
      );
  }
}



/**
 * 17. Boomerang Plan Logic
 */

 /**
 * 17a. Credit Card
 */

/** 
* Determine if we need to show card expiration message
**/
function show_card_expiration_if_necessary() {
    var need_to_show_card_expired = read_from_html5_storage("b4gshowcardexpired") === "true";
    var show_card_expired_after_date = Date.parse(read_from_html5_storage("b4gshowcardexpiredafter")) || Date.today().addDays(-4);
    var last_checked_billing_status_date = Date.parse(read_from_html5_storage("b4glastcheckedbillingstatusdate") || Date.today().addDays(-365));
    if (need_to_show_card_expired &&  (Date.compare( Date.today(), show_card_expired_after_date) > -1))   {
        handle_billing_expiration_screen_logic();
    }
    else if (Date.compare(Date.today(),Date.parse(last_checked_billing_status_date).addDays(5)) > -1) {
        handle_billing_expiration_screen_logic();
    }
}

function handle_billing_expiration_screen_logic(){
    function should_we_make_the_billing_info_server_call(){
        var billingInfoDeployDate = new Date(2013, 3, 17);
        var today = new Date();
        var daysSinceBillingInfoDeployDate = (today - billingInfoDeployDate) / (24 * 60 * 60 * 1000);
        var probability = daysSinceBillingInfoDeployDate / 5;
        return probability > Math.random();
    }

    if (!should_we_make_the_billing_info_server_call()){
        return;
    }

    send_image_request("https://b4g.baydin.com/mailcruncher/checkbillinginfo?guser=" + get_gmail_user(),
        function handle_billing_callback(b4gStatus, url, data){
            var billing_status = b4gStatus;
            write_to_html5_storage("b4glastcheckedbillingstatusdate", Date.today().toString(LOCAL_STORAGE_DATE_STRING_FORMAT));
            if (billing_status === ACCOUNT_NEEDS_CREDIT_CARD_UPDATE)
            {
                show_card_expiration();
                write_to_html5_storage("b4gshowcardexpired", true);
            }
            else if (billing_status === ACCOUNT_IN_GOOD_STANDING)
            {
                write_to_html5_storage("b4gshowcardexpired", false);
            }
            else { // does not have account
                write_to_html5_storage("b4gshowcardexpired", false);
            }
        }
    );
}


/**
 *  Displays a credit card expiration notification.
 */
function show_card_expiration() {
   
    var frameDoc = get_frame();
    var guser = get_gmail_user();
    var b4g_card_expired_bar = $("<div class='b4g_card_expired_bar'><div>Your credit card payment for Boomerang was declined. <strong>Please update your billing information.</strong></div> <div style='height: 50px; line-height: 50px;'><a class='b4g-button red' id='b4g_card_expired_fix' style='display: inline; margin:0px;' target='_blank' href='https://b4g.baydin.com/fixexpiredbilling?guser="+ encodeURIComponent(guser) +"'>FIX THIS</a><a id='billing_expired_snooze'>Remind me later</a><a id='billing_expired_downgrade' style='text-decoration: none;' target='_blank' href='https://b4g.baydin.com/account'>Cancel my subscription</a></div></div>");
    b4g_card_expired_bar.css({
        "padding" : "20px 0px 10px 0px",
        "color" : "#555",
        "background" : "#FFF1A8",
        "border" : "1px solid #EEE",
        "text-align" : "center"
    });
    if($('.b4g_card_expired_bar',frameDoc).length === 0 ){
        $(".aiw",frameDoc).find('.nH').first().show().append(b4g_card_expired_bar);
    }
    $('#billing_expired_snooze', frameDoc).click(function () {
        b4g_card_expired_bar.hide();
        write_to_html5_storage("b4gshowcardexpiredafter", Date.today().addDays(3).toString(LOCAL_STORAGE_DATE_STRING_FORMAT));
        write_to_html5_storage("b4gshowcardexpired", true);    
        track_event([ "credit card expiration", "clicked_RemindLater" ]);       
    });
    $('#b4g_card_expired_fix', frameDoc).click(function(){
        b4g_card_expired_bar.hide();
        write_to_html5_storage("b4gshowcardexpired", true); 
        write_to_html5_storage("b4gshowcardexpiredafter", Date.today().addDays(3).toString(LOCAL_STORAGE_DATE_STRING_FORMAT));
        track_event([ "credit card expiration", "clicked_FixThis" ]);       
    });
    $('#billing_expired_downgrade', frameDoc).click(function () {
        b4g_card_expired_bar.hide();
        write_to_html5_storage("b4gshowcardexpired", false);
        track_event([ "credit card expiration", "clicked_CancelMySubscription" ]);       
    });
    track_event([ "credit card expiration", "show" ]);
}

 /**
 * 17b. Coupon
 */

/**
 *  Displays a coupon notification if necessary.
 */
function show_coupon_notification_if_necessary() {
    var frameDoc = get_frame();
    var guser = get_gmail_user();
    var need_to_show_coupon = read_from_html5_storage("b4gshowcoupon") === "true";
    var last_checked_coupon_status_date = Date.parse(read_from_html5_storage("b4glastcheckedcouponstatusdate") || Date.today().addDays(-365));
    if (need_to_show_coupon){
        show_coupon_notification();
    }
    else if (Date.compare(Date.today(),Date.parse(last_checked_coupon_status_date).addDays(2)) > -1) {
        send_image_request("https://b4g.baydin.com/mailcruncher/checkcouponstatus?guser=" + guser,
            function handle_billing_callback(b4gStatus, url, data){
                write_to_html5_storage("b4glastcheckedcouponstatusdate", Date.today().toString(LOCAL_STORAGE_DATE_STRING_FORMAT));
                var couponStatus = b4gStatus;
                if (couponStatus === ELIGIBLE_FOR_COUPON)
                {
                    write_to_html5_storage("b4gshowcoupon", true);
                    show_coupon_notification();
                }
            }
        );
    }
}

// # note: the current coupon is hard-coded
// it'd be cool if we could fetch the latest coupon from the server!
function show_coupon_notification(){
    var frameDoc = get_frame();
    var guser = get_gmail_user();
    var b4g_coupon_bar = $("<div class='b4g_coupon_bar'>" + 
        "<div style='text-align:right; padding:5px; height:0px;'>" +
            "<span style='text-align:right; cursor:pointer; padding:10px; font-size:1.3em;' class='b4g_coupon_dismiss_forever'>x</span>" +
        "</div>" +
        "<div style='display:inline-block;'>" +
            "<img src='" + B4G_STATIC_FILES_DIRECTORY + "bts_image.png' style='position:relative; top:2px; margin-right:20px'/>" +
        "</div>" +
        "<div style='display:inline-block; text-align:center;'>" +
            "<div style='margin:2px'><strong>Today only! Save 30% off your first year of Boomerang.</strong>*</div>" +
            "<div style='margin:2px'><strong>Use coupon \"back2school\"</strong></div>" +
            "<div>" +
                "<a style='margin-top: 10px;' class='b4g-button green' id='b4g_coupon_buy' >SUBSCRIBE NOW</a>" +
                " <a style='color: #999;' class='b4g_coupon_dismiss_forever'>No thank you. Please go away.</a>" +
            "</div>" +
            "<p style='color: #999;margin:0px; font-size:.7em;'>*New individual subscribers only. Discount applies the first year only.</p>" +
        "</div>" +
    "</div>");
    b4g_coupon_bar.css({
        "color" : "rgb(249,249,249)",
        "background" : "#34383b",
        "padding" : "0px",
        "text-align" : "center",
    });
    if($('.b4g_coupon_bar',frameDoc).length === 0 ){
        $(".aiw",frameDoc).find('.nH').first().show().append(b4g_coupon_bar);
        $('#b4g_coupon_buy', frameDoc).click(function () {
            write_to_html5_storage("b4gshowcoupon", false);
            window.open("https://b4g.baydin.com/subscriptions", "_blank");
            b4g_send_image_request("https://b4g.baydin.com/mailcruncher/clearcouponstatus?guser=" + guser, function(){}, "success"); // dummy callback and success message
            track_event([ "coupon notification", "clicked_buy" ]);
        });
        $('.b4g_coupon_dismiss_forever', frameDoc).click(function () {
            b4g_coupon_bar.hide();
            b4g_send_image_request("https://b4g.baydin.com/mailcruncher/clearcouponstatus?guser=" + guser, function(){}, "success"); // dummy callback and success message
            write_to_html5_storage("b4gshowcoupon", false);
            track_event([ "coupon notification", "clicked_dismiss" ]);
        });
    }
    track_event([ "coupon notification", "show" ]);
}

/**
 * 17c. Plans
 */

function continue_if_on_personal_plan(successCallback, failureCallback){
    _continue_if_on_correct_plan(is_personal_plan, successCallback, failureCallback);
}

function continue_if_on_pro_plan(successCallback, failureCallback){
    _continue_if_on_correct_plan(is_pro_plan, successCallback, failureCallback);
}

function continue_if_on_premium_plan(successCallback, failureCallback){
    _continue_if_on_correct_plan(is_premium_plan, successCallback, failureCallback);
}

// Use cached plan first. If it fails, then do a server call to check
function _continue_if_on_correct_plan(planComparator, successCallback, failureCallback){
    var cachedPlan = get_cached_plan();
    if (cachedPlan && planComparator(cachedPlan)){
        successCallback();
    }
    else{
        call_function_after_logged_in(function(){
            var plan = get_cached_plan();
            if (planComparator(plan)){
                successCallback();
            }
            else{
                failureCallback();
            }
        });
    }
}

function get_cached_plan(){
    var guser = get_gmail_user();
    return read_from_html5_storage("b4g_plan-" + guser);
}

function is_personal_plan(plan){
    return plan && plan !== "basic";
}

function is_pro_plan(plan){
    // also detects pro - trial
    return plan && (plan.indexOf("pro") > -1 || plan === "premium");
}

function is_premium_plan(plan){
    return plan && (plan === "premium");
}

function is_premium_respondable_plan(plan) {
  return plan && (plan === "pro" || plan === "premium");
}

/**
 * 17d. Nag screens
 */

function should_show_new_nag_screens() {
  return true;
}

function nag_screen_new_gmail(b4gStatus) {
  if (should_show_new_nag_screens()) {
    track_event(["new nag screen", "show", String(b4gStatus)]);
    if (b4gStatus === "nag_screen_one"){
        show_nag_dialog("<p style='margin: 15px;'>Boomerang Basic provides 10 credits per month for free, but you can get unlimited access by upgrading your subscription:</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        $(".closeLink").parent().css("margin-top", "6px");
    }
    else if (b4gStatus === "nag_screen_two"){
        show_nag_dialog("<p style='margin: 15px;'>Boomerang Basic provides 10 credits per month for free.</p> <div style='text-align:center;'><img src='" + B4G_STATIC_FILES_DIRECTORY + "coffecup.png' style='margin:0px auto;'/></div> <p style='margin:0 15px 15px;'>For not much more than a trip to Starbucks a month, you can schedule an unlimited number of messages and help us keep Boomerang running.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        $(".closeLink").parent().css("margin-top", "6px");
    }
    else if (b4gStatus === "nag_screen_three"){
        show_nag_dialog("<p style='margin: 15px;'>Boomerang Basic provides 10 credits per month for free. <strong>You just used your last credit.</strong></p>  <p style='margin: 0 15px 15px 15px;'>You can get more free messages by telling others about Boomerang!</p> <p style='text-align: center;'><a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a> <span class='b4g-button blue' id='multi-friend-button'>Invite your contacts</span></p>", false, "No, thanks.");
    }
    else if (b4gStatus === "paywall"){
        show_nag_dialog("<ul style='list-style-type: none;'><li><i>Our dinner's not steak and fondue</i></li><li><i>Instead it's ramen and stew</i></li><li><i>If our users don't buy</i></li><li><i>We'll starve and then die</i></li><li><i>So no more messages for you!</i></li></ul><p style='margin: 0 15px;'>You’ve used all your credits for this month. <span style='color:red;'><strong id='b4g-message-not-scheduled'>Your message was NOT scheduled.</strong></span></p><p style='margin: 5px 0 0 15px;'>Please upgrade your subscription to get unlimited message scheduling.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green gm-signup-button' id='signup-button' target='_blank' style='margin-left: 80px;'>Upgrade Subscription</a> <p style='margin: 5px 0 0 15px;'>You can also refer a friend to earn some message credits. </p><a href='https://b4g.baydin.com/refer' class=' b4g-button dialog-gray' id='refer-button' target='_blank'>Refer a friend</a>" ,false, "<span id='referral_confirm'>No, thanks.</span>");
    }
    else {
        var nag_status = Number.parseInt(b4gStatus) - NAG_SCREEN_REFERRAL;
        var needs_to_tweet = (nag_status & 1) === 0;
        var dialog = "<div id='referral_success'></div><div id='referral_dialog'><p style='margin: 0 0 18px 0;'>Boomerang Basic provides 10 messages per month for free. </p><p>It costs us money to provide Boomerang to you, so to continue scheduling messages, you can either buy a subscription, or <strong>share Boomerang with your followers and earn 25 more credits as thanks.</strong></p> <p class='referral-share-options'><a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a> <span>or</span> ";
        if (needs_to_tweet){
            dialog+=
                "<a class='b4g-button blue' id='tweet-button' target='_blank'>Tweet Now</a>";
        }
        dialog += "</p></div>";
        show_nag_dialog(dialog, false, "<span id='referral_confirm'>No! Give me 1 more message anyway.</span>");
    }
  } else {
    track_event(["old nag screen", "show", String(b4gStatus)]);
    if (b4gStatus === "nag_screen_one"){
        show_nag_dialog("<p style='margin: 15px;'>Hey, did you know that you've already scheduled more than 10 messages with Boomerang this month?</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        $(".closeLink").parent().css("margin-top", "6px");
    }
    else if (b4gStatus === "nag_screen_two"){
        show_nag_dialog("<p style='margin: 15px;'>You have already scheduled beyond the 10 messages Boomerang Basic provides for free.</p> <div style='text-align:center;'><img src='" + B4G_STATIC_FILES_DIRECTORY + "coffecup.png' style='margin:0px auto;'/></div> <p style='margin:0 15px 15px;'>For not much more than a trip to Starbucks a month, you can schedule an unlimited number of messages and help us keep Boomerang running. We've scheduled your message anyway.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        $(".closeLink").parent().css("margin-top", "6px");
    }
    else if (b4gStatus === "nag_screen_three"){
        show_nag_dialog("<p style='margin: 15px;'>You have already scheduled beyond the 10 messages Boomerang Basic provides for free.</p>  <p style='margin: 0 15px 15px 15px;'>You can get more free messages by telling others about Boomerang!</p> <p style='text-align: center;'><a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a> <span class='b4g-button blue' id='multi-friend-button'>Invite your contacts</span></p>", false, "Give me 1 more message!");
    }
    else if (b4gStatus === "paywall"){
        show_nag_dialog("<ul style='list-style-type: none;'><li><i>Our dinner's not steak and fondue</i></li><li><i>Instead it's ramen and stew</i></li><li><i>If our users don't buy</i></li><li><i>We'll starve and then die</i></li><li><i>So no more messages for you!</i></li></ul><p style='margin: 0 15px;'>You've hit your quota of messages for this month. Boomerang Basic provides for 10, but you've scheduled more than 15. <span style='color:red;'><strong>Your message was NOT scheduled.</strong></span></p><p style='margin: 5px 0 0 15px;'>Please upgrade your subscription to get unlimited message scheduling.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green gm-signup-button' id='signup-button' target='_blank' style='margin-left: 80px;'>Upgrade Subscription</a> <p style='margin: 5px 0 0 15px;'>You can also refer a friend to earn some message credits. </p><a href='https://b4g.baydin.com/refer' class=' b4g-button dialog-gray' id='refer-button' target='_blank'>Refer a friend</a>" ,false, "<span id='referral_confirm'>No, thanks.</span>");
    }
    else {
        var nag_status = Number.parseInt(b4gStatus) - NAG_SCREEN_REFERRAL;
        var needs_to_tweet = (nag_status & 1) === 0;
        var dialog = "<div id='referral_success'></div><div id='referral_dialog'><p style='margin: 0 0 18px 0;'>Boomerang Basic provides 10 messages per month for free. You've already scheduled 15 this month.</p><p>It costs us money to provide Boomerang to you, so to continue scheduling messages, you can either buy a subscription, or share Boomerang with your followers and earn 25 more credits as thanks.</p> <p class='referral-share-options'><a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a> <span>or</span> ";
        if (needs_to_tweet){
            dialog+=
                "<a class='b4g-button blue' id='tweet-button' target='_blank'>Tweet Now</a>";
        }
        dialog += "</p></div>";
        show_nag_dialog(dialog, false, "<span id='referral_confirm'>No! Give me 1 more message anyway.</span>");
    }
  }
}

function nag_screen(b4gStatus){
    track_event(["nag screen", "show", String(b4gStatus)]);
    if (browser_name !== "Old Safari"){
        if (b4gStatus === NAG_SCREEN_ONE){
            show_nag_dialog("<p style='margin: 15px;'>Hey, did you know that you've already scheduled more than 10 messages with Boomerang this month?</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        }
        else if (b4gStatus === NAG_SCREEN_TWO){
            show_nag_dialog("<p style='margin: 15px;'>You have already scheduled beyond the 10 messages Boomerang Basic provides for free.</p> <div style='text-align:center;'><img src='" + B4G_STATIC_FILES_DIRECTORY + "coffecup.png' style='margin:0px auto;'/></div> <p style='margin:0 15px 15px;'>For not much more than a trip to Starbucks a month, you can schedule an unlimited number of messages and help us keep Boomerang running. We've scheduled your message anyway.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a>", false, "Give me 1 more message!");
        }
        else if (b4gStatus === NAG_SCREEN_THREE){
            show_nag_dialog("<p style='margin: 15px;'>You have already scheduled beyond the 10 messages Boomerang Basic provides for free.</p>  <p style='margin: 0 15px 15px 15px;'>You can get more free messages by telling others about Boomerang!</p> <span class='b4g-button green' id='multi-friend-button'>INVITE YOUR CONTACTS</span>", false, "Give me 1 more message!");
        }
        else if (b4gStatus === PAYWALL){
            show_nag_dialog("<ul style='list-style-type: none;'><li><i>Our dinner's not steak and fondue</i></li><li><i>Instead it's ramen and stew</i></li><li><i>If our users don't buy</i></li><li><i>We'll starve and then die</i></li><li><i>So no more messages for you!</i></li></ul><p style='margin: 0 15px;'>You've hit your quota of messages for this month. Boomerang Basic provides for 10, but you've scheduled more than 15. <span style='color:red;'><strong>Your message was NOT scheduled.</strong></span></p><p style='margin: 5px 0 0 15px;'>Please upgrade your subscription to get unlimited message scheduling.</p> <a href='https://b4g.baydin.com/subscriptions' class='b4g-button green gm-signup-button' id='signup-button' target='_blank' style='margin-left: 80px;'>Upgrade Subscription</a> <p style='margin: 5px 0 0 15px;'>You can also refer a friend to earn some message credits. </p><a href='https://b4g.baydin.com/refer' class=' b4g-button dialog-gray' id='refer-button' target='_blank'>Refer a friend</a>" ,false, "<span id='referral_confirm'>No, thanks.</span>");
        }
        else if (b4gStatus >= NAG_SCREEN_REFERRAL){
            var nag_status = b4gStatus - NAG_SCREEN_REFERRAL;
            var needs_to_tweet = (nag_status & 1) === 0;
            var dialog = "<div id='referral_success'></div><div id='referral_dialog'><p style='margin: 0 0 18px 0;'>Boomerang Basic provides 10 messages per month for free. You've already scheduled 15 this month.</p><p>It costs us money to provide Boomerang to you, so to continue scheduling messages, you can either buy a subscription, or share Boomerang with your followers and earn 25 more credits as thanks.</p> <p class='referral-share-options'><a href='https://b4g.baydin.com/subscriptions' class='b4g-button green' id='signup-button' target='_blank'>Upgrade</a> <span>or</span> ";

            if (needs_to_tweet){
                dialog+=
                    "<a class='b4g-button blue' id='tweet-button' target='_blank'>Tweet Now</a>";
            }
            dialog += "</p></div>";
            show_nag_dialog(dialog, false, "<span id='referral_confirm'>No! Give me 1 more message anyway.</span>");
        }
    }
    else{ // Workaround for annoying Safari
        if (b4gStatus === NAG_SCREEN_ONE){
            alert("Hey, did you know that you've already scheduled more than 10 messages with Boomerang this month? That's okay. We've scheduled your message anyway.");
        }
        else if (b4gStatus === NAG_SCREEN_TWO){
            alert("You have already scheduled beyond the 10 messages Boomerang Basic provides for free. For not much more than a trip to Starbucks a month, you can schedule an unlimited number of messages and help us keep Boomerang running. We've scheduled your message anyway. ");
        }
        else if (b4gStatus === NAG_SCREEN_THREE){
            alert("Boomerang Basic provides 10 messages per month for free. You've already scheduled 15 this month. It costs us money to provide Boomerang to you, so to continue scheduling messages, please upgrade your subscription from Boomerang menu at the top right of your Gmail screen. We've scheduled your message anyway.");
        }
        else {
            alert("Our dinner's not steak and fondue. Instead it's ramen and stew. If our users don't buy. We'll starve and then die. So no more messages for you! You've hit your quota of messages for this month. Boomerang Basic provides for 10, but you've scheduled more than 15. Please upgrade your subscription to Boomerang Personal or Boomerang Professional. Your message was NOT scheduled. ");
        }
    }
}

function show_nag_dialog(message, include_ok_button, closeLinkText) {

    if (browser_name === "Old Safari"){
        alert(message);
    }
    else
    {
        var dialog, frameDoc = get_frame();
        $(".dialogdiv").remove();
        if(closeLinkText)
        {
            dialog = "<div class='dialogdiv' style='display:none;'>" +
                message +
                "<span style='float:right; margin:0 15px 0 0;'>" +
                    "<span class='closeLink' style='cursor: pointer; text-decoration: underline;'>"+ closeLinkText + "</span>" +
                "</span>" +
            "</div>";
        }
        else
        {
            dialog = "<div class='dialogdiv' style='display:none;'>"+ message+"</div>";
        }
        $("body", frameDoc).append($(dialog));

        if (message.toLowerCase().indexOf("invite your contacts") !== -1) {
            $('#multi-friend-button').click(function () { 
                track_event(["multi-friend-selector", "click", "nag screen"]);
                call_contacts_function_after_logged_in(show_multi_friend_dialog); 
            });
        }
        $("#tweet-button").click(b4g_tweet);
        
        var dialogParams = {
                title: 'Boomerang for Gmail',
                modal: true,
                closeOnEscape: true,
                width: 370
            };
        if (include_ok_button){
            dialogParams["buttons"] = {
                "Ok": {
                    text: 'OK Fine!',
                    'class': 'b4g-button dialog-gray',
                    click : function() { $(this).dialog("destroy"); }
                }
            };
        }
        $(".dialogdiv",frameDoc).dialog(dialogParams);
        $('.closeLink').click(function () {
            $('.dialogdiv').dialog('close');
        });

        if(which_gmail() === NEW_GMAIL) {
            $(".dialogdiv").parent().addClass("gm-customize-modal gm-nag-modal");
        }

        fix_all_dialog_links();
    }
}

function show_multi_friend_dialog() {
    var frameDoc = get_frame();
    $(".dialogdiv").remove();

    var multiFriendDialog = "<div class='dialogdiv multi-friend-content' style='display:none'>" +
                            "<div class='multi-friend-load' style='text-align:center; padding: 20px;'>" +
                                "<img src='https://b4g.baydin.com/site_media/bookmarklet/auth-loader.gif' style='position:absolute; top: 50px;'/>" +
                            "</div>" +
                            "<div class='multi-friend-main' style='display:none;'>" +
                                "<div class='multi-friend-max-num' style='padding:8px 0 0 0; width:100%; color:#b93f24; text-align:center;font-size: 14px;display: none;'>You may send invites to up to 200 friends.</div>" +
                                "<div style='padding: 8px 0px 0px 0px;'>" +
                                    "<input type='text' class='multi-friend-search' placeholder='Search by name, email, or company'/>" +
                                "</div>" +
                                "<div id='multi-friend-list'>" +
                                    "<b class='multi-friend-contacts-non-found' style='display:none;'>No contacts found.</b>" +
                                    "<div id='most-contact-container' style='display:none;'>" +
                                        "<div class='top-of-list multi-friend-list-item'>" +
                                            "<input type='checkbox' value='blank' class='multi-friend-select-all recommended-contacts' style='margin: 3px 10px 3px 0.5ex;' checked/><b>Recommended Contacts (<span class='multi-friend-most-contacted-count'></span>)</b>" +
                                        "</div>" +
                                        "<div id='multi-friend-most-contacted'>" +
                                        "</div>" +
                                    "</div>" +
                                    "<div id='all-contact-container' style='display:none;'>" +
                                        "<div class='top-of-list multi-friend-list-item'>" +
                                            "<b style='margin: 3px 10px 3px 27px;'>Other Contacts (<span class='multi-friend-contacts-count'></span>)</b>" +
                                        "</div>" +
                                        "<div id='multi-friend-contacts'>" +
                                        "</div>" +
                                    "</div>" + 
                                "</div>" +
                                "<div class='multi-friend-lower-portion'>" +
                                    "<div class='multi-friend-credit-count' style='vertical-align: middle; padding-bottom: 15px;'>"+
                                        "<b>Message Credits Earned: <span id='multi-friend-credit-count-value'>0</span></b>" +
                                    "</div>" +
                                    "<div class='multi-friend-credit-help' style='vertical-align: middle; padding-bottom: 15px;'>"+
                                        "You receive 1 message credit for each person you email to join Boomerang. If they download Boomerang, you will earn 10+ credits and a chance to win a Kindle Fire!" +
                                    "</div>" +
                                    "<div>" +
                                        "<input type='button' class='b4g-button green' value='INVITE CONTACTS' id='multiInvitesSubmit' style='font-size:13px;padding: 7px 16px;margin:0 0 3px 0;'/>" +
                                        "<input type='button' class='b4g-button' value='CANCEL' id='multiInvitesCancel' style='font-size:13px;padding: 7px 16px;margin:0 0 3px 10px;'/>" +
                                    "</div>" + 
                                "</div>" +
                            "</div></div>";
                                
    $("body", frameDoc).append($(multiFriendDialog));
    
    $(".dialogdiv", frameDoc).dialog({
        resizable: false,
        modal: true,
        position: ["center", 75],
        closeOnEscape: true,
        width: 500,
        dialogClass: 'multi-friend',
        title: "Invite your contacts to Boomerang for Gmail",
    });

    $.ajax({
        type: "GET",
        dataType: "json",
        position: ["center", 75],
        xhr: xhr_with_credentials,
        url: "https://b4g.baydin.com/getcontactslist?guser=" + encodeURIComponent(GMAIL_USER),
        success: function (data)
        {
            if (data["rec"].length <= 0) 
            {
                track_event(["multi-friend-selector", "error", "no recommended contacts"]);
                $('.multi-friend-load', frameDoc).text("It doesn't look like you have any contacts!");
                setTimeout(function() {
                    $(".dialogdiv").dialog("close");
                }, 3000);
                return;
            }
            
            var num_contacts = data["rec"].length + data["other"].length;
            var recommended_length = data["rec"].length;
            var other_length = data["other"].length;
            
            add_contacts_to_list ($("#multi-friend-most-contacted", frameDoc), data["rec"], "recommendedContactsCheck");
            $(".multi-friend-most-contacted-count", frameDoc).text(data["rec"].length);
            $("#most-contact-container", frameDoc).show();          
            
            add_contacts_to_list ($("#multi-friend-contacts", frameDoc), data["other"], "otherContactsCheck");
            $(".multi-friend-contacts-count", frameDoc).text(0);
            $(".otherContactsCheck", frameDoc).parent().hide();

            $(".multi-friend-main", frameDoc).show();
            $(".multi-friend-load", frameDoc).hide();
            $(".b4g-ui-dialog-titlebar-close", frameDoc).hide();
            
            /***************************** 
            * ATTACH LISTENERS TO DIALOG 
            ******************************/
            
            /* Contacts Search */
            $('.multi-friend-search', frameDoc).keyup(function(event) {
                var current = $('.multi-friend-search', frameDoc).val().toLowerCase();
                
                if (current) 
                {
                    var count = 0;
                    $('#all-contact-container', frameDoc).show();
                    $('.top-of-list', frameDoc).hide();
                    
                    $('.contact-info', frameDoc).each(function() {
                        if ($(this).text().toLowerCase().indexOf(current) >= 0)
                        {
                            $(this).parent('.contact', frameDoc).show();
                            count++;
                        }
                        else
                        {
                            $(this).parent('.contact', frameDoc).hide();
                        }
                    });
                    
                    if (!count)
                    {
                        $('.multi-friend-contacts-non-found', frameDoc).show();
                    }
                    else 
                    {
                        $('.multi-friend-contacts-non-found', frameDoc).hide();
                    }
                } 
                else 
                {
                    $('.top-of-list', frameDoc).show();
                    $(".recommendedContactsCheck", frameDoc).parent().show();
                    
                    var other_checked = $(".otherContactsCheck:checked", frameDoc);
                    if (other_checked.size() > 0)
                    {
                        other_checked.parent().addClass("searchedAndFoundContact", frameDoc);
                        $(".otherContactsCheck:not(:checked)", frameDoc).parent().hide();
                        $(".multi-friend-contacts-count", frameDoc).text($(".searchedAndFoundContact", frameDoc).size());
                        
                        $(".searchedAndFoundContact", frameDoc).show();
                    }
                    else if ($(".searchedAndFoundContact", frameDoc).size() <= 0) 
                    {
                        $('#all-contact-container', frameDoc).hide();
                    }
                    else
                    {
                        $(".otherContactsCheck", frameDoc).parent().hide();
                        $(".searchedAndFoundContact", frameDoc).show();
                    }
                }
            });
            
            /* Potential Credit Count when Contact Checked */
            $(".multiFriendCheck", frameDoc).change(function() {
                var count = $(".multiFriendCheck:checked", frameDoc).size();
                
                if (count >= 200) {
                    $(".multiFriendCheck:not(:checked)", frameDoc).attr("disabled", "disabled");
                    $(".multi-friend-max-num:not(:visible)", frameDoc).show();
                    $(".b4g-ui-dialog-title", frameDoc).text("Invite your contacts to Boomerang for Gmail (" + count + " selected)");
                }
                else if (count >= 190) {
                    $(".multi-friend-max-num:not(:visible)", frameDoc).show();
                    $(".b4g-ui-dialog-title", frameDoc).text("Invite your contacts to Boomerang for Gmail (" + count + " selected)");
                }
                else if (count === 0) {
                    $(".b4g-ui-dialog-title", frameDoc).text("Invite your contacts to Boomerang for Gmail");
                }
                else {
                    $(".multi-friend-max-num:visible", frameDoc).hide();
                    $(".multiFriendCheck:not(:checked) :disabled", frameDoc).removeAttr("disabled");
                    $(".b4g-ui-dialog-title", frameDoc).text("Invite your contacts to Boomerang for Gmail (" + count + " selected)");
                }

                $("#multi-friend-credit-count-value", frameDoc).text(count);
            });
            
            /* Select/Deselect All - Triggers "change" to update UI */
            $(".multi-friend-select-all", frameDoc).change(function(){
                var count = $(".multiFriendCheck:checked", frameDoc).size();
                
                if ($(this).is(":checked"))
                {
                    $(".recommendedContactsCheck:not(:checked)", frameDoc).slice(0, 200-count).attr("checked", "checked");
                    $(".multiFriendCheck", frameDoc).trigger("change"); 
                    return;
                }
                $(".recommendedContactsCheck:checked", frameDoc).removeAttr("checked");
                $(".multiFriendCheck", frameDoc).trigger("change"); 
            });

            $(".multi-friend-select-all", frameDoc).trigger("change");
            
            /* Submut button that sends the emails to backend for emailing */
            $("#multiInvitesSubmit", frameDoc).click(function() {
                track_event(["multi-friend-selector", "send emails"]);

                var emails = [];
                $('.multiFriendCheck:checked', frameDoc).each(function() {
                    emails.push($(this).val());
                });

                call_function_after_logged_in(function(){
                  send_multi_friend_email_invites(frameDoc, emails.join(", "), REFERRAL_SUBJ, REFERRAL_BODY);
                })
            });
            
            /* Cancel closes the dialog */
            $("#multiInvitesCancel", frameDoc).click(function() {
                track_event(["multi-friend-selector", "close"]);
                $(".dialogdiv").dialog("close");
            });
        },
        error: function (xhr, status, error) {
            $(".dialogdiv").dialog("close");
            if (xhr.responseText === "revoked") {
                track_event(["multi-friend-selector", "error", "OAuth keys revoked"]);
                call_contacts_function_after_logged_in(show_multi_friend_dialog);
            }
            else if (xhr.responseText === "invalid email") {
                track_event(["multi-friend-selector", "error", "invlaid email"]);
                show_dialog("Attempt failed: Boomerang cannot identify your email. Contact support@baydin.com for help resolving the issue.");
            }       
            else {
                track_event(["multi-friend-selector", "error", xhr.responseText]);
                show_dialog("Something went wrong. Reload the page and try again.");
            }
        }
    });
}

function send_multi_friend_email_invites (frame, addresses, subject, body) {
    var EMAIL_REGEX = /[a-zA-Z0-9\._+-]+@[a-zA-Z0-9\.-]+\.[a-z\.A-Z]+/g;
    
    var matches = addresses.toLowerCase().match(EMAIL_REGEX);
    if (matches == null){
        alert("Please select at least one email address.");
        return;
    }
    
    document.body.style.cursor = 'wait';
    $.ajax({
        url: "https://b4g.baydin.com/sendreferralemailinvitations",
        data: {"addresses":addresses, "subject":subject, "body":body},
        type: "POST",
        xhr: xhr_with_credentials,
        success: function (data) {
            document.body.style.cursor = 'default';
            
            $(".multi-friend-main", frame).hide();
            $(".multi-friend-load").show().html("<h2>" + data + "</h2>");
            
            window.setTimeout(function () { $(".dialogdiv", frame).dialog("close"); }, 2000);
        },
        error: function () {
            document.body.style.cursor = 'default';
            alert("There was an error sending out your emails. Try again.");
        }
    });
} 

function add_contacts_to_list (list, data, className) {
    for (var i=0; i < data.length; i++){
        var entry = "<span class='contact-info'>" + escapeHtml(data[i].name) + " &lt;" + escapeHtml(data[i].email)+ "&gt;</span>";
        var emailCheck = "<div class='contact multi-friend-list-item'>" +
                        "<input type='checkbox' value='" + escapeHtml(data[i].email) + "' class='multiFriendCheck " + className + "'/>" + entry + "</div>";
        list.append($(emailCheck));
    }
}
function escapeHtml(input) {
  return input.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}


function send_access_request(url, callback, data) {
    $.ajax({
        method: "get",
        url: url,
        xhr: xhr_with_credentials,
        success: function(b4g_status) {
            callback(b4g_status, url, data);
        }
    });
} 

function call_contacts_function_after_logged_in(function_to_call){
    var gmailUser = get_gmail_user();
    var url = "https://b4g.baydin.com/contacts/checklogin?guser=" + gmailUser;

    function handle_pre_authenticaton(b4gStatus, url, successMessage)
    {
        if (b4gStatus !== "success")
        {
            unauthenticated_flow(handle_pre_authenticaton_callback, successMessage);
        }
        else
        {
            function_to_call();
        }
    }

    function handle_pre_authenticaton_callback(b4gStatus, url, successMessage)
    {
        if (b4gStatus === "success"){
            function_to_call();
        }
        else if(b4gStatus === "cookies"){
            alert("Attempt failed: " + b4gStatus);
        }
        else{
            if (browser_name === "Firefox"){
                show_dialog(FIREFOX_POP_UP_DIALOG);
                $(".auth-reload").click(function(){
                  window.location.reload();
                })
            }
            else if (browser_name === "Safari" || browser_name === "Old Safari"){
                var overlay;
                if (SAFARI_LOGIN_ALREADY_ATTEMPTED === true) {
                  track_event(["safari login attempt", "13.0.4"]);
                  overlay =$(SAFARI_ITP_WARNING_AUTH_OVERLAY);
                } else {
                  overlay =$(SAFARI_AUTH_OVERLAY);
                }
                $("body").append(overlay);
                $('#safari-boomerang').click(function(){
                    handle_pre_authenticaton(b4gStatus, url, successMessage );
                    overlay.remove();
                    SAFARI_LOGIN_ALREADY_ATTEMPTED = true;
                });
            }
            else
            {
                show_dialog("Attempt failed: " + POSSIBLE_RESPONSES[b4gStatus]);
            }
        }
    }

    function unauthenticated_flow(callback, data){
        var overlay, gmailUser = get_gmail_user();
        if (browser_name === "Chrome" || browser_name === "Opera" || browser_name === "Edge"){
          if (browser_name === "Edge") {
            overlay = $(EDGE_OVERLAY);
          }
          else {
            overlay = $(CHROME_OVERLAY);
          }
          setTimeout(display_popup_blocker_instructions, 5000);
        }
        else{
            overlay =$(OTHER_OVERLAY);
        }

        var dialogWidth = 580;
        var dialogHeight = 900;

        var top = 0;
        var left = 0;
        try{
            top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
            left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
        }
        catch(err){
        }

        $("body").append(overlay);
        var authWindow = window.open("https://b4g.baydin.com/contacts/login?guser=" + gmailUser, "", "width=" + dialogWidth +
                ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top + ",left=" + left);
        var id = setInterval(function(){
            if ((!authWindow && browser_name !== "Chrome" && browser_name !== "Opera" && browser_name !== "Edge") || authWindow.closed) {
                overlay.remove();
                clearInterval(id);
                if (browser_name.indexOf("Safari") === -1  && browser_name.indexOf("Firefox") === -1 ){
                    send_access_request("https://b4g.baydin.com/contacts/checklogin?guser=" + gmailUser + "&hasAlreadyAuthenticated=True", callback, data);
                }
                else{
                    send_access_request("https://b4g.baydin.com/contacts/checklogin?guser=" + gmailUser, callback, data);
                }
            }
        }, 100);
    }

    send_access_request(url, handle_pre_authenticaton, "");
}


/**
 * 18. Authentication
 */

 // Side-effects: Ensures the user is logged in and all preferences are synced
function call_function_after_logged_in(function_to_call, on_auth_failure, enforcePaywall, getSettingsPermission, getCalendarPermission, triggerCalendarFTUE){
    function check_login_and_metadata(callback, isSecondTry){
        // 5/23/2014: There is a really weird bug with old browsers
        // This is an extremely hacky workaround, completely unsupported and not reproducible
        function old_call_function_after_logged_in(e,t){function i(t,n,r){if(t===UNAUTHENTICATED_RESPONSE){o(s,r)}else if(t===SUCCESS){e()}else if(t===PAYWALL){nag_screen(t)}}function s(n,r,s){if(n===SUCCESS){e();show_card_expiration_if_necessary()}else if(n===PAYWALL){nag_screen(n)}else if(n===THIRD_PARTY_COOKIES){show_dialog("Attempt failed: "+POSSIBLE_RESPONSES[n]);if(t){t("Failed to authenticate.")}}else{if(browser_name==="Firefox"){show_dialog(FIREFOX_POP_UP_DIALOG)}else if(browser_name==="Safari"||browser_name==="Old Safari"){var o=$(SAFARI_AUTH_OVERLAY);$("body").append(o);$("#safari-boomerang").click(function(){i(n,r,s);o.remove()})}else{show_dialog("Attempt failed: "+POSSIBLE_RESPONSES[n]);if(t){t("Failed to authenticate.")}}}}function o(e,t){var n,r=get_gmail_user();if(browser_name==="Chrome"){n=$(CHROME_OVERLAY);setTimeout(display_popup_blocker_instructions,5e3)}else{n=$(OTHER_OVERLAY)}var i=800;var s=450;var o=0;var u=0;try{o=window.screenY+Math.max(0,Math.floor(($(window).height()-s)/2));u=window.screenX+Math.max(0,Math.floor(($(window).width()-i)/2))}catch(a){}$("body").append(n);var f=window.open("https://b4g.baydin.com/mailcruncher/login?guser="+r,"","width="+i+",height="+s+",location=1,status=1,resizable=1,top="+o+",left="+u);var l=setInterval(function(){if(!f&&browser_name!=="Chrome"||f.closed){n.remove();clearInterval(l);if(browser_name.indexOf("Safari")===-1&&browser_name.indexOf("Firefox")===-1){send_image_request("https://b4g.baydin.com/mailcruncher/checklogin?guser="+r+"&hasAlreadyAuthenticated=True",e,t)}else{send_image_request("https://b4g.baydin.com/mailcruncher/checklogin?guser="+r,e,t)}}},100)}var n=get_gmail_user();var r="https://b4g.baydin.com/mailcruncher/checklogin?guser="+n;send_image_request(r,i,"")}

        var guser = get_gmail_user();
        var data = {"guser": guser};
        data["includecsrf"] = "True";
        if (isSecondTry){
            data["hasAlreadyAuthenticated"] = "True";
        }
        if (getCalendarPermission) {
          data["getCalendarData"] = "True"
        }
        if (triggerCalendarFTUE) {
          data["triggerCalendarFTUE"] = "True"
        }

        $.ajax({
            url: "https://b4g.baydin.com/mailcruncher/checklogin2",
            data: data,
            type: "GET",
            xhr: xhr_with_credentials,
            complete: function(data) {
              CalendarLoginInProgress = false;
            },
            success: function (data) {
                var csrftoken = data["csrftoken"];
                function csrfSafeMethod(method) {
                  // these HTTP methods do not require CSRF protection
                  return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
                }
                $.ajaxSetup({
                  beforeSend: function(xhr, settings) {
                    if (!csrfSafeMethod(settings.type) && csrftoken) {
                      xhr.setRequestHeader('X-CSRFToken', csrftoken);
                    }
                  },
                });

                var status = data["status"];
                var plan = data["plan"];
                if (plan != null && plan != "none") {
                    write_to_html5_storage("b4g_plan-" + guser, plan);
                }
                if (SAW_OAUTH_FLOW_AS_NEW_USER) {
                    track_event([ "oauth-flow", "complete", "new_user"]);
                    track_event(["automatic-oauth-dialog", "oauth-granted"]);
                    SAW_OAUTH_FLOW_AS_NEW_USER = false;
                }
                var preferences = data["preferences"];
                if (preferences != null) {
                    write_to_html5_storage("b4g_preferences-" + guser, JSON.stringify(preferences));
                }
                var respondableSettings = data["respondable"];
                if (respondableSettings != null) {
                    write_to_html5_storage("b4g_respondable-" + guser, JSON.stringify(respondableSettings));
                }
                var calendarSettings = data["calendarResponse"]
                if (calendarSettings != null) {
                  CalendarSettings = calendarSettings;
                }

                // Tracking user's path to installing extension
                track_user_install_path_if_necessary();

                callback(status);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
              if (XMLHttpRequest.readyState == 0) {
                // Network error (i.e. connection refused, access denied due to CORS, etc.)
                show_dialog("Boomerang is not able to connect to our servers. Please check your firewall settings or your internet connection. In case of a server outage, we will post status updates via @boomerang on Twitter.");
                on_auth_failure();
              } else {
                // 5/23/2014: There is a really weird bug with old browsers
                // This is an extremely hacky workaround
                // do not expect correct behavior. we just have paying users who need at least something to work.
                write_to_html5_storage("b4g_plan-" + guser, "pro - trial");
                old_call_function_after_logged_in(function_to_call, on_auth_failure);
                track_event([ "dev", "checkloginerror", browser_name ]);
                console.log(get_gmail_user());
              }
            }
        });
    }

  function handle_pre_authenticaton(b4gStatus)
  {
    if (b4gStatus === "out-of-date") {
      show_dialog("We've updated Boomerang behind the scenes, but your browser is caching the old version. Please reload Gmail and try again.")
    }
    else if (b4gStatus === "unauthenticated")
    {
      unauthenticated_flow(handle_pre_authenticaton_callback);
    }
    else if(b4gStatus === "success" || (b4gStatus === "paywall" && !enforcePaywall))
    {
      function_to_call();
      show_card_expiration_if_necessary();
    }
    else if (b4gStatus === "paywall")
    {
      nag_screen_new_gmail(b4gStatus);
      if(on_auth_failure) {
        on_auth_failure();
      }
    }
  }

  function handle_pre_authenticaton_callback(b4gStatus)
  {
    if (b4gStatus === "success" || (b4gStatus === "paywall" && !enforcePaywall)){
      function_to_call();
      show_card_expiration_if_necessary();
    }
    else if (b4gStatus === "paywall"){
      nag_screen_new_gmail(b4gStatus);
      if(on_auth_failure) {
        on_auth_failure();
      }
    }
    else if(b4gStatus === "cookies"){
      track_event([ "oauth-flow", "third-party-cookies-error", gmail_user_is_new() ]);
      show_dialog("Attempt failed: " + POSSIBLE_RESPONSES[THIRD_PARTY_COOKIES]);
      if(on_auth_failure) { on_auth_failure("Failed to authenticate."); }
      console.log(get_gmail_user());
    }
    else if(b4gStatus === "declined"){
      var retryFunction = function(){
        call_function_after_logged_in(function_to_call, on_auth_failure, enforcePaywall, getSettingsPermission, getCalendarPermission);
      }
      show_oauth_declined_message(retryFunction, getCalendarPermission);
      if(on_auth_failure) {
        on_auth_failure();
      }
    }
    // B4G-2384: ab test for enforcing all permissions. always show full oauth-declined message
    else if(b4gStatus === "declined-all"){
      var retryFunction = function(){
        call_function_after_logged_in(function_to_call, on_auth_failure, enforcePaywall, getSettingsPermission, getCalendarPermission);
      }
      show_oauth_declined_message(retryFunction, true);
      if(on_auth_failure) {
        on_auth_failure();
      }
    }
    else{
      if (browser_name === "Firefox"){
        show_dialog(FIREFOX_POP_UP_DIALOG);
        $(".auth-reload").click(function(){
          window.location.reload();
        })
      }
      else if (browser_name === "Safari" || browser_name === "Old Safari"){
        var overlay;
        if (SAFARI_LOGIN_ALREADY_ATTEMPTED === true) {
          track_event(["safari login attempt", "13.0.4"]);
          overlay =$(SAFARI_ITP_WARNING_AUTH_OVERLAY);
        } else {
          overlay =$(SAFARI_AUTH_OVERLAY);
        }
        $("body").append(overlay);
        $('#safari-boomerang').click(function(){
          handle_pre_authenticaton(b4gStatus);
          overlay.remove();
          SAFARI_LOGIN_ALREADY_ATTEMPTED = true;
        });
      }
      else
      {
        show_dialog("Attempt failed: Failed to authenticate");
        console.log(get_gmail_user());
        if(on_auth_failure) { on_auth_failure("Failed to authenticate."); }
      }
    }
  }

  function unauthenticated_flow(callback){
    var overlay, gmailUser = get_gmail_user();
    if (browser_name === "Chrome" || browser_name === "Opera" || browser_name === "Edge"){
      if (browser_name === "Edge") {
        overlay = $(EDGE_OVERLAY);
      }
      else {
        overlay = $(CHROME_OVERLAY);
      }
      setTimeout(display_popup_blocker_instructions, 5000);
    }
    else{
      overlay =$(OTHER_OVERLAY);
    }

    var dialogWidth = 580;
    var dialogHeight = 900;

    var top = 0;
    var left = 0;
    try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
    }
    catch(err){
    }

    $("body").append(overlay);
    var authUrl = "https://b4g.baydin.com/mailcruncher/login?guser=" + gmailUser;
    if (getSettingsPermission) {
      authUrl += "&getSettingsPermission=True";
    }
    if (getCalendarPermission) {
      authUrl += "&getCalendarPermission=True";
    }
    track_event([ "oauth-flow", "login", gmail_user_is_new() ]);
    track_event(["automatic-oauth-dialog", "login-attempt"]);
 
    if (gmail_user_is_new() == "new_user") {
      SAW_OAUTH_FLOW_AS_NEW_USER = true;
    }
    var authWindow = window.open(authUrl, "", "width=" + dialogWidth +
        ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top + ",left=" + left);
    var id = setInterval(function(){
      if ((!authWindow && browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || authWindow.closed) {
        overlay.remove();
        clearInterval(id);
        if (browser_name.indexOf("Safari") === -1  && browser_name.indexOf("Firefox") === -1 ){
          check_login_and_metadata(callback, true);
        }
        else{
          check_login_and_metadata(callback, false);
        }
      }
    }, 100);
  }

  check_login_and_metadata(handle_pre_authenticaton, false);
}

function track_user_install_path_if_necessary() {
  guser = get_gmail_user();
  userSegmentStorageLocation = "b4g-user-segment-" + guser;
  acquisitionChannelStorageLocation = "b4g-acquisition-channel-" + guser;
  referringFeatuireStorageLocation = "b4g-referring-feature-" + guser;
  adSourceStorageLocation = "b4g-ad-source-" + guser;

  function send_install_path_tracking_request(userSegment, acquisitionChannel, referralSource, adSource) {
    var postData = {};
    if (userSegment && userSegment != "undefined") {
      postData['userSegment'] = userSegment;
    }
    if (acquisitionChannel && acquisitionChannel != "undefined") {
      postData['acquisitionChannel'] = acquisitionChannel;
    }
    if (referralSource && referralSource != "undefined") {
      postData['referralSource'] = referralSource;
    }
    if (adSource && adSource != "undefined") {
      postData['adSource'] = adSource;
    }
    $.ajax({
      url: "https://b4g.baydin.com/mailcruncher/savefunneldata",
      type: "POST",
      data: postData,
      xhr: xhr_with_credentials,
      success: function(response) {
        var status = response["status"];
        if (status === "success") {
          localStorage.removeItem(userSegmentStorageLocation);
          localStorage.removeItem(acquisitionChannelStorageLocation);
          localStorage.removeItem(referringFeatuireStorageLocation);
          localStorage.removeItem(adSourceStorageLocation);
        }
      }
    });
  }

  var userSegmentToSave = null;
  var acquisitionChannelToSave = null;
  var referralSourceToSave = null;
  var adSourceToSave = null;
  if (read_from_html5_storage(userSegmentStorageLocation)) {
    userSegmentToSave = read_from_html5_storage(userSegmentStorageLocation);
  }
  if (read_from_html5_storage(acquisitionChannelStorageLocation)) {
    acquisitionChannelToSave = read_from_html5_storage(acquisitionChannelStorageLocation);
  }
  if (read_from_html5_storage(referringFeatuireStorageLocation)) {
    referralSourceToSave = read_from_html5_storage(referringFeatuireStorageLocation);
  }
  if (read_from_html5_storage(adSourceStorageLocation)) {
    adSourceToSave = read_from_html5_storage(adSourceStorageLocation);
  }
  if (userSegmentToSave || acquisitionChannelToSave || referralSourceToSave || adSourceToSave) {
    send_install_path_tracking_request(userSegmentToSave, acquisitionChannelToSave, referralSourceToSave, adSourceToSave);
  }
}

function show_oauth_declined_message(retryFunction, getCalendarPermission) {
  var oauthWindow;
  var addCalendarOauthUrl = "https://b4g.baydin.com/calendar/addcalendaroauth?guser=" + get_gmail_user();
  var message = "" +
    "<div>Boomerang requires you to grant permission to access your account in order to operate.</div>" +
      '<div>' +
          '<img style="float:left;" height="32" width="32" src="https://b4g.baydin.com/site_media/img/ico_GMail.png">' +
          '<div style="margin: 13px 0px 0px 50px;position: relative;top: 3px;">' +
              '<div style="font-weight:bold;">We ask for the ability to read, send, and delete email in order to do things like:</div>' +
              '<ul style="position: relative;left: -14px;margin-top: 10px;">' +
                  '<li style="margin: 5px 0px;">Schedule messages to send later or send on a recurring basis</li>' +
                  '<li style="margin: 5px 0px;">Send meeting reminder emails on your behalf</li>' +
                  '<li style="margin: 5px 0px;">Check to see if an email has received a response, so we can remind you</li>' +
                  '<li style="margin: 5px 0px;">Delete copies of drafts Boomerang has already sent</li>' +
              '</ul>' +
          '</div>' +
      '</div>';
  if (getCalendarPermission){
      message += '<div>' +
          '<img style="float:left;" height="32" width="32" src="https://b4g.baydin.com/site_media/img/ico_GCal.png">' +
          '<div style="margin: 13px 0px 0px 50px;position: relative;top: 3px;">' +
              '<div style="font-weight:bold;">We ask for the ability to read, edit, and delete calendar events in order to do things like:</div>' +
              '<ul style="position: relative;left: -14px;margin-top: 10px;">' +
                  '<li style="margin: 5px 0px;">Show you a preview of how a detected event will fit in your schedule</li>' +
                  '<li style="margin: 5px 0px;">Find your free/busy status so we can embed it into an email for you</li>' +
                  '<li style="margin: 5px 0px;">Delete calendar events if you use the “appointment hold” feature</li>' +
              '</ul>' +
          '</div>' +
      '</div>' +
      '<div>' +
          '<img style="float:left;" height="32" width="32" src="https://b4g.baydin.com/site_media/img/ico_GContacts.png">' +
          '<div style="margin: 13px 0px 0px 50px;position: relative;top: 3px;">' +
              '<div style="font-weight:bold;">We ask for the ability to read contact information so we can do things like:</div>' +
              '<ul style="position: relative;left: -14px;margin-top: 10px;">' +
                  '<li style="margin: 5px 0px;">Autocomplete email addresses and names in calendar events you are creating</li>' +
                  '<li style="margin: 5px 0px;">Autocomplete email addresses when editing a scheduled message</li>' +
              '</ul>' +
          '</div>' +
      '</div>';
  }
  message += '<div class=""><strong>We do not sell your data, send spam of any kind, or incinerate your emails.</strong> We only access your data to provide and improve the service. To learn more about how we handle data, please take a look at our <a href="https://www.boomeranggmail.com/privacy.html">privacy policy</a>.</div>';
  track_event(["oauth-flow", "declined-dialog-show", gmail_user_is_new()]);
  track_event(["automatic-oauth-dialog", "declined-dialog-show"]);
  var $dialog = show_dialog(message, "Boomerang for Gmail",
      {
        "Enable": {
          text: "Connect your Account",
          "class": "b4g-button blue",
          click: function() {
            track_event([ "oauth-flow", "declined-dialog-retry", gmail_user_is_new() ]);
            track_event(["automatic-oauth-dialog", "decilned-dialog-retry"]);
            $(this).dialog("destroy");
            retryFunction();
          }
        },
        "Cancel": {
          text: "No, thanks",
          "class": "b4g-button grey",
          click: function() {
            track_event([ "oauth-flow", "declined-dialog-no-thanks", gmail_user_is_new() ]);
            track_event(["automatic-oauth-dialog", "declined-dialog-no-thanks"]);
            $(this).dialog("destroy");
          }
        },
      }, {width: 500}
    );
    $(".b4g-ui-dialog-buttonset").css("float", "right");
}


function call_function_after_paywall_check(function_to_call, on_auth_failure) {
  call_function_after_logged_in(function_to_call, on_auth_failure, true);
}
// Inbox Pause Login: standard login, plus settings permission if they are a brand-new b4g user
// If they are not a brand-new b4g user, they will get the settings permission later, incrementally
function call_function_after_inbox_pause_login(function_to_call, on_auth_failure) {
  call_function_after_logged_in(function_to_call, on_auth_failure, false, true);
}

// `container` parameter is sometimes frameDoc other times it's a composeContainer
function check_authentication_for_send_boomerang_checkbox(container){
  if (!container){
    container = get_frame();
  }
  var checkBox = $('.boomerangSendCheck',container);

  if (checkBox.is(':checked'))
    {
      checkBox.hide();
      checkBox.attr("disabled", true);
      let isWindows = BrowserDetect.OS === 'Windows';
      let isFirefox = browser_name === 'Firefox';
      let spinnerStyle = '';
      if (isWindows) {
        if (isFirefox) {
          spinnerStyle = style='height: 13px; width:13px;'; // Account for firefox's bigger checkbox size
        } else {
          spinnerStyle = style='height: 12px; width:12px;';
        }
      } else {
        spinnerStyle = 'height: 12px; width:12px; margin-bottom:-2px;';
      }
      checkBox.after("<img style='" + spinnerStyle + "' src='" + B4G_STATIC_FILES_DIRECTORY + "checkbox-loader.gif' class='b4g_checkbox_loader' alt='Loading...'>");
      call_function_after_paywall_check(function(){
        checkBox.show();
        checkBox.attr("disabled", false);
        $(".b4g_checkbox_loader").remove();

                if (get_cached_plan() === "premium"){
                    var data = JSON.parse(read_from_html5_storage("b4g_preferences-" + get_gmail_user()));
                    if (data.crm.active && data.crm.bccIncludeWith === "boomerang"){
                        var address = data.crm.bccAddress;
                        insert_bcc_in_compose_container(container, address);
                    }
                }
      }, function(){
        checkBox.show();
        checkBox.attr("disabled", false);
        checkBox.attr("checked", false);
        $(".b4g_checkbox_loader").remove();
        if (email_tracking_is_turned_on(container)){
          var $trackingToggle = $(".b4g-tracking-toggle", container);
          $trackingToggle.trigger("b4g-toggle-state");
        }
      });
    }
}



/*
 * 19. Helper Functions
 */

/*
 * 19a. Date code
 */


function parse_date(inputDate)
{
    var dateString = inputDate.replace(/^\s+|\s+$/g,"").replace(/^in|^In|^IN/, "+");
    var outputDate = Date.parse(dateString.toLowerCase().replace("tomorrow","").replace("tom", ""));

    if( outputDate && 
        outputDate < new Date() && 
        is_a_day_of_the_week(dateString) &&
        dateString.indexOf("yester") === -1 && 
        dateString.indexOf("today") === -1 ) 
    {
        outputDate = outputDate.addDays(7);
    }

    if(dateString.toLowerCase().indexOf("tom") !== -1)
    {
        if (!outputDate){
            outputDate = new Date();
        }
        outputDate = outputDate.addDays(1);
    }

    // If no time is given and date.js doesn't have a time either (default is midnight), default to the current time
    if (outputDate && extractTime(dateString) === null &&
        outputDate.getHours() === 0 && outputDate.getMinutes() === 0){
        var now = new Date();
        outputDate.set({hour: now.getHours(), minute: now.getMinutes()});
    }

    // If the date in the current year is in the past, and no year is specified, add a year
    if( outputDate && 
        outputDate < (new Date()).addDays(-1) && 
        outputDate > (new Date()).addYears(-1) &&
        dateString.indexOf("day") === -1 && 
        dateString.indexOf("now") === -1 && 
        !hasYear(dateString) )
    {
        outputDate = outputDate.addYears(1);
    }

    // Prep datestring for regex comparisons
    dateString = dateString.trim().toLowerCase();

    // Special case - 00:xx pm is invalid
    if(/^00:\d{1,2}\s*p\.?(m\.?)?$/.test(dateString)) {
        return null;
    }

    // Adjust times that have been parsed as in the past, but shouldn't be.
    if(outputDate && outputDate < new Date()) {
        // Times in the format "2:00" without am/pm. Add half-day chunks until the time is in the future.
        if (/^\d{1,2}:\d{1,2}$/.test(dateString))
        {
            outputDate = outputDate.addHours(12);
            if (outputDate < new Date()) {
                outputDate = outputDate.addHours(12);
            }
        // Times ending with pm/am (e.g. 2am or 2:00pm).
        } else if(/^\d{1,2}(:\d{1,2})?\s*(a|p)\.?(m\.?)?$/.test(dateString)) {
            outputDate.addDays(1);
        }
    }

    return outputDate;
}

function is_a_day_of_the_week(inputDate)
{
  var lowercaseInput = inputDate.toLowerCase();
  return (
    lowercaseInput.indexOf("sun") === 0 ||
    lowercaseInput.indexOf("mon") === 0 ||
    lowercaseInput.indexOf("tue") === 0 ||
    lowercaseInput.indexOf("wed") === 0 ||
    lowercaseInput.indexOf("thu") === 0 ||
    lowercaseInput.indexOf("fri") === 0 ||
    lowercaseInput.indexOf("sat") === 0
  );
}

/** Given 2 dates (A,B) in the future, returns a random time between A and B
 * @param beginDate The left bound of valid datetimes to return
 * @param endDate The right bound of valid datetimes to return
 * @return randomDate The randomized datetime
 * @remarks Some sanity checking is done, like the following:
              beginDate is in the past - beginDate defaults to now()
              beginDate is after endDate - beginDate defaults to now()
              endDate is in the past - return now()
 */
function random_time_between(beginDate, endDate)
{
  var currentDate = new Date();
  if(endDate.isBefore(currentDate))
  {
    return currentDate;
  }

  if (beginDate.isBefore(currentDate) || beginDate.isAfter(endDate)) 
  {
    beginDate = currentDate;
  }

  var randomOffset = Math.floor(Math.random()*(endDate - beginDate));
  var randomDate = new Date(beginDate.valueOf() + randomOffset);
  return randomDate;
}


/**
 * Given a Date and a day of the week, returns the next Date that has that day of the week.
 */
function get_date_of_next_weekday(date, dayOfWeek)
{
  var nextWeekday = new Date(date);
  var dayOfWeekLowerCase = $.trim(dayOfWeek).toLowerCase();
  if (dayOfWeekLowerCase == "day after tomorrow"){
    nextWeekday.addDays(2);
  }
  else if (dayOfWeekLowerCase == "tomorrow"){
    nextWeekday.addDays(1);
  }
  else if (dayOfWeekLowerCase == "early next week"){
    nextWeekday.moveToDayOfWeek(0);
    nextWeekday.moveToDayOfWeek(2);
  }
  else if (dayOfWeekLowerCase == "late next week"){
    nextWeekday.moveToDayOfWeek(0);
    nextWeekday.moveToDayOfWeek(4);
  }
  else if (dayOfWeekLowerCase == "today"){
  }
  else{
    if (dayOfWeekLowerCase.indexOf("after next") >= 0){
      dayOfWeekLowerCase = dayOfWeekLowerCase.replace("after next", "");
      nextWeekday.moveToDayOfWeek(0);
      nextWeekday.addDays(7);
    }
    if (dayOfWeekLowerCase.indexOf("next") >= 0){
      dayOfWeekLowerCase = dayOfWeekLowerCase.replace("next", "");
      nextWeekday.moveToDayOfWeek(0);
    }

    var dayOfWeekAbbr = $.trim(dayOfWeekLowerCase).substr(0,3);
    var dayNumber = -1;
    switch(dayOfWeekAbbr)
    {
      case "sun":
        dayNumber = 0;
        break;
      case "mon":
        dayNumber = 1;
        break;
      case "tue":
        dayNumber = 2;
        break;
      case "wed":
        dayNumber = 3;
        break;
      case "thu":
        dayNumber = 4;
        break;
      case "fri":
        dayNumber = 5;
        break;
      case "sat":
        dayNumber = 6;
        break;
      default:
        dayNumber = 0;
        console.log("error in day of week detection");
    }
    nextWeekday.moveToDayOfWeek(dayNumber);
  }
  return nextWeekday;
}


/** Reads a source string to determine whether the event is am/pm. If it cannot be determined,
 * AM is assumed.
 * @param source The string to use in determining AM/PM
 * @return True if it is believed to be AM; false otherwise
 */
function is_AM(source)
{
  var pmRegex = /dinner|evening|night|party/i;
  return !pmRegex.test(source);
}

/** Converts two strings representing date and time to a Date object.
 * Returns null if the strings are not valid dates and times
 * Also takes in the source string to guess am/pm information, if needed.
 * @param dateString A string representing the date
 * @param timeString A string representing the time
 * @param suggestionShouldBeAM boolean for our guess whether converted date should be AM
 * @param emailDate A date relevant to the e-mail (e.g. for received messages,
 * when the e-mail was sent; for drafts, new Date() is probably appropriate)
 * @return A javascript Date object representing the date/time
 */
function convert_to_date(dateString, timeString, suggestionShouldBeAM, emailDate)
{
  // Manipulate the date string for the DateTime parser
  var myDateString = dateString.toLowerCase();

  myDateString = myDateString.replace(/(th|rd|nd|st)/g, "");
  myDateString = myDateString.replace(/augu/g, "august");
  myDateString = myDateString.replace(/september/g, "sep");
  myDateString = myDateString.replace(/sept/g, "sep");

  var containsYear = hasYear(myDateString);

  if (!containsYear) // add the emailDate's year if no year exists
  {
    myDateString += ", " + emailDate.getFullYear();
  }

  // Manipulate the time string for the DateTime parser
  var myTimeString = timeString.toLowerCase();

  myTimeString = myTimeString.replace(/noon/g, "12:00pm");
  myTimeString = myTimeString.replace(/midnight/g, "12:00am");
  myTimeString = myTimeString.replace(/at|to|from|until|around/g, "");
  myTimeString = myTimeString.replace(/[ \.\-\n\r\t]/g, "");
  myTimeString = myTimeString.replace(/o('|’)?clock|ish/g, ":00");
  myTimeString = myTimeString.replace(/(a\.?m\.?)/g, "am");
  myTimeString = myTimeString.replace(/(p\.?m\.?)/g, "pm");

  // If no minutes are given, add :00
  if (/^\d+$/.test(myTimeString))
  {
    myTimeString += ":00";
  }

  // If no am/pm is given, make an educated guess
  if (/^\d?\d:?\d*:?\d*$/.test(myTimeString)) // if no am/pm given
  {
    if (/^(8|9|10|11):?\d*:?\d*$/.test(myTimeString) && suggestionShouldBeAM) // if between 8:00 - 11:00
    {
      myTimeString += "am";
    }
    else
    {
      myTimeString += "pm";
    }
  }

  // Try to create a Date object with the two strings
  // Otherwise, return null
  var myDateTime = Date.parse(myDateString + " " + myTimeString);

  if(myDateTime == null) { return null; }

  // In the rare case that no am/pm is given in the source string and the time given has already passed in
  // the emailDate, add 12 hours.
  if (!/((a|p)\.?m\.?)/i.test(timeString) && timeString && myDateTime < emailDate)
  {
    myDateTime = myDateTime.addHours(12);
  }

  // In the rare case that no year is given in the source string and the date given has already passed in
  // the emailDate's year but is not in the last two weeks of emailDate, add a year.
  if (!containsYear && myDateTime < emailDate && myDateTime.clone().addDays(21) < new Date())
  {
    myDateTime = myDateTime.addYears(1);
  }

  return myDateTime;
}

/**
 * Given a Date object and a time that is to be considered as "morning", returns
 * an array of suggestions for when a message should be sent/returned
 * @param dateTime A date around which suggestions should revolve
 * @param morningOffset A numerical value in the range [0,24) representing the number of
 * hours from 12:00AM to consider to be "morning"
 * @return An array of date objects representing suggestions
 */
function create_magic_suggestions(dateTime, morningOffset)
{
  var suggestions = [];

  //Note: Dates are copied with the Date() constructor to avoid unintended side effects
  //of clearTime, addDays, addHours, and the fact that push() stores a reference.

  //Suggest the given time
  var suggestion = new Date(dateTime);
  suggestions.push(new Date(suggestion));
  //Suggest the previous week
  suggestion = new Date(dateTime).clearTime().addDays(-7).addHours(morningOffset);
  suggestions.push(new Date(suggestion));
  //Suggest the morning before
  suggestion = new Date(dateTime).clearTime().addDays(-1).addHours(morningOffset);
  suggestions.push(new Date(suggestion));
  //Suggest the morning of that time
  suggestion = new Date(dateTime).clearTime().addHours(morningOffset);
  suggestions.push(new Date(suggestion));
  //Suggest the afternoon of that time
  suggestion = new Date(dateTime).clearTime().addHours(12);
  suggestions.push(new Date(suggestion));
  //Suggest the morning of the next day
  suggestion = new Date(dateTime).clearTime().addDays(1).addHours(morningOffset);
  suggestions.push(new Date(suggestion));
  //Suggest the next week
  suggestion = new Date(dateTime).clearTime().addDays(7).addHours(morningOffset);
  suggestions.push(new Date(suggestion));

  return suggestions;
}

/** Takes a source string and performs "magic" date/time parsing, generating an array of recommendations for possible send/return times
 * @param source The source text to search for a date/time pattern
 * @param emailDate The date the current e-mail has been received / will be sent
 * @param morningOffset The number of hours after midnight to interpret as "morning"
 * @return An array of recommended date/times. Will return an empty array if no viable suggestions are found (Blame it on de voodoo, mon')
 */
function voodoo(source, emailDate, morningOffset)
{
  if(source == null) { return []; }

  var dateStr = extractDate(source);
  var timeStr = extractTime(source);
  var originalTimeStr = timeStr;
  var dayOfWeekStr = extractDay(source);
  var suggestionShouldBeAM = is_AM(source);


  if(timeStr == null)
  {
    //Somewhat arbitrary: in the morning, avoiding too many Boomeranged messages "on the hour"
    timeStr = "6:45am";
  }

  var suggestions = [];
  var dateTime = null;

  if(dateStr != null)
  {
    dateTime = convert_to_date(dateStr, timeStr, suggestionShouldBeAM, emailDate);
  }
  else if(dayOfWeekStr != null)
  {
    dateTime = convert_to_date(get_date_of_next_weekday(emailDate, dayOfWeekStr).toString("MMM d yyyy"), timeStr, suggestionShouldBeAM, emailDate);
  }
  if (dateTime != null)
  {

    suggestions = create_magic_suggestions(dateTime, morningOffset);

  }

  return {"suggestions": suggestions, "hasTime": originalTimeStr != null};
}

/**
 * Converts a caption from the Boomerang / Send Later menu into a date/time
 * @param caption The caption to convert to a date/time
 * @param morningOffset The number of hours after midnight to interpret as "morning"
 * @param opt_randomizeTime Optional boolean to control whether the time should
 * be randomized for certain captions such as "tomorrow morning". If not given,
 * defaults to true.
 * @return The date/time represented by the caption
 */
function caption_to_return_time(caption, morningOffset, opt_randomizeTime)
{
  if (typeof opt_randomizeTime === "undefined") {
    opt_randomizeTime = true;
  }
  var returnTime = new Date();
  var timeNow = returnTime.getHours();
  var stillYesterday = false;
  if (timeNow < 4)
  {
    stillYesterday = true;
  }
  var randomMinutes = Math.floor(Math.random() * 30) - 15;
  try{
    switch(caption.toLowerCase())
    {
    case "in 1 hour":
      returnTime = returnTime.addHours(1);
      break;
    case "in 2 hours":
      returnTime = returnTime.addHours(2);
      break;
    case "in 4 hours":
      returnTime = returnTime.addHours(4);
      break;
    case "monday morning":
      returnTime = Date.today().moveToDayOfWeek(1).addHours(morningOffset);
      if (opt_randomizeTime)
      {
        returnTime.addMinutes(randomMinutes);
      }
      if (stillYesterday)
      {
        returnTime = returnTime.addDays(-1);
      }
      break;
    case "tomorrow morning":
      returnTime = Date.today().addDays(1).addHours(morningOffset);

      if (opt_randomizeTime)
      {
        returnTime.addMinutes(randomMinutes);
      }
      if (stillYesterday)
      {
        returnTime = returnTime.addDays(-1);
      }
      break;
    case "tomorrow afternoon":
      returnTime = Date.today().addDays(1).addHours(12);
      if (opt_randomizeTime)
      {
        returnTime.addMinutes(randomMinutes);
      }
      if (stillYesterday)
      {
        returnTime = returnTime.addDays(-1);
      }
      break;
    case "in 1 day":
      returnTime = new Date().addDays(1);
      break;
    case "in 2 days":
      returnTime = new Date().addDays(2);
      break;
    case "in 4 days":
      returnTime = new Date().addDays(4);
      break;
    case "in 1 week":
      returnTime = new Date().addWeeks(1);
      break;
    case "in 2 weeks":
      returnTime = new Date().addWeeks(2);
      break;
    case "in 1 month":
      returnTime = new Date().addMonths(1);
      break;
    case "- by 5pm today":
      returnTime = random_time_between(new Date(), Date.today().addHours(17));
      break;
    case "- within 1 week":
      returnTime = random_time_between(Date.today().addDays(1), Date.today().addDays(7));
      break;
    case "- within 1 month":
      returnTime = random_time_between(Date.today().addDays(7), Date.today().addMonths(1));
      break;
    case "- within 1 year":
      returnTime = random_time_between(Date.today().addMonths(1), Date.today().addYears(1));
      break;
    default:
      returnTime = parse_date(caption);
    }
  }
  catch (err){
    returnTime = caption;
  }
  return returnTime;
}

/**
 * Converts a date object into a human-readable format.
 * @param date The date object to convert
 * @param titleCapitalized A boolean value that determines whether the date should capitalized as a title
 * @return A string representing the formatted date
 */
function make_readable_date(date, titleCapitalized)
{
  if(date == null) { return "Not a valid date/time"; }

  var readableDate = make_readable_date_portion(date, titleCapitalized);
  readableDate += " " + make_readable_time(date, titleCapitalized);
  return readableDate;
}

/**
 * Returns the date portion of a date object in a human-readable format.
 * See make_readable_date.
 */
function make_readable_date_portion(date, titleCapitalized)
{
  if(date.is().today())
  {
    return titleCapitalized ? "Today" : "today";
  }
  else if(Date.today().add(1).days().same().day(date))
  {
    return titleCapitalized ? "Tomorrow" : "tomorrow";
  }
  else
  {
    return (titleCapitalized ? "" : "on ") + date.toString("ddd, MMM d, yyyy");
  }
}

/**
 * Returns the time portion of a date object in a human-readable format.
 * See make_readable_date.
 */
function make_readable_time(date, titleCapitalized)
{
  return (titleCapitalized ? "" : "at ") + date.toString("h:mm tt");
}

function convert_date_to_nth_syntax(date) {
  if (date == null) {
    date = new Date();
  }
  var dayOfMonth = date.getDate();
  var n = Math.floor((dayOfMonth - 1)/7);

  var dayOfWeek = date.getDay();

  // use Python rrule convention
  n += 1;
  if (n == 5) {
    n = -1;
  }
  // use Python datetime convention
  dayOfWeek -= 1;
  if (dayOfWeek == -1) {
    dayOfWeek = 6;
  }

  return {
    "n": n, 
    "weekday": dayOfWeek,
  };
}

function convert_nth_syntax_to_date(n, weekday, start) {
  var dateObject;
  if (start == null) {
    dateObject = Date.today();
  }
  else {
    dateObject = start.clone();
  }
  // parameters in python convention
  switch (n) {
    case 1:
      dateObject = dateObject.first();
      break;
    case 2:
      dateObject = dateObject.second();
      break;
    case 3:
      dateObject = dateObject.third();
      break;
    case 4:
      dateObject = dateObject.fourth();
      break;
    default:
      dateObject = dateObject["final"](); // workaround for the function named "final" breaking our js minifier
  }
  switch (weekday) {
    case 6:
      dateObject = dateObject.sunday();
      break;
    case 0:
      dateObject = dateObject.monday();
      break;
    case 1:
      dateObject = dateObject.tuesday();
      break;
    case 2:
      dateObject = dateObject.wednesday();
      break;
    case 3:
      dateObject = dateObject.thursday();
      break;
    case 4:
      dateObject = dateObject.friday();
      break;
    case 5:
      dateObject = dateObject.saturday();
      break;
    default:
      return null;
  }
  // if the date is in the past, try again with the next month
  if (dateObject < new Date()) {
    dateObject.add(1).month();
    return convert_nth_syntax_to_date(n, weekday, dateObject);
  }
  else {
    return dateObject;
  }
}



/*
 * 19b. Email code
 */

/**
 * Reads all e-mail addresses from a string of text and returns them as a single-space-separated list
 * @param text The string to search
 * @return The list of e-mail addresses
 */
function strip_email_addresses(text)
{
  var emailRegEx = EMAIL_REGEX;
  var matches = text.match(emailRegEx);
  var result = "";
  for(var i=0; matches != null && i<matches.length; i++)
  {
    result += matches[i];
    if(i < matches.length - 1) {
      result += " ";
    }
  }
  return result;
}


function remove_forwarded_quotes(source)
{
  // Remove dates associated with forwarded messages and quoted messages

  var forwardedRegex = /^Subject:/m;
  var forwardedLoc = source.search(forwardedRegex);
  if (forwardedLoc > 0)
  {
    source = source.substring(forwardedLoc);
  }

  var quotedRegex = /Show quoted text/;
  var quotedLoc = source.search(quotedRegex);
  if (quotedLoc > 0)
  {
    source = source.substring(0, quotedLoc);
  }
  return source;
}

// source: http://dreaminginjavascript.wordpress.com/2008/08/22/eliminating-duplicates/
function eliminateDuplicates(arr) {
  var i;
  var len=arr.length;
  var out=[];
  var obj={};

  for (i=0;i<len;i++) {
    obj[arr[i]]=0;
  }
  for (i in obj) {
    if (obj.hasOwnProperty(i)) {
      out.push(i);
    }
  }
  return out;
}

/*
 * 19c. Requests code
 */

function xhr_with_credentials() { // Helper function for making cross-site requests with jquery
  var xhr = $.ajaxSettings.xhr();
  xhr.withCredentials = true;
  return xhr;
}



function send_image_request(url, callback, data) {
  var b4gStatusImage = new Image();

  var d = new Date();
  var uniqueString = "&uniquestring=" + d.getTime();

  b4gStatusImage.onload = function()
  {
    var b4gStatus = b4gStatusImage.width;

    if (b4gStatus >= POSSIBLE_RESPONSES.length && b4gStatus < NAG_SCREEN_REFERRAL)
    {
      b4gStatus = ERROR;
    }

    b4gStatusImage.style.display = 'none';

    callback(b4gStatus, url, data);
  };
  b4gStatusImage.src = url + '&image=True' + uniqueString;
}

/*
 * 19d. Local storage
 */

function write_to_html5_storage(key, value)
{
  value = String(value); // 9/3/21: cast booleans as strings. most likely unneeded but future proof in case browsers decide to support booleans
  if(typeof(localStorage) === "undefined")
  {
    track_event([ "dev", "localStorage error", "not available" ]);
  }
  else
  {
    try
    {
      if(typeof(key) !== "undefined" && key != null)
      {
        localStorage.setItem(key, value);
      }
    }
    catch (e)
    {
      if (e.name === "QUOTA_EXCEEDED_ERR")
      {
        track_event([ "dev", "localStorage error", "over quota" ]);
      }
      else
      {
        track_event([ "dev", "localStorage error", "unexpected error -- " + e.name, e.message ]);
      }
    }
  }
}
function read_from_html5_storage(key)
{
  if(typeof(localStorage) === "undefined")
  {
    //alert("Your browser does not support HTML5 localStorage. How the heck are you using Boomerang?");
    return null;
  }
  else
  {
    try
    {
      return localStorage.getItem(key);
    }
    catch (e)
    {
      //alert("Something went wrong reading from HTML5 Storage. Please let us know at support@baydin.com");
      return null;
    }
  }
}


 // resize delay function.
// ensures that resize callback is only called 500ms after last resize
// http://stackoverflow.com/questions/2854407/javascript-jquery-window-resize-how-to-fire-after-the-resize-is-completed
var b4g_delay = (function(){
  var timer = 0;
  return function(callback, ms){
    clearTimeout (timer);
    timer = setTimeout(callback, ms);
  };
})();

/*
 * 20. Tutorials
 */

/*
 * 20a. FTUEs
 */ 

// Given a response from /checkIfHasSeenAnnouncementsAndFTUEs, update local storage values that indicate whether a user has seen announcements/FTUEs as needed
function updateAnnouncementAndFTUEStates(response) {
  if (response.status !== "success") { return; }

  // Update hasSeenB4GTutorial
  if (response.hasSeenTutorial === true) {
    write_to_html5_storage("hasSeenB4GTutorial", "yes");
  }

  // Update hasSeenIBPTutorialTooltip if the user has either seen the inbox pause ftue or the announcement tooltip
  if (response.hasSeenInboxPauseFTUE === true || response.hasSeenIBPTutorialTooltip === true) {
    write_to_html5_storage("hasSeenIBPTutorialTooltip", "yes");
    // We don't keep a local storage value for hasSeenInboxPauseFTUE
  }

  // Update b4g-has-seen-click-open-tracking-announcement and b4g-has-seen-click-open-tracking-tutorial
  if (response.hasSeenTrackingTutorial === true) {
    write_to_html5_storage("b4g-has-seen-click-open-tracking-announcement", true);
    write_to_html5_storage("b4g-has-seen-click-open-tracking-tutorial", true);
  } else if (response.hasSeenTrackingAnnouncement === true) {
    write_to_html5_storage("b4g-has-seen-click-open-tracking-announcement", true);
  }

  // Update b4g-has-seen-respondable-announcement and respondable settings hasSeenFTUE value
  if (response.hasSeenRespondableFTUE === true) {
    var respondablePreferences = get_respondable_preferences();
    respondablePreferences["hasSeenFTUE"] = true;
    write_to_html5_storage("b4g_respondable-" + get_gmail_user(), JSON.stringify(respondablePreferences));

    write_to_html5_storage("b4g-has-seen-respondable-announcement", true);
  } else if (response.hasSeenRespondableAnnouncementTooltip === true) {
    write_to_html5_storage("b4g-has-seen-respondable-announcement", true);
  }

  // Update b4g_forkie_dismissed local storage value and local variable
  if (response.hasDismissedForkie === true) {
    write_to_html5_storage('b4g_forkie_dismissed_' + get_gmail_user(), "true");
    forkieIsDismissed = true;
  }

  // Update b4g-has-seen-bookable-announcement local storage value
  if (response.hasSeenBookableAnnouncement === true) {
    write_to_html5_storage("b4g-has-seen-bookable-announcement", true);
  }
}

function display_ibp_ftue_tooltip() {
  write_to_html5_storage("hasSeenIBPTutorialTooltip", "yes");

  // Add the tooltip if it doesn't exist already
  if ($('.ibp-ftue-tooltip').length === 0) {
    var $ibpFtueTooltip = $(
      '<div class="T-ays ibp-ftue-tooltip" role="tooltip">' +
        '<div class="T-ays-iP">' +
          '<div class="ibp-ftue-tooltip-text">' +
            '<span class="ibp-ftue-tooltip-continue">Now in Boomerang! Pause incoming emails. Click to learn more.</span> ' +
            '<span class="ibp-ftue-tooltip-close">Close</span>' +
          '</div>' +
        '</div>' +
        '<div class="T-ays-hFsbo T-ays-atB" style="left: 106.328px;">' +
          '<div class="T-ays-atD"></div>' +
          '<div class="T-ays-atC"></div>' +
        '</div>' +
      '</div>'
    );

    $mainButton = $('#ibp-main');
    $mainButton.after($ibpFtueTooltip);

    // Position tooltip correctly:
    try { // two possibilities affecting position: there is a big Compose button, or a tiny Compose button by Inbox
      var top = $("#ibp-main").position().top + 40;
      $ibpFtueTooltip.css("top", String(top) + "px");
    }
    catch(err){
      $ibpFtueTooltip.css("top", "40px");
    }

    $ibpFtueTooltip.find('.ibp-ftue-tooltip-close').first().click(function() {
      close_ibp_ftue_tooltip();
    });

    var $ftueTooltipLearnMore = $ibpFtueTooltip.find('.ibp-ftue-tooltip-continue').first();
    $ftueTooltipLearnMore.click(function() {
      track_event([ "inbox pause ftue", "ftue opened with tooltip click"]);
      $("#ibp-main").click();
      $('.ibp-ftue-tooltip').first().remove();
    });
  }
}

function inject_ibp_ftue_tooltip_if_necessary() {
    // Before we consider showing the announcement tooltip: 3 days should pass since the extension was installed
    var tooltipWakeTime = read_from_html5_storage('b4g_ibp_tooltip_snoozed_until_' + get_gmail_user());
    if (tooltipWakeTime) {
      var tooltipWakeDate = new Date(tooltipWakeTime);
      if (new Date() < tooltipWakeDate) return;
    } else {
      // We consider this to be a new user
      // Set a wake time for the tooltip 3 days from now.  It won't appear until at least then.
      var wakeTime = new Date();
      wakeTime.setHours(wakeTime.getHours() + 72);
      write_to_html5_storage("b4g_ibp_tooltip_snoozed_until_" + get_gmail_user(), wakeTime.toString());
      return;
    }

    var randomNumberBetweenZeroAndTwenty = Math.random() * 20;
    if (randomNumberBetweenZeroAndTwenty > 1) {
      return;
    }

    var hasSeenIBPTutorialTooltip = read_from_html5_storage("hasSeenIBPTutorialTooltip");
    var guser = get_gmail_user();

    if (hasSeenIBPTutorialTooltip == null && guser)
    {
      // Note: specificallyCheckedValue is the specific announcement/ftue we are concerned with checking now (an optional param)
      // If the user hasn't seen the specified announcement/ftue, the server will let us know but will also update the stored value so that the user won't see the announcement/ftue again
      $.ajax({
        method: "GET",
        url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
        data: {
          "guser": guser,
          "specificallyCheckedValue": "hasSeenIBPTutorialTooltip",
        },
        xhr: xhr_with_credentials,
        success: function(response) {
          if (response.status === "success") {
            if (response.hasSeenIBPTutorialTooltip === false) {
              display_ibp_ftue_tooltip();
              // Now that we've displayed the tooltip, update the response value
              // before we pass it to updateAnnouncementAndFTUEStates
              response.hasSeenIBPTutorialTooltip = true;
            }
            // Update local storage states for all announcements and FTUEs
            updateAnnouncementAndFTUEStates(response);

          } else if (response.showCurrentAnnouncementOrFTUE === true) {
            // The user does not exist in the database.  Show the IBP announcement tooltip anyway.
            display_ibp_ftue_tooltip();
          }
        }

      });

    }
}

function close_ibp_ftue_tooltip () {
  track_event([ "inbox pause ftue", "close tooltip"]);
  write_to_html5_storage("hasSeenIBPTutorialTooltip", "yes");
  $('.ibp-ftue-tooltip').first().remove();
}

/* returns true if the IBP ftue was shown.
returns false if he IBP ftue was not shown.
side effect: closes IBP FTUE tooltip if it isn't already closed
*/
function show_ibp_ftue(){
  function close_ibp_ftue() {
    track_event([ "inbox pause ftue", "close"]);
    $('#ibp-ftue-screen').remove();
  }

  function close_ibp_ftue_and_open_ibp() {
    track_event([ "inbox pause ftue", "try now"]);
    $('#ibp-ftue-screen').remove();
    disable_pause_button();
    call_function_after_inbox_pause_login(check_pause_status_before_displaying_pause_dialog, enable_pause_button);
  }

  var buildNavButtons = function(buttons) {
    var $buttonContainer = $("<div class='ibp-ftue-content-buttons'></div>");
    buttons.forEach(function(button) {
      $buttonContainer.append($("<button/>").addClass("ftue-btn")
                            .addClass(button.class || "")
                            .html(button.text)
                            .click(button.onclick));
    });
    return $buttonContainer;
  }

  var actions = {
    next: function() { show_next_screen.call(this, lastScreenSeen + 1) },
    skip: close_ibp_ftue,
    open_ibp: close_ibp_ftue_and_open_ibp
  }

  var defaultButtonSet = [{text: "SKIP", class: "by-button-link", onclick: actions.skip},
                          {text: "NEXT", class: "by-button-primary", onclick: actions.next}];

  var beforeFAQButtonSet = [{text: "CLOSE", class: "by-button-link", onclick: actions.skip},
                            {text: "LEARN MORE", class: "by-button-secondary", onclick: actions.next},
                            {text: "TRY NOW", class: "by-button-primary", onclick: actions.open_ibp}];

  var finalButtonSet = [{text: "CLOSE", class: "by-button-link", onclick: actions.skip},
                        {text: "TRY NOW", class: "by-button-primary", onclick: actions.open_ibp}];



  function show_next_screen(screenNo) {
    track_event([ "inbox pause ftue", "show", String(screenNo) ]);
    var $parent = $("body");

    var $el = $parent.find(".ibp-ftue-content");
    if(!$el.length) {
      var imgSrc = which_gmail() === NEW_GMAIL ? "Right_Inbox-Pause_NewUI@2x.png": "FTUE_IP-Window@2x.png";
      var gmClass = which_gmail() === NEW_GMAIL ? " class='gm-ibp-ftue'": "";
      var $container = $("<div id='ibp-ftue-screen'" + gmClass + "><div class='overlay ibp-overlay-bg'></div><div class='ibp-ftue-content-container'><div class='ibp-ftue-content'><div class='ibp-ftue-content-main'><img class='ibp-ftue-main-image' src ='" + B4G_STATIC_FILES_DIRECTORY + imgSrc + "'></div></div></div>")
                    .appendTo($parent);
      $el = $container.find(".ibp-ftue-content");
    }

    // refresh the buttons and the inner content in preparation for the new screen's overlays/info
    $(".ibp-ftue-content-buttons").remove();
    $(".ibp-ftue-content-overlay").remove();
    $(".ibp-ftue-text-container").remove();

    switch(screenNo) {
      case 1: {
        var $container = $(".ibp-ftue-content-main");
        $container.append("<div class='ibp-ftue-content-overlay ibp-ftue-overlay-1'></div>");
        var $textContent = $("<div class='ibp-ftue-text-container ibp-ftue-text-container-1'></div>")
                    .append("<img class='ibp-ftue-arrow-image' style='padding-top:5px;' src ='" + B4G_STATIC_FILES_DIRECTORY + "FTUE_IP_Arrow_Left.png'>")
                    .append("<span class='ibp-ftue-text-1'>Inbox Pause stops new email from coming into your Inbox until you're ready for it.<br/><br/>" +
                                "<div style='font-size:14px;'>Studies show that checking email only a few times a day reduces stress and boosts productivity." +
                                "<ul>" +
                                    "<li>Remove interruptions so you can finish important projects</li>" +
                                    "<li>Block off times for deep focus work</li>" +
                                    "<li>Reclaim hours of lost productivity </li>" +
                                "</ul>" +
                                "</div>" +
                            "</div>");
        $container.append($textContent);

        var $navButtons = buildNavButtons(defaultButtonSet);

        $el.append($navButtons);
        }
        break;
      case 2: {
        var $container = $(".ibp-ftue-content-main");
        $container.append("<div class='ibp-ftue-content-overlay ibp-ftue-overlay-2'></div>");
        var $textContent = $("<div class='ibp-ftue-text-container ibp-ftue-text-container-2'></div>")
                    .append("<img class='ibp-ftue-arrow-image' style='padding-top:10px;' src ='" + B4G_STATIC_FILES_DIRECTORY + "FTUE_IP_Arrow_Left.png'>")
                    .append("<span class='ibp-ftue-text-2'>Let people know your Inbox is paused</span>");
        $container.append($textContent);

        var $navButtons = buildNavButtons(defaultButtonSet);

        $el.append($navButtons);
        break;
      }
      case 3: {
        if(which_gmail() === NEW_GMAIL) {
          var $image = $(".ibp-ftue-main-image");
          $image.attr("src", B4G_STATIC_FILES_DIRECTORY + "Inbox-Pause_NewUI@2x.png");
        }

        var $container = $(".ibp-ftue-content-main");
        $container.append("<div class='ibp-ftue-content-overlay ibp-ftue-overlay-3'></div>");
        var $textContent = $("<div class='ibp-ftue-text-container ibp-ftue-text-container-3'></div>")
                    .append("<img class='ibp-ftue-arrow-image' style='padding-top:24px;' src ='" + B4G_STATIC_FILES_DIRECTORY + "FTUE_IP_Arrow_Left.png'>")
                    .append("<span class='ibp-ftue-text-3'>Make exceptions for important people and messages</span>");
        $container.append($textContent);

        var $navButtons = buildNavButtons(defaultButtonSet);

        $el.append($navButtons);
        break;
      }
      case 4: {
        if(which_gmail() === NEW_GMAIL) {
          var $image = $(".ibp-ftue-main-image");
          $image.attr("src", B4G_STATIC_FILES_DIRECTORY + "Left_Inbox-Pause_NewUI@2x.png");
        }

        var $container = $(".ibp-ftue-content-main");
        $container.append("<div class='ibp-ftue-content-overlay ibp-ftue-overlay-4'></div>");
        var $textContent = $("<div class='ibp-ftue-text-container ibp-ftue-text-container-4'></div>")
                    .append("<span class='ibp-ftue-text-4'>Get new messages on your schedule</span>")
                    .append("<img class='ibp-ftue-arrow-image' style='padding-top:20px; float:right;' src ='" + B4G_STATIC_FILES_DIRECTORY + "FTUE_IP_Arrow_Right.png'>");
        $container.append($textContent);

        var $navButtons = buildNavButtons(beforeFAQButtonSet);

        $el.append($navButtons);
        break;
      }
      case 5: {
        $(".ibp-ftue-main-image").remove();
        var $container = $(".ibp-ftue-content-main");

        // This screen's styling uses much of the main menu styling, with a modified ibp-menu class (ibp-ftue-faq)
        var $faqContent = $("<div class='ibp-ftue-faq'></div>")
                        .append("<div class='ibp-menu-header' style='padding-top:18px;'>Frequently Asked Questions</div>")
                        .append("<div class='ibp-menu-divider'></div>")
                        .append("<div class='ibp-menu-main' style='width:614px; height: 460px; overflow-y: scroll;'>" +
                                    "<p><strong>How does Inbox Pause actually work? Does Boomerang keep my emails?</strong><br>" +
                                    "Inbox Pause uses the new Gmail Settings API, filters, and the vacation auto-responder to temporarily hide your email from your Inbox and bring them back when you want them. Here's what happens behind the scenes:</p>" +

                                    "<ul>" +
                                    " <li>Inbox Pause creates a label (e.g., \"Inbox-Paused-2018-Jan-01\")</li>" +
                                    " <li>Inbox Pause creates a filter that moves new emails directly to this label, skipping the Inbox</li>" +
                                    " <li>If you have the auto-responder enabled, Inbox Pause will also turn on your vacation responder accordingly.</li>" +
                                    "</ul>" +

                                    "<p>When you click unpause, Boomerang brings all the emails it diverted back to your Inbox. It also gets rid of the filter that hid your incoming messages, removes the label, and if applicable, turns off your vacation responder. That's it! <em>None of the emails you receive while your Inbox is paused are stored by Boomerang</em>.</p>" +

                                    "<p><strong>How does this affect my Boomerang and Send Later messages?</strong><br>" +
                                    "Your send later emails will send as scheduled. Boomeranged emails will come back to your inbox as scheduled but they will not be brought to the top of your Inbox until your Inbox is unpaused.</p>" +

                                    "<p><strong>What if I am expecting some urgent emails? Can I get some emails instantly while my Inbox is " +
                                    "paused?</strong><br>" +
                                    "You can use the delivery exceptions feature to allow certain senders, domains or emails with certain keywords to arrive in your Inbox instantly even when it is paused. This feature is available to users on Pro and Premium plans of Boomerang.</p>" +

                                    "<p><strong>Can I send email while my Inbox is paused?</strong><br>" +
                                    "Inbox Pause does not affect outgoing email, so you can write and send email as usual. </p>" +

                                    "<p><strong>What happens if I need to find a message in my Inbox?</strong><br>" +
                                    "Messages you received before you paused your Inbox will remain visible. Additionally, Inbox Pause does not affect your ability to find emails using the search feature within Gmail. You'll always be able to access your emails using search, and can also always unpause your Inbox temporarily if you need to!</p>" +

                                    "<p><strong>What happens to my email on my phone?</strong><br>" +
                                    "Your Inbox will be paused (and email notifications stopped) across ALL your devices! If you need to unpause your Inbox from your phone, you can. Just click the link included in the email that appears at the top of your Inbox while your Inbox is paused.</p>" +

                                    "<p><strong>Why does using the Inbox Pause feature request Settings permissions?</strong><br>" +
                                    "Boomerang needs access to the Settings features in the Gmail API in order to temporarily hide messages from your Inbox. (More specifically, Inbox Pause relies, in part, on creating filters, which requires this Settings permission.)</p>" +

                            "</div>");

        $container.append($faqContent);
        var $navButtons = buildNavButtons(finalButtonSet);

        $el.append($navButtons);
        break;
      }
      default: {
        close_ibp_ftue();
      }
    }
    lastScreenSeen = screenNo;
  }

  // Make sure that the tooltip is still closed if the user begins the IBP FTUE by clicking on the Pause button
  close_ibp_ftue_tooltip();
  show_next_screen(1); // begin the ftue slideshow
}

function show_tutorial_if_necessary(){
  // Special tutorial suppression for users who saw the scheduling FTUE first
  // We won't allow the FTUE to be shown until a week has passed since the scheduling FTUE was shown
  var announcementWakeTime = read_from_html5_storage('b4g_main_ftue_snoozed_until_' + get_gmail_user());
  if (announcementWakeTime) {
    var announcementWakeDate = new Date(announcementWakeTime);
    if (new Date() < announcementWakeDate) return;
  }

  // part of the suppress tutorial flow
  var needsToSeeB4GTutorial = read_from_html5_storage("needToSeeTutorialLater") == "yes";
  if (needsToSeeB4GTutorial) {
    write_to_html5_storage("needToSeeTutorialLater", "no")
    write_to_html5_storage("hasSeenB4GTutorial", "yes");
    show_welcome_dialog(1);
    return;
  }

  var hasSeenB4GTutorial = read_from_html5_storage("hasSeenB4GTutorial");
  var guser = get_gmail_user();

  if (hasSeenB4GTutorial == null && guser)
  {
    if (read_from_html5_storage("b4gMenuEntries") != null) // If there are custom menu entries, assume that they do not need to see the tutorial
    {
      write_to_html5_storage("hasSeenB4GTutorial", "yes");
    }
    else
    {
      send_image_request("https://b4g.baydin.com/mailcruncher/hasseentutorial?guser=" + encodeURIComponent(guser),check_if_should_show_tutorial_callback, "");
    }
  }

}

function check_if_should_show_tutorial_callback(b4gStatus, url, successMessage){
  write_to_html5_storage("hasSeenB4GTutorial", "yes");

  if (b4gStatus === HAS_NOT_SCHEDULED && browser_name !== "Old Safari")
  {
    display_welcome_screen();
  }
}

/**
 *  Displays a welcome_screen dialog.
 */
 function show_welcome_dialog_old_ftue(screen_no) {
   track_event([ "welcome dialog", "show", String(screen_no) ]);
   var wc_msg = "";
   var wc_msg_text = "";
   switch(screen_no) {
   case 1: {
     wc_msg="<div id='wc_screen'> <div class='wc_header'>Thank you for installing Boomerang.</div> <div class='wc_text'>Let's take you on a tour of Boomerang features inside Gmail.</div> <div class='wc_img'><div style='margin-top: 15px; margin-bottom: 5px;'><span style='margin-left: 100px;'><strong>Return messages to inbox</strong></span><span style='margin-left:100px;'><strong>Schedule messages</strong></span></div><img class='wc_screenshot' width='475px' style='margin-left: 70px;' src='" + B4G_STATIC_FILES_DIRECTORY + "1_ftuepic.png' /></div><div class='wc_pg_no'>1 of 5 <span class='startButton b4g-button red'>START</span><a class='skipButton b4g-button'>SKIP</a> </div></div>";
     wc_msg_text = "This feature is available in Safari versions 5.1 and higher. Please update Safari to use this feature.";
     }
     break;
   case 2: {
     wc_msg="<div id='wc_screen'> <div class='wc_header'>Boomerang</div> <div class='wc_text'>Bring a message back to your inbox when you want it.</div> <div class='wc_img'><p class='wc_img_header'>Clicking on the Boomerang button will allow you to specify the time you want the message back in your inbox.</p><div align='center'><img class='wc_screenshot' height='106px' src='" + B4G_STATIC_FILES_DIRECTORY + "2_boomerangbutton.png' /></div><br/> <a class='wc_video_link' href='https://vimeo.com/594782914' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'> Watch a video to learn more.</a></div><div class='wc_pg_no'>2 of 5 <span class='previousButton b4g-button'>BACK</span><span class='nextButton b4g-button green'>NEXT</span><a class='skipButton b4g-button'>SKIP</a> </div></div>";
     }
     break;
   case 3: {
     wc_msg="<div id='wc_screen'> <div class='wc_header'>Send Later</div> <div class='wc_text'>Schedule a message to be sent anytime as long as it's in the future.</div> <div class='wc_img'><p class='wc_img_header'>Write a message in Gmail like you always do and then click Send Later menu to specify the time you want it sent. You don't need to do anything else, we will handle the rest.</p><div align='center'><img class='wc_screenshot' height='160px' src='" + B4G_STATIC_FILES_DIRECTORY + "3_sendlater.jpg' /></div><a class='wc_video_link' href='https://vimeo.com/604305300' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'> Watch a video to learn more.</a></div><div class='wc_pg_no'>3 of 5 <span class='previousButton b4g-button'>BACK</span><span class='nextButton b4g-button green'>NEXT</span><a class='skipButton b4g-button'>SKIP</a> </div></div>";
     }
     break;
   case 4: {
     wc_msg="<div id='wc_screen'> <div class='wc_header'>Manage Scheduled Messages</div> <div class='wc_text'>View, reschedule or cancel scheduled messages all in one place.</div> <div class='wc_img'><p class='wc_img_header'>Open the Boomerang  menu on the top right of Gmail screen. and click on  the Manage scheduled messages option. There, you will be able to see the list of all scheduled messages and reschedule or cancel them if you change your mind. You can also set your preferences for Boomerang.</p><div align='center'><img class='wc_screenshot' width='253px' src='" + B4G_STATIC_FILES_DIRECTORY + "4_manage.jpg' /></div><br/><a class='wc_video_link' href='https://vimeo.com/604185806' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'> Watch a video to learn more.</a></div><div class='wc_pg_no'>4 of 5 <span class='previousButton b4g-button'>BACK</span><span class='nextButton b4g-button green'>NEXT</span><a class='skipButton b4g-button'>SKIP</a> </div></div>";
     }
     break;
   case 5: {
     wc_msg="<div id='wc_screen'><div class='wc_header'>More Advanced Features</div><div class='wc_text'>Boomerang includes a few more features that can help you with your Inbox management.</div><div class='wc_img' ><ul><li><span class='wc_text'><strong>Response Tracking</strong></span><a class='wc_video_link' href='https://vimeo.com/594789716' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'></a><br/><span class='wc_img_header'>Track responses to any email you send or receive and get a reminder if you don't get a reply</span></li><br/><li><span class='wc_text'><strong>Recurring Messages</strong></span><a class='wc_video_link' href='https://vimeo.com/594788882' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'></a><br/><span>Write an email and send it every day, week, month or any interval you choose</span></li><br/><li><span class='wc_text'><strong>Notes</strong></span><a class='wc_video_link' href='https://vimeo.com/594793431' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'></a><br/><span class='wc_img_header'>Add notes to your Boomerang'ed messages</span></li><br/><li><span class='wc_text'><strong>Boomerang Mobile</strong></span><a class='wc_video_link' href='https://vimeo.com/600542067' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'></a><br/><span class='wc_img_header'>Schedule messages on the go on any smart phone or tablet</span></li><br/><li><span class='wc_text'><strong>Read Receipts</strong></span><a class='wc_video_link' href='https://vimeo.com/594786606' target='_blank'><img src='" + B4G_STATIC_FILES_DIRECTORY + "playbutton.png' style='position:relative; top:3px;'></a><br/><span class='wc_img_header'>Receive a notification about whether an email is opened or if links in the email are clicked.</span></li></ul></div><div class='wc_pg_no'>5 of 5<span class='previousButton b4g-button last'>BACK</span><a class='skipButton b4g-button green'>FINISH</a></div></div></div>";    }
     break;
   }
   if (browser_name === "Old Safari"){
     alert(wc_msg_text);
   }
   else{

     frameDoc = get_frame();
     $(".dialogdiv").remove();
     var dialog = "<div class='dialogdiv' style='display:none;'>"+ wc_msg +"</div>";


     $("body", frameDoc).append($(dialog));

       $(".dialogdiv",frameDoc).dialog({
         modal: true,
         closeOnEscape: true,
         width: 770,
         dialogClass: 'welcomeDialog'
       });

     $('.startButton').click(function(){
       show_welcome_dialog(2);
     });
     $('.skipButton').click(function () {
       $('.dialogdiv').dialog('close');
     });
     $('.nextButton').click(function(){
       show_welcome_dialog(screen_no+1);
     });
     $('.previousButton').click(function(){
       show_welcome_dialog(screen_no-1);
     });

     fix_all_dialog_links();

   }
}


function display_welcome_screen(){
  track_event(["automatic-oauth-dialog", "show-automatic-oauth-screen"]);
  display_automatic_oauth_screen();
}

function is_all_permission_user() {
  if (FromOverlayFlow) {
    return "all-permission";
  } else {
    return "minimum-permission";
  }
}

function display_automatic_oauth_screen() {
  var automaticOauthDiv = "<div class='dialogdiv b4g-oauth-div-dialog' style='text-align:center; padding-top: 65px; padding-bottom: 30px;'>" +
        "<div class='b4g-oauth-div-dialog-content' style='font-family: Lato, helvetica, arial, sans-serif'>" +
          "<div>" +
            "<img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/B4G_icon.png' style='width: 44px; margin-right: 12px; position:relative; top: 6px;'>" +
            "<span style='font-size: 20px; font-weight: bold; color: #444;'>" +
              "Welcome to Boomerang!" +
            "</span>" +
          "</div>" +
          "<div style='font-size: 20px; font-weight: bold; color: #444; margin-top: 65px;'>" +
            "Let's connect to your Gmail:" +
          "</div>" +
          "<img class='b4g-oauth-button' src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/btn_google_signin_dark_normal_web@2x.png' style='height:46px; width: 191px; margin-top: 20px; margin-bottom: 20px; cursor:pointer;'>" +
          "<div style='font-style: italic; font-size: 12px; color: #444;'>" +
            "By clicking \"Sign in with Google\", you agree to our <a class='b4g-terms-of-use' href='https://www.boomeranggmail.com/terms.html' target='_blank'>Terms of Use</a>." +
          "</div>" +
          // "<div style='margin-top: 45px; color:#444; font-size: 12px;'>" +
          //   "<div> <img src='" + B4G_STATIC_FILES_DIRECTORY + "new-ui/lock.png'> Your data is safe with us.</div>" +
          //   "<div>We don't sell your data, and we never have.</div>" +
          // "</div>" +
          "<div style='margin-top: 65px; font-size: 12px; color:#999;'>" +
            "<span class='b4g-oauth-no-thanks' style='text-decoration:underline; font-style: italic; cursor:pointer;'>No thanks, I don't want to use Boomerang.</span>" +
          "</div>" +
        "</div>" +
      "</div>";
  var frameDoc = get_frame();
  $(".dialogdiv").remove();

  var dialog = automaticOauthDiv;
  $("body", frameDoc).append($(dialog));
  fix_all_dialog_links();

  var $automaticOauthDiv = $(".dialogdiv", frameDoc).dialog({
      modal: true,
      closeOnEscape: true,
      width: 450,
      height: "auto",
  });

  // remove default title from the menu
  $automaticOauthDiv.parent().children().first().remove();
  $automaticOauthDiv.parent().removeClass('b4g-ui-widget-content');

  var dialogWidth = 580;
  var dialogHeight = 900;

  var top = 0;
  var left = 0;
  try{
      top = window.screenY + Math.max(0, Math.floor(($(window).height() - dialogHeight) / 2));
      left = window.screenX + Math.max(0, Math.floor(($(window).width() - dialogWidth) / 2));
  }
  catch(err){
  }

  var authUrl = "https://b4g.baydin.com/mailcruncher/login?guser=" + get_gmail_user();
  if (FromOverlayFlow) {
    authUrl = "https://b4g.baydin.com/calendar/addcalendaroauth?guser=" + get_gmail_user();
  }
  $(".b4g-oauth-button").click(function() {
    track_event(["automatic-oauth-dialog", "click-proceed"]);
    oauthWindow = window.open(authUrl, "", "width=" + dialogWidth +
          ",height=" + dialogHeight + ",location=1,status=1,resizable=1,top=" + top + ",left=" + left);
    var checkOauthWindowInterval = setInterval(function(){
      if ((!oauthWindow && browser_name !== "Chrome"  && browser_name !== "Opera" && browser_name !== "Edge") || oauthWindow.closed) {
        clearInterval(checkOauthWindowInterval);
        $automaticOauthDiv.dialog("destroy");

        var guser = get_gmail_user();
        var data = {"guser": guser};
        data["includecsrf"] = "True";
        $.ajax({
            url: "https://b4g.baydin.com/mailcruncher/checklogin2",
            data: data,
            type: "GET",
            xhr: xhr_with_credentials,
            success: function (data) {
                var status = data["status"];
                if (status == "success") {
                  if (FromOverlayFlow) {
                    write_to_html5_storage("needToSeeTutorialLater", "yes");
                    write_to_html5_storage("b4g_bookable_calendar_enabled", "true");
                    $(".b4g_magic_overlay_toggle").first().click();
                  } else {
                    show_welcome_dialog(1);
                  }
                  track_event(["automatic-oauth-dialog", "continue"]);

                  // Tracking user's path to installing extension
                  track_user_install_path_if_necessary();
                } else {
                  track_event(["automatic-oauth-dialog", "fail"]);

                  show_oauth_declined_message(function(){
                    call_function_after_logged_in(function(){
                      track_event(["automatic-oauth-dialog", "retry-success"]);
                      if (FromOverlayFlow) {
                        write_to_html5_storage("needToSeeTutorialLater", "yes");
                        write_to_html5_storage("b4g_bookable_calendar_enabled", "true");
                        $(".b4g_magic_overlay_toggle").first().click();
                      } else {
                        show_welcome_dialog(1);
                      }
                    }, function(){
                      track_event(["automatic-oauth-dialog", "retry-fail"]);
                    });
                  }, is_all_permission_user() == "all-permission")
                }
            },
        });
      }
    }, 300);
  });
  $(".b4g-oauth-no-thanks").click(function(){
    $automaticOauthDiv.dialog("destroy");
    track_event(["automatic-oauth-dialog", "cancel"]);
  });
}
B4G_AUTOMATIC_SCREEN = display_automatic_oauth_screen;


var ftueToolTipTemplate =
  '<div class="b4g-tooltip-ftue">' +
    '<div class="b4g-ftue-content"/>' +
    '<button class="T-I J-J5-Ji T-I-atl b4g-ftue-button"/>' +
    '<div class="b4g-ftue-pointer"/>' +
  '</div>'
;
function show_FTUE_tooltip(options) {
  options = options || {};

  var $tooltip = $(ftueToolTipTemplate);

  if(options.content instanceof jQuery) { $(".b4g-ftue-content", $tooltip).append(options.content); }
  else { $(".b4g-ftue-content", $tooltip).text(options.content); }

  $tooltip
    .css({
      left: options.left,
      top: options.top,
      right: options.right,
      bottom: options.bottom,
      width: options.width || "320px"
    })
    .find(".b4g-ftue-pointer").addClass("b4g-pointer-" + (options.dir || "lr")).end()
    .find(".b4g-ftue-button")
    .text(options.button || "")
      .hover(
        function() { $(this).addClass("T-I-JW"); },
        function() { $(this).removeClass("T-I-JW"); }
      )
      .click(function(e) {
        e.preventDefault();

        if(options.close) { setTimeout(function() { options.close(); }, 0); }

        $tooltip.remove();
      })
    .end()
    .appendTo("body")
  ;

  return $tooltip;
}

var trackingAnnouncementShownDuringThisSession = false;
var respondableAnnouncementShownDuringThisSession = false;

function show_click_open_tracking_announcement(callback) {
  if($("#b4g_manage").length <= 0) { // Don't show tutorial in pop out
    return setTimeout(function() { callback({ "user-in-pop-out": true }); }, 0);
  }

  if(show_click_open_tracking_announcement.requestInFlight) {
    return setTimeout(function() { callback({ "request-in-flight": true }); }, 0);
  }

  if(read_from_html5_storage("b4g-has-seen-click-open-tracking-announcement") === "true") {
    return setTimeout(function() { callback({ "annouce-has-been-seen": true }); }, 0);
  }

  var guser = get_gmail_user();
  send_image_request("https://b4g.baydin.com/mailcruncher/hasseentrackingannouncement?guser=" + encodeURIComponent(guser), function(status, url, data){
    show_click_open_tracking_announcement.requestInFlight = false;

    if (status === HAS_NOT_SEEN_TUTORIAL) {
      callback(null);
    } else {
      write_to_html5_storage("b4g-has-seen-click-open-tracking-announcement", true);
      callback({ "annouce-has-been-seen": true });
    }
  });
  show_click_open_tracking_announcement.requestInFlight = true;
}

var announcementContent =
  '<div>' +
    '<h3>Did you know?</h3>' +
    '<p><strong>You can request a read receipt and track clicks on links in your message.</strong> We will notify you when someone reads your email or clicks a link.</p>' +
    '<p>To get started, click the "Request read receipt and track clicks" button below.</p>' +
  '</div>'
;
function announce_click_open_tracking($composeContainer) {
  trackingAnnouncementShownDuringThisSession = true;
  var $toggle = $(".b4g-tracking-toggle", $composeContainer);
  var offset = $toggle.offset();

  $toggle.trigger("mouseenter");

  show_FTUE_tooltip({
    bottom: $("body").height() - offset.top + 2,
    right: $("body").width() - (offset.left + $toggle.outerWidth() / 2) - 24,
    content: $(announcementContent),
    close: function() { $toggle.trigger("mouseleave"); },
    button: "Nifty!"
  });

  write_to_html5_storage("b4g-has-seen-click-open-tracking-announcement", true);

  track_event([ "click open tracking FTUE", "annoucement" ]);
}

function display_tracking_announcement_if_necessary($composeContainer) {
  // Before we consider showing the announcement tooltip: 3 days should pass since the extension was installed
  var tooltipWakeTime = read_from_html5_storage('b4g_tracking_tooltip_snoozed_until_' + get_gmail_user());
  if (tooltipWakeTime) {
    var tooltipWakeDate = new Date(tooltipWakeTime);
    if (new Date() < tooltipWakeDate) return;
  } else {
    // We consider this to be a new user
    // Set a wake time for the tooltip 3 days from now.  It won't appear until at least then.
    var wakeTime = new Date();
    wakeTime.setHours(wakeTime.getHours() + 72);
    write_to_html5_storage("b4g_tracking_tooltip_snoozed_until_" + get_gmail_user(), wakeTime.toString());
    return;
  }

  // First, we will choose a value between 0 and 20 randomly.  If the value is < 1 (a 1 in 20 chance), we will proceed.
  // We'll then call the show_click_open_tracking_announcement function, which first checks local storage to see if the user
  // has seen the tracking announcement.
  // If local storage doesn't indicate that the user has seen the announcement, then we will check on the server.
  // If the response from the server indicates that we haven't seen the tracking announcement yet, then it will be displayed.

  var randomNumberBetweenZeroAndTwenty = Math.random() * 20;
  if (randomNumberBetweenZeroAndTwenty > 1) {
    return
  }

  // This function will ask the server if the user needs to see the announcement.
  // If we need to display the announcement, the callback function will run.
  show_click_open_tracking_announcement(function (err) {
    if (err) { return; }

    announce_click_open_tracking($composeContainer);
  });

}

function show_click_open_tracking_tutorial(callback) {
  if($("#b4g_manage").length <= 0) { // Don't show tutorial in pop out
    return setTimeout(function() { callback({ "user-in-pop-out": true }); }, 0);
  }

  if(show_click_open_tracking_tutorial.requestInFlight) {
    return setTimeout(function() { callback({ "request-in-flight": true }); }, 0);
  }

  if(read_from_html5_storage("b4g-has-seen-click-open-tracking-tutorial")) {
    return setTimeout(function() { callback({ "tutorial-has-been-seen": true }); }, 0);
  }

  var guser = get_gmail_user();
  send_image_request("https://b4g.baydin.com/mailcruncher/hasseentrackingtutorial?guser=" + encodeURIComponent(guser), function(status, url, data){
    show_click_open_tracking_tutorial.requestInFlight = false;

    if (status === HAS_NOT_SEEN_TUTORIAL) {
      callback(null);
    } else {
      write_to_html5_storage("b4g-has-seen-click-open-tracking-tutorial", true);
      callback({ "tutorial-has-been-seen": true});
    }
  });
  show_click_open_tracking_tutorial.requestInFlight = true;
}

var clickOpenTrackingTutorials = [
  '<div>' +
    '<h3>Awesome! Here is how it works.</h3>' +
    '<ol>' +
      '<li>You will get an email when the message is opened.</li>' +
      '<li>Your own opens and clicks are not counted.</li>' +
      '<li>Since some email clients are not compatible with the read receipt feature, there may be cases when opens/clicks are not reported.</li>' +
      '<li>The recipients can choose to not provide read receipts.</li>' +
    '</ol>' +
  '</div>',
  '<div>' +
    '<p>We have integrated read receipt and click tracking with our original Boomerang feature so you can get reminders for messages that don\'t get opened or clicked.</p>' +
    '<p>We added "if not opened" and "if not clicked" options in the drop down below.</p>' +
  '</div>',
  '<div>' +
    '<p>To see more details on your tracked messages after they are sent, click here and go to <strong>Manage scheduled messages</strong>.</p>' +
    '<p>Thanks and let us know how this feature works for you.</p>' +
  '</div>'
];
function click_open_tracking_tutorial_step1($composeContainer) {
  var $toggle = $(".b4g-tracking-toggle", $composeContainer);
  var offset = $toggle.offset();

  $toggle.trigger("mouseenter");

  $composeContainer.parents("body > .dw").andSelf().css("z-index", 5);
  $('<div class="b4g-ui-widget-overlay"/>').css("z-index", 3).appendTo("body");

  show_FTUE_tooltip({
    bottom: $("body").height() - offset.top + 2,
    right: $("body").width() - (offset.left + $toggle.outerWidth() / 2) - 24,
    content: $(clickOpenTrackingTutorials[0]),
    close: function() {
      $toggle.trigger("mouseleave");
      click_open_tracking_tutorial_step2($composeContainer);
    },
    button: "Next"
  });

  track_event([ "click open tracking FTUE", "step1" ]);
}
function click_open_tracking_tutorial_step2($composeContainer) {
  var $dropDown = $(".b4g-send-condition", $composeContainer);
  var offset = $dropDown.offset();

  show_FTUE_tooltip({
    bottom: $("body").height() - offset.top + 2,
    right: $("body").width() - (offset.left + $dropDown.outerWidth() / 2) - 24,
    content: $(clickOpenTrackingTutorials[1]),
    close: function() { click_open_tracking_tutorial_step3($composeContainer); },
    button: "Next"
  });

  track_event([ "click open tracking FTUE", "step2" ]);
}
function click_open_tracking_tutorial_step3($composeContainer) {
  openTopMenu($("#b4g_manage")); // Open menu in top black bar

  var offset = $("#tmmanage").offset();

  $composeContainer.parents("body > .dw").andSelf().css("z-index", null);
  // To prevent user from accidentally closing top menu
  $(".b4g-ui-widget-overlay").click(function(e) { e.stopPropagation(); });

  show_FTUE_tooltip({
    top: offset.top - 8,
    left: offset.left - 420,
    width: 380,
    dir: "ur",
    content: $(clickOpenTrackingTutorials[2]),
    close: function() {
      $(".b4g-ui-widget-overlay").remove();
      write_to_html5_storage("b4g-has-seen-click-open-tracking-tutorial", true);
    },
    button: "Ok, got it."
  });

  track_event([ "click open tracking FTUE", "step3" ]);
}


// Bookable announcement modal
var bookableAnnouncementContent =
  `
    <div class="b4g-bookable-announce-modal b4g-variant-c b4g-control-copy-variant">
      <div class="b4g-blue-background-area">
        <div class="b4g-bookable-announce-top-bar">
          <img class="b4g-logo" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/boomerang_logo-white.svg">
          <img class="b4g-x-btn" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/x_white.svg">
        </div>

        <div class="b4g-bookable-announce-blue-area">
          <div class="b4g-text-row">
            <div class="b4g-title">Introducing Bookable Schedule</div>
            <div class="b4g-explanation">Schedule meetings from your Inbox. <strong>5 clicks, no typing, no back and forth!</strong></div>
          </div>

          <div class="b4g-feature-section">
            <img class="b4g-feature-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/bookable_flow.svg">
            <div class="b4g-feature-txt-row">
              <div class="b4g-feature-txt-wrap">
                <div class="b4g-feature-txt">Create a schedule</div>
              </div>
              <div class="b4g-feature-txt-wrap">
                <div class="b4g-feature-txt">Share with anyone</div>
              </div>
              <div class="b4g-feature-txt-wrap">
                <div class="b4g-feature-txt">It's that easy!</div>
              </div>
            </div>
          </div>
        </div>

      </div>

      <div class="b4g-bookable-announce-white-area">
        <div class="b4g-check-rows-container">
          <div class="b4g-check-row">
            <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
            <div class="b4g-check-txt">Get <strong>23% more meetings</strong> on the calendar than sending a scheduling link</div>
          </div>
          <div class="b4g-check-row">
            <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
            <div class="b4g-check-txt">Automatically prevent conflicts and double-booking, even on multiple calendars</div>
          </div>
          <div class="b4g-check-row">
            <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
            <div class="b4g-check-txt">Allow recipients to overlay their calendars, right inside their email</div>
          </div>
          <div class="b4g-check-row">
            <img class="b4g-check-img" src="https://b4g.baydin.com/site_media/calendar/img/bookable_announce/greencheck.svg">
            <div class="b4g-check-txt">Get <strong>2 hours every week</strong> of your life back</div>
          </div>
        </div>
        <div class="b4g-create-btn"><div>Get started - it's free!</div></div>
        <div class="b4g-remind-me-later-btn">Remind me later</div>
      </div>
    </div>
  `;


var BOOKABLE_ANNOUNCE_OVERLAY = "<div class='bookable-announce-overlay' style='background: #666666; opacity: 0.50; filter:alpha(opacity=50);position:absolute; left:0px; top:0px; width:100%; height:100%; z-index:1000;'></div>";
function show_meet_button_reminder($composeContainer) {
  function dismiss_meet_button_reminder() {
    $composeContainer.find('.b4g-meet-button-reminder').remove();
    $composeContainer.find('.b4c-meet-btn-pulse-border').removeClass('b4c-meet-btn-pulse-border');
  }
  var $meetButton = $composeContainer.find(".sendLaterTable .b4g-bcal-features-button-holder");

  var meetButtonReminderHTML = 
  '<div class="bookable-announcement-dialog b4g-meet-button-reminder" style="display: flex;background: transparent;width: 264px;height:120px;margin: auto auto auto auto;color: white;font-size: 16px;position:absolute;z-index:1;">' +
    '<div style="background: #055DA0;padding: 16px;border-radius: 8px;box-shadow: 0 2px 8px 0 rgba(0,0,0,0.3);">' +
      "<p style='font-size:14px !important;margin:0px;margin-bottom:8px;line-height:20px;'>Boomerang's Bookable Schedule and other meeting scheduling tools will be right here when you need them.</p>" +
      "<p style='font-size:14px !important;margin:0px;font-weight:bold;line-height:24px;'><strong class='b4g-ok-got-it' style='cursor:pointer;'>OK, got it</strong></p>" +
    '</div>' +
  '</div>';

  $composeContainer.append(meetButtonReminderHTML);

  $composeContainer.find('.bookable-announcement-dialog').position({of:$meetButton, my: "middle bottom-50px", at:"left top"});

  $meetButton.find('.b4g-bcal-features-button').addClass('b4c-meet-btn-pulse-border');

  $meetButton.one('click', function() {
    dismiss_meet_button_reminder();
    track_event([`bookable announcement tooltip`, 'meet menu opened from meet btn reminder']);
  });
  $('.b4g-ok-got-it').one('click', function() {
    dismiss_meet_button_reminder();
    track_event([`bookable announcement tooltip`, 'meet btn reminder dismissed']);
  });
}
function set_bookable_announcement_snooze_time() {
  // Set a wake time for the announcement 4 days from now.  It won't reappear until then.
  var wakeTime = new Date();
  wakeTime.setHours(wakeTime.getHours() + 96);
  write_to_html5_storage("b4g_bookable_announcement_snoozed_until_" + get_gmail_user(), wakeTime.toString());
}
function announce_bookable_with_modal($composeContainer) {
  var guser = get_gmail_user();

  var $bookableAnnounceOverlay = $(BOOKABLE_ANNOUNCE_OVERLAY);
  var $bookableAnnounceDialog = $(bookableAnnouncementContent);
  $("body").append($bookableAnnounceOverlay);
  $("body").append($bookableAnnounceDialog);

  var $closeBtn = $bookableAnnounceDialog.find('.b4g-x-btn');
  var $createBtn = $bookableAnnounceDialog.find('.b4g-create-btn');
  var $remindBtn = $bookableAnnounceDialog.find('.b4g-remind-me-later-btn');

  function closeAnnouncementModal() {
    $bookableAnnounceOverlay.remove();
    $bookableAnnounceDialog.remove();
  }

  $closeBtn.click(function() {
    closeAnnouncementModal();
    show_meet_button_reminder($composeContainer);
    track_event([`bookable announcement tooltip`, 'closed']);
  });

  $createBtn.click(function() {

    call_function_after_calendar_login(function() {
      var $bcalFeaturesBtn = $('.b4g-bcal-features-button', $composeContainer);
      closeAnnouncementModal();
      isDisplayingBookableAnnouncementModal = true;
      compose_dialog_toggle_bcal_features_menu(null, $bcalFeaturesBtn, false);  // Announcement is not shown in replies

      track_event([`bookable announcement tooltip`, 'bookable opened after CTA click']);
    }, false, null, false, false, false);

    track_event([`bookable announcement tooltip`, 'CTA clicked']);
  });

  $remindBtn.click(function() {
    set_bookable_announcement_snooze_time();
    closeAnnouncementModal();
    track_event([`bookable announcement tooltip`, 'remind me clicked']);
  });


  write_to_html5_storage("b4g-has-seen-bookable-announcement", true);

  $composeContainer.addClass('b4g-prevent-bcal-ftue');  // Prevents showing of FTUE on composer that was already used to show bookable announcement
}
function announce_bookable_with_tooltip($composeContainer) {
  // First, let's check local storage for a timestamp the announcement is supposed to be snoozed until
  var announcementWakeTime = read_from_html5_storage('b4g_bookable_announcement_snoozed_until_' + get_gmail_user());
  if (announcementWakeTime) {
    var announcementWakeDate = new Date(announcementWakeTime);
    if (new Date() < announcementWakeDate) return;
  }

  // Tracking announcement view
  var announcementEventStr = "announcement";
  var announcementWakeTime = read_from_html5_storage('b4g_bookable_announcement_snoozed_until_' + get_gmail_user());
  if (announcementWakeTime) {
    var announcementEventStr = "announcement subsequent view";
    var announcementSnoozeCount = read_from_html5_storage('b4g_bookable_announcement_snooze_count_' + get_gmail_user());
    if (announcementSnoozeCount) {
      announcementSnoozeCount = Number(announcementSnoozeCount)+1
      write_to_html5_storage('b4g_bookable_announcement_snooze_count_' + get_gmail_user(), announcementSnoozeCount);
      announcementEventStr += " " + String(announcementSnoozeCount);
    } else {
      announcementSnoozeCount = 1;
      write_to_html5_storage('b4g_bookable_announcement_snooze_count_' + get_gmail_user(), announcementSnoozeCount);
      announcementEventStr += " " + String(announcementSnoozeCount);
    }
  }
  track_event([`bookable announcement tooltip`, announcementEventStr]);

  // Clear snooze time to avoid showing the announcement again if it had been snoozed
  localStorage.removeItem('b4g_bookable_announcement_snoozed_until_' + get_gmail_user());

  announce_bookable_with_modal($composeContainer)
}
function close_bookable_announcement_tooltip($composeContainer, clickedUIString) {
  $('.b4g-ui-widget-overlay', $composeContainer).remove();
  $('.b4g-bcal-fake-button', $composeContainer).remove();
  $('.bookable-announcement-dialog', $composeContainer).remove();

  // GA to track how tooltip was closed
  track_event([`bookable announcement tooltip`, "closed with "+clickedUIString]);
}
function user_is_in_announcement_batch_1() {
  // Returns true if the user is in the cohort that should see the announcement (30% of users)
  var guser = get_gmail_user().toLowerCase();
  // Calculate sum of char values in guser
  var charSum = 0;
  for (var i = 0; i < guser.length; i++) {
    var currentCharCode = guser.charCodeAt(i);
    if (currentCharCode) charSum += currentCharCode;
  }
  // Release phase 1: show to 30% of users
  var mod = charSum % 10;
  return mod <= 2;
}
function display_bookable_announcement_if_necessary($composeContainer) {
  // 2 different time gates
  if (user_is_in_announcement_batch_1()) {
    // Time gate release of announcement until after March 30th 2022 6:00 AM PST for 30% of users
    var announcementReleaseDate = new Date(1648645200000);
    var theCurrentDate = new Date();
    if (theCurrentDate < announcementReleaseDate) return true;
  } else {
    // Time gate release of announcement until after April 5th 2022 6:00 AM PST for everyone else 
    var announcementReleaseDate = new Date(1649163600000);
    var theCurrentDate = new Date();
    if (theCurrentDate < announcementReleaseDate) return true;
  }

  var announcementWakeTime = read_from_html5_storage('b4g_bookable_announcement_snoozed_until_' + get_gmail_user());

  if ((read_from_html5_storage("b4g-has-seen-bookable-announcement") !== "true" || announcementWakeTime) &&
      can_use_bookable_schedule())
  {

      // We will do a server-side check to see if the user has seen the announcement before
      // Note: specificallyCheckedValue is the specific announcement/ftue we are concerned with checking now (an optional param)
      // If the user hasn't seen the specified announcement/ftue, the server will let us know but will also update the stored value so that the user won't see the announcement/ftue again
      $.ajax({
        method: "GET",
        url: 'https://b4g.baydin.com/mailcruncher/checkIfHasSeenAnnouncementsAndFTUEs',
        data: {
          "guser": get_gmail_user(),
          "specificallyCheckedValue": "hasSeenBookableAnnouncement",
        },
        xhr: xhr_with_credentials,
        success: function(response) {
          if (response.status === "success") {
            if (response.hasSeenBookableAnnouncement === false) {
              announce_bookable_with_tooltip($composeContainer);
              // Now that we've displayed the tooltip, update the response value
              // before we pass it to updateAnnouncementAndFTUEStates
              response.hasSeenBookableAnnouncement = true;
            }
            // Update local storage states for all announcements and FTUEs
            updateAnnouncementAndFTUEStates(response);

          } else if (response.showCurrentAnnouncementOrFTUE === true) {
            // The user does not exist in the database.  Show the Bookable announcement anyway.
            announce_bookable_with_tooltip($composeContainer);
          }
        }

      });
  }
}
function track_bookable_click_after_tooltip_view_if_necessary() {
  if (read_from_html5_storage("b4g-has-seen-bookable-announcement") === "true" &&
    read_from_html5_storage("b4g-has-opened-bookable-schedule-after-viewing-tooltip") !== "true"
  ) {

    var guser = get_gmail_user().toLowerCase();
    var firstChar = guser.charAt(0);


    track_event([`bookable announcement tooltip`, "bookable open"]);
    write_to_html5_storage("b4g-has-opened-bookable-schedule-after-viewing-tooltip", true);

  }

}

/*
 * 20b. Viral Hooks
 */ 

var viralHooks = {
  "detected-date-by-magic": {
    "dialog-message": "Looks like we guessed that one perfectly!<br/>Share the magic with others?",
    "share-message": [
      {
        "text": "Boomerang just helped me bring back a message at the right time. It's magical.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=magic&utm_campaign=viralhook"
      }
    ]
  },
  "send-later-if-no-reply": {
    "dialog-message": "You just scheduled your auto-reminder email.<br/>Please share Boomerang with your friends so they can do the same.",
    "share-message": [
      {
        "text": "Thanks to Boomerang, I can schedule a reminder email that will be sent out only if they don't respond.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=auto_reminder&utm_campaign=viralhook"
      }
    ]
  },
  "inbox-zero-within-hour": {
    "dialog-message": "Congratulations! You are at Inbox Zero.<br/>Care to share how Boomerang helped you achieve Inbox Zero?",
    "share-message": [
      {
        "text": "I just got to Inbox Zero with Boomerang's help! It helps me stay on top of all my emails.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=inbox_zero&utm_campaign=viralhook"
      }
    ]
  },
  "send-later-at-1am-5am": {
    "dialog-message": "Looks like you love using Boomerang late at night.<br/>Share with others how you're using it.",
    "share-message": [
      {
        "text": "Just scheduled a bunch of emails with Boomerang! This way people don't know I am really a vampire.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=vampire&utm_campaign=viralhook"
      },
      {
        "text": "Boomerang lets me schedule emails so I don't wake up people with my messages at all hours of the night.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=wake_people_up&utm_campaign=viralhook"
      },
      {
        "text": "Boomerang lets me schedule emails so my messages are at the top of Inboxes even if I am writing them at insane hours.",
        "url": "http://boomeranggmail.com/?utm_source=b4g&utm_medium={{medium}}&utm_content=insane_hours&utm_campaign=viralhook"
      }
    ]
  }
};

var _viralHookHtml =
  '<div class="b4g-viral-hook">' +
    '<img class="b4g-viral-logo" ' +
      'src="' + B4G_STATIC_FILES_DIRECTORY + 'viral-hook/boomerang.png' + '"/>' +
    '<div class="b4g-viral-content">' +
      '<p class="b4g-viral-dialog-message">{{dialog-message}}</p>' +
      '<ul class="b4g-viral-share-options">' +
        '<li><a data-share-type="twitter" href="http://twitter.com/intent/tweet?text={{text}}+{{url-twitter}}" target="_blank">' +
          '<img src="' + B4G_STATIC_FILES_DIRECTORY + 'viral-hook/tweet.png"/>' +
        '</a></li>' +
        '<li><a data-share-type="facebook" href="http://www.facebook.com/sharer/sharer.php?s=100&p[url]={{url-fb}}&p[images][0]=&p[title]=&p[summary]={{text}}" target="_blank">' +
          '<img src="' + B4G_STATIC_FILES_DIRECTORY + 'viral-hook/fbshare.png"/>' +
        '</a></li>' +
        '<li><a data-share-type="linkedin" href="http://www.linkedin.com/shareArticle?mini=true&url={{url-linkedin}}&title=&summary={{text}}&source=" target="_blank">' +
          '<img src="' + B4G_STATIC_FILES_DIRECTORY + 'viral-hook/linkedin.png"/>' +
        '</a></li>' +
      '</ul>' +
    '</div>' +
    '<a class="b4g-viral-close"></a>' +
  '</div>'
;

function replace_tokens(tmpl, tokens) {
  return tmpl.replace(/\{\{(.*?)\}\}/g, function(_, token) {
    var path = token.split(".");

    var prop, val = tokens;
    do {
      prop = path.shift();
      val = val[prop];
    } while(path.length > 0 && val != null);

    return val;
  });
}

function show_viral_hook(viralType, lastShown) {
  lastShown = lastShown || {};
  var viralHook = viralHooks[viralType];
  var msgIdx = (lastShown.idx || 0) % viralHook["share-message"].length;
  var message = viralHook["share-message"][msgIdx];

  var tokens = {
    "dialog-message": viralHook["dialog-message"],
    "text": encodeURIComponent(message.text),
    "url-twitter": encodeURIComponent(replace_tokens(message.url, "twitter")),
    "url-fb": encodeURIComponent(replace_tokens(message.url, "fb")),
    "url-linkedin": encodeURIComponent(replace_tokens(message.url, "linkedin")),
  };

  var $viralHook = $(replace_tokens(_viralHookHtml, tokens))
    .find(".b4g-viral-close").click(function(e) {
      e.preventDefault();
      $(".b4g-viral-hook").remove();
      track_event("Viral hook closed", viralType);
    }).end()
    .appendTo("body")
    .animate({ top: 0 })
  ;

  $(".b4g-viral-share-options a", $viralHook).click(function() {
    track_event("Viral hook share click", viralType, $(this).data("share-type"));
  });
  track_event("Viral hook shown", viralType);

  return { idx: msgIdx + 1 };
}

function show_viral_hook_if_appropriate(info) {
    var cachedPlan = get_cached_plan();
    // Do not show viral hooks to paying users
    if (cachedPlan === "personal" || cachedPlan === "pro" || cachedPlan === "premium"){
        return;
    }

  var viralInfo;
  try { viralInfo = JSON.parse(read_from_html5_storage("b4g-viral-hook") || "{}"); }
  catch(err) { viralInfo = {}; } // If can't parse JSON, just reset viral info

  if(info.type === "send-later" || info.type === "return-later") {
    viralInfo["last-" + info.type] = (new Date()).getTime();

    var propCount = info.type + "-count";
    viralInfo[propCount] = (viralInfo[propCount] || 0);
    viralInfo[propCount] += ("bulk" in info ? info.bulk : 1);
  }

  write_to_html5_storage("b4g-viral-hook", JSON.stringify(viralInfo));

  var boomerangCount = viralInfo["send-later-count"] || 0;
  boomerangCount += viralInfo["return-later-count"] || 0;
  if(boomerangCount < 3) { return; }

  var lastShown = viralInfo.lastShown || {};
  var now = new Date();
  var msPerDay = 24 * 60 * 60 * 1000;
  var fourWeeksAgo = now.getTime() - (28 * msPerDay);
  for(var type in lastShown) { if (lastShown.hasOwnProperty(type)) {
    if(lastShown[type].date == null) { // If data is invalid state, exit and reset data
      write_to_html5_storage("b4g-viral-hook", "{}");
      return;
    }
    if(lastShown[type].date > fourWeeksAgo) { return; }
  } }

  var viralType = "none";

  if(info.type === "return-later" && info.isByMagic) {
    viralType = "detected-date-by-magic";
  } else if(info.type === "send-later" && info.isIfNoReply) {
    viralType = "send-later-if-no-reply";
  } else if(info.type === "send-later" && 0 < now.getHours() && now.getHours() < 6) {
    viralType = "send-later-at-1am-5am";
  } else if(
    info.type === "is-inbox-zero" &&
    viralInfo["last-return-later"] &&
    (now.getTime() - 60 * 60 * 1000) < viralInfo["last-return-later"]
  ) {
    viralType = "inbox-zero-within-hour";
  }

  if(viralType === "none") { return; }

  if( // Only show a spefic viral type once every 3 months
    viralType in lastShown &&
    lastShown[viralType].date > (now.getTime() - 90 * msPerDay)
  ) { return; }

  var showInfo = show_viral_hook(viralType, lastShown[viralType]);
  lastShown[viralType] = { date: (new Date()).getTime(), info: showInfo };

  viralInfo.lastShown = lastShown;
  write_to_html5_storage("b4g-viral-hook", JSON.stringify(viralInfo));
}

function init_inbox_zero_detector(callback) {
  var $inboxContainer = $(".aeF");

  if($inboxContainer.length <= 0) {
    setTimeout(function() { init_inbox_zero_detector(callback); }, 1000);
    return;
  }

  new MutationObserver(function() {
    if(!isAtInbox()) { return; }

    // .J-KU-KO is the currently selected category tab
    // .aKp.aIf-aLf is the primiary inbox tab icon
    if($(".J-KU-KO .aKp.aIf-aLf").length <= 0) { return; }

    // .aRv is the "Empty tab text"
    if($(".aRv:visible").length <= 0) { return; }

    callback();
  }).observe($inboxContainer[0], { childList: true, subtree: true });
}


/**
 * 21. External Libraries
 */ 

 /*! modified from https://github.com/KartikTalwar/gmail.js/tree/master  */

/**
 * @copyright: Gmail.js, Copyright (c) 2014 Kartik Talwar
 * @license: Licensed under The MIT License.
 * modified from https://github.com/KartikTalwar/gmail.js/tree/master
 */

// For bulk boomerang, we pulled out the relevant functions and
// edited the parts that were broken: visible_emails_pre and current_page
// Functions we added are prepended with "b4g_"

var Gmail = function(localJQuery) {

  /*
    Use the provided 'jQuery' if possible, in order to avoid conflicts with
    other extensions that use $ for other purposes.
  */
  var $;
  if (typeof localJQuery !== "undefined") {
    $ = localJQuery;
  } else if (typeof jQuery !== "undefined") {
    $ = jQuery;
  }
  // else leave $ undefined, which may be fine for some purposes.

  var api = {
              get : {},
              observe : {},
              check : {},
              tools : {},
              tracker : {},
              dom : {},
              chat : {},
              compose : {},
              helper : {get: {}}
            };

  api.version           = "0.4";
  api.tracker.globals   = GLOBALS;
  api.tracker.view_data = typeof VIEW_DATA !== 'undefined' ? VIEW_DATA : [];
  api.tracker.ik        = api.tracker.globals[9];
  api.tracker.hangouts  = undefined;


  api.tools.make_request = function (link, method) {
    link = decodeURIComponent(link);
    var method  = (typeof method == undefined || typeof method == null) ? 'GET' : method;
    var request = $.ajax({ type: method, url: encodeURI(link), async:false });

    return request.responseText;
  }


  api.tools.make_request_async = function (link, method, callback) {
    var method  = (typeof method == undefined || typeof method == null) ? 'GET' : method;

    $.ajax({ type: method, url: encodeURI(link), async:true, dataType: 'text' })
      .done(function(data, textStatus, jqxhr) {
        callback(jqxhr.responseText);
      })
      .fail(function(jqxhr, textStatus, errorThrown) {
        console.error('Request Failed', errorThrown);
      });
  }


  api.tools.parse_view_data = function(view_data) {
    var parsed = [];
    var data = [];

    for(var j=0; j < view_data.length; j++) {
      if(view_data[j][0] == 'tb') {
        for(var k=0; k < view_data[j][2].length; k++) {
          data.push(view_data[j][2][k]);
        }
      }
    }

    for(var i=0; i < data.length; i++) {
      var x = data[i];
      var temp = {};

      parsed.push({
        id: x[0],
        title : x[9],
        excerpt : x[10],
        time : x[15],
        sender : x[28],
        attachment : x[13],
        labels: x[5]
      });
    }

    return parsed;
  }


  api.helper.get.visible_emails_pre = function() {
    var page = api.get.current_page();
    var url = window.location.origin + window.location.pathname + '?ui=2&ik=' + api.tracker.ik+'&rid=' + api.tracker.rid + '&view=tl&num=120&rt=1';

    // Mike: Something's broken with pagination. I'm adding this
    var start = 0;
    try {
        // Looking for "51-101" on the page so we can construct the start parameter
        var startString = $(".Dj:visible").children().first().text();
        startString = startString.replace(",", ""); // replace commas so we can parse it
        start = parseInt(startString);
        start -= 1; // handle off-by-one
    }
    catch (e) {
        console.log("get.visible_emails_pre could not determine the start parameter from the dom");
    }
    url += "&start=" + start;

    // Mike: lots of edits here
    if(page.indexOf('label/') == 0) {
      url += '&cat=' + page.split('/')[1] +'&search=cat';
    } else if(page.indexOf('category/') == 0) {
      if(page.indexOf('forums') != -1) {
        cat_label = 'group';
      } else if(page.indexOf('updates') != -1) {
        cat_label = 'notification';
      } else if(page.indexOf('promotion') != -1) {
        cat_label = 'promo';
      } else if(page.indexOf('social') != -1) {
        cat_label = 'social';
      }
      url += '&cat=^smartlabel_' + cat_label +'&search=category';
    } else if(page.indexOf('search/') == 0) {
        url += "&q=" + page.split('/')[1] + "&qs=true&search=query&at=" + api.get.b4g_get_at_variable();
    } else if(page == 'inbox'){
        var inboxTab = api.get.b4g_get_inbox_tab();
        if (inboxTab == "none"){
            url += "&search=inbox";
        }
        else {
            url += "&q=in%3Ainbox%20category%3A" + inboxTab + "&qs=true&search=query&at=" + api.get.b4g_get_at_variable();
        }
    }else {
      url += '&search=' + page;
    }
    return url;
  }

  // Mike: I added this function
    api.get.b4g_get_inbox_tab = function() {
        var selectedTab = $(".aAy.J-KU-KO");
        if (selectedTab.length == 0){
            return "none"; // Gmail Tabs disabled
        }
        else if (selectedTab.hasClass("aKe-aLe")){
            return "social";
        }
        else if (selectedTab.hasClass("aJi-aLe")){
            return "promotions";
        }
        else if (selectedTab.hasClass("aH2-aLe")){
            return "updates";
        }
        else if (selectedTab.hasClass("aHE-aLe")){
            return "forums";
        }
        else{
            return "primary";
        }
    }

    // Mike: added from inbox pause
    api.get.b4g_get_at_variable = function() {
        var atStartIndex = document.cookie.indexOf("GMAIL_AT=") + 9;
        var atEndIndex = document.cookie.indexOf(";",document.cookie.indexOf("GMAIL_AT"));
        var at = document.cookie.substring(atStartIndex, atEndIndex);
        return at;
    }

  api.helper.get.visible_emails_post = function(get_data) {
    var emails = [];

    var get_data = get_data.substring(get_data.indexOf('['), get_data.length);
        get_data = '"use strict"; return ' + get_data;
        get_data = new Function(get_data);

    api.tracker.view_data = get_data();

    for(i in api.tracker.view_data) {
      if (typeof(api.tracker.view_data[i]) === 'function') {
        continue;
      }
      
      var cdata = api.tools.parse_view_data(api.tracker.view_data[i]);
      if(cdata.length > 0) {
        $.merge(emails, cdata);
      }
    }
    return emails;
  }


  api.get.visible_emails = function() {
    var url = api.helper.get.visible_emails_pre();
    var get_data = api.tools.make_request(url);
    var emails = api.helper.get.visible_emails_post(get_data);

    return emails;
  }


  api.get.visible_emails_async = function(callback) {
    var url = api.helper.get.visible_emails_pre();
    api.tools.make_request_async(url, 'GET', function(get_data) {
      var emails = api.helper.get.visible_emails_post(get_data);
      callback(emails);
    });
  }


  api.get.selected_emails_data = function(){
    var selected_emails = [];
    // General Inbox View
    if(!api.check.is_inside_email()){
      if($('[gh="tl"] div[role="checkbox"][aria-checked="true"]:visible').length){
        var email = null;
        var emails = api.get.visible_emails();
        $('[gh="tl"] div[role="checkbox"]:visible').each(function(index){
          if($(this).attr('aria-checked') == "true"){
            email = api.get.email_data(emails[index].id);
            selected_emails.push(email);
          }
        });
      }
    // Preview pane
    } else if (api.check.is_preview_pane()) {
      // One or more emails checked
      if($('[gh="tl"] div[role="checkbox"][aria-checked="true"]:visible').length){
        var email = null;
        var emails = api.get.visible_emails();
        $('[gh="tl"] div[role="checkbox"]:visible').each(function(index){
          if($(this).attr('aria-checked') == "true"){
            email = api.get.email_data(emails[index].id);
            selected_emails.push(email);
          }
        });
      }
      // One email highlighted
      else {
        var email = null;
        var emails = api.get.visible_emails();
        $('[gh="tl"] div[role="checkbox"]:visible').each(function(index){
          if($(this).parent().parent().hasClass("aps")){
            email = api.get.email_data(emails[index].id);
            selected_emails.push(email);
          }
        });
      }
    }
    else {
      selected_emails.push(api.get.email_data());
    }
    return selected_emails;
  }

  api.tools.parse_email_data = function(email_data) {
    var data = {};
    var threads = {}

    for(i in email_data) {
      var x = email_data[i];
      if(x[0] == 'cs') {
        data.thread_id = x[1];
        data.first_email= x[8][0];
        data.last_email = x[2];
        data.total_emails = x[3];
        data.total_threads = x[8];
        data.people_involved = x[15];
        data.subject = x[23];
      }

      if(x[0] == 'ms') {
        if(data.threads == undefined) {
          data.threads = {};
        }

        data.threads[x[1]] = {};
        data.threads[x[1]].is_deleted = x[13] == undefined;
        data.threads[x[1]].reply_to_id = x[2];
        data.threads[x[1]].from = x[5];
        data.threads[x[1]].from_email = x[6];
        data.threads[x[1]].timestamp = x[7];
        data.threads[x[1]].datetime = x[24];
        data.threads[x[1]].attachments = x[21].split(',');
        data.threads[x[1]].subject = x[12];
        data.threads[x[1]].content_html = (x[13] != undefined) ? x[13][6] : x[8];
        data.threads[x[1]].to = (x[13] != undefined) ? x[13][1] : ((x[37] != undefined) ? x[37][1]:[]);
        data.threads[x[1]].cc = (x[13] != undefined) ? x[13][2] : [];
        data.threads[x[1]].bcc = (x[13] != undefined) ? x[13][3] : [];
        data.threads[x[1]].reply_to = api.tools.get_reply_to(x[13]);

        try { // jQuery will sometime fail to parse x[13][6], if so, putting the raw HTML
          data.threads[x[1]].content_plain = (x[13] != undefined) ? $(x[13][6]).text() : x[8];
        }
        catch(e) {
          data.threads[x[1]].content_plain = (x[13] != undefined) ? x[13][6] : x[8];
        }
      }
    }

    return data;
  }


  api.helper.get.email_data_pre = function(email_id) {
    if(api.check.is_inside_email() && email_id == undefined) {
      email_id = api.get.email_id();
    }

    var url = null;
    if(email_id != undefined) {
      url = window.location.origin + window.location.pathname + '?ui=2&ik=' + api.tracker.ik + '&rid=' + api.tracker.rid + '&view=cv&th=' + email_id + '&msgs=&mb=0&rt=1&search=mbox';
    }
    return url;
  }


  api.helper.get.email_data_post = function(get_data) {
    var get_data = get_data.substring(get_data.indexOf('['), get_data.length);
        get_data = '"use strict"; return ' + get_data;
        get_data = new Function(get_data);

    cdata = get_data();

    api.tracker.email_data = cdata[0];
    return api.tools.parse_email_data(api.tracker.email_data);
  }


  api.get.email_data = function(email_id) {
    var url = api.helper.get.email_data_pre(email_id);

    if (url != null) {
      var get_data = api.tools.make_request(url);
      var email_data = api.helper.get.email_data_post(get_data);
      return email_data;
    }

    return {};
  }


  api.get.email_data_async = function(email_id, callback) {
    var url = api.helper.get.email_data_pre(email_id);
    if (url != null) {
      api.tools.make_request_async(url, 'GET', function (get_data) {
        var email_data = api.helper.get.email_data_post(get_data);
        callback(email_data);
      });
    } else {
      callback({});
    }
  }


  api.get.current_page = function() {
    // Mike: I think this commit is wrong: https://github.com/KartikTalwar/gmail.js/commit/1d49d5b1bbf66b8f2dfe868e41ec0ade93d8ff8c
    // I undid it and deleted some following lines to get our functions to work
    var hash  = window.location.hash.split('#').pop().split('?').shift();
    hash = hash.replace(/\/p\d+$/, ""); // delete the pagination part of the url at the end (/p2)
    return hash;
  }

  api.check.is_inside_email = function() {
    if(api.get.current_page() != null && !api.check.is_preview_pane()) {
      return false;
    }

    var items = $('.ii.gt');
    var ids = [];

    for(var i=0; i<items.length; i++) {
      var mail_id = items[i].getAttribute('class').split(' ')[2];
      if(mail_id != 'undefined' && mail_id != undefined) {
        if($(items[i]).is(':visible')) {
          ids.push(items[i]);
        }
      }
    }

    return ids.length > 0;
  }

  api.check.is_preview_pane = function() {
    var dom = api.dom.inbox_content();
    var boxes = dom.find("[gh=tl]");

    var previewPaneFound = false;
    boxes.each(function() {
      if($(this).hasClass('aia')) {
        previewPaneFound = true;
      }
    });

    return previewPaneFound;
  }

  api.dom.inbox_content = function() {
    return $('div[role=main]:first');
  }

  api.get.email_id = function() {
    var hash = null;

    if(api.check.is_inside_email()) {
      if(api.check.is_preview_pane()) {
        var items = api.dom.email_contents();
        var text = [];

        for(var i=0; i<items.length; i++) {
          var mail_id = items[i].getAttribute('class').split(' ')[2];
          var is_editable = items[i].getAttribute('contenteditable');
          var is_visible = items[i].offsetWidth > 0 && items[i].offsetHeight > 0;
          if(mail_id != 'undefined' && mail_id != undefined && is_visible) {
            if(is_editable != 'true') {
              text.push(mail_id);
            }
          }
        }

        hash = text[0].substring(1, text[0].length);
      } else {
        hash = window.location.hash.split("/").pop().replace(/#/, '').split('?')[0];
      }

    }

    return hash;
  }

  api.tools.get_reply_to = function(ms13) {
    // reply to is an array if exists
    var reply_to = (ms13 != undefined) ? ms13[4] : [];

    // if reply to set get email from it and return it
    if (reply_to.length !== 0) {
      return api.tools.extract_email_address(reply_to[0]);
    }

    // otherwise return null
    return null;
  }

  api.tools.extract_email_address = function(str) {
    var regex = /[\+a-z0-9._-]+@[a-z0-9._-]+\.[a-z0-9._-]+/gi;
    var matches = (str) ? str.match(regex) : undefined;

    return (matches) ? matches[0] : undefined;
  }

  api.dom.email_contents = function() {
    var items = $('.ii.gt');
    var ids = [];

    for(var i=0; i<items.length; i++) {
      var mail_id = items[i].getAttribute('class').split(' ')[2];
      var is_editable = items[i].getAttribute('contenteditable');
      if(mail_id != 'undefined' && mail_id != undefined) {
        if(is_editable != 'true') {
          ids.push(items[i]);
        }
      }
    }

    return ids;
  }


  return api;
}

/**
 * @version: 1.0 Alpha-1
 * @author: Coolite Inc. http://www.coolite.com/
 * @date: 2008-05-13
 * @copyright: date.js, Copyright (c) 2006-2008, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * @license: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/.
 * @website: http://www.datejs.com/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|aft(er)?|from|hence)/i,subtract:/^(\-|bef(ore)?|ago)/i,yesterday:/^yes(terday)?/i,today:/^t(od(ay)?)?/i,tomorrow:/^tom(orrow)?/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^mn|min(ute)?s?/i,hour:/^h(our)?s?/i,week:/^w(eek)?s?/i,month:/^m(onth)?s?/i,day:/^d(ay)?s?/i,year:/^y(ear)?s?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt|utc)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a(?!u|p)|p)/i},timezones:[{name:"UTC",offset:"-000"},{name:"GMT",offset:"-000"},{name:"EST",offset:"-0500"},{name:"EDT",offset:"-0400"},{name:"CST",offset:"-0600"},{name:"CDT",offset:"-0500"},{name:"MST",offset:"-0700"},{name:"MDT",offset:"-0600"},{name:"PST",offset:"-0800"},{name:"PDT",offset:"-0700"}]};
(function(){
/*jshint eqeqeq:false */
var $D=Date,$P=$D.prototype,$C=$D.CultureInfo,p=function(s,l){if(!l){l=2;}
return("000"+s).slice(l*-1);};$P.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};$P.setTimeToNow=function(){var n=new Date();this.setHours(n.getHours());this.setMinutes(n.getMinutes());this.setSeconds(n.getSeconds());this.setMilliseconds(n.getMilliseconds());return this;};$D.today=function(){return new Date().clearTime();};$D.compare=function(date1,date2){if(isNaN(date1)||isNaN(date2)){throw new Error(date1+" - "+date2);}else if(date1 instanceof Date&&date2 instanceof Date){return(date1<date2)?-1:(date1>date2)?1:0;}else{throw new TypeError(date1+" - "+date2);}};$D.equals=function(date1,date2){return(date1.compareTo(date2)===0);};$D.getDayNumberFromName=function(name){var n=$C.dayNames,m=$C.abbreviatedDayNames,o=$C.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s||o[i].toLowerCase()==s){return i;}}
return-1;};$D.getMonthNumberFromName=function(name){var n=$C.monthNames,m=$C.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};$D.isLeapYear=function(year){return((year%4===0&&year%100!==0)||year%400===0);};$D.getDaysInMonth=function(year,month){return[31,($D.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};$D.getTimezoneAbbreviation=function(offset){var z=$C.timezones,p;for(var i=0;i<z.length;i++){if(z[i].offset===offset){return z[i].name;}}
return null;};$D.getTimezoneOffset=function(name){var z=$C.timezones,p;for(var i=0;i<z.length;i++){if(z[i].name===name.toUpperCase()){return z[i].offset;}}
return null;};$P.clone=function(){return new Date(this.getTime());};$P.compareTo=function(date){return Date.compare(this,date);};$P.equals=function(date){return Date.equals(this,date||new Date());};$P.between=function(start,end){return this.getTime()>=start.getTime()&&this.getTime()<=end.getTime();};$P.isAfter=function(date){return this.compareTo(date||new Date())===1;};$P.isBefore=function(date){return(this.compareTo(date||new Date())===-1);};$P.isToday=function(){return this.isSameDay(new Date());};$P.isSameDay=function(date){return this.clone().clearTime().equals(date.clone().clearTime());};$P.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};$P.addSeconds=function(value){return this.addMilliseconds(value*1000);};$P.addMinutes=function(value){return this.addMilliseconds(value*60000);};$P.addHours=function(value){return this.addMilliseconds(value*3600000);};$P.addDays=function(value){this.setDate(this.getDate()+value);return this;};$P.addWeeks=function(value){return this.addDays(value*7);};$P.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,$D.getDaysInMonth(this.getFullYear(),this.getMonth())));return this;};$P.addYears=function(value){return this.addMonths(value*12);};$P.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.milliseconds){this.addMilliseconds(x.milliseconds);}
if(x.seconds){this.addSeconds(x.seconds);}
if(x.minutes){this.addMinutes(x.minutes);}
if(x.hours){this.addHours(x.hours);}
if(x.weeks){this.addWeeks(x.weeks);}
if(x.months){this.addMonths(x.months);}
if(x.years){this.addYears(x.years);}
if(x.days){this.addDays(x.days);}
return this;};var $y,$m,$d;$P.getWeek=function(){var a,b,c,d,e,f,g,n,s,w;$y=(!$y)?this.getFullYear():$y;$m=(!$m)?this.getMonth()+1:$m;$d=(!$d)?this.getDate():$d;if($m<=2){a=$y-1;b=(a/4|0)-(a/100|0)+(a/400|0);c=((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0);s=b-c;e=0;f=$d-1+(31*($m-1));}else{a=$y;b=(a/4|0)-(a/100|0)+(a/400|0);c=((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0);s=b-c;e=s+1;f=$d+((153*($m-3)+2)/5)+58+s;}
g=(a+b)%7;d=(f+g-e)%7;n=(f+3-d)|0;if(n<0){w=53-((g-s)/5|0);}else if(n>364+s){w=1;}else{w=(n/7|0)+1;}
$y=$m=$d=null;return w;};$P.getISOWeek=function(){$y=this.getUTCFullYear();$m=this.getUTCMonth()+1;$d=this.getUTCDate();return p(this.getWeek());};$P.setWeek=function(n){return this.moveToDayOfWeek(1).addWeeks(n-this.getWeek());};$D._validate=function(n,min,max,name){if(typeof n=="undefined"){return false;}else if(typeof n!="number"){throw new TypeError(n+" is not a Number.");}else if(n<min||n>max){throw new RangeError(n+" is not a valid value for "+name+".");}
return true;};$D.validateMillisecond=function(value){return $D._validate(value,0,999,"millisecond");};$D.validateSecond=function(value){return $D._validate(value,0,59,"second");};$D.validateMinute=function(value){return $D._validate(value,0,59,"minute");};$D.validateHour=function(value){return $D._validate(value,0,23,"hour");};$D.validateDay=function(value,year,month){return $D._validate(value,1,$D.getDaysInMonth(year,month),"day");};$D.validateMonth=function(value){return $D._validate(value,0,11,"month");};$D.validateYear=function(value){return $D._validate(value,0,9999,"year");};$P.set=function(config){if($D.validateMillisecond(config.millisecond)){this.addMilliseconds(config.millisecond-this.getMilliseconds());}
if($D.validateSecond(config.second)){this.addSeconds(config.second-this.getSeconds());}
if($D.validateMinute(config.minute)){this.addMinutes(config.minute-this.getMinutes());}
if($D.validateHour(config.hour)){this.addHours(config.hour-this.getHours());}
if($D.validateMonth(config.month)){this.addMonths(config.month-this.getMonth());}
if($D.validateYear(config.year)){this.addYears(config.year-this.getFullYear());}
if($D.validateDay(config.day,this.getFullYear(),this.getMonth())){this.addDays(config.day-this.getDate());}
if(config.timezone){this.setTimezone(config.timezone);}
if(config.timezoneOffset){this.setTimezoneOffset(config.timezoneOffset);}
if(config.week&&$D._validate(config.week,0,53,"week")){this.setWeek(config.week);}
return this;};$P.moveToFirstDayOfMonth=function(){return this.set({day:1});};$P.moveToLastDayOfMonth=function(){return this.set({day:$D.getDaysInMonth(this.getFullYear(),this.getMonth())});};$P.moveToNthOccurrence=function(dayOfWeek,occurrence){var shift=0;if(occurrence>0){shift=occurrence-1;}
else if(occurrence===-1){this.moveToLastDayOfMonth();if(this.getDay()!==dayOfWeek){this.moveToDayOfWeek(dayOfWeek,-1);}
return this;}
return this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(dayOfWeek,+1).addWeeks(shift);};$P.moveToDayOfWeek=function(dayOfWeek,orient){var diff=(dayOfWeek-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};$P.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};$P.getOrdinalNumber=function(){return Math.ceil((this.clone().clearTime()-new Date(this.getFullYear(),0,1))/86400000)+1;};$P.getTimezone=function(){return $D.getTimezoneAbbreviation(this.getUTCOffset());};$P.setTimezoneOffset=function(offset){var here=this.getTimezoneOffset(),there=Number(offset)*-6/10;return this.addMinutes(there-here);};$P.setTimezone=function(offset){return this.setTimezoneOffset($D.getTimezoneOffset(offset));};$P.hasDaylightSavingTime=function(){return(Date.today().set({month:0,day:1}).getTimezoneOffset()!==Date.today().set({month:6,day:1}).getTimezoneOffset());};$P.isDaylightSavingTime=function(){return(this.hasDaylightSavingTime()&&new Date().getTimezoneOffset()===Date.today().set({month:6,day:1}).getTimezoneOffset());};$P.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r.charAt(0)+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};$P.getElapsed=function(date){return(date||new Date())-this;};if(!$P.toISOString){$P.toISOString=function(){function f(n){return n<10?'0'+n:n;}
return'"'+this.getUTCFullYear()+'-'+
f(this.getUTCMonth()+1)+'-'+
f(this.getUTCDate())+'T'+
f(this.getUTCHours())+':'+
f(this.getUTCMinutes())+':'+
f(this.getUTCSeconds())+'Z"';};}
$P._toString=$P.toString;$P.toString=function(format){var x=this;if(format&&format.length==1){var c=$C.formatPatterns;x.t=x.toString;switch(format){case"d":return x.t(c.shortDate);case"D":return x.t(c.longDate);case"F":return x.t(c.fullDateTime);case"m":return x.t(c.monthDay);case"r":return x.t(c.rfc1123);case"s":return x.t(c.sortableDateTime);case"t":return x.t(c.shortTime);case"T":return x.t(c.longTime);case"u":return x.t(c.universalSortableDateTime);case"y":return x.t(c.yearMonth);}}
var ord=function(n){switch(n*1){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};return format?format.replace(/(\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S)/g,function(m){if(m.charAt(0)==="\\"){return m.replace("\\","");}
x.h=x.getHours;switch(m){case"hh":return p(x.h()<13?(x.h()===0?12:x.h()):(x.h()-12));case"h":return x.h()<13?(x.h()===0?12:x.h()):(x.h()-12);case"HH":return p(x.h());case"H":return x.h();case"mm":return p(x.getMinutes());case"m":return x.getMinutes();case"ss":return p(x.getSeconds());case"s":return x.getSeconds();case"yyyy":return p(x.getFullYear(),4);case"yy":return p(x.getFullYear());case"dddd":return $C.dayNames[x.getDay()];case"ddd":return $C.abbreviatedDayNames[x.getDay()];case"dd":return p(x.getDate());case"d":return x.getDate();case"MMMM":return $C.monthNames[x.getMonth()];case"MMM":return $C.abbreviatedMonthNames[x.getMonth()];case"MM":return p((x.getMonth()+1));case"M":return x.getMonth()+1;case"t":return x.h()<12?$C.amDesignator.substring(0,1):$C.pmDesignator.substring(0,1);case"tt":return x.h()<12?$C.amDesignator:$C.pmDesignator;case"S":return ord(x.getDate());default:return m;}}):this._toString();};}());
(function(){
/*jshint eqeqeq:false */
var $D=Date,$P=$D.prototype,$C=$D.CultureInfo,$N=Number.prototype;$P._orient=+1;$P._nth=null;$P._is=false;$P._same=false;$P._isSecond=false;$N._dateElement="day";$P.next=function(){this._orient=+1;return this;};$D.next=function(){return $D.today().next();};$P.last=$P.prev=$P.previous=function(){this._orient=-1;return this;};$D.last=$D.prev=$D.previous=function(){return $D.today().last();};$P.is=function(){this._is=true;return this;};$P.same=function(){this._same=true;this._isSecond=false;return this;};$P.today=function(){return this.same().day();};$P.weekday=function(){if(this._is){this._is=false;return(!this.is().sat()&&!this.is().sun());}
return false;};$P.at=function(time){return(typeof time==="string")?$D.parse(this.toString("d")+" "+time):this.set(time);};$N.fromNow=$N.after=function(date){var c={};c[this._dateElement]=this;return((!date)?new Date():date.clone()).add(c);};$N.ago=$N.before=function(date){var c={};c[this._dateElement]=this*-1;return((!date)?new Date():date.clone()).add(c);};var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),pxf=("Milliseconds Seconds Minutes Hours Date Week Month FullYear").split(/\s/),nth=("final first second third fourth fifth").split(/\s/),de;$P.toObject=function(){var o={};for(var i=0;i<px.length;i++){o[px[i].toLowerCase()]=this["get"+pxf[i]]();}
return o;};$D.fromObject=function(config){config.week=null;return Date.today().set(config);};var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
if(this._nth!==null){if(this._isSecond){this.addSeconds(this._orient*-1);}
this._isSecond=false;var ntemp=this._nth;this._nth=null;var temp=this.clone().moveToLastDayOfMonth();this.moveToNthOccurrence(n,ntemp);if(this>temp){throw new RangeError($D.getDayName(n)+" does not occur "+ntemp+" times in the month of "+$D.getMonthName(temp.getMonth())+" "+temp.getFullYear()+".");}
return this;}
return this.moveToDayOfWeek(n,this._orient);};};var sdf=function(n){return function(){var t=$D.today(),shift=n-t.getDay();if(n===0&&$C.firstDayOfWeek===1&&t.getDay()!==0){shift=shift+7;}
return t.addDays(shift);};};for(var i=0;i<dx.length;i++){$D[dx[i].toUpperCase()]=$D[dx[i].toUpperCase().substring(0,3)]=i;$D[dx[i]]=$D[dx[i].substring(0,3)]=sdf(i);$P[dx[i]]=$P[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};var smf=function(n){return function(){return $D.today().set({month:n,day:1});};};for(var j=0;j<mx.length;j++){$D[mx[j].toUpperCase()]=$D[mx[j].toUpperCase().substring(0,3)]=j;$D[mx[j]]=$D[mx[j].substring(0,3)]=smf(j);$P[mx[j]]=$P[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(this._isSecond){this._isSecond=false;return this;}
if(this._same){this._same=this._is=false;var o1=this.toObject(),o2=(arguments[0]||new Date()).toObject(),v="",k=j.toLowerCase();for(var m=(px.length-1);m>-1;m--){v=px[m].toLowerCase();if(o1[v]!=o2[v]){return false;}
if(k==v){break;}}
return true;}
if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$P[de]=$P[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}
$P._ss=ef("Second");var nthfn=function(n){return function(dayOfWeek){if(this._same){return this._ss(arguments[0]);}
if(dayOfWeek||dayOfWeek===0){return this.moveToNthOccurrence(dayOfWeek,n);}
this._nth=n;if(n===2&&(dayOfWeek===undefined||dayOfWeek===null)){this._isSecond=true;return this.addSeconds(this._orient);}
return this;};};for(var l=0;l<nth.length;l++){$P[nth[l]]=(l===0)?nthfn(-1):nthfn(l);}}());
(function(){
/*jshint eqeqeq:false */
var r,px;
Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\\s*"+s+"\\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());
(function(){
/*jshint eqeqeq:false */
var $D=Date,$P=$D.prototype,$C=$D.CultureInfo;var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};$D.Grammar={};$D.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=(s.length==3)?"jan feb mar apr may jun jul aug sep oct nov dec".indexOf(s)/4:Number(s)-1;};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<$C.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
var now=new Date();if((this.hour||this.minute)&&(!this.month&&!this.year&&!this.day)){this.day=now.getDate();}
if(!this.year){this.year=now.getFullYear();}
if(!this.month&&this.month!==0){this.month=now.getMonth();}
if(!this.day){this.day=1;}
if(!this.hour){this.hour=0;}
if(!this.minute){this.minute=0;}
if(!this.second){this.second=0;}
if(this.meridian&&this.hour){if(this.meridian=="p"&&this.hour<12){this.hour=this.hour+12;}else if(this.meridian=="a"&&this.hour==12){this.hour=0;}}
if(this.day>$D.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
var temp, today=$D.today();if(this.now&&!this.unit&&!this.operator){return new Date();}else if(this.now){today=new Date();}
var expression=!!(this.days&&this.days!==null||this.orient||this.operator);var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(!this.now&&"hour minute second".indexOf(this.unit)!=-1){today.setTimeToNow();}
if(this.month||this.month===0){if("year day hour minute second".indexOf(this.unit)!=-1){this.value=this.month+1;this.month=null;expression=true;}}
if(!expression&&this.weekday&&!this.day&&!this.days){temp=Date[this.weekday]();this.day=temp.getDate();if(!this.month){this.month=temp.getMonth();}
this.year=temp.getFullYear();}
if(expression&&this.weekday&&this.unit!="month"){this.unit="day";gap=($D.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month&&this.unit=="day"&&this.operator){this.value=(this.month+1);this.month=null;}
if(this.value!=null&&this.month!=null&&this.year!=null){this.day=this.value*1;}
if(this.month&&!this.day&&this.value){today.set({day:this.value*1});if(!expression){this.day=this.value*1;}}
if(!this.month&&this.value&&this.unit=="month"&&!this.now){this.month=this.value;expression=true;}
if(expression&&(this.month||this.month===0)&&this.unit!="year"){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(!this.value&&this.operator&&this.operator!==null&&this[this.unit+"s"]&&this[this.unit+"s"]!==null){this[this.unit+"s"]=this[this.unit+"s"]+((this.operator=="add")?1:-1)+(this.value||0)*orient;}else if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
this[this.unit+"s"]=this.value*orient;}
if(this.meridian&&this.hour){if(this.meridian=="p"&&this.hour<12){this.hour=this.hour+12;}else if(this.meridian=="a"&&this.hour==12){this.hour=0;}}
if(this.weekday&&!this.day&&!this.days){temp=Date[this.weekday]();this.day=temp.getDate();if(temp.getMonth()!==today.getMonth()){this.month=temp.getMonth();}}
if((this.month||this.month===0)&&!this.day){this.day=1;}
if(!this.orient&&!this.operator&&this.unit=="week"&&this.value&&!this.day&&!this.month){return Date.today().setWeek(this.value);}
if(expression&&this.timezone&&this.day&&this.days){this.day=this.days;}
return(expression)?today.add(this):today.set(this);}};var _=$D.Parsing.Operators,g=$D.Grammar,t=$D.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|@|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=$C.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken($C.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.m,g.s],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("second minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[$C.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw $D.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){_F[f]=(_F[f]||g.format(f)[0]);return _F[f];};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["\"yyyy-MM-ddTHH:mm:ssZ\"","yyyy-MM-ddTHH:mm:ssZ","yyyy-MM-ddTHH:mm:ssz","yyyy-MM-ddTHH:mm:ss","yyyy-MM-ddTHH:mmZ","yyyy-MM-ddTHH:mmz","yyyy-MM-ddTHH:mm","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","MMddyyyy","ddMMyyyy","Mddyyyy","ddMyyyy","Mdyyyy","dMyyyy","yyyy","Mdyy","dMyy","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};$D._parse=$D.parse;$D.parse=function(s){var r=null;if(!s){return null;}
if(s instanceof Date){return s;}
try{r=$D.Grammar.start.call({},s.replace(/^\s*(\S*(\s+\S+)*)\s*$/,"$1"));}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};$D.getParseFunction=function(fx){var fn=$D.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};$D.parseExact=function(s,fx){return $D.getParseFunction(fx)(s);};}());

/**
 * jstz.min.js
 * @version: 1.0.7
 * @author: John Nylander
 * @build date: 2016-08-26
 * @license: Licensed under The MIT License. See LICENSE.txt and https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt
 * @website: https://bitbucket.org/pellepim/jstimezonedetect/src/6c427658686c
 */
!function(e){var a=function(){"use strict";var e="s",s={DAY:864e5,HOUR:36e5,MINUTE:6e4,SECOND:1e3,BASELINE_YEAR:2014,MAX_SCORE:864e6,AMBIGUITIES:{"America/Denver":["America/Mazatlan"],"Europe/London":["Africa/Casablanca"],"America/Chicago":["America/Mexico_City"],"America/Asuncion":["America/Campo_Grande","America/Santiago"],"America/Montevideo":["America/Sao_Paulo","America/Santiago"],"Asia/Beirut":["Asia/Amman","Asia/Jerusalem","Europe/Helsinki","Asia/Damascus","Africa/Cairo","Asia/Gaza","Europe/Minsk"],"Pacific/Auckland":["Pacific/Fiji"],"America/Los_Angeles":["America/Santa_Isabel"],"America/New_York":["America/Havana"],"America/Halifax":["America/Goose_Bay"],"America/Godthab":["America/Miquelon"],"Asia/Dubai":["Asia/Yerevan"],"Asia/Jakarta":["Asia/Krasnoyarsk"],"Asia/Shanghai":["Asia/Irkutsk","Australia/Perth"],"Australia/Sydney":["Australia/Lord_Howe"],"Asia/Tokyo":["Asia/Yakutsk"],"Asia/Dhaka":["Asia/Omsk"],"Asia/Baku":["Asia/Yerevan"],"Australia/Brisbane":["Asia/Vladivostok"],"Pacific/Noumea":["Asia/Vladivostok"],"Pacific/Majuro":["Asia/Kamchatka","Pacific/Fiji"],"Pacific/Tongatapu":["Pacific/Apia"],"Asia/Baghdad":["Europe/Minsk","Europe/Moscow"],"Asia/Karachi":["Asia/Yekaterinburg"],"Africa/Johannesburg":["Asia/Gaza","Africa/Cairo"]}},i=function(e){var a=-e.getTimezoneOffset();return null!==a?a:0},r=function(){var a=i(new Date(s.BASELINE_YEAR,0,2)),r=i(new Date(s.BASELINE_YEAR,5,2)),n=a-r;return n<0?a+",1":n>0?r+",1,"+e:a+",0"},n=function(){var e,a;if("undefined"!=typeof Intl&&"undefined"!=typeof Intl.DateTimeFormat&&(e=Intl.DateTimeFormat(),"undefined"!=typeof e&&"undefined"!=typeof e.resolvedOptions))return a=e.resolvedOptions().timeZone,a&&(a.indexOf("/")>-1||"UTC"===a)?a:void 0},o=function(e){for(var a=new Date(e,0,1,0,0,1,0).getTime(),s=new Date(e,12,31,23,59,59).getTime(),i=a,r=new Date(i).getTimezoneOffset(),n=null,o=null;i<s-864e5;){var t=new Date(i),A=t.getTimezoneOffset();A!==r&&(A<r&&(n=t),A>r&&(o=t),r=A),i+=864e5}return!(!n||!o)&&{s:u(n).getTime(),e:u(o).getTime()}},u=function l(e,a,i){"undefined"==typeof a&&(a=s.DAY,i=s.HOUR);for(var r=new Date(e.getTime()-a).getTime(),n=e.getTime()+a,o=new Date(r).getTimezoneOffset(),u=r,t=null;u<n-i;){var A=new Date(u),c=A.getTimezoneOffset();if(c!==o){t=A;break}u+=i}return a===s.DAY?l(t,s.HOUR,s.MINUTE):a===s.HOUR?l(t,s.MINUTE,s.SECOND):t},t=function(e,a,s,i){if("N/A"!==s)return s;if("Asia/Beirut"===a){if("Africa/Cairo"===i.name&&13983768e5===e[6].s&&14116788e5===e[6].e)return 0;if("Asia/Jerusalem"===i.name&&13959648e5===e[6].s&&14118588e5===e[6].e)return 0}else if("America/Santiago"===a){if("America/Asuncion"===i.name&&14124816e5===e[6].s&&1397358e6===e[6].e)return 0;if("America/Campo_Grande"===i.name&&14136912e5===e[6].s&&13925196e5===e[6].e)return 0}else if("America/Montevideo"===a){if("America/Sao_Paulo"===i.name&&14136876e5===e[6].s&&1392516e6===e[6].e)return 0}else if("Pacific/Auckland"===a&&"Pacific/Fiji"===i.name&&14142456e5===e[6].s&&13961016e5===e[6].e)return 0;return s},A=function(e,i){for(var r=function(a){for(var r=0,n=0;n<e.length;n++)if(a.rules[n]&&e[n]){if(!(e[n].s>=a.rules[n].s&&e[n].e<=a.rules[n].e)){r="N/A";break}if(r=0,r+=Math.abs(e[n].s-a.rules[n].s),r+=Math.abs(a.rules[n].e-e[n].e),r>s.MAX_SCORE){r="N/A";break}}return r=t(e,i,r,a)},n={},o=a.olson.dst_rules.zones,u=o.length,A=s.AMBIGUITIES[i],c=0;c<u;c++){var m=o[c],l=r(o[c]);"N/A"!==l&&(n[m.name]=l)}for(var f in n)if(n.hasOwnProperty(f))for(var d=0;d<A.length;d++)if(A[d]===f)return f;return i},c=function(e){var s=function(){for(var e=[],s=0;s<a.olson.dst_rules.years.length;s++){var i=o(a.olson.dst_rules.years[s]);e.push(i)}return e},i=function(e){for(var a=0;a<e.length;a++)if(e[a]!==!1)return!0;return!1},r=s(),n=i(r);return n?A(r,e):e},m=function(){var e=n();return e||(e=a.olson.timezones[r()],"undefined"!=typeof s.AMBIGUITIES[e]&&(e=c(e))),{name:function(){return e}}};return{determine:m}}();a.olson=a.olson||{},a.olson.timezones={"-720,0":"Etc/GMT+12","-660,0":"Pacific/Pago_Pago","-660,1,s":"Pacific/Apia","-600,1":"America/Adak","-600,0":"Pacific/Honolulu","-570,0":"Pacific/Marquesas","-540,0":"Pacific/Gambier","-540,1":"America/Anchorage","-480,1":"America/Los_Angeles","-480,0":"Pacific/Pitcairn","-420,0":"America/Phoenix","-420,1":"America/Denver","-360,0":"America/Guatemala","-360,1":"America/Chicago","-360,1,s":"Pacific/Easter","-300,0":"America/Bogota","-300,1":"America/New_York","-270,0":"America/Caracas","-240,1":"America/Halifax","-240,0":"America/Santo_Domingo","-240,1,s":"America/Asuncion","-210,1":"America/St_Johns","-180,1":"America/Godthab","-180,0":"America/Argentina/Buenos_Aires","-180,1,s":"America/Montevideo","-120,0":"America/Noronha","-120,1":"America/Noronha","-60,1":"Atlantic/Azores","-60,0":"Atlantic/Cape_Verde","0,0":"UTC","0,1":"Europe/London","60,1":"Europe/Berlin","60,0":"Africa/Lagos","60,1,s":"Africa/Windhoek","120,1":"Asia/Beirut","120,0":"Africa/Johannesburg","180,0":"Asia/Baghdad","180,1":"Europe/Moscow","210,1":"Asia/Tehran","240,0":"Asia/Dubai","240,1":"Asia/Baku","270,0":"Asia/Kabul","300,1":"Asia/Yekaterinburg","300,0":"Asia/Karachi","330,0":"Asia/Kolkata","345,0":"Asia/Kathmandu","360,0":"Asia/Dhaka","360,1":"Asia/Omsk","390,0":"Asia/Rangoon","420,1":"Asia/Krasnoyarsk","420,0":"Asia/Jakarta","480,0":"Asia/Shanghai","480,1":"Asia/Irkutsk","525,0":"Australia/Eucla","525,1,s":"Australia/Eucla","540,1":"Asia/Yakutsk","540,0":"Asia/Tokyo","570,0":"Australia/Darwin","570,1,s":"Australia/Adelaide","600,0":"Australia/Brisbane","600,1":"Asia/Vladivostok","600,1,s":"Australia/Sydney","630,1,s":"Australia/Lord_Howe","660,1":"Asia/Kamchatka","660,0":"Pacific/Noumea","690,0":"Pacific/Norfolk","720,1,s":"Pacific/Auckland","720,0":"Pacific/Majuro","765,1,s":"Pacific/Chatham","780,0":"Pacific/Tongatapu","780,1,s":"Pacific/Apia","840,0":"Pacific/Kiritimati"},a.olson.dst_rules={years:[2008,2009,2010,2011,2012,2013,2014],zones:[{name:"Africa/Cairo",rules:[{e:12199572e5,s:12090744e5},{e:1250802e6,s:1240524e6},{e:12858804e5,s:12840696e5},!1,!1,!1,{e:14116788e5,s:1406844e6}]},{name:"Africa/Casablanca",rules:[{e:12202236e5,s:12122784e5},{e:12508092e5,s:12438144e5},{e:1281222e6,s:12727584e5},{e:13120668e5,s:13017888e5},{e:13489704e5,s:1345428e6},{e:13828392e5,s:13761e8},{e:14142888e5,s:14069448e5}]},{name:"America/Asuncion",rules:[{e:12050316e5,s:12243888e5},{e:12364812e5,s:12558384e5},{e:12709548e5,s:12860784e5},{e:13024044e5,s:1317528e6},{e:1333854e6,s:13495824e5},{e:1364094e6,s:1381032e6},{e:13955436e5,s:14124816e5}]},{name:"America/Campo_Grande",rules:[{e:12032172e5,s:12243888e5},{e:12346668e5,s:12558384e5},{e:12667212e5,s:1287288e6},{e:12981708e5,s:13187376e5},{e:13302252e5,s:1350792e6},{e:136107e7,s:13822416e5},{e:13925196e5,s:14136912e5}]},{name:"America/Goose_Bay",rules:[{e:122559486e4,s:120503526e4},{e:125704446e4,s:123648486e4},{e:128909886e4,s:126853926e4},{e:13205556e5,s:129998886e4},{e:13520052e5,s:13314456e5},{e:13834548e5,s:13628952e5},{e:14149044e5,s:13943448e5}]},{name:"America/Havana",rules:[{e:12249972e5,s:12056436e5},{e:12564468e5,s:12364884e5},{e:12885012e5,s:12685428e5},{e:13211604e5,s:13005972e5},{e:13520052e5,s:13332564e5},{e:13834548e5,s:13628916e5},{e:14149044e5,s:13943412e5}]},{name:"America/Mazatlan",rules:[{e:1225008e6,s:12074724e5},{e:12564576e5,s:1238922e6},{e:1288512e6,s:12703716e5},{e:13199616e5,s:13018212e5},{e:13514112e5,s:13332708e5},{e:13828608e5,s:13653252e5},{e:14143104e5,s:13967748e5}]},{name:"America/Mexico_City",rules:[{e:12250044e5,s:12074688e5},{e:1256454e6,s:12389184e5},{e:12885084e5,s:1270368e6},{e:1319958e6,s:13018176e5},{e:13514076e5,s:13332672e5},{e:13828572e5,s:13653216e5},{e:14143068e5,s:13967712e5}]},{name:"America/Miquelon",rules:[{e:12255984e5,s:12050388e5},{e:1257048e6,s:12364884e5},{e:12891024e5,s:12685428e5},{e:1320552e6,s:12999924e5},{e:13520016e5,s:1331442e6},{e:13834512e5,s:13628916e5},{e:14149008e5,s:13943412e5}]},{name:"America/Santa_Isabel",rules:[{e:12250116e5,s:1207476e6},{e:12564612e5,s:12389256e5},{e:12885156e5,s:12703752e5},{e:13199652e5,s:13018248e5},{e:13514148e5,s:13332744e5},{e:13828644e5,s:13653288e5},{e:1414314e6,s:13967784e5}]},{name:"America/Santiago",rules:[{e:1206846e6,s:1223784e6},{e:1237086e6,s:12552336e5},{e:127035e7,s:12866832e5},{e:13048236e5,s:13138992e5},{e:13356684e5,s:13465584e5},{e:1367118e6,s:13786128e5},{e:13985676e5,s:14100624e5}]},{name:"America/Sao_Paulo",rules:[{e:12032136e5,s:12243852e5},{e:12346632e5,s:12558348e5},{e:12667176e5,s:12872844e5},{e:12981672e5,s:1318734e6},{e:13302216e5,s:13507884e5},{e:13610664e5,s:1382238e6},{e:1392516e6,s:14136876e5}]},{name:"Asia/Amman",rules:[{e:1225404e6,s:12066552e5},{e:12568536e5,s:12381048e5},{e:12883032e5,s:12695544e5},{e:13197528e5,s:13016088e5},!1,!1,{e:14147064e5,s:13959576e5}]},{name:"Asia/Damascus",rules:[{e:12254868e5,s:120726e7},{e:125685e7,s:12381048e5},{e:12882996e5,s:12701592e5},{e:13197492e5,s:13016088e5},{e:13511988e5,s:13330584e5},{e:13826484e5,s:1364508e6},{e:14147028e5,s:13959576e5}]},{name:"Asia/Dubai",rules:[!1,!1,!1,!1,!1,!1,!1]},{name:"Asia/Gaza",rules:[{e:12199572e5,s:12066552e5},{e:12520152e5,s:12381048e5},{e:1281474e6,s:126964086e4},{e:1312146e6,s:130160886e4},{e:13481784e5,s:13330584e5},{e:13802292e5,s:1364508e6},{e:1414098e6,s:13959576e5}]},{name:"Asia/Irkutsk",rules:[{e:12249576e5,s:12068136e5},{e:12564072e5,s:12382632e5},{e:12884616e5,s:12697128e5},!1,!1,!1,!1]},{name:"Asia/Jerusalem",rules:[{e:12231612e5,s:12066624e5},{e:1254006e6,s:1238112e6},{e:1284246e6,s:12695616e5},{e:131751e7,s:1301616e6},{e:13483548e5,s:13330656e5},{e:13828284e5,s:13645152e5},{e:1414278e6,s:13959648e5}]},{name:"Asia/Kamchatka",rules:[{e:12249432e5,s:12067992e5},{e:12563928e5,s:12382488e5},{e:12884508e5,s:12696984e5},!1,!1,!1,!1]},{name:"Asia/Krasnoyarsk",rules:[{e:12249612e5,s:12068172e5},{e:12564108e5,s:12382668e5},{e:12884652e5,s:12697164e5},!1,!1,!1,!1]},{name:"Asia/Omsk",rules:[{e:12249648e5,s:12068208e5},{e:12564144e5,s:12382704e5},{e:12884688e5,s:126972e7},!1,!1,!1,!1]},{name:"Asia/Vladivostok",rules:[{e:12249504e5,s:12068064e5},{e:12564e8,s:1238256e6},{e:12884544e5,s:12697056e5},!1,!1,!1,!1]},{name:"Asia/Yakutsk",rules:[{e:1224954e6,s:120681e7},{e:12564036e5,s:12382596e5},{e:1288458e6,s:12697092e5},!1,!1,!1,!1]},{name:"Asia/Yekaterinburg",rules:[{e:12249684e5,s:12068244e5},{e:1256418e6,s:1238274e6},{e:12884724e5,s:12697236e5},!1,!1,!1,!1]},{name:"Asia/Yerevan",rules:[{e:1224972e6,s:1206828e6},{e:12564216e5,s:12382776e5},{e:1288476e6,s:12697272e5},{e:13199256e5,s:13011768e5},!1,!1,!1]},{name:"Australia/Lord_Howe",rules:[{e:12074076e5,s:12231342e5},{e:12388572e5,s:12545838e5},{e:12703068e5,s:12860334e5},{e:13017564e5,s:1317483e6},{e:1333206e6,s:13495374e5},{e:13652604e5,s:1380987e6},{e:139671e7,s:14124366e5}]},{name:"Australia/Perth",rules:[{e:12068136e5,s:12249576e5},!1,!1,!1,!1,!1,!1]},{name:"Europe/Helsinki",rules:[{e:12249828e5,s:12068388e5},{e:12564324e5,s:12382884e5},{e:12884868e5,s:1269738e6},{e:13199364e5,s:13011876e5},{e:1351386e6,s:13326372e5},{e:13828356e5,s:13646916e5},{e:14142852e5,s:13961412e5}]},{name:"Europe/Minsk",rules:[{e:12249792e5,s:12068352e5},{e:12564288e5,s:12382848e5},{e:12884832e5,s:12697344e5},!1,!1,!1,!1]},{name:"Europe/Moscow",rules:[{e:12249756e5,s:12068316e5},{e:12564252e5,s:12382812e5},{e:12884796e5,s:12697308e5},!1,!1,!1,!1]},{name:"Pacific/Apia",rules:[!1,!1,!1,{e:13017528e5,s:13168728e5},{e:13332024e5,s:13489272e5},{e:13652568e5,s:13803768e5},{e:13967064e5,s:14118264e5}]},{name:"Pacific/Fiji",rules:[!1,!1,{e:12696984e5,s:12878424e5},{e:13271544e5,s:1319292e6},{e:1358604e6,s:13507416e5},{e:139005e7,s:1382796e6},{e:14215032e5,s:14148504e5}]},{name:"Europe/London",rules:[{e:12249828e5,s:12068388e5},{e:12564324e5,s:12382884e5},{e:12884868e5,s:1269738e6},{e:13199364e5,s:13011876e5},{e:1351386e6,s:13326372e5},{e:13828356e5,s:13646916e5},{e:14142852e5,s:13961412e5}]}]},"undefined"!=typeof module&&"undefined"!=typeof module.exports?module.exports=a:"undefined"!=typeof define&&null!==define&&null!=define.amd?define([],function(){return a}):"undefined"==typeof e?window.jstz=a:e.jstz=a}();

// Check browser, if safari set a interval to check for document.body.contentEditable - we will crash if we try to inject js when document.body isn't ready and this has been happening in Safari
if (browser_name === "Safari" || browser_name === "Old Safari") {
    var documentBodyCheckerInterval = setInterval(function() {
        if (document && document.body) {
            inject_all_js_and_css_and_run_boomerang();
            clearInterval(documentBodyCheckerInterval);
        }
    }, 500);
} else {
    // Non-Safari browsers haven't called this method when document.body wasn't ready and crashed this script, so we don't need to wait
    inject_all_js_and_css_and_run_boomerang();
}

})(); /* End B4G Closure */

/**
 * 22. Outside the Closure
 */

/**
 * 22a. Respondable Web Worker 
 *      This is outside the main B4G closure because it is called by a WebWorker (which is defined by a string), 
 *      which confuses our minifier
 */

function BoomerangEmailMeterWorkerFunction()
{
    var BoomerangEmailMeterWorkerObject = (function() {
        var MAX_TEXT_LENGTH = 250000;

        /**
         * @license: word_count licensed under Apache License.
         * word_count function Ported from https://github.com/ipeirotis/ReadabilityMetrics based on StackOverflow recommendations
         */

        var word_count = function(text) {
            var cleanText = clean_line(text);
            var words = cleanText.split(" ");
            var wordCount = 0;
            for (var i = 0; i < words.length; i++)
            {
                if (words[i].length > 0)
                {
                    wordCount++;
                }
            }
            return wordCount;
        }
        var clean_line = function(line) {
            var cleanedLine = ""
            for (var i = 0; i < line.length; i++) {
                var c = line[i];
                // Check if character is a letter or apostrophe. Clever way to do it, but works in places regex/ascii ordinal doesn't.
                if(c.toLowerCase() != c.toUpperCase() || c == "'")
                {
                    cleanedLine += c;
                } 
                else 
                {
                    cleanedLine += " ";
                }
            }
            return cleanedLine;
        }
        var sentence_count = function(text) {
        // TODO: is this good enough?
        // based on http://stackoverflow.com/questions/35215348/count-sentences-in-string-with-javascript
        // made it work with parens, quotes, and multiple punctuation marks
            var SENTENCE_REGEX = /\w[.?!]+([\s\)\"\']|$)/g;
            var matches = text.match(SENTENCE_REGEX);
            if (matches) {
                return matches.length;
            }
            else {
                return 0;
            }
        }
        var syllable_count = function(word) {
            var SubSyl = [/cial/, /tia/, /cius/, /cious/, /giu/, /ion/, /iou/, /sia$/, /.ely$/];
    
            var AddSyl = [/ia/, /riet/, /dien/, /iu/, /io/, /ii/, /[aeiouym]bl$/, /[aeiou]{3}/, /^mc/, /ism$/,
                    /[^aeiouy][^aeiouy]l$/, /[^l]lien/, /^coa[dglx]./, /[^gq]ua[^auieo]/, /dnt$/];
    
            word = word.toLowerCase();
            word = word.replace(/'/g, " ");
    
            if (word === "i")
                return 1;
            if (word === "a")
                return 1;
    
            if (word[word.length - 1] === "e") {
                word = word.substring(0, word.length - 1);
            }
    
            var phonems = word.split(/[^aeiouy]+/);
    
            var syl = 0;
            for (var i = 0; i < SubSyl.length; i++) {
                var syllabe = SubSyl[i];
                if (syllabe.test(word)) {
                    syl--;
                }
            }
            for (var i = 0; i < AddSyl.length; i++) {
                var syllabe = AddSyl[i];
                if (syllabe.test(word)) {
                    syl++;
                }
            }
            if (word.length == 1) {
                syl++;
            }
    
            for (var i = 0; i < phonems.length; i++) {
                if (phonems[i].length > 0)
                    syl++;
            }
    
            if (syl == 0) {
                syl = 1;
            }
    
            return syl;
        }
        var flesch_kincaid_grade_level = function(wordCount, sentenceCount, syllableCount) {
            var grade = 0.39 * wordCount / sentenceCount + 11.8 * syllableCount / wordCount - 15.59;
            if (grade == Infinity) {
                return "Not available"
            }
            else {
                return grade;
            }
        }
        var question_count = function(text) {
            var QUESTION_REGEX = /[^.!?]+[.!?]*\?/g;
            var matches = text.match(QUESTION_REGEX);
            if (matches) {
                return matches.length;
            }
            else {
                return 0;
            }
        }

        function remove_quoted_text(messageBodyPlainText) {
            // probably no longer necessary due to how we now filter out ".gmail_quote" class
            var startOfQuotedText = messageBodyPlainText.search(/^On.*wrote:$/gm);
            if (startOfQuotedText > 0) {
              messageBodyPlainText = messageBodyPlainText.slice(0, startOfQuotedText - 1);
            }
            return messageBodyPlainText;
        }

        function remove_urls(messageBodyPlainText){
            // Regex taken from: http://daringfireball.net/2010/07/improved_regex_for_matching_urls
            messageBodyPlainText = messageBodyPlainText.replace(/\b((?:[a-z][\w\-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\u00AB\u00BB\u201C\u201D\u2018\u2019]))/gm, "");
            return messageBodyPlainText;
        }

        // respondable decision tree for basic plans
        function calculate_respondable(values) {
          if(isNaN(values.fleschKincaidGradeLevel)) {
            return 0;
          }
          values.gradeLevel = values.fleschKincaidGradeLevel;
          return values.questionCount<=.5?values.wordCount<=8.5?values.wordCount<=1.5?values.subjectWordCount<=1.5?.0733218726262:values.wordCount<=.5?values.subjectWordCount<=3.5?.122914695147:values.subjectWordCount<=6.5?.145072640304:.136819773707:.198588629296:values.subjectWordCount<=1.5?.183093642547:values.gradeLevel<=-.5?.233720662678:values.gradeLevel<=6.60000038147?values.wordCount<=5.5?.298683848408:.331874554526:.239006626723:values.subjectWordCount<=8.5?values.wordCount<=27.5?values.gradeLevel<=9.55000019073?values.subjectWordCount<=1.5?.293673297115:values.wordCount<=14.5?.364595175403:.404888696187:values.subjectWordCount<=2.5?.222421363921:values.wordCount<=18.5?.270453843779:.310890101508:values.gradeLevel<=8.35000038147?values.wordCount<=42.5?values.gradeLevel<=6.94999980927?.440158977657:.342750033472:values.subjectWordCount<=5.5?.488104735817:.444063461816:values.gradeLevel<=12.6499996185?values.wordCount<=45.5?.368664498767:.422755603703:values.subjectWordCount<=2.5?.301067569327:.362248185477:values.subjectWordCount<=11.5?values.gradeLevel<=7.55000019073?values.gradeLevel<=5.75?values.wordCount<=27.5?.358084714549:.395812603648:.349450481024:values.wordCount<=51.5?.279985077411:.32959622704:values.wordCount<=45.5?values.gradeLevel<=5.25?.353435874737:.283088917765:values.subjectWordCount<=14.5?.274152329667:.217044023225:values.gradeLevel<=5.25?values.wordCount<=6.5?.420758888124:values.wordCount<=128.5?values.wordCount<=77.5?values.subjectWordCount<=6.5?values.subjectWordCount<=2.5?.67648619614:.709810436737:values.subjectWordCount<=8.5?.677379753211:.650595011842:values.questionCount<=1.5?.614993253257:.678938269094:values.wordCount<=225.5?.594625955588:.536892361111:values.subjectWordCount<=7.5?values.gradeLevel<=15.0500001907?values.wordCount<=217.5?values.gradeLevel<=6.15000009537?values.wordCount<=57.5?.419728703201:.650999617694:values.gradeLevel<=9.94999980927?.643357674014:.570643437792:values.gradeLevel<=8.35000038147?values.questionCount<=2.5?.527971302363:.564875018061:.498302465998:.35612802498:values.subjectWordCount<=11.5?values.wordCount<=219.5?values.wordCount<=57.5?.436006795099:.556456089708:.413799723545:.371808875454;
        }

        /**
         * @param messageData [composeBody, subject]
         */
        var calculate_email_readability_metrics = function(messageData)
        {
            var messageBodyPlainText = messageData[0],
                subject = messageData[1];

            messageBodyPlainText = messageBodyPlainText.substring(0, MAX_TEXT_LENGTH);
            messageBodyPlainText = remove_quoted_text(messageBodyPlainText);
            messageBodyPlainText = remove_urls(messageBodyPlainText)
            var wordCount = word_count(messageBodyPlainText);
            var sentenceCount = sentence_count(messageBodyPlainText);
            var syllableCount = syllable_count(messageBodyPlainText);
            var gradeLevel = flesch_kincaid_grade_level(wordCount, sentenceCount, syllableCount);
            var questionCount = question_count(messageBodyPlainText);
            var values = {
                "wordCount" : wordCount,
                "fleschKincaidGradeLevel" : gradeLevel,
                "sentenceCount" : sentenceCount,
                "syllableCount" : syllableCount,
                "questionCount" : questionCount,
                "subjectWordCount" : (subject.match(/\S+/g) || []).length
            };
            values["respondableScore"] = calculate_respondable(values);
            return values;
        }

        // Functions to export. I think we only need calculate_email_readability_metrics, but just in case...
        return {
            word_count: word_count,
            sentence_count: sentence_count,
            syllable_count: syllable_count,
            flesch_kincaid_grade_level: flesch_kincaid_grade_level,
            question_count: question_count,
            calculate_email_readability_metrics: calculate_email_readability_metrics
        };
    })();
    return BoomerangEmailMeterWorkerObject;
}

/**
 * 22b. Social Network API
 */

//Tweet button for Nag Screen

function b4g_send_image_request(url, callback, data) {
  var b4gStatusImage = new Image();

  var d = new Date();
  var uniqueString = "&uniquestring=" + d.getTime();
  b4gStatusImage.src = url + '&image=True' + uniqueString;
}

function b4g_tweet()
{
  var twitterUrl = "http://twitter.com/intent/tweet?text=" + encodeURIComponent("Been using Boomerang https://www.boomeranggmail.com to schedule messages in Gmail or make emails go away until I'm ready. Highly recommended.");
  window.open(twitterUrl);
  //setting tweet status
  var tweetReportUrl = "https://b4g.baydin.com/mailcruncher/tweet?tweet=yes";
  b4g_send_image_request(tweetReportUrl, function(){}, "success"); // dummy callback and success message
  //Change the dialog after tweet button is clicked
  var referralDialog = document.getElementById('referral_dialog');
  var referralSuccess = document.getElementById('referral_success');
  var referralConfirm = document.getElementById('referral_confirm');
  referralDialog.style.display = "none";
  referralSuccess.innerHTML="<p style='margin: 18px 0;'>Thanks for Tweeting! We've scheduled your message.</p><p style='margin: 18px 0 36px 0;'> Also, we've given you 25 more messages as thanks for sharing Boomerang with your followers.</p>";
  referralConfirm.innerHTML="Click here to close this window.";

}

/**
 * 22c. Boomerang date extraction
 */

function extractDate(source)
{
  var dateRegex = /\b(((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec)[.?!,&\s])|(J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber))(\s*[0-3]?\d(th|rd|nd|st)?)((,| )\s*(19|20)\d\d)?\b/i;
  var date = dateRegex.exec(source);

  if(date == null)
  {
    var dateNumRegex = /\b((0?[1-9]|1[012])[\/](0?[1-9]|[12][0-9]|3[01])([\/](19|20)?\d\d))|(on\s*(0?[1-9]|1[012])[\/](0?[1-9]|[12][0-9]|3[01]))\b/i;
    date = dateNumRegex.exec(source);
  }
  return (date != null) ? date[0] : null;
}

function extractDay(source)
{
  var dayRegex = /\b(Sun|Mon|Tues|Wednes|Thurs|Fri|Satur)day|day\s*after\s*tomorrow|tomorrow/i;
  var day = dayRegex.exec(source);
  return (day != null) ? day[0] : null;
}

function extractTime(source)
{
  var startTimeRegex = /\b(at|from|around)?\s*(((1[0-2]|[1-9]))\s*((((:[0-5]\d))(-?ish)?|\s*o('|’)?\s?clock)\s*((a|p)(\.?m\.?))?|\s*((a|p)\.?m\.?)|-?ish))|\bnoon(ish)?\b|\bmidnight(ish)?\b|(at|from|around)\s*(1[0-2]|[1-9]\b)|\b(1[0-2]|[2-9])-/i;
  var time = startTimeRegex.exec(source);
  return (time != null) ? time[0] : null;
}

function hasYear(dateSource)
{
  var yearRegex = /\b(((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec)[\.?!,&\s])|(J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber))(\s*[0-3]?\d(th|rd|nd|st)?)((,| )\s*(19|20)\d\d)\b|\b(0?[1-9]|1[012])[\/](0?[1-9]|[12][0-9]|3[01])([\/](19|20)?\d\d)\b/i;
  return yearRegex.test(dateSource);
}